//- Includes
#define SAMP_COMPAT
#define CGEN_MEMORY 60000
#include <open.mp>

#pragma warning disable 213

#undef MAX_PLAYERS
#define MAX_PLAYERS			(500)

#define PP_SYNTAX_AWAIT
#define PP_SYNTAX_YIELD
#include <PawnPlus>
#include <Pawn.RakNet>
#include <sscanf2>
#include <streamer>
#include <cmd>
#include <foreach>
#include <m_selection>
#include <yom_buttons>
#include <mapeos>
#include <JunkBuster>
#include <a_mysql>
#include <YSI_Storage\y_ini>
#include <ecm>
#include <pp-mysql>
#include <bcrypt>
#include <serverLog>

#include "../main_scripts/main.p"



new random_veh[MAX_VEHICLES];

/* trabajo de carpintero*/

static const Float: point_mesas[][] =
{
	{2120.2798,-2397.0474,13.5469,0.0000},
	{2120.2754,-2401.5293,13.5469,0.0000},
	{2120.2634,-2405.4221,13.5469,0.0000},
	{2120.2407,-2409.2263,13.5469,0.0000},
	{2127.0637,-2409.0300,13.5469,0.0000},
	{2127.0437,-2405.6318,13.5469,0.0000},
	{2127.0684,-2401.3652,13.5469,0.0000},
	{2127.0142,-2397.0039,13.5469,0.0000},
	{2133.0679,-2397.1567,13.5469,0.0000},
	{2133.1567,-2401.4702,13.5469,0.0000},
	{2133.2095,-2405.4419,13.5469,0.0000},
	{2133.0510,-2408.9675,13.5469,0.0000},
	{2140.1262,-2409.0186,13.5469,0.0000},
	{2140.1160,-2405.4509,13.5469,0.0000},
	{2140.0410,-2401.4666,13.5469,0.0000},
	{2140.1499,-2397.1553,13.5469,0.0000}
};

new
	Carpintero[MAX_PLAYERS],
	ObjetoIDs[] = {1814, 2083, 1811},
	mesa_cp[sizeof(point_mesas)],
	mesa_used[sizeof(point_mesas)],
	pused_mesa[MAX_PLAYERS]
;

/* puntos de spawn */
enum spawn_point
{
	id_spawn,
	Float: x_spawn,
	Float: y_spawn,
	Float: z_spawn,
	Float: angle_spawn,
	name_spawn[40],
};
enum spawn_point2
{
	id_spawn,
	Float: x_spawn,
	Float: y_spawn,
	Float: z_spawn,
	Float: angle_spawn,
	name_spawn[40],
};
enum spawn_point3
{
	id_spawn,
	Float: x_spawn,
	Float: y_spawn,
	Float: z_spawn,
	Float: angle_spawn,
	name_spawn[40],
	int_id,
};

static const point_muerte[][spawn_point2] =
{
	{0,	0000.0000	, 0000.0000	 , 000.0000	, 0000.0000	,	"none_none"},		//
	/*  	X   -       Y   	 -   	Z	-     R     -	NAME  */
	{1,	8721.9043	, 14167.8594 , 6.7237	, 165.6276	,	"Tienda de bicis"},	//
	{2,	8621.3340	, 14386.2354, 5.9996	, 5.1796	,	"Farmacia Easy Drugs"},	// JEFFERSON
	{3,	8621.3340	, 14386.2354, 5.9996	, 5.1796	,	"Farmacia Easy Drugs"}	// JEFFERSON
};

static const point_pf[][spawn_point3] =
{
	{0,	0000.0000	, 0000.0000	, 0000.0000	, 0000.0000	,	"none_none", 0},		//
	/*  	X   -       Y   	-   	Z	-     R     -	NAME  */
	{1,	281.8730, 1410.9673, 10.4947, 0000.0000, "exterior", 0},
	{2,	332.6335, 857.6257, 1001.8348, 0000.0000, "Bloque A", 41},              //listo
	{3,	322.5409, 849.2936, 1001.4407, 0000.0000, "bloque B", 42},
	{4,	299.8500, 792.6138, 1000.6696, 0000.0000, "Aislamiento", 43},           //listo
	{5,	321.0114, 845.2800, 1001.0607, 0000.0000, "armería e int", 44},
	{6,	302.7928, 853.6814, 1001.3047, 0000.0000, "comedor", 45},
	{7,	339.4486, 842.1990, 1001.2888, 0000.0000, "Economato", 46},             //listo
	{8,	316.9902, 846.9445, 1001.2867, 0000.0000, "enfermería", 47},
	{9,	352.9106, 820.6122, 1001.3773, 0000.0000, "ingresos", 48},
	{10, 334.8763, 829.7776, 1001.2772, 0000.0000, "pasillo", 49},
	{11, 316.5503, 800.8280, 998.5923, 0000.0000, "piso 2", 50},
	{12, 331.7956, 811.5309, 1001.4646, 0000.0000, "recepción", 51},
	{13, 318.4765, 875.4935, 1001.1189, 0000.0000, "taller", 52},
	{14, 317.1117, 814.6857, 1001.2343, 0000.0000, "taquillas", 53},
	{15, 335.5027, 821.1790, 1001.1994, 0000.0000, "visitas", 54}
};

static const point_spawn[][spawn_point] =
{
	{0,	0000.0000	, 0000.0000	, 0000.0000	, 0000.0000	,	"none_none"},		//
	/*  	X   -       Y   	-   	Z	-     R     -	NAME  */
	{1,	1519.2094	, -1676.844	, 13.5469	, 268.6089	,	"Los santos"}		// LOS SANTOS
};

/* ANTICHEAT simple */
new
	tp_trabajo[MAX_PLAYERS]
;

funcion tp_timers(playerid)
{
    tp_trabajo[playerid] = 0;
}



//vehiculos rentables
enum rent_i
{
	veh_renta,
	veh_dueno[32],
	veh_tiempo,
};
new
	renta_Veh[MAX_VEHICLES][rent_i],
	coche_renta[10]
;
//
new PlayerText:Player_Hud[MAX_PLAYERS][8];

new
	PlayerText: phone_Marco[MAX_PLAYERS][3],
	PlayerText: phone_Logo[MAX_PLAYERS],
	PlayerText: phone_Inter[MAX_PLAYERS],
	PlayerText: phone_Info[MAX_PLAYERS],
	PlayerText: phone_Display[MAX_PLAYERS],
	PlayerText: phone_BotIz[MAX_PLAYERS],
	PlayerText: phone_BotDr[MAX_PLAYERS],
	PlayerText: phone_UP[MAX_PLAYERS],
	PlayerText: phone_Down[MAX_PLAYERS],
	PlayerText: phone_Left[MAX_PLAYERS],
	PlayerText: phone_Right[MAX_PLAYERS],
	PlayerText: phone_box1[MAX_PLAYERS],
	PlayerText: phone_box2[MAX_PLAYERS],
	PlayerText: phone_Menu[MAX_PLAYERS],
	PlayerText: phone_Atras[MAX_PLAYERS],
	PlayerText: phone_Bateria[MAX_PLAYERS],
	PlayerText: phone_horaA[MAX_PLAYERS],
	PlayerText: phone_horaB[MAX_PLAYERS],
	PlayerText: phone_Fecha[MAX_PLAYERS]
;

new
	CurrentDialog[MAX_PLAYERS],
	togFac[7];

new Platform[MAX_VEHICLES];
new Platform1[MAX_VEHICLES];
new Platform2[MAX_VEHICLES];
new Platform3[MAX_VEHICLES];
new sadocs = 0;
new chat_log = 0;

//saludar
#define MAX_SALUDOS 8
enum saludo
{
	animliba[24],
	animnamea[64],
}
new animsaludo[MAX_SALUDOS][saludo]=
{
	{	"GANGS", "hndshkfa_swt"},
	{	"GANGS", "prtial_hndshk_biz_01"},
	{	"GANGS", "hndshkcb"},
	{	"GANGS", "hndshkea"},
	{	"GANGS", "hndshkfa"},
	{	"GANGS", "hndshkba"},
	{	"ON_LOOKERS", "wave_loop"},
	{	"PED", "endchat_03"}
};
//besar
enum beso //Comando /saludar
{
	animliba[24],
	animnamea[64],
}
new animbeso[2][beso]=
{
	{	"KISSING", "Playa_Kiss_03"},
	{	"KISSING", "Grlfrd_Kiss_03"}
};
// cmd /buscados

#define MAX_BUSCADOS		(50)
enum e_bus
{
	b_ID,
	b_string[256],
	b_creador[32],
	b_fecha[128]
};
new i_Buscados[MAX_BUSCADOS][e_bus];

//equipo de sonido
enum boox
{
	Float: BB_x,
	Float: BB_y,
	Float: BB_z,
	BB_obj,
	BB_area,
	BB_int,
	BB_vw,
	Text3D: BB_label,
};
new i_boox[MAX_PLAYERS][boox];

//nuevo centralita:
enum r_info
{
	aID,
	aTipo,
	aNombre[32],
	aTelefono,
	aLugar[256],
	aHechos[256],
	aZona[128],
	aAtendido,
};
new
	info_c[50][r_info],
	r_id[MAX_PLAYERS],
	comando_pd[MAX_PLAYERS],
	CentrTimer[50]
;
//animaciones
static const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

/* Leñador */
enum
{
	LUMBER_TREE_STATE_NORMAL,
	LUMBER_TREE_STATE_CUTTING,
	LUMBER_TREE_STATE_CUTTED
}
enum l_info
{
	l_modelo,
	Float:l_posicionX,
	Float:l_posicionY,
	Float:l_posicionZ,
	Float:l_posicionRX,
	Float:l_posicionRY,
	Float:l_posicionRZ,
	l_objeto_id,
	Text3D:l_3dlabel,
	lumber_tree_STATE,
	lumber_tree_GROW_TIMER,
	lumber_tree_GROW_COUNTER
};

new i_Lenador[][l_info] =
{
	{657, -529.44330, -1505.01282, 9.08430,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -526.26917, -1513.71155, 9.11755,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -517.69769, -1506.08667, 9.68410,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -517.04956, -1515.58423, 9.44219,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -531.11359, -1524.87000, 8.28400,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -525.03735, -1521.58667, 8.76343,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -516.05640, -1523.01575, 8.93295,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -511.72879, -1499.74316, 10.34326,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -537.81958, -1520.25293, 8.39722,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -536.45551, -1511.51721, 8.64116,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -520.01074, -1498.74011, 9.82430,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -528.20636, -1494.21863, 9.50600,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -517.45190, -1489.38538, 10.34639,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -507.44806, -1491.24414, 10.91343,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -509.87573, -1510.29395, 10.01949,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1}
};

new Text:D_LOGIN;
new color_general = 0;
new Text3D:cartel[MAX_PLAYERS],
	con_cartel[MAX_PLAYERS];
new
	area_lenador,
	en_lenador[MAX_PLAYERS],
	timer_lenador[MAX_PLAYERS];
new ContadorCuraciones[MAX_PLAYERS];
new contador_balas[MAX_PLAYERS];
new number_mask[MAX_PLAYERS];
new
	bool:playerTextdraw[MAX_PLAYERS],
	Text3D:playerVehicleTextdraw[MAX_PLAYERS];
new used_vehicle[MAX_PLAYERS];
new time_change[MAX_PLAYERS];
new check_motor[MAX_PLAYERS];
new tipo_ref[MAX_PLAYERS];
new random_movil[MAX_PLAYERS];
new veh_spawn[MAX_PLAYERS];
//*new's
new p_bank[MAX_PLAYERS][2];
new un_rent[MAX_PLAYERS];
new used_taller[6];
new trazo_graffiti[MAX_PLAYERS];
new solid_chat[MAX_PLAYERS];
new Text:fondo_negro;
new Text:fondo_gris;
new PlayerText:playerfooter;


new wsp_u[MAX_PLAYERS];
new u_objeto[MAX_PLAYERS];
new wsp_time[MAX_PLAYERS];
new enter_vehicle[MAX_PLAYERS];
new pag_muebles[MAX_PLAYERS];
new r_tiempo[MAX_PLAYERS];
new boombox[MAX_PLAYERS];

new
random_abstinence[MAX_PLAYERS],
abstinence_power[MAX_PLAYERS];

new veh_music[MAX_VEHICLES][256];

new llamada_registro[MAX_PLAYERS][20][100];
new llamada_2registro[MAX_PLAYERS][20];

new limitarobo[MAX_PLAYERS];

new sel_incendio[MAX_PLAYERS][MAX_INCENDIOS],
registrando[MAX_PLAYERS];
new
	haciend_[MAX_PLAYERS],
	reaparecer[MAX_PLAYERS],
	m_operacion[MAX_PLAYERS][6],
	id_tune[MAX_PLAYERS],
	e_tune[MAX_PLAYERS],
	veh_tune[MAX_PLAYERS],
	pieza_tune[MAX_PLAYERS][11],
	pago_tune[MAX_PLAYERS];

new
	//stuff
	cierre_p = 0,
	dinero_e = 120,
	c_codes = 0,
	c_cuentas = 0,
	c_personajes = 0,
	d_san = 0,
	d_loteria = 0,
	d_estado = 0,
	d_impuestos = 0,
	d_peaje = 4,
	d2_experiencia = 0,
	d_alarma = 0,
	d_pedidos[2][32],
	max_miembros[6],
	//.
	clima = 14,
    SanMusic,
	Anuncios = 0,
	FalsoPD = 0,
	_sanCall = -1,
	cmd_veh2 = 0,
	ActFondos = 0,
	ActRegistro = 1,
	ActTest = 1,
	UsandoGym[9] = 0,
	nivelexp = 10,
	RobarBanco = 0,
	Regalo = 1,
	CajadeRegalo,
	Text3D: dynamicgift3DText,
	PressBancaBarraObjeto[9],
	members_fd = 0,
	_MedicCall = 999,
	_BombCall = 999
;

enum textdraw
{
	PlayerText: Fecha,
	PlayerText: Radio,
	PlayerText: Velocimetro,
};
new info_w[MAX_PLAYERS][textdraw];

//*portones, puertas, vehículos, catalogos
new
	portonSAN,
	portonSAN1,
	portondeposito,
	puertasan,
	puertadic,
	puerta_policia,
	boton_policia,
	boton_policia1,
	LSPDveh[110],
	SADOCveh[5],
	LSFDveh[19],
	SANveh[8],
	ALSveh[1],
	Pescador_Veh[10],
	Granjero_Veh[15],
	SkinsHombre = mS_INVALID_LISTID,
	SkinsMujer = mS_INVALID_LISTID,
	AccesoriosN = mS_INVALID_LISTID,
	AccesoriosVIP = mS_INVALID_LISTID,
	ob_muebles = mS_INVALID_LISTID,
	SkinsAdolescenteH = mS_INVALID_LISTID,
	SkinsAdolescenteH2 = mS_INVALID_LISTID,
	SkinsAdolescenteF = mS_INVALID_LISTID;

//<=================================> mensajes

new AccionesColors[20] =
{
	0xACC97F22A, // 0 - /me
	0xC2A2DAAA, // 1 - /ame
	0x9EC73DAA, // 2 - /do
	0xFFFFFFFF, // 3 - /g
	0xFFFFFFFF, // 4 - /s
	0xFF9B6AFF // 5 - /m
};

new Float: AccionesRadios[20] =
{
	30.0, // 0 - /me
	30.0, // 1 - /ame
	35.0, // 2 - /do
	50.0, // 3 - /g
	1.5, // 4 - /s
	60.0 // 5 - /m
};

//<=================================> información de jugadores




//<=================================> vehículos de facciones
#define max_malfac 150
enum vfcInfo
{
	vMaletero[12],
	vMaleteroCantidad[12],
};
new i_facveh[max_malfac][vfcInfo];

stock save_veh_fac(vehid)
{
	new vehd[64];
	format(vehd, 64, DATOS_VEHICULOS_F, vehid);
	new INI: File = INI_Open(vehd);
	INI_SetTag(File, "Informacion");
	INI_WriteInt(File, "Maletero_1", i_facveh[vehid][vMaletero][0]);
	INI_WriteInt(File, "Maletero_2", i_facveh[vehid][vMaletero][1]);
	INI_WriteInt(File, "Maletero_3", i_facveh[vehid][vMaletero][2]);
	INI_WriteInt(File, "Maletero_4", i_facveh[vehid][vMaletero][3]);
	INI_WriteInt(File, "Maletero_5", i_facveh[vehid][vMaletero][4]);
	INI_WriteInt(File, "Maletero_6", i_facveh[vehid][vMaletero][5]);
	INI_WriteInt(File, "Maletero_7", i_facveh[vehid][vMaletero][6]);
	INI_WriteInt(File, "Maletero_8", i_facveh[vehid][vMaletero][7]);
	INI_WriteInt(File, "Maletero_9", i_facveh[vehid][vMaletero][8]);
	INI_WriteInt(File, "Maletero_10", i_facveh[vehid][vMaletero][9]);
	INI_WriteInt(File, "Maletero_11", i_facveh[vehid][vMaletero][10]);
	INI_WriteInt(File, "Maletero_12", i_facveh[vehid][vMaletero][11]);
	INI_WriteInt(File, "Maletero_Cantidad_1", i_facveh[vehid][vMaleteroCantidad][0]);
	INI_WriteInt(File, "Maletero_Cantidad_2", i_facveh[vehid][vMaleteroCantidad][1]);
	INI_WriteInt(File, "Maletero_Cantidad_3", i_facveh[vehid][vMaleteroCantidad][2]);
	INI_WriteInt(File, "Maletero_Cantidad_4", i_facveh[vehid][vMaleteroCantidad][3]);
	INI_WriteInt(File, "Maletero_Cantidad_5", i_facveh[vehid][vMaleteroCantidad][4]);
	INI_WriteInt(File, "Maletero_Cantidad_6", i_facveh[vehid][vMaleteroCantidad][5]);
	INI_WriteInt(File, "Maletero_Cantidad_7", i_facveh[vehid][vMaleteroCantidad][6]);
	INI_WriteInt(File, "Maletero_Cantidad_8", i_facveh[vehid][vMaleteroCantidad][7]);
	INI_WriteInt(File, "Maletero_Cantidad_9", i_facveh[vehid][vMaleteroCantidad][8]);
	INI_WriteInt(File, "Maletero_Cantidad_10", i_facveh[vehid][vMaleteroCantidad][9]);
	INI_WriteInt(File, "Maletero_Cantidad_11", i_facveh[vehid][vMaleteroCantidad][10]);
	INI_WriteInt(File, "Maletero_Cantidad_12", i_facveh[vehid][vMaleteroCantidad][11]);
	INI_Close(File);
	return 1;
}

funcion cargar_fac_veh()
{
	new vehd[64];
	for (new vehid = 0; vehid < sizeof(i_facveh); vehid++)
	{
		format(vehd, 64, DATOS_VEHICULOS_F, vehid);
		INI_ParseFile(vehd, "load_fv_data", .bExtra = true, .extra = vehid);
	}
	printf("|- Vehículos faccionarios [%i]", max_malfac);
	return 1;
}

funcion load_fv_data(vehid, name[], value[])
{
	INI_Int("Maletero_1", i_facveh[vehid][vMaletero][0]);
	INI_Int("Maletero_2", i_facveh[vehid][vMaletero][1]);
	INI_Int("Maletero_3", i_facveh[vehid][vMaletero][2]);
	INI_Int("Maletero_4", i_facveh[vehid][vMaletero][3]);
	INI_Int("Maletero_5", i_facveh[vehid][vMaletero][4]);
	INI_Int("Maletero_6", i_facveh[vehid][vMaletero][5]);
	INI_Int("Maletero_7", i_facveh[vehid][vMaletero][6]);
	INI_Int("Maletero_8", i_facveh[vehid][vMaletero][7]);
	INI_Int("Maletero_9", i_facveh[vehid][vMaletero][8]);
	INI_Int("Maletero_10", i_facveh[vehid][vMaletero][9]);
	INI_Int("Maletero_11", i_facveh[vehid][vMaletero][10]);
	INI_Int("Maletero_12", i_facveh[vehid][vMaletero][11]);
	INI_Int("Maletero_Cantidad_1", i_facveh[vehid][vMaleteroCantidad][0]);
	INI_Int("Maletero_Cantidad_2", i_facveh[vehid][vMaleteroCantidad][1]);
	INI_Int("Maletero_Cantidad_3", i_facveh[vehid][vMaleteroCantidad][2]);
	INI_Int("Maletero_Cantidad_4", i_facveh[vehid][vMaleteroCantidad][3]);
	INI_Int("Maletero_Cantidad_5", i_facveh[vehid][vMaleteroCantidad][4]);
	INI_Int("Maletero_Cantidad_6", i_facveh[vehid][vMaleteroCantidad][5]);
	INI_Int("Maletero_Cantidad_7", i_facveh[vehid][vMaleteroCantidad][6]);
	INI_Int("Maletero_Cantidad_8", i_facveh[vehid][vMaleteroCantidad][7]);
	INI_Int("Maletero_Cantidad_9", i_facveh[vehid][vMaleteroCantidad][8]);
	INI_Int("Maletero_Cantidad_10", i_facveh[vehid][vMaleteroCantidad][9]);
	INI_Int("Maletero_Cantidad_11", i_facveh[vehid][vMaleteroCantidad][10]);
	INI_Int("Maletero_Cantidad_12", i_facveh[vehid][vMaleteroCantidad][11]);
	return 1;
}




//<=================================> registro de ban por ip - edinsonwalker
new eBculpable[MAX_PLAYERS][32],
eBrazon[MAX_PLAYERS][128],
eBmomento[MAX_PLAYERS][150];

funcion CargarBan_data(playerid, name[], value[])
{
	INI_String("Culpable", eBculpable[playerid], 32);
	INI_String("Razon", eBrazon[playerid], 128);
	INI_String("Momento", eBmomento[playerid], 150);
	return 1;
}

veri_ip(const puto[])
{
    new tmp[128];
    format(tmp, sizeof(tmp), "Baneados/%s.rp", puto);
    return fexist(tmp);
}

//<=================================> objetos dinamicos - jorgito
enum pObjects
{
	pOID,
	pObjeto,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosRX,
	Float:pPosRY,
	Float:pPosRZ,
	pVw,
	pInt,
};
new cObjeto[MAX_POBJETOS][pObjects];

CargarObjetosAdmin()
{
	new
		arrCoords[9][32],
		strFromFile2[256],
		CONTAR_OBJETOS = 0,
		File: file = fopen("ObjetosAdmin.rp", io_read)
	;
	if (file)
	{
		new ID_OBJETO;
		while (ID_OBJETO < sizeof(cObjeto))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			cObjeto[ID_OBJETO][pPosX] = floatstr(arrCoords[3]);
			cObjeto[ID_OBJETO][pPosY] = floatstr(arrCoords[4]);
			cObjeto[ID_OBJETO][pPosZ] = floatstr(arrCoords[5]);
			cObjeto[ID_OBJETO][pPosRX] = floatstr(arrCoords[6]);
			cObjeto[ID_OBJETO][pPosRY] = floatstr(arrCoords[7]);
			cObjeto[ID_OBJETO][pPosRZ] = floatstr(arrCoords[8]);
			cObjeto[ID_OBJETO][pVw] = strval(arrCoords[1]);
			cObjeto[ID_OBJETO][pInt] = strval(arrCoords[2]);
			cObjeto[ID_OBJETO][pOID] = strval(arrCoords[0]);
			if (cObjeto[ID_OBJETO][pOID] > 0)
			{
				CONTAR_OBJETOS++;
				cObjeto[ID_OBJETO][pObjeto]  = CreateDynamicObject(cObjeto[ID_OBJETO][pOID], cObjeto[ID_OBJETO][pPosX], cObjeto[ID_OBJETO][pPosY], cObjeto[ID_OBJETO][pPosZ], cObjeto[ID_OBJETO][pPosRX], cObjeto[ID_OBJETO][pPosRY], cObjeto[ID_OBJETO][pPosRZ], cObjeto[ID_OBJETO][pVw], cObjeto[ID_OBJETO][pInt], -1, MAX_RADIO_STREAM_MIN);
			}
			ID_OBJETO++;
		}
		fclose(file);
	}
	printf("|- Objetos dinámicos [%i]", CONTAR_OBJETOS);
}

//<=================================> sistema de incendios
enum iInfo
{
	Text3D:pInfoIncendio,
	pIntensidad,
	pIDI,
	pType,
	pObject[15],
};
new Incendios[MAX_INCENDIOS][iInfo];
//<=================================> objetos de tráfico
enum binfo
{
	bObjeto,
	bModelo,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosRX,
	Float:bPosRY,
	Float:bPosRZ,
};
new InfoBar[MAX_BARRERAS][binfo];

enum Spikes
{
	Float: sX,
	Float: sY,
	Float: sZ,
	sObjectID,
	sDeployedAt[MAX_ZONE_NAME],
};
new SpikeStrips[10][Spikes];

enum pSpec
{
	Float: Coords[3],
	Float: sPx,
	Float: sPy,
	Float: sPz,
	sPint,
	sCam,
};
new Unspec[MAX_PLAYERS][pSpec];
//<=================================> sistema de eventos
enum jevento
{
	eVW,
	eInterior,
	Float: eVariable[6]
}
new jEvento[MAX_PLAYERS][jevento];

enum ievento
{
	iEtapa,
	iTipo,
	iMensaje[128],
	iMusica[128],
	Float: iVida,
	Float: iChaleco,
	Float: iPosicionX,
	Float: iPosicionY,
	Float: iPosicionZ,
	iInterior,
	iVirtualWorld,
};
new InfoEvento[ievento];
new iVehiculo[40], iObjeto[3];

//<=================================> sistema de graffitis, sublime
enum E_GRAFFITIS
{

	Float: gr_PosX,
	Float: gr_PosY,
	Float: gr_PosZ,

	Float: gr_RotX,
	Float: gr_RotY,
	Float: gr_RotZ,
	gr_tiempohacer,
	gr_creador[32],
	gr_mensaje[256]
};
new i_graffito[MAX_GRAFFITIS][E_GRAFFITIS];

new g_GraffitiObject[MAX_GRAFFITIS];

funcion cargar_posgraffs()
{
	new
		total_graffs,
		t_g[64]
	;
	for (new i_d = 0; i_d < MAX_GRAFFITIS; i_d++)
	{
		format(t_g, 64, DATOS_GRAFFITIS, i_d);
		INI_ParseFile(t_g, "CargarGraff", .bExtra = true, .extra = i_d);
		if(i_graffito[i_d][gr_PosX] != 0.0)
		{
			g_GraffitiObject[i_d] = CreateDynamicObject(18666, i_graffito[i_d][gr_PosX], i_graffito[i_d][gr_PosY], i_graffito[i_d][gr_PosZ], i_graffito[i_d][gr_RotX], i_graffito[i_d][gr_RotY], i_graffito[i_d][gr_RotZ], -1, 0, -1, 6000.0);
			alm(i_graffito[i_d][gr_mensaje], "sin_editar_graffs");
			total_graffs++;
		}
	}
	printf("|- Graffitis [%d]", total_graffs);
	return 1;
}

funcion CargarGraff(i_d, name[], value[])
{
	INI_Float("X", i_graffito[i_d][gr_PosX]);
	INI_Float("Y", i_graffito[i_d][gr_PosY]);
	INI_Float("Z", i_graffito[i_d][gr_PosZ]);
	INI_Float("RX", i_graffito[i_d][gr_RotX]);
	INI_Float("RY", i_graffito[i_d][gr_RotY]);
	INI_Float("RZ", i_graffito[i_d][gr_RotZ]);
	return 1;
}

save_graffito(i_d)
{
	new gd[64];
	format(gd, 64, DATOS_GRAFFITIS, i_d);
	new INI: File = INI_Open(gd);
	INI_WriteFloat(File, "X", i_graffito[i_d][gr_PosX]);
	INI_WriteFloat(File, "Y", i_graffito[i_d][gr_PosY]);
	INI_WriteFloat(File, "Z", i_graffito[i_d][gr_PosZ]);
	INI_WriteFloat(File, "RX", i_graffito[i_d][gr_RotX]);
	INI_WriteFloat(File, "RY", i_graffito[i_d][gr_RotY]);
	INI_WriteFloat(File, "RZ", i_graffito[i_d][gr_RotZ]);
	INI_Close(File);
	return 1;
}

//<=================================> sistema de semillas
enum maria
{
	sDueno[24],
	bool:sSlot,
	sTime,
	Float:sPosicion[3],
	sInterior,
	sVirtualWorld,
	sGramos,
	Text3D:sLabel,
	sObjeto,
};
new InfoMaria[MAX_PLANTAS][maria];

ActualizarMaria(s)
{
	new smi[64];
	format(smi, 64, DATOS_MARIA, s);
	new INI: File = INI_Open(smi);
	INI_SetTag(File, "Informacion");
	INI_WriteString(File, "Dueño", InfoMaria[s][sDueno]);
	INI_WriteBool(File, "Creado", InfoMaria[s][sSlot]);
	INI_WriteInt(File, "Tiempo", InfoMaria[s][sTime]);
	INI_WriteFloat(File, "Pos_X", InfoMaria[s][sPosicion][0]);
	INI_WriteFloat(File, "Pos_Y", InfoMaria[s][sPosicion][1]);
	INI_WriteFloat(File, "Pos_Z", InfoMaria[s][sPosicion][2]);
	INI_WriteInt(File, "Interior", InfoMaria[s][sInterior]);
	INI_WriteInt(File, "VirtualWorld", InfoMaria[s][sVirtualWorld]);
	INI_WriteInt(File, "Gramos", InfoMaria[s][sGramos]);
	INI_Close(File);
	return 1;
}

funcion CargarMarias()
{
	new Total_semillas,smi[64],string[128];
	for (new sid = 0; sid < sizeof(InfoMaria); sid++)
	{
		format(smi, 64, DATOS_MARIA, sid);
		INI_ParseFile(smi, "CargarMarias_data", .bExtra = true, .extra = sid);
		if (InfoMaria[sid][sSlot] != false)
		{
			format(string, sizeof(string), "Planta de marihuana\n{ffffff}Madura en %s", Mins_time(InfoMaria[sid][sTime]));
			InfoMaria[sid][sLabel] = CreateDynamic3DTextLabel(string, 0x009F46FF, InfoMaria[sid][sPosicion][0], InfoMaria[sid][sPosicion][1], InfoMaria[sid][sPosicion][2] + 1.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, InfoMaria[sid][sVirtualWorld], InfoMaria[sid][sInterior]);
			InfoMaria[sid][sObjeto] = CreateDynamicObject(19473, InfoMaria[sid][sPosicion][0], InfoMaria[sid][sPosicion][1], InfoMaria[sid][sPosicion][2], 0.0, 0.0, 0.0, InfoMaria[sid][sVirtualWorld], InfoMaria[sid][sInterior]);
			Total_semillas++;
		} else D_Semiallas(sid);
	}
	printf("» Sistema de semillas cargado (%d).",Total_semillas);
	return 1;
}

funcion D_Semiallas(sid)
{
	InfoMaria[sid][sPosicion][0] = 253.7604;
	InfoMaria[sid][sPosicion][1] = 1870.4363;
	InfoMaria[sid][sPosicion][2] = -32.2793;
	InfoMaria[sid][sLabel] = CreateDynamic3DTextLabel("planta no creada", C_BLANCO, InfoMaria[sid][sPosicion][0], InfoMaria[sid][sPosicion][1], InfoMaria[sid][sPosicion][2], 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 75, 75);
	return 1;
}

funcion CargarMarias_data(s, name[], value[])
{
	INI_String("Dueño", InfoMaria[s][sDueno], 32);
	INI_Bool("Creado", InfoMaria[s][sSlot]);
	INI_Int("Tiempo", InfoMaria[s][sTime]);
	INI_Float("Pos_X", InfoMaria[s][sPosicion][0]);
	INI_Float("Pos_Y", InfoMaria[s][sPosicion][1]);
	INI_Float("Pos_Z", InfoMaria[s][sPosicion][2]);
	INI_Int("Interior", InfoMaria[s][sInterior]);
	INI_Int("VirtualWorld", InfoMaria[s][sVirtualWorld]);
	INI_Int("Gramos", InfoMaria[s][sGramos]);
	return 1;
}
//<=================================> sistema de fuerza /Entrenar
new	Float:barbell_pos[][] =
{
	{ 774.43726, 1.89251, 1000.50830,   0.00000, 270.00000, 90.42000 }, // Los Santos Gym's BarBell
	{ 765.83771, -48.87895, 1000.64093,   0.00000, 89.49994, 0.60000 }, // San Fierro Gym's BarBell
	{ 765.35956, -59.15905, 1000.63794,   0.00000, 89.49994, 180.41016 }, // Las Venturas Gym's BarBell
	{ 653.42572, -1863.55444, 5.41780,	0.0000, 90.00000, 0.0000}, // playa LS
	{ 774.46082, 5.56050, 1000.50830,	0.00000, 270.00000, 90.42000}, //Los Santos Gym's BarBell 2
	{ 762.44141, -48.78656, 1000.64093,   0.00000, 89.49994, 0.60000}, //San Fierro Gym's BarBell 2
	{ 769.02057, -59.00805, 1000.63794,   0.00000, 89.49994, 180.41016} // Las Venturas Gym's BarBell 2
};

new Float:PressBancaPlayerPos[][] =
{
    { 773.0491,1.4285, 1000.7209, 269.2024 }, // Los Santos Gym's bench
    { 766.3170,-47.3574, 1000.5859, 179.2983 }, // San Fierro Gym's bench
    { 764.9001,-60.5580, 1000.6563, 1.9500 }, // Las Venturas Gym's bench
    { 653.9918,-1865.1168,5.4609,5.2957 }, // playa LS
	{ 772.9378, 5.0317, 1000.7236, 269.2024 }, //Los Santos Gym's bench 2
	{ 763.0177, -47.3233, 1000.5567, 179.2983 }, //San Fierro Gym's bench 2
	{ 768.5390, -60.6625, 1000.6789, 1.9500 } //Las Venturas Gym's bench 2
};
//<=================================> sistema de heridas - EdinsonWalker
enum hInfo
{
	Cabeza[24],
	Torso[24],
	BrazoD[24],
	BrazoI[24],
	EntreP[24],
	PiernaD[24],
	PiernaI[24],
	Lesiones[24],
	Cabezar,
	Torsor,
	BrazoDr,
	BrazoIr,
	EntrePr,
	PiernaDr,
	PiernaIr,
	Lesionesr,
};
new InfoHeridas[MAX_PLAYERS][hInfo];


stock Sangre_(playerid, Float: hp) // Fijar
{
    if(GetPVarInt(playerid, "EnEvento") == 1) return 1;
	if(user[playerid][jSangre] < 101.0) user[playerid][jSangre] = 100.0;
	SetPlayerHealth(playerid, hp);
	user[playerid][jSangre] = hp;
	return 1;
}

stock _Sangre(playerid, Float: sg1) // Quitar
{
	if(GetPVarInt(playerid, "EnEvento") == 1) return 1;
	new Float: sg0 = user[playerid][jSangre];
	user[playerid][jSangre] = sg0+sg1;
	if(user[playerid][jSangre] <= 15.0)
	{
		SetPlayerHealth(playerid, 15.0);
		if(GetPVarInt(playerid, "Esta_Herido") == 0)
		{
			SetPVarInt(playerid, "EnCrack", 1);
			SinSangre(playerid, 1);
			cmd_avisarpd(playerid);
		}
		else if(GetPVarInt(playerid, "Esta_Herido") == 1)
		{
			SetPVarInt(playerid, "EnCrack", 1);
			SinSangre(playerid, 2);
		}
		return 1;
	}
	SetPlayerHealth(playerid, sg0+sg1);
	return 1;
}

funcion SinSangre(playerid, tipo)
{
	if(GetPVarInt(playerid, "EnEvento") == 1) return 1;
	switch (tipo)
	{
		case 1:
		{
			if(asesino[playerid] != -1)
			{
				if(IsPlayerConnected(asesino[playerid])) format(QuienMato[playerid], 24, "%s", nombre_pj(asesino[playerid]));
				for(new i=0;i<MAX_PLAYERS;i++) { if(user[i][jAdmin] >= 1) SendDeathMessageToPlayer(i,asesino[playerid], playerid, _arma[playerid]); }
			}
			if (IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetPlayerPos(playerid, X, Y, Z+2);
			}
			if(user[playerid][Started])
			{
				DisablePlayerRaceCheckpoint(playerid);
				arr_Engine {user[playerid][Vehicle]} = 0;
				DestroyVehicle(user[playerid][Vehicle]);
				random_veh[user[playerid][Vehicle]] = 0;
				//Iter_Remove(Vehicles, user[playerid][Vehicle]);
				Exam_ResetVars(playerid);
			}
			if ( _sanCall == playerid )
			{
    			_MensajeSAN(0x00DC3AFF, "[INN] Conexión telefónica finalizada.");
				_sanCall = -1;
			}
			HaciendoPressBanca[playerid] = 0; RepeticionesPressBanca[playerid] = 0;
			EnLlamada[playerid] = 0; ToqueLlamada[playerid] = 0;
			KillTimer(ToqueLlamadaTimer[playerid]);
			if(PersonaEnLlamada[playerid] != -1)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
			if(EnLlamada[playerid] == 3)
			{
				_Mensaje(playerid, 1, "0", "Coste de la llamada: 1$");
				user[playerid][jSaldo] -= 1;
			}
			if(PersonaEnLlamada[playerid] != -1)
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
				{
					_Mensaje(PersonaEnLlamada[playerid], 1, "0", "Coste de la llamada: 1$");
					user[PersonaEnLlamada[playerid]][jSaldo] -= 1;
				}
			}
			if(PersonaEnLlamada[playerid] != -1)_Mensaje(playerid, 0, "0", "Se ha cortado la línea...");
			for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){_Mensaje(i, 0, "0", "Se ha cortado la línea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = -1; break;} }
			PersonaEnLlamada[playerid] = -1;
			if(con_animacion[playerid] == 1) { con_animacion[playerid] = 0; JugadorSentado[playerid] = 0; }
			new str[128];
			//
			usandoYo[playerid] = 2;
			ShowPlayerFooter(playerid, "~y~Fuiste brutalmente herido");
			SetPVarInt(playerid, "Esta_Herido", 1);
			if(user[playerid][jEncarcelado])
			{
				user[playerid][jSangre] = 100.0;
				_MensajeRfac(1, 0x9B9BFFFF, "CENTRAL: Persona gravemente herida dentro de la prisión.");
				r_tiempo[playerid] = gettime();
			}
			else
			{
				user[playerid][jSangre] = 50.0;
				r_tiempo[playerid] = gettime();
			}
			reaparecer[playerid] = 1;
			user[playerid][jMuerto2] = 1;
			user[playerid][jMuerto] = 1;
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			if (contador_balas[playerid] != 0) format(str, sizeof(str), "(( Este jugador está herido de bala %d veces, /heridas %d para más información ))", contador_balas[playerid], playerid);
			else format(str, sizeof(str), "(( Este jugador está herido, /heridas %d para más información ))", playerid);
			mensaje_bubble(playerid, str, 0xFF6347FF, 15.0);
		}
		case 2:
		{
			if (IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetPlayerPos(playerid, X, Y, Z+2);
			}
			if (Esposado[playerid] != 0)
			{
				Esposado[playerid] = 0;
				RemovePlayerAttachedObject(playerid, 9);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
			usandoYo[playerid] = 2;
			ShowPlayerFooter(playerid, "~r~Has muerto, dos minutos para /reaparecer.");
			SetPVarInt(playerid, "Esta_Herido", 2);
			user[playerid][jSangre] = 15.0;
			user[playerid][jMuerto2] = 2;
			user[playerid][jMuerto] = 1;
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			reaparecer[playerid] = 1;
			r_tiempo[playerid] = gettime();
			mensaje_bubble(playerid, "(( ESTE JUGADOR ESTÁ MUERTO ))", 0xFF6347FF, 15.0);
		}
	}
	return 1;
}

stock Chaleco_(playerid, Float: cg1) // Fijar
{
	user[playerid][jChaleco] = cg1;
	SetPlayerArmour(playerid, Float: cg1);
	return 1;
}

stock _Chaleco(playerid, Float: cg1) // Quitar
{
	if (user[playerid][jChaleco] < 5.0) user[playerid][jChaleco] = 0.0;
	new Float: cg0 = user[playerid][jChaleco];
	user[playerid][jChaleco] = cg0+cg1;
	SetPlayerArmour(playerid, cg0+cg1);
	if (user[playerid][jChaleco] < 5.0) user[playerid][jChaleco] = 0.0;
    SetPlayerArmour(playerid, cg0+cg1);
	return 1;
}

//<=================================> sistema de peajes
#define VELOCITY_PEAJE_TIME			(30)
#define VELOCITY_PEAJE_PORCENT		(2)
enum ppInfo
{
	p_objectid,
	p_modelid,
	Float:pos_X,
	Float:pos_Y,
	Float:pos_Z,
	Float:pos_RotX,
	Float:pos_RotY,
	Float:pos_RotZ,
	Float:pos_Xini,
	Float:pos_Yini,
	Float:pos_Zini,
	Float:pos_RotXini,
	Float:pos_RotYini,
	Float:pos_RotZini,
	Float:pos_cmdX,
	Float:pos_cmdY,
	Float:pos_cmdZ,
	peaje_tipo,
	anim_tipo,
	gratis_p,
};
new MAX_PEAJE, i_Peaje[MAX_PEAJES][ppInfo];
//<=================================> sistema de puertas dinamicas - EdinsonWalker
enum pInfo
{
	pNombre[128],
	pDueno[32],
	pTipo,
	pSeguro,
	pComprado,
	pDinero,
	pPrecio,
	pPremium,
	pFamilia,
	pFaccion,
	//float
	Float: pPos_X,
	Float: pPos_Y,
	Float: pPos_Z,
	Float: pPos_A,
	Float: pInt_X,
	Float: pInt_Y,
	Float: pInt_Z,
	Float: pInt_A,
	pPos_VW,
	pPos_Int,
	pInt_VW,
	pInt_Int,
	//iconos
	pMapIcon,
	pIcono,
	pModeloExt,
	pModeloInt,
	pModeloMap,
};
new i_Puerta[MAX_PUERTAS][pInfo];

funcion CargarPuertas()
{
	new total_puertas, puerta[64];
	for (new pid = 1; pid < MAX_PUERTAS; pid++)
	{
		format(puerta, 64, DATOS_PUERTAS, pid);
		INI_ParseFile(puerta, "CargarPuertas_data", .bExtra = true, .extra = pid);
		if (i_Puerta[pid][pPos_X] != 0.0)
		{
			total_puertas++;
			puerta_Pickup(pid);
		} else puerta_2Pickup(pid);
	}
	printf("|- Puertas dinámicas [%d]", total_puertas);
	return 1;
}

funcion CargarPuertas_data(pid, name[], value[])
{
	INI_String("Nombre", i_Puerta[pid][pNombre], 128);
	INI_String("Dueño", i_Puerta[pid][pDueno], 32);
	INI_Int("Tipo", i_Puerta[pid][pTipo]);
	INI_Int("Seguro", i_Puerta[pid][pSeguro]);
	INI_Int("Comprado", i_Puerta[pid][pComprado]);
	INI_Int("Dinero", i_Puerta[pid][pDinero]);
	INI_Int("Precio", i_Puerta[pid][pPrecio]);
	INI_Int("Premium", i_Puerta[pid][pPremium]);
	INI_Int("Familia", i_Puerta[pid][pFamilia]);
	INI_Int("Facción", i_Puerta[pid][pFaccion]);
	//float
	INI_Float("Pos_X", i_Puerta[pid][pPos_X]);
	INI_Float("Pos_Y", i_Puerta[pid][pPos_Y]);
	INI_Float("Pos_Z", i_Puerta[pid][pPos_Z]);
	INI_Float("Pos_A", i_Puerta[pid][pPos_A]);
	INI_Int("Pos_VW", i_Puerta[pid][pPos_VW]);
	INI_Int("Pos_Int", i_Puerta[pid][pPos_Int]);
	INI_Float("Int_X", i_Puerta[pid][pInt_X]);
	INI_Float("Int_Y", i_Puerta[pid][pInt_Y]);
	INI_Float("Int_Z", i_Puerta[pid][pInt_Z]);
	INI_Float("Int_A", i_Puerta[pid][pInt_A]);
	INI_Int("Int_VW", i_Puerta[pid][pInt_VW]);
	INI_Int("Int_Int", i_Puerta[pid][pInt_Int]);
	INI_Int("MapIcon", i_Puerta[pid][pMapIcon]);
	INI_Int("Icono", i_Puerta[pid][pIcono]);
	return 1;
}

stock save_Puerta(pid, bool:Todo = true)
{
	new puer[64];
	format(puer, 64, DATOS_PUERTAS, pid);
	new INI: File = INI_Open(puer);
	INI_SetTag(File, "Informacion");
	if(Todo)
	{
		INI_WriteString(File, "Nombre", i_Puerta[pid][pNombre]);
		INI_WriteString(File, "Dueño", i_Puerta[pid][pDueno]);
		INI_WriteInt(File, "Tipo", i_Puerta[pid][pTipo]);
		INI_WriteInt(File, "Seguro", i_Puerta[pid][pSeguro]);
		INI_WriteInt(File, "Comprado", i_Puerta[pid][pComprado]);
		INI_WriteInt(File, "Dinero", i_Puerta[pid][pDinero]);
		INI_WriteInt(File, "Precio", i_Puerta[pid][pPrecio]);
		INI_WriteInt(File, "Premium", i_Puerta[pid][pPremium]);
		INI_WriteInt(File, "Familia", i_Puerta[pid][pFamilia]);
		INI_WriteInt(File, "Facción", i_Puerta[pid][pFaccion]);
		//float
		INI_WriteFloat(File, "Pos_X", i_Puerta[pid][pPos_X]);
		INI_WriteFloat(File, "Pos_Y", i_Puerta[pid][pPos_Y]);
		INI_WriteFloat(File, "Pos_Z", i_Puerta[pid][pPos_Z]);
		INI_WriteFloat(File, "Pos_A", i_Puerta[pid][pPos_A]);
		INI_WriteInt(File, "Pos_VW", i_Puerta[pid][pPos_VW]);
		INI_WriteInt(File, "Pos_Int", i_Puerta[pid][pPos_Int]);
		INI_WriteFloat(File, "Int_X", i_Puerta[pid][pInt_X]);
		INI_WriteFloat(File, "Int_Y", i_Puerta[pid][pInt_Y]);
		INI_WriteFloat(File, "Int_Z", i_Puerta[pid][pInt_Z]);
		INI_WriteFloat(File, "Int_A", i_Puerta[pid][pInt_A]);
		INI_WriteInt(File, "Int_VW", i_Puerta[pid][pInt_VW]);
		INI_WriteInt(File, "Int_Int", i_Puerta[pid][pInt_Int]);
		INI_WriteInt(File, "MapIcon", i_Puerta[pid][pMapIcon]);
		INI_WriteInt(File, "Icono", i_Puerta[pid][pIcono]);
		INI_Close(File);
	}
	return 1;
}

//<=================================> sistema de Casas
enum cInfo
{
	cNombre[32],
	cEstado,
	cComprado,
	cComprador[32],
	cEspacio,
	croiretnI,
	c_VW,
	c_Int,
	Float: cExteriorX,
	Float: cExteriorY,
	Float: cExteriorZ,
	Float: cExteriorA,
	Float: cInteriorX,
	Float: cInteriorY,
	Float: cInteriorZ,
	Float: cInteriorA,
	cInterior,
	cPrecio,
	cDinero,
	c_alquiler,                          // precio alquiler
	c_alquilado,                         // alquilada
	Float: cArmarioPos[3],
	Float: cGarajePos[8],
	cArmario[15],
	cArmarioCantidad[15],
	cObjModel[MAX_MUEBLES_C],
	Float:cObjPosX[MAX_MUEBLES_C],
	Float:cObjPosY[MAX_MUEBLES_C],
	Float:cObjPosZ[MAX_MUEBLES_C],
	Float:cObjRotX[MAX_MUEBLES_C],
	Float:cObjRotY[MAX_MUEBLES_C],
	Float:cObjRotZ[MAX_MUEBLES_C],
	cTextura1[MAX_MUEBLES_C],
	cTextura2[MAX_MUEBLES_C],
	cTextura3[MAX_MUEBLES_C],
	cTextura4[MAX_MUEBLES_C],
	co_opened[MAX_MUEBLES_C],
	c_patente,
	// - alquiler
	c_stockarmy[7],
	c_stockarmy_cant[7],
	// -
};
new i_Casa[MAX_CASAS][cInfo],
	_casaCP[MAX_CASAS];

stock save_Casa(cid, bool:Todo = true, Mueble = -1, bool:Alquiler = false)
{
	new casad[64];
	format(casad, 64, DATOS_CASAS, cid);
	new INI: File = INI_Open(casad);
	INI_SetTag(File, "Informacion");
	if(Alquiler)
	{
		INI_WriteInt(File, "Renta", i_Casa[cid][c_alquiler]);
		INI_WriteInt(File, "alquilado", i_Casa[cid][c_alquilado]);
		INI_WriteInt(File, "stockarmy_1", i_Casa[cid][c_stockarmy][0]);
		INI_WriteInt(File, "stockarmy_2", i_Casa[cid][c_stockarmy][1]);
		INI_WriteInt(File, "stockarmy_3", i_Casa[cid][c_stockarmy][2]);
		INI_WriteInt(File, "stockarmy_4", i_Casa[cid][c_stockarmy][3]);
		INI_WriteInt(File, "stockarmy_5", i_Casa[cid][c_stockarmy][4]);
		INI_WriteInt(File, "stockarmy_6", i_Casa[cid][c_stockarmy][5]);
		INI_WriteInt(File, "stockarmy_7", i_Casa[cid][c_stockarmy][6]);
		INI_WriteInt(File, "stockarmy_cant_1", i_Casa[cid][c_stockarmy_cant][0]);
		INI_WriteInt(File, "stockarmy_cant_2", i_Casa[cid][c_stockarmy_cant][1]);
		INI_WriteInt(File, "stockarmy_cant_3", i_Casa[cid][c_stockarmy_cant][2]);
		INI_WriteInt(File, "stockarmy_cant_4", i_Casa[cid][c_stockarmy_cant][3]);
		INI_WriteInt(File, "stockarmy_cant_5", i_Casa[cid][c_stockarmy_cant][4]);
		INI_WriteInt(File, "stockarmy_cant_6", i_Casa[cid][c_stockarmy_cant][5]);
		INI_WriteInt(File, "stockarmy_cant_7", i_Casa[cid][c_stockarmy_cant][6]);
		INI_WriteInt(File, "Seguro", i_Casa[cid][cEstado]);
	}
	if(Todo)
	{
		INI_WriteString(File, "Nombre", i_Casa[cid][cNombre]);
		INI_WriteInt(File, "Seguro", i_Casa[cid][cEstado]);
		INI_WriteInt(File, "Comprado", i_Casa[cid][cComprado]);
		INI_WriteString(File, "Dueño", i_Casa[cid][cComprador]);
		INI_WriteInt(File, "Tipo", i_Casa[cid][cEspacio]);
		INI_WriteInt(File, "roiretnI", i_Casa[cid][croiretnI]);
		INI_WriteFloat(File, "ExteriorX", i_Casa[cid][cExteriorX]);
		INI_WriteFloat(File, "ExteriorY", i_Casa[cid][cExteriorY]);
		INI_WriteFloat(File, "ExteriorZ", i_Casa[cid][cExteriorZ]);
		INI_WriteFloat(File, "ExteriorA", i_Casa[cid][cExteriorA]);
		INI_WriteFloat(File, "InteriorX", i_Casa[cid][cInteriorX]);
		INI_WriteFloat(File, "InteriorY", i_Casa[cid][cInteriorY]);
		INI_WriteFloat(File, "InteriorZ", i_Casa[cid][cInteriorZ]);
		INI_WriteFloat(File, "InteriorA", i_Casa[cid][cInteriorA]);
		INI_WriteFloat(File, "_Interior", i_Casa[cid][c_Int]);
		INI_WriteFloat(File, "_VirtualWorld", i_Casa[cid][c_VW]);
		INI_WriteInt(File, "Interior", i_Casa[cid][cInterior]);
		INI_WriteInt(File, "Precio", i_Casa[cid][cPrecio]);
		INI_WriteInt(File, "Casa_Dinero", i_Casa[cid][cDinero]);
		INI_WriteInt(File, "Renta", i_Casa[cid][c_alquiler]);
		INI_WriteInt(File, "alquilado", i_Casa[cid][c_alquilado]);
		INI_WriteFloat(File, "ArmarioPosX", i_Casa[cid][cArmarioPos][0]);
		INI_WriteFloat(File, "ArmarioPosY", i_Casa[cid][cArmarioPos][1]);
		INI_WriteFloat(File, "ArmarioPosZ", i_Casa[cid][cArmarioPos][2]);
		INI_WriteFloat(File, "GarajePos1", i_Casa[cid][cGarajePos][0]);
		INI_WriteFloat(File, "GarajePos2", i_Casa[cid][cGarajePos][1]);
		INI_WriteFloat(File, "GarajePos3", i_Casa[cid][cGarajePos][2]);
		INI_WriteFloat(File, "GarajePos4", i_Casa[cid][cGarajePos][3]);
		INI_WriteFloat(File, "GarajePos5", i_Casa[cid][cGarajePos][4]);
		INI_WriteFloat(File, "GarajePos6", i_Casa[cid][cGarajePos][5]);
		INI_WriteFloat(File, "GarajePos7", i_Casa[cid][cGarajePos][6]);
		INI_WriteFloat(File, "GarajePos8", i_Casa[cid][cGarajePos][7]);
		INI_WriteInt(File, "Armario_1", i_Casa[cid][cArmario][0]);
		INI_WriteInt(File, "Armario_2", i_Casa[cid][cArmario][1]);
		INI_WriteInt(File, "Armario_3", i_Casa[cid][cArmario][2]);
		INI_WriteInt(File, "Armario_4", i_Casa[cid][cArmario][3]);
		INI_WriteInt(File, "Armario_5", i_Casa[cid][cArmario][4]);
		INI_WriteInt(File, "Armario_6", i_Casa[cid][cArmario][5]);
		INI_WriteInt(File, "Armario_7", i_Casa[cid][cArmario][6]);
		INI_WriteInt(File, "Armario_8", i_Casa[cid][cArmario][7]);
		INI_WriteInt(File, "Armario_9", i_Casa[cid][cArmario][8]);
		INI_WriteInt(File, "Armario_10", i_Casa[cid][cArmario][9]);
		INI_WriteInt(File, "Armario_11", i_Casa[cid][cArmario][10]);
		INI_WriteInt(File, "Armario_12", i_Casa[cid][cArmario][11]);
		INI_WriteInt(File, "Armario_13", i_Casa[cid][cArmario][12]);
		INI_WriteInt(File, "Armario_14", i_Casa[cid][cArmario][13]);
		INI_WriteInt(File, "Armario_15", i_Casa[cid][cArmario][14]);
		INI_WriteInt(File, "Armario_Cantidad_1", i_Casa[cid][cArmarioCantidad][0]);
		INI_WriteInt(File, "Armario_Cantidad_2", i_Casa[cid][cArmarioCantidad][1]);
		INI_WriteInt(File, "Armario_Cantidad_3", i_Casa[cid][cArmarioCantidad][2]);
		INI_WriteInt(File, "Armario_Cantidad_4", i_Casa[cid][cArmarioCantidad][3]);
		INI_WriteInt(File, "Armario_Cantidad_5", i_Casa[cid][cArmarioCantidad][4]);
		INI_WriteInt(File, "Armario_Cantidad_6", i_Casa[cid][cArmarioCantidad][5]);
		INI_WriteInt(File, "Armario_Cantidad_7", i_Casa[cid][cArmarioCantidad][6]);
		INI_WriteInt(File, "Armario_Cantidad_8", i_Casa[cid][cArmarioCantidad][7]);
		INI_WriteInt(File, "Armario_Cantidad_9", i_Casa[cid][cArmarioCantidad][8]);
		INI_WriteInt(File, "Armario_Cantidad_10", i_Casa[cid][cArmarioCantidad][9]);
		INI_WriteInt(File, "Armario_Cantidad_11", i_Casa[cid][cArmarioCantidad][10]);
		INI_WriteInt(File, "Armario_Cantidad_12", i_Casa[cid][cArmarioCantidad][11]);
		INI_WriteInt(File, "Armario_Cantidad_13", i_Casa[cid][cArmarioCantidad][12]);
		INI_WriteInt(File, "Armario_Cantidad_14", i_Casa[cid][cArmarioCantidad][13]);
		INI_WriteInt(File, "Armario_Cantidad_15", i_Casa[cid][cArmarioCantidad][14]);
		INI_WriteInt(File, "Patente", i_Casa[cid][c_patente]);
	}
	if(Mueble != -1 && Mueble < MAX_MUEBLES_C)
	{
		new key[32];
		format(key, 32, "Modelo_%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][cObjModel][Mueble]);
		format(key, 32, "PosicionX_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjPosX][Mueble]);
		format(key, 32, "PosicionY_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjPosY][Mueble]);
		format(key, 32, "PosicionZ_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjPosZ][Mueble]);
		format(key, 32, "RotacionX_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjRotX][Mueble]);
		format(key, 32, "RotacionY_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjRotY][Mueble]);
		format(key, 32, "RotacionZ_%d", Mueble);
		INI_WriteFloat(File, key, i_Casa[cid][cObjRotZ][Mueble]);
		format(key, 32, "Textura_%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][cTextura1][Mueble]);
		format(key, 32, "Textura2_%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][cTextura2][Mueble]);
		format(key, 32, "Textura3_%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][cTextura3][Mueble]);
		format(key, 32, "Textura4_%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][cTextura4][Mueble]);
		format(key, 32, "o_opened%d", Mueble);
		INI_WriteInt(File, key, i_Casa[cid][co_opened][Mueble]);
	}
	INI_Close(File);
	return 1;
}

new totalcasas;
funcion CargarCasas()
{
	new casad[64];
	for (new cid = 0; cid < sizeof(i_Casa); cid++)
	{
		format(casad, 64, DATOS_CASAS, cid);
		INI_ParseFile(casad, "CargarCasas_data", .bExtra = true, .extra = cid);
		if (i_Casa[cid][cEspacio] > 0)
		{
			_casaCP[cid] = CreateDynamicCP(i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ] - 1, 1.5, i_Casa[cid][c_VW], i_Casa[cid][c_Int], -1, 5.0);
			totalcasas++;
		} else _casaCP[cid] = CreateDynamicCP(-593.0027, 1983.1633, 6.9800, 1.5, 578, 55, -1, 5.0);
	}
	printf("|- Casas [%d]", totalcasas);
	return 1;
}

funcion CargarCasas_data(cid, name[], value[])
{
	INI_String("Nombre", i_Casa[cid][cNombre], 32);
	INI_Int("Seguro", i_Casa[cid][cEstado]);
	INI_Int("Comprado", i_Casa[cid][cComprado]);
	INI_String("Dueño", i_Casa[cid][cComprador], 32);
	INI_Int("Tipo", i_Casa[cid][cEspacio]);
	INI_Int("roiretnI", i_Casa[cid][croiretnI]);
	INI_Float("ExteriorX", i_Casa[cid][cExteriorX]);
	INI_Float("ExteriorY", i_Casa[cid][cExteriorY]);
	INI_Float("ExteriorZ", i_Casa[cid][cExteriorZ]);
	INI_Float("ExteriorA", i_Casa[cid][cExteriorA]);
	INI_Float("InteriorX", i_Casa[cid][cInteriorX]);
	INI_Float("InteriorY", i_Casa[cid][cInteriorY]);
	INI_Float("InteriorZ", i_Casa[cid][cInteriorZ]);
	INI_Float("InteriorA", i_Casa[cid][cInteriorA]);
	INI_Int("_Interior", i_Casa[cid][c_Int]);
	INI_Int("_VirtualWorld", i_Casa[cid][c_VW]);
	INI_Int("Interior", i_Casa[cid][cInterior]);
	INI_Int("Precio", i_Casa[cid][cPrecio]);
	INI_Int("Casa_Dinero", i_Casa[cid][cDinero]);
	INI_Int("Renta", i_Casa[cid][c_alquiler]);
	INI_Int("alquilado", i_Casa[cid][c_alquilado]);
	INI_Float("ArmarioPosX", i_Casa[cid][cArmarioPos][0]);
	INI_Float("ArmarioPosY", i_Casa[cid][cArmarioPos][1]);
	INI_Float("ArmarioPosZ", i_Casa[cid][cArmarioPos][2]);
	INI_Float("GarajePos1", i_Casa[cid][cGarajePos][0]);
	INI_Float("GarajePos2", i_Casa[cid][cGarajePos][1]);
	INI_Float("GarajePos3", i_Casa[cid][cGarajePos][2]);
	INI_Float("GarajePos4", i_Casa[cid][cGarajePos][3]);
	INI_Float("GarajePos5", i_Casa[cid][cGarajePos][4]);
	INI_Float("GarajePos6", i_Casa[cid][cGarajePos][5]);
	INI_Float("GarajePos7", i_Casa[cid][cGarajePos][6]);
	INI_Float("GarajePos8", i_Casa[cid][cGarajePos][7]);
	INI_Int("Armario_1", i_Casa[cid][cArmario][0]);
	INI_Int("Armario_2", i_Casa[cid][cArmario][1]);
	INI_Int("Armario_3", i_Casa[cid][cArmario][2]);
	INI_Int("Armario_4", i_Casa[cid][cArmario][3]);
	INI_Int("Armario_5", i_Casa[cid][cArmario][4]);
	INI_Int("Armario_6", i_Casa[cid][cArmario][5]);
	INI_Int("Armario_7", i_Casa[cid][cArmario][6]);
	INI_Int("Armario_8", i_Casa[cid][cArmario][7]);
	INI_Int("Armario_9", i_Casa[cid][cArmario][8]);
	INI_Int("Armario_10", i_Casa[cid][cArmario][9]);
	INI_Int("Armario_11", i_Casa[cid][cArmario][10]);
	INI_Int("Armario_12", i_Casa[cid][cArmario][11]);
	INI_Int("Armario_13", i_Casa[cid][cArmario][12]);
	INI_Int("Armario_14", i_Casa[cid][cArmario][13]);
	INI_Int("Armario_15", i_Casa[cid][cArmario][14]);
	INI_Int("Armario_Cantidad_1", i_Casa[cid][cArmarioCantidad][0]);
	INI_Int("Armario_Cantidad_2", i_Casa[cid][cArmarioCantidad][1]);
	INI_Int("Armario_Cantidad_3", i_Casa[cid][cArmarioCantidad][2]);
	INI_Int("Armario_Cantidad_4", i_Casa[cid][cArmarioCantidad][3]);
	INI_Int("Armario_Cantidad_5", i_Casa[cid][cArmarioCantidad][4]);
	INI_Int("Armario_Cantidad_6", i_Casa[cid][cArmarioCantidad][5]);
	INI_Int("Armario_Cantidad_7", i_Casa[cid][cArmarioCantidad][6]);
	INI_Int("Armario_Cantidad_8", i_Casa[cid][cArmarioCantidad][7]);
	INI_Int("Armario_Cantidad_9", i_Casa[cid][cArmarioCantidad][8]);
	INI_Int("Armario_Cantidad_10", i_Casa[cid][cArmarioCantidad][9]);
	INI_Int("Armario_Cantidad_11", i_Casa[cid][cArmarioCantidad][10]);
	INI_Int("Armario_Cantidad_12", i_Casa[cid][cArmarioCantidad][11]);
	INI_Int("Armario_Cantidad_13", i_Casa[cid][cArmarioCantidad][12]);
	INI_Int("Armario_Cantidad_14", i_Casa[cid][cArmarioCantidad][13]);
	INI_Int("Armario_Cantidad_15", i_Casa[cid][cArmarioCantidad][14]);
	INI_Int("Patente", i_Casa[cid][c_patente]);
	INI_Int("stockarmy_1", i_Casa[cid][c_stockarmy][0]);
	INI_Int("stockarmy_2", i_Casa[cid][c_stockarmy][1]);
	INI_Int("stockarmy_3", i_Casa[cid][c_stockarmy][2]);
	INI_Int("stockarmy_4", i_Casa[cid][c_stockarmy][3]);
	INI_Int("stockarmy_5", i_Casa[cid][c_stockarmy][4]);
	INI_Int("stockarmy_6", i_Casa[cid][c_stockarmy][5]);
	INI_Int("stockarmy_7", i_Casa[cid][c_stockarmy][6]);
	INI_Int("stockarmy_cant_1", i_Casa[cid][c_stockarmy_cant][0]);
	INI_Int("stockarmy_cant_2", i_Casa[cid][c_stockarmy_cant][1]);
	INI_Int("stockarmy_cant_3", i_Casa[cid][c_stockarmy_cant][2]);
	INI_Int("stockarmy_cant_4", i_Casa[cid][c_stockarmy_cant][3]);
	INI_Int("stockarmy_cant_5", i_Casa[cid][c_stockarmy_cant][4]);
	INI_Int("stockarmy_cant_6", i_Casa[cid][c_stockarmy_cant][5]);
	INI_Int("stockarmy_cant_7", i_Casa[cid][c_stockarmy_cant][6]);
	new key[32];
	for (new i = 0; i < MAX_MUEBLES_C; i++)
	{
		format(key, 32, "Modelo_%d", i);
		INI_Int(key, i_Casa[cid][cObjModel][i]);
		format(key, 32, "PosicionX_%d", i);
		INI_Float(key, i_Casa[cid][cObjPosX][i]);
		format(key, 32, "PosicionY_%d", i);
		INI_Float(key, i_Casa[cid][cObjPosY][i]);
		format(key, 32, "PosicionZ_%d", i);
		INI_Float(key, i_Casa[cid][cObjPosZ][i]);
		format(key, 32, "RotacionX_%d", i);
		INI_Float(key, i_Casa[cid][cObjRotX][i]);
		format(key, 32, "RotacionY_%d", i);
		INI_Float(key, i_Casa[cid][cObjRotY][i]);
		format(key, 32, "RotacionZ_%d", i);
		INI_Float(key, i_Casa[cid][cObjRotZ][i]);
		format(key, 32, "Textura_%d", i);
		INI_Int(key, i_Casa[cid][cTextura1][i]);
		format(key, 32, "Textura2_%d", i);
		INI_Int(key, i_Casa[cid][cTextura2][i]);
		format(key, 32, "Textura3_%d", i);
		INI_Int(key, i_Casa[cid][cTextura3][i]);
		format(key, 32, "Textura4_%d", i);
		INI_Int(key, i_Casa[cid][cTextura4][i]);
		format(key, 32, "o_opened%d", i);
		INI_Int(key, i_Casa[cid][co_opened][i]);
	}
	return 1;
}
//<=================================> sistema de garajes
enum gInfo
{
	gIDCasa,
	gInterior,
	gVirtualWorld,
	gSeguro,
	gTipo,
	Float: gExteriorX,
	Float: gExteriorY,
	Float: gExteriorZ,
	Float: gExteriorA,
	Float: gExteriorX_V,
	Float: gExteriorY_V,
	Float: gInteriorX,
	Float: gInteriorY,
	Float: gInteriorZ,
	Float: gInteriorA,
	Float: gArmarioPos[3],
	gArmario[15],
	gArmarioCantidad[15],
	gObjModel[MAX_MUEBLES_G],
	Float:gObjPosX[MAX_MUEBLES_G],
	Float:gObjPosY[MAX_MUEBLES_G],
	Float:gObjPosZ[MAX_MUEBLES_G],
	Float:gObjRotX[MAX_MUEBLES_G],
	Float:gObjRotY[MAX_MUEBLES_G],
	Float:gObjRotZ[MAX_MUEBLES_G],
};
new i_Garaje[MAX_GARAJES][gInfo],
	_gajCP[MAX_GARAJES];

stock save_Garaje(gid, bool:Todo = true, Mueble = -1)
{
	new garage[128];
	format(garage, 128, DATOS_GARAGES, gid);
	new INI:File = INI_Open(garage);
	INI_SetTag(File,"Informacion");
	if(Todo)
	{
		INI_WriteInt(File,"CasaID", i_Garaje[gid][gIDCasa]);
		INI_WriteInt(File,"Interior", i_Garaje[gid][gInterior]);
		INI_WriteInt(File,"VirtualWorld", i_Garaje[gid][gVirtualWorld]);
		INI_WriteInt(File,"Seguro", i_Garaje[gid][gSeguro]);
		INI_WriteInt(File,"Tipo", i_Garaje[gid][gTipo]);
		INI_WriteFloat(File,"Exterior_X", i_Garaje[gid][gExteriorX]);
		INI_WriteFloat(File,"Exterior_Y", i_Garaje[gid][gExteriorY]);
		INI_WriteFloat(File,"Exterior_Z", i_Garaje[gid][gExteriorZ]);
		INI_WriteFloat(File,"Exterior_A", i_Garaje[gid][gExteriorA]);
		INI_WriteFloat(File,"ExteriorV_X", i_Garaje[gid][gExteriorX_V]);
		INI_WriteFloat(File,"ExteriorV_Y", i_Garaje[gid][gExteriorY_V]);
		INI_WriteFloat(File,"Interior_X", i_Garaje[gid][gInteriorX]);
		INI_WriteFloat(File,"Interior_Y", i_Garaje[gid][gInteriorY]);
		INI_WriteFloat(File,"Interior_Z", i_Garaje[gid][gInteriorZ]);
		INI_WriteFloat(File,"Interior_A", i_Garaje[gid][gInteriorA]);
		INI_WriteFloat(File, "ArmarioPosX", i_Garaje[gid][gArmarioPos][0]);
		INI_WriteFloat(File, "ArmarioPosY", i_Garaje[gid][gArmarioPos][1]);
		INI_WriteFloat(File, "ArmarioPosZ", i_Garaje[gid][gArmarioPos][2]);
		INI_WriteInt(File, "Armario_1", i_Garaje[gid][gArmario][0]);
		INI_WriteInt(File, "Armario_2", i_Garaje[gid][gArmario][1]);
		INI_WriteInt(File, "Armario_3", i_Garaje[gid][gArmario][2]);
		INI_WriteInt(File, "Armario_4", i_Garaje[gid][gArmario][3]);
		INI_WriteInt(File, "Armario_5", i_Garaje[gid][gArmario][4]);
		INI_WriteInt(File, "Armario_6", i_Garaje[gid][gArmario][5]);
		INI_WriteInt(File, "Armario_7", i_Garaje[gid][gArmario][6]);
		INI_WriteInt(File, "Armario_8", i_Garaje[gid][gArmario][7]);
		INI_WriteInt(File, "Armario_9", i_Garaje[gid][gArmario][8]);
		INI_WriteInt(File, "Armario_10", i_Garaje[gid][gArmario][9]);
		INI_WriteInt(File, "Armario_11", i_Garaje[gid][gArmario][10]);
		INI_WriteInt(File, "Armario_12", i_Garaje[gid][gArmario][11]);
		INI_WriteInt(File, "Armario_13", i_Garaje[gid][gArmario][12]);
		INI_WriteInt(File, "Armario_14", i_Garaje[gid][gArmario][13]);
		INI_WriteInt(File, "Armario_15", i_Garaje[gid][gArmario][14]);
		INI_WriteInt(File, "Armario_Cantidad_1", i_Garaje[gid][gArmarioCantidad][0]);
		INI_WriteInt(File, "Armario_Cantidad_2", i_Garaje[gid][gArmarioCantidad][1]);
		INI_WriteInt(File, "Armario_Cantidad_3", i_Garaje[gid][gArmarioCantidad][2]);
		INI_WriteInt(File, "Armario_Cantidad_4", i_Garaje[gid][gArmarioCantidad][3]);
		INI_WriteInt(File, "Armario_Cantidad_5", i_Garaje[gid][gArmarioCantidad][4]);
		INI_WriteInt(File, "Armario_Cantidad_6", i_Garaje[gid][gArmarioCantidad][5]);
		INI_WriteInt(File, "Armario_Cantidad_7", i_Garaje[gid][gArmarioCantidad][6]);
		INI_WriteInt(File, "Armario_Cantidad_8", i_Garaje[gid][gArmarioCantidad][7]);
		INI_WriteInt(File, "Armario_Cantidad_9", i_Garaje[gid][gArmarioCantidad][8]);
		INI_WriteInt(File, "Armario_Cantidad_10", i_Garaje[gid][gArmarioCantidad][9]);
		INI_WriteInt(File, "Armario_Cantidad_11", i_Garaje[gid][gArmarioCantidad][10]);
		INI_WriteInt(File, "Armario_Cantidad_12", i_Garaje[gid][gArmarioCantidad][11]);
		INI_WriteInt(File, "Armario_Cantidad_13", i_Garaje[gid][gArmarioCantidad][12]);
		INI_WriteInt(File, "Armario_Cantidad_14", i_Garaje[gid][gArmarioCantidad][13]);
		INI_WriteInt(File, "Armario_Cantidad_15", i_Garaje[gid][gArmarioCantidad][14]);
	}
	if(Mueble != -1 && Mueble < MAX_MUEBLES_G)
	{
		new key[32];
		format(key, 32, "Modelo_%d", Mueble);
		INI_WriteInt(File, key, i_Garaje[gid][gObjModel][Mueble]);
		format(key, 32, "PosicionX_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjPosX][Mueble]);
		format(key, 32, "PosicionY_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjPosY][Mueble]);
		format(key, 32, "PosicionZ_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjPosZ][Mueble]);
		format(key, 32, "RotacionX_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjRotX][Mueble]);
		format(key, 32, "RotacionY_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjRotY][Mueble]);
		format(key, 32, "RotacionZ_%d", Mueble);
		INI_WriteFloat(File, key, i_Garaje[gid][gObjRotZ][Mueble]);
	}
	INI_Close(File);
	return 1;
}

funcion CargarGarages()
{
	new garage[64],Total_Garages;
	for(new gid = 0; gid < sizeof(i_Garaje); gid++)
	{
		format(garage, 64, DATOS_GARAGES, gid);
		INI_ParseFile(garage, "CargarGarages_data", .bExtra = true, .extra = gid );
		if(i_Garaje[gid][gTipo] > 0)
		{
			_gajCP[gid] = CreateDynamicCP(i_Garaje[gid][gExteriorX], i_Garaje[gid][gExteriorY], i_Garaje[gid][gExteriorZ] - 1, 4.0, -1, -1, -1, 5.0);
			Total_Garages++;
		}
	}
	printf("» Sistema de garajes cargado (%d).",Total_Garages);
	return 1;
}

funcion CargarGarages_data(gid, name[], value[])
{
	INI_Int("CasaID", i_Garaje[gid][gIDCasa]);
	INI_Int("Interior", i_Garaje[gid][gInterior]);
	INI_Int("VirtualWorld", i_Garaje[gid][gVirtualWorld]);
	INI_Int("Seguro", i_Garaje[gid][gSeguro]);
	INI_Int("Tipo", i_Garaje[gid][gTipo]);
	INI_Float("Exterior_X", i_Garaje[gid][gExteriorX]);
	INI_Float("Exterior_Y", i_Garaje[gid][gExteriorY]);
	INI_Float("Exterior_Z", i_Garaje[gid][gExteriorZ]);
	INI_Float("Exterior_A", i_Garaje[gid][gExteriorA]);
	INI_Float("ExteriorV_X", i_Garaje[gid][gExteriorX_V]);
	INI_Float("ExteriorV_Y", i_Garaje[gid][gExteriorY_V]);
	INI_Float("Interior_X", i_Garaje[gid][gInteriorX]);
	INI_Float("Interior_Y", i_Garaje[gid][gInteriorY]);
	INI_Float("Interior_Z", i_Garaje[gid][gInteriorZ]);
	INI_Float("Interior_A", i_Garaje[gid][gInteriorA]);
	INI_Float("ArmarioPosX", i_Garaje[gid][gArmarioPos][0]);
	INI_Float("ArmarioPosY", i_Garaje[gid][gArmarioPos][1]);
	INI_Float("ArmarioPosZ", i_Garaje[gid][gArmarioPos][2]);
	INI_Int("Armario_1", i_Garaje[gid][gArmario][0]);
	INI_Int("Armario_2", i_Garaje[gid][gArmario][1]);
	INI_Int("Armario_3", i_Garaje[gid][gArmario][2]);
	INI_Int("Armario_4", i_Garaje[gid][gArmario][3]);
	INI_Int("Armario_5", i_Garaje[gid][gArmario][4]);
	INI_Int("Armario_6", i_Garaje[gid][gArmario][5]);
	INI_Int("Armario_7", i_Garaje[gid][gArmario][6]);
	INI_Int("Armario_8", i_Garaje[gid][gArmario][7]);
	INI_Int("Armario_9", i_Garaje[gid][gArmario][8]);
	INI_Int("Armario_10", i_Garaje[gid][gArmario][9]);
	INI_Int("Armario_11", i_Garaje[gid][gArmario][10]);
	INI_Int("Armario_12", i_Garaje[gid][gArmario][11]);
	INI_Int("Armario_13", i_Garaje[gid][gArmario][12]);
	INI_Int("Armario_14", i_Garaje[gid][gArmario][13]);
	INI_Int("Armario_15", i_Garaje[gid][gArmario][14]);
	INI_Int("Armario_Cantidad_1", i_Garaje[gid][gArmarioCantidad][0]);
	INI_Int("Armario_Cantidad_2", i_Garaje[gid][gArmarioCantidad][1]);
	INI_Int("Armario_Cantidad_3", i_Garaje[gid][gArmarioCantidad][2]);
	INI_Int("Armario_Cantidad_4", i_Garaje[gid][gArmarioCantidad][3]);
	INI_Int("Armario_Cantidad_5", i_Garaje[gid][gArmarioCantidad][4]);
	INI_Int("Armario_Cantidad_6", i_Garaje[gid][gArmarioCantidad][5]);
	INI_Int("Armario_Cantidad_7", i_Garaje[gid][gArmarioCantidad][6]);
	INI_Int("Armario_Cantidad_8", i_Garaje[gid][gArmarioCantidad][7]);
	INI_Int("Armario_Cantidad_9", i_Garaje[gid][gArmarioCantidad][8]);
	INI_Int("Armario_Cantidad_10", i_Garaje[gid][gArmarioCantidad][9]);
	INI_Int("Armario_Cantidad_11", i_Garaje[gid][gArmarioCantidad][10]);
	INI_Int("Armario_Cantidad_12", i_Garaje[gid][gArmarioCantidad][11]);
	INI_Int("Armario_Cantidad_13", i_Garaje[gid][gArmarioCantidad][12]);
	INI_Int("Armario_Cantidad_14", i_Garaje[gid][gArmarioCantidad][13]);
	INI_Int("Armario_Cantidad_15", i_Garaje[gid][gArmarioCantidad][14]);
	new key[32];
	for (new i = 0; i < MAX_MUEBLES_G; i++)
	{
		format(key, 32, "Modelo_%d", i);
		INI_Int(key, i_Garaje[gid][gObjModel][i]);
		format(key, 32, "PosicionX_%d", i);
		INI_Float(key, i_Garaje[gid][gObjPosX][i]);
		format(key, 32, "PosicionY_%d", i);
		INI_Float(key, i_Garaje[gid][gObjPosY][i]);
		format(key, 32, "PosicionZ_%d", i);
		INI_Float(key, i_Garaje[gid][gObjPosZ][i]);
		format(key, 32, "RotacionX_%d", i);
		INI_Float(key, i_Garaje[gid][gObjRotX][i]);
		format(key, 32, "RotacionY_%d", i);
		INI_Float(key, i_Garaje[gid][gObjRotY][i]);
		format(key, 32, "RotacionZ_%d", i);
		INI_Float(key, i_Garaje[gid][gObjRotZ][i]);
	}
	return 1;
}
//<=================================> sistema de negocios
enum nInfo
{
	nNombre[32],
	nDueno[32],
	nTipo,
	nSeguro,
	nComprado,
	Float: nExteriorX,
	Float: nExteriorY,
	Float: nExteriorZ,
	Float: nExteriorR,
	Float: nInteriorX,
	Float: nInteriorY,
	Float: nInteriorZ,
	Float: nInteriorR,
	nDinero,
	nProductos,
	nPrecio,
	nInterior,
	nArmario[15],
	nArmarioCant[15],
	Float: nCompraX,
	Float: nCompraY,
	Float: nCompraZ,
	nIcono,
	nCuotas,
	nPedido,
	nObjModel[MAX_MUEBLES_N],
	Float:nObjPosX[MAX_MUEBLES_N],
	Float:nObjPosY[MAX_MUEBLES_N],
	Float:nObjPosZ[MAX_MUEBLES_N],
	Float:nObjRotX[MAX_MUEBLES_N],
	Float:nObjRotY[MAX_MUEBLES_N],
	Float:nObjRotZ[MAX_MUEBLES_N],
	EnLlamas,
	EnPedido,
	_robado,
	_robado2[32],
	n_patente,
	nTextura1[MAX_MUEBLES_N],
	nTextura2[MAX_MUEBLES_N],
	nTextura3[MAX_MUEBLES_N],
	nTextura4[MAX_MUEBLES_N],
};
new i_Negocio[MAX_NEGOCIOS][nInfo];

stock save_Negocio(nid, bool:Todo = true, Mueble = -1)
{
	new negd[64];
	format(negd, 64, DATOS_NEGOCIOS, nid);
	new INI: File = INI_Open(negd);
	INI_SetTag(File, "Informacion");
	if(Todo)
	{
		INI_WriteString(File, "Nombre", i_Negocio[nid][nNombre]);
		INI_WriteString(File, "Dueño", i_Negocio[nid][nDueno]);
		INI_WriteInt(File, "Tipo", i_Negocio[nid][nTipo]);
		INI_WriteInt(File, "Seguro", i_Negocio[nid][nSeguro]);
		INI_WriteInt(File, "Comprado", i_Negocio[nid][nComprado]);
		INI_WriteFloat(File, "Exterior_X", i_Negocio[nid][nExteriorX]);
		INI_WriteFloat(File, "Exterior_Y", i_Negocio[nid][nExteriorY]);
		INI_WriteFloat(File, "Exterior_Z", i_Negocio[nid][nExteriorZ]);
		INI_WriteFloat(File, "Exterior_R", i_Negocio[nid][nExteriorR]);
		INI_WriteFloat(File, "Interior_X", i_Negocio[nid][nInteriorX]);
		INI_WriteFloat(File, "Interior_Y", i_Negocio[nid][nInteriorY]);
		INI_WriteFloat(File, "Interior_Z", i_Negocio[nid][nInteriorZ]);
		INI_WriteFloat(File, "Interior_R", i_Negocio[nid][nInteriorR]);
		INI_WriteInt(File, "Dinero", i_Negocio[nid][nDinero]);
		INI_WriteInt(File, "Productos", i_Negocio[nid][nProductos]);
		INI_WriteInt(File, "Precio", i_Negocio[nid][nPrecio]);
		INI_WriteInt(File, "Interior", i_Negocio[nid][nInterior]);
		INI_WriteInt(File, "Entrada", i_Negocio[nid][nCuotas]);
		INI_WriteInt(File, "Pedido", i_Negocio[nid][nPedido]);
		INI_WriteInt(File, "Armario1", i_Negocio[nid][nArmario][0]);
		INI_WriteInt(File, "Armario2", i_Negocio[nid][nArmario][1]);
		INI_WriteInt(File, "Armario3", i_Negocio[nid][nArmario][2]);
		INI_WriteInt(File, "Armario4", i_Negocio[nid][nArmario][3]);
		INI_WriteInt(File, "Armario5", i_Negocio[nid][nArmario][4]);
		INI_WriteInt(File, "Armario6", i_Negocio[nid][nArmario][5]);
		INI_WriteInt(File, "Armario7", i_Negocio[nid][nArmario][6]);
		INI_WriteInt(File, "Armario8", i_Negocio[nid][nArmario][7]);
		INI_WriteInt(File, "Armario9", i_Negocio[nid][nArmario][8]);
		INI_WriteInt(File, "Armario10", i_Negocio[nid][nArmario][9]);
		INI_WriteInt(File, "ArmarioCant1", i_Negocio[nid][nArmarioCant][0]);
		INI_WriteInt(File, "ArmarioCant2", i_Negocio[nid][nArmarioCant][1]);
		INI_WriteInt(File, "ArmarioCant3", i_Negocio[nid][nArmarioCant][2]);
		INI_WriteInt(File, "ArmarioCant4", i_Negocio[nid][nArmarioCant][3]);
		INI_WriteInt(File, "ArmarioCant5", i_Negocio[nid][nArmarioCant][4]);
		INI_WriteInt(File, "ArmarioCant6", i_Negocio[nid][nArmarioCant][5]);
		INI_WriteInt(File, "ArmarioCant7", i_Negocio[nid][nArmarioCant][6]);
		INI_WriteInt(File, "ArmarioCant8", i_Negocio[nid][nArmarioCant][7]);
		INI_WriteInt(File, "ArmarioCant9", i_Negocio[nid][nArmarioCant][8]);
		INI_WriteInt(File, "ArmarioCant10", i_Negocio[nid][nArmarioCant][9]);
		INI_WriteFloat(File, "CompraX", i_Negocio[nid][nCompraX]);
		INI_WriteFloat(File, "CompraY", i_Negocio[nid][nCompraY]);
		INI_WriteFloat(File, "CompraZ", i_Negocio[nid][nCompraZ]);
		INI_WriteInt(File, "Patente", i_Negocio[nid][n_patente]);
	}
	if(Mueble != -1 && Mueble < MAX_MUEBLES_N)
	{
		new nt[32];
		format(nt, 32, "Modelo_%d", Mueble);
		INI_WriteInt(File, nt, i_Negocio[nid][nObjModel][Mueble]);
		format(nt, 32, "PosicionX_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjPosX][Mueble]);
		format(nt, 32, "PosicionY_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjPosY][Mueble]);
		format(nt, 32, "PosicionZ_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjPosZ][Mueble]);
		format(nt, 32, "RotacionX_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjRotX][Mueble]);
		format(nt, 32, "RotacionY_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjRotY][Mueble]);
		format(nt, 32, "RotacionZ_%d", Mueble);
		INI_WriteFloat(File, nt, i_Negocio[nid][nObjRotZ][Mueble]);
		format(nt, 32, "Textura_%d", Mueble);
		INI_WriteInt(File, nt, i_Negocio[nid][nTextura1][Mueble]);
		format(nt, 32, "Textura2_%d", Mueble);
		INI_WriteInt(File, nt, i_Negocio[nid][nTextura2][Mueble]);
		format(nt, 32, "Textura3_%d", Mueble);
		INI_WriteInt(File, nt, i_Negocio[nid][nTextura3][Mueble]);
		format(nt, 32, "Textura4_%d", Mueble);
		INI_WriteInt(File, nt, i_Negocio[nid][nTextura4][Mueble]);
	}
	INI_Close(File);
	return 1;
}

new totalnegs;

funcion CargarNegocios()
{
	new negocio[64];
	for (new nid = 0; nid < sizeof(i_Negocio); nid++)
	{
		format(negocio, 64, DATOS_NEGOCIOS, nid);
		INI_ParseFile(negocio, "CargarNegocios_data", .bExtra = true, .extra = nid);
		if (i_Negocio[nid][nTipo] > 0)
		{
			totalnegs++;
			_NegocioP(nid);
		} else _Negocio2P(nid);
	}
	printf("|- Negocios [%d]", totalnegs);
	return 1;
}

funcion CargarNegocios_data(nid, name[], value[])
{
	INI_String("Nombre", i_Negocio[nid][nNombre], 32);
	INI_String("Dueño", i_Negocio[nid][nDueno], 32);
	INI_Int("Tipo", i_Negocio[nid][nTipo]);
	INI_Int("Seguro", i_Negocio[nid][nSeguro]);
	INI_Int("Comprado", i_Negocio[nid][nComprado]);
	INI_Float("Exterior_X", i_Negocio[nid][nExteriorX]);
	INI_Float("Exterior_Y", i_Negocio[nid][nExteriorY]);
	INI_Float("Exterior_Z", i_Negocio[nid][nExteriorZ]);
	INI_Float("Exterior_R", i_Negocio[nid][nExteriorR]);
	INI_Float("Interior_X", i_Negocio[nid][nInteriorX]);
	INI_Float("Interior_Y", i_Negocio[nid][nInteriorY]);
	INI_Float("Interior_Z", i_Negocio[nid][nInteriorZ]);
	INI_Float("Interior_R", i_Negocio[nid][nInteriorR]);
	INI_Int("Dinero", i_Negocio[nid][nDinero]);
	INI_Int("Productos", i_Negocio[nid][nProductos]);
	INI_Int("Precio", i_Negocio[nid][nPrecio]);
	INI_Int("Interior", i_Negocio[nid][nInterior]);
	INI_Int("Entrada", i_Negocio[nid][nCuotas]);
	INI_Int("Pedido", i_Negocio[nid][nPedido]);
	INI_Int("Armario1", i_Negocio[nid][nArmario][0]);
	INI_Int("Armario2", i_Negocio[nid][nArmario][1]);
	INI_Int("Armario3", i_Negocio[nid][nArmario][2]);
	INI_Int("Armario4", i_Negocio[nid][nArmario][3]);
	INI_Int("Armario5", i_Negocio[nid][nArmario][4]);
	INI_Int("Armario6", i_Negocio[nid][nArmario][5]);
	INI_Int("Armario7", i_Negocio[nid][nArmario][6]);
	INI_Int("Armario8", i_Negocio[nid][nArmario][7]);
	INI_Int("Armario9", i_Negocio[nid][nArmario][8]);
	INI_Int("Armario10", i_Negocio[nid][nArmario][9]);
	INI_Int("ArmarioCant1", i_Negocio[nid][nArmarioCant][0]);
	INI_Int("ArmarioCant2", i_Negocio[nid][nArmarioCant][1]);
	INI_Int("ArmarioCant3", i_Negocio[nid][nArmarioCant][2]);
	INI_Int("ArmarioCant4", i_Negocio[nid][nArmarioCant][3]);
	INI_Int("ArmarioCant5", i_Negocio[nid][nArmarioCant][4]);
	INI_Int("ArmarioCant6", i_Negocio[nid][nArmarioCant][5]);
	INI_Int("ArmarioCant7", i_Negocio[nid][nArmarioCant][6]);
	INI_Int("ArmarioCant8", i_Negocio[nid][nArmarioCant][7]);
	INI_Int("ArmarioCant9", i_Negocio[nid][nArmarioCant][8]);
	INI_Int("ArmarioCant10", i_Negocio[nid][nArmarioCant][9]);
	INI_Float("CompraX", i_Negocio[nid][nCompraX]);
	INI_Float("CompraY", i_Negocio[nid][nCompraY]);
	INI_Float("CompraZ", i_Negocio[nid][nCompraZ]);
	INI_Int("Patente", i_Negocio[nid][n_patente]);
	new nt[32];
	for (new i = 0; i < MAX_MUEBLES_N; i++)
	{
		format(nt, 32, "Modelo_%d", i);
		INI_Int(nt, i_Negocio[nid][nObjModel][i]);
		format(nt, 32, "PosicionX_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjPosX][i]);
		format(nt, 32, "PosicionY_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjPosY][i]);
		format(nt, 32, "PosicionZ_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjPosZ][i]);
		format(nt, 32, "RotacionX_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjRotX][i]);
		format(nt, 32, "RotacionY_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjRotY][i]);
		format(nt, 32, "RotacionZ_%d", i);
		INI_Float(nt, i_Negocio[nid][nObjRotZ][i]);
		format(nt, 32, "Textura_%d", i);
		INI_Int(nt, i_Negocio[nid][nTextura1][i]);
		format(nt, 32, "Textura2_%d", i);
		INI_Int(nt, i_Negocio[nid][nTextura2][i]);
		format(nt, 32, "Textura3_%d", i);
		INI_Int(nt, i_Negocio[nid][nTextura3][i]);
		format(nt, 32, "Textura4_%d", i);
		INI_Int(nt, i_Negocio[nid][nTextura4][i]);
	}
	return 1;
}
//<=================================> sistema de empresas
enum eInfo
{
	eNombre[32],
	eDueno[32],
	eTipo,
	eSeguro,
	eComprado,
	eTelefono,
	Float: eExteriorX,
	Float: eExteriorY,
	Float: eExteriorZ,
	Float: eExteriorR,
	Float: eExteriorX_V,
	Float: eExteriorY_V,
	Float: eInteriorX,
	Float: eInteriorY,
	Float: eInteriorZ,
	Float: eInteriorR,
	eDinero,
	ePrecio,
	eInterior,
	eMiembros,
	eEspacio,
	eIcono,
	eMapIcon,
	eObjModel[MAX_MUEBLES_E],
	Float:eObjPosX[MAX_MUEBLES_E],
	Float:eObjPosY[MAX_MUEBLES_E],
	Float:eObjPosZ[MAX_MUEBLES_E],
	Float:eObjRotX[MAX_MUEBLES_E],
	Float:eObjRotY[MAX_MUEBLES_E],
	Float:eObjRotZ[MAX_MUEBLES_E],
	e_patente,
	eTextura1[MAX_MUEBLES_E],
	eTextura2[MAX_MUEBLES_E],
	eTextura3[MAX_MUEBLES_E],
	eTextura4[MAX_MUEBLES_E],
};
new i_Empresa[MAX_EMPRESAS][eInfo];

enum veInfo
{
	vID,
	vModelo,
    Float: vVida,
	Float: vPosicionX,
	Float: vPosicionY,
	Float: vPosicionZ,
	Float: vPosicionR,
	vPrecio,
    vVirtualWorld,
    vInterior,
	vColor_1,
	vColor_2,
	vGasolina,
    vDanioSuperficie,
    vDanioPuertas,
    vDanioLuces,
    vDanioRuedas,
	vMaletero[15],
	vMaleteroCantidad[15],
};

new InfoVehEmp[MAX_EMPRESAS][10][veInfo];

stock save_Empresa(e_id, bool:Todo = true, coche = -1, Mueble = -1)
{
	new emp_d[64];
	format(emp_d, 64, DATOS_EMPRESAS, e_id);
	new INI: File = INI_Open(emp_d);
	INI_SetTag(File, "Informacion");
	if(Todo)
	{
        INI_WriteString(File, "Nombre", i_Empresa[e_id][eNombre]);
        INI_WriteString(File, "Dueño", i_Empresa[e_id][eDueno]);
        INI_WriteInt(File, "Tipo", i_Empresa[e_id][eTipo]);
        INI_WriteInt(File, "Seguro", i_Empresa[e_id][eSeguro]);
        INI_WriteInt(File, "Comprado", i_Empresa[e_id][eComprado]);
        INI_WriteInt(File, "Telefono", i_Empresa[e_id][eTelefono]);
        INI_WriteFloat(File, "Exterior_X", i_Empresa[e_id][eExteriorX]);
        INI_WriteFloat(File, "Exterior_Y", i_Empresa[e_id][eExteriorY]);
        INI_WriteFloat(File, "Exterior_Z", i_Empresa[e_id][eExteriorZ]);
        INI_WriteFloat(File, "Exterior_R", i_Empresa[e_id][eExteriorR]);
        INI_WriteFloat(File, "Exterior_XV", i_Empresa[e_id][eExteriorX_V]);
        INI_WriteFloat(File, "Exterior_YV", i_Empresa[e_id][eExteriorY_V]);
        INI_WriteFloat(File, "Interior_X", i_Empresa[e_id][eInteriorX]);
        INI_WriteFloat(File, "Interior_Y", i_Empresa[e_id][eInteriorY]);
        INI_WriteFloat(File, "Interior_Z", i_Empresa[e_id][eInteriorZ]);
        INI_WriteFloat(File, "Interior_R", i_Empresa[e_id][eInteriorR]);
        INI_WriteInt(File, "Dinero", i_Empresa[e_id][eDinero]);
        INI_WriteInt(File, "Precio", i_Empresa[e_id][ePrecio]);
        INI_WriteInt(File, "Interior", i_Empresa[e_id][eInterior]);
        INI_WriteInt(File, "Empleados", i_Empresa[e_id][eMiembros]);
        INI_WriteInt(File, "Espacio", i_Empresa[e_id][eEspacio]);
        INI_WriteInt(File, "Patente", i_Empresa[e_id][e_patente]);
	}
	if(Mueble != -1 && Mueble < MAX_MUEBLES_E)
	{
		new nt[32];
		format(nt, 32, "Modelo_%d", Mueble);
		INI_WriteInt(File, nt, i_Empresa[e_id][eObjModel][Mueble]);
		format(nt, 32, "PosicionX_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjPosX][Mueble]);
		format(nt, 32, "PosicionY_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjPosY][Mueble]);
		format(nt, 32, "PosicionZ_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjPosZ][Mueble]);
		format(nt, 32, "RotacionX_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjRotX][Mueble]);
		format(nt, 32, "RotacionY_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjRotY][Mueble]);
		format(nt, 32, "RotacionZ_%d", Mueble);
		INI_WriteFloat(File, nt, i_Empresa[e_id][eObjRotZ][Mueble]);
		format(nt, 32, "Textura_%d", Mueble);
		INI_WriteInt(File, nt, i_Empresa[e_id][eTextura1][Mueble]);
		format(nt, 32, "Textura2_%d", Mueble);
		INI_WriteInt(File, nt, i_Empresa[e_id][eTextura2][Mueble]);
		format(nt, 32, "Textura3_%d", Mueble);
		INI_WriteInt(File, nt, i_Empresa[e_id][eTextura3][Mueble]);
		format(nt, 32, "Textura4_%d", Mueble);
		INI_WriteInt(File, nt, i_Empresa[e_id][eTextura4][Mueble]);
	}
	new string[128];
	if(coche != -1 && coche < 10)
	{
		format(string, 64, "v%d_IDModelo", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vModelo]);
		format(string, 64, "v%d_Vida", coche); INI_WriteFloat(File, string, InfoVehEmp[e_id][coche][vVida]);
		format(string, 64, "v%d_PosicionX", coche); INI_WriteFloat(File, string, InfoVehEmp[e_id][coche][vPosicionX]);
		format(string, 64, "v%d_PosicionY", coche); INI_WriteFloat(File, string, InfoVehEmp[e_id][coche][vPosicionY]);
		format(string, 64, "v%d_PosicionZ", coche); INI_WriteFloat(File, string, InfoVehEmp[e_id][coche][vPosicionZ]);
		format(string, 64, "v%d_PosicionR", coche); INI_WriteFloat(File, string, InfoVehEmp[e_id][coche][vPosicionR]);
		format(string, 64, "v%d_Precio", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vPrecio]);
		format(string, 64, "v%d_Color_1", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vColor_1]);
		format(string, 64, "v%d_Color_2", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vColor_2]);
		format(string, 64, "v%d_Gasolina", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vGasolina]);
		format(string, 64, "v%d_DañoSuperficie", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vDanioSuperficie]);
		format(string, 64, "v%d_DañoPuertas", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vDanioPuertas]);
		format(string, 64, "v%d_DañoLuces", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vDanioLuces]);
		format(string, 64, "v%d_DañoRuedas", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vDanioRuedas]);
		format(string, 64, "v%d_VirtualWorld", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vVirtualWorld]);
		format(string, 64, "v%d_Interior", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vInterior]);
		format(string, 64, "v%d_Maletero_1", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][0]);
		format(string, 64, "v%d_Maletero_2", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][1]);
		format(string, 64, "v%d_Maletero_3", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][2]);
		format(string, 64, "v%d_Maletero_4", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][3]);
		format(string, 64, "v%d_Maletero_5", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][4]);
		format(string, 64, "v%d_Maletero_6", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][5]);
		format(string, 64, "v%d_Maletero_7", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][6]);
		format(string, 64, "v%d_Maletero_8", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][7]);
		format(string, 64, "v%d_Maletero_9", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][8]);
		format(string, 64, "v%d_Maletero_10", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][9]);
		format(string, 64, "v%d_Maletero_11", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][10]);
		format(string, 64, "v%d_Maletero_12", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][11]);
		format(string, 64, "v%d_Maletero_13", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][12]);
		format(string, 64, "v%d_Maletero_14", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][13]);
		format(string, 64, "v%d_Maletero_15", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaletero][14]);
		format(string, 64, "v%d_Maletero_Cantidad_1", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][0]);
		format(string, 64, "v%d_Maletero_Cantidad_2", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][1]);
		format(string, 64, "v%d_Maletero_Cantidad_3", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][2]);
		format(string, 64, "v%d_Maletero_Cantidad_4", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][3]);
		format(string, 64, "v%d_Maletero_Cantidad_5", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][4]);
		format(string, 64, "v%d_Maletero_Cantidad_6", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][5]);
		format(string, 64, "v%d_Maletero_Cantidad_7", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][6]);
		format(string, 64, "v%d_Maletero_Cantidad_8", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][7]);
		format(string, 64, "v%d_Maletero_Cantidad_9", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][8]);
		format(string, 64, "v%d_Maletero_Cantidad_10", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][9]);
		format(string, 64, "v%d_Maletero_Cantidad_11", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][10]);
		format(string, 64, "v%d_Maletero_Cantidad_12", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][11]);
		format(string, 64, "v%d_Maletero_Cantidad_13", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][12]);
		format(string, 64, "v%d_Maletero_Cantidad_14", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][13]);
		format(string, 64, "v%d_Maletero_Cantidad_15", coche); INI_WriteInt(File, string, InfoVehEmp[e_id][coche][vMaleteroCantidad][14]);
    }
	INI_Close(File);
	return 1;
}

funcion CargarEmpresas()
{
	new Total_Empresas, empresa[64];
	for (new e_id = 0; e_id < sizeof(i_Empresa); e_id++)
	{
		format(empresa, 64, DATOS_EMPRESAS, e_id);
		INI_ParseFile(empresa, "CargarEmpresas_data", .bExtra = true, .extra = e_id);
		if (i_Empresa[e_id][eTipo] > 0)
		{
			Total_Empresas++;
			_EmpresaP(e_id);
			C_VehEmpresa(e_id);
		} else _Empresa2P(e_id);
	}
	printf("» Sistema de empresas cargado (%d).", Total_Empresas);
	return 1;
}

funcion crear_VehEmpresa(jugador, e_id, veh, modelo, Float: x, Float: y, Float: z, Float: angle, color1, color2, precio)
{
	if (!InfoVehEmp[e_id][veh][vModelo])
	{
		InfoVehEmp[e_id][veh][vVirtualWorld] = GetPlayerVirtualWorld(jugador);
		InfoVehEmp[e_id][veh][vInterior] = GetPlayerInterior(jugador);
		InfoVehEmp[e_id][veh][vModelo] = modelo;
		InfoVehEmp[e_id][veh][vPosicionX] = x;
		InfoVehEmp[e_id][veh][vPosicionY] = y;
		InfoVehEmp[e_id][veh][vPosicionZ] = z;
		InfoVehEmp[e_id][veh][vPosicionR] = angle;
		InfoVehEmp[e_id][veh][vPrecio] = precio;
		InfoVehEmp[e_id][veh][vColor_1] = color1;
		InfoVehEmp[e_id][veh][vColor_2] = color2;
		InfoVehEmp[e_id][veh][vGasolina] = 100;
		InfoVehEmp[e_id][veh][vVida] = 1000.0;
		new Coche = CreateVehicle(modelo, x, y, z, angle, color1, color2, -1);
		random_veh[Coche] = Coche + random(899999);
		InfoVehEmp[e_id][veh][vID] = Coche;
		SetVehicleVirtualWorld(Coche, InfoVehEmp[e_id][veh][vVirtualWorld]);
		LinkVehicleToInterior(Coche, InfoVehEmp[e_id][veh][vInterior]);
		SetVehicleMatricula(Coche);
		save_Empresa(e_id, false, veh);
		//veh = 10;
	}
	return 1;
}

funcion borrar_VehEmpresa(vid, e_id)
{
	if(InfoVehEmp[e_id][vid][vID] != INVALID_PLAYER_VEHICLE_ID)
	{
		DestroyVehicle(InfoVehEmp[e_id][vid][vID]);
		random_veh[InfoVehEmp[e_id][vid][vID]] = 0;
		InfoVehEmp[e_id][vid][vID] = INVALID_PLAYER_VEHICLE_ID;
		InfoVehEmp[e_id][vid][vModelo] = 0;
		InfoVehEmp[e_id][vid][vVida] = 1000.0;
		InfoVehEmp[e_id][vid][vPosicionX] = 0.0;
		InfoVehEmp[e_id][vid][vPosicionY] = 0.0;
		InfoVehEmp[e_id][vid][vPosicionZ] = 0.0;
		InfoVehEmp[e_id][vid][vPosicionR] = 0.0;
		InfoVehEmp[e_id][vid][vVirtualWorld] = 0;
		InfoVehEmp[e_id][vid][vInterior] = 0;
		InfoVehEmp[e_id][vid][vPrecio] = 0;
		InfoVehEmp[e_id][vid][vMaletero][0] = 0;
		InfoVehEmp[e_id][vid][vMaletero][1] = 0;
		InfoVehEmp[e_id][vid][vMaletero][2] = 0;
		InfoVehEmp[e_id][vid][vMaletero][3] = 0;
		InfoVehEmp[e_id][vid][vMaletero][4] = 0;
		InfoVehEmp[e_id][vid][vMaletero][5] = 0;
		InfoVehEmp[e_id][vid][vMaletero][6] = 0;
		InfoVehEmp[e_id][vid][vMaletero][7] = 0;
		InfoVehEmp[e_id][vid][vMaletero][8] = 0;
		InfoVehEmp[e_id][vid][vMaletero][9] = 0;
		InfoVehEmp[e_id][vid][vMaletero][10] = 0;
		InfoVehEmp[e_id][vid][vMaletero][11] = 0;
		InfoVehEmp[e_id][vid][vMaletero][12] = 0;
		InfoVehEmp[e_id][vid][vMaletero][13] = 0;
		InfoVehEmp[e_id][vid][vMaletero][14] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][0] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][1] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][2] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][3] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][4] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][5] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][6] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][7] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][8] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][9] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][10] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][11] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][12] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][13] = 0;
		InfoVehEmp[e_id][vid][vMaleteroCantidad][14] = 0;
		InfoVehEmp[e_id][vid][vGasolina] = 200;
		InfoVehEmp[e_id][vid][vColor_1] = 0;
		InfoVehEmp[e_id][vid][vColor_2] = 0;
		InfoVehEmp[e_id][vid][vDanioSuperficie] = 0;
		InfoVehEmp[e_id][vid][vDanioPuertas] = 0;
		InfoVehEmp[e_id][vid][vDanioLuces] = 0;
		InfoVehEmp[e_id][vid][vDanioRuedas] = 0;
		save_Empresa(e_id, false, vid);
    }
}
funcion _EmpresaP(e_id)
{
	new tipo = i_Empresa[e_id][eTipo];

	if (tipo == 1)
	{
		DestroyDynamicPickup(i_Empresa[e_id][eIcono]);
		i_Empresa[e_id][eIcono] = CreateDynamicPickup(19524, 1, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
	}
	else if (tipo == 2)
	{
		DestroyDynamicPickup(i_Empresa[e_id][eIcono]);
		DestroyDynamicMapIcon(i_Empresa[e_id][eMapIcon]);
		i_Empresa[e_id][eIcono] = CreateDynamicPickup(19524, 1, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
		i_Empresa[e_id][eMapIcon] = _MapIcon(i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ], 27);
	}
/*	DestroyDynamicPickup(i_Empresa[e_id][eIcono]);
	if (i_Empresa[e_id][eComprado] == 0) i_Empresa[e_id][eIcono] = CreateDynamicPickup(1272, 1, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
	else i_Empresa[e_id][eIcono] = CreateDynamicPickup(1273, 1, i_Empresa[e_id][nExteriorX], i_Empresa[e_id][nExteriorY], i_Empresa[e_id][nExteriorZ]);
*/	return 1;
}

funcion _Empresa2P(e_id)
{
/*	DestroyDynamicPickup(i_Empresa[e_id][eIcono]);
	i_Empresa[e_id][eIcono] = CreateDynamicPickup(1273, 1, -2190.7974,165.9186,58.2604);
*/	return 1;
}

funcion CargarEmpresas_data(e_id, name[], value[])
{
	INI_String("Nombre", i_Empresa[e_id][eNombre], 32);
	INI_String("Dueño", i_Empresa[e_id][eDueno], 32);
	INI_Int("Tipo", i_Empresa[e_id][eTipo]);
	INI_Int("Seguro", i_Empresa[e_id][eSeguro]);
	INI_Int("Comprado", i_Empresa[e_id][eComprado]);
	INI_Int("Telefono", i_Empresa[e_id][eTelefono]);
	INI_Float("Exterior_X", i_Empresa[e_id][eExteriorX]);
	INI_Float("Exterior_Y", i_Empresa[e_id][eExteriorY]);
	INI_Float("Exterior_Z", i_Empresa[e_id][eExteriorZ]);
	INI_Float("Exterior_R", i_Empresa[e_id][eExteriorR]);
	INI_Float("Exterior_XV", i_Empresa[e_id][eExteriorX_V]);
	INI_Float("Exterior_YV", i_Empresa[e_id][eExteriorY_V]);
	INI_Float("Interior_X", i_Empresa[e_id][eInteriorX]);
	INI_Float("Interior_Y", i_Empresa[e_id][eInteriorY]);
	INI_Float("Interior_Z", i_Empresa[e_id][eInteriorZ]);
	INI_Float("Interior_R", i_Empresa[e_id][eInteriorR]);
	INI_Int("Dinero", i_Empresa[e_id][eDinero]);
	INI_Int("Precio", i_Empresa[e_id][ePrecio]);
	INI_Int("Interior", i_Empresa[e_id][eInterior]);
	INI_Int("Empleados", i_Empresa[e_id][eMiembros]);
	INI_Int("Espacio", i_Empresa[e_id][eEspacio]);
	INI_Int("Patente", i_Empresa[e_id][e_patente]);
	new nt[32];
	for (new i = 0; i < MAX_MUEBLES_E; i++)
	{
		format(nt, 32, "Modelo_%d", i);
		INI_Int(nt, i_Empresa[e_id][eObjModel][i]);
		format(nt, 32, "PosicionX_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjPosX][i]);
		format(nt, 32, "PosicionY_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjPosY][i]);
		format(nt, 32, "PosicionZ_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjPosZ][i]);
		format(nt, 32, "RotacionX_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjRotX][i]);
		format(nt, 32, "RotacionY_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjRotY][i]);
		format(nt, 32, "RotacionZ_%d", i);
		INI_Float(nt, i_Empresa[e_id][eObjRotZ][i]);
		format(nt, 32, "Textura_%d", i);
		INI_Int(nt, i_Empresa[e_id][eTextura1][i]);
		format(nt, 32, "Textura2_%d", i);
		INI_Int(nt, i_Empresa[e_id][eTextura2][i]);
		format(nt, 32, "Textura3_%d", i);
		INI_Int(nt, i_Empresa[e_id][eTextura3][i]);
		format(nt, 32, "Textura4_%d", i);
		INI_Int(nt, i_Empresa[e_id][eTextura4][i]);
	}
	new string[128];
	for (new coche = 0; coche < 10; coche++)
	{
		format(string, 64, "v%d_IDModelo", coche); INI_Int(string, InfoVehEmp[e_id][coche][vModelo]);
		format(string, 64, "v%d_Vida", coche); INI_Float(string, InfoVehEmp[e_id][coche][vVida]);
		format(string, 64, "v%d_PosicionX", coche); INI_Float(string, InfoVehEmp[e_id][coche][vPosicionX]);
		format(string, 64, "v%d_PosicionY", coche); INI_Float(string, InfoVehEmp[e_id][coche][vPosicionY]);
		format(string, 64, "v%d_PosicionZ", coche); INI_Float(string, InfoVehEmp[e_id][coche][vPosicionZ]);
		format(string, 64, "v%d_PosicionR", coche); INI_Float(string, InfoVehEmp[e_id][coche][vPosicionR]);
		format(string, 64, "v%d_Precio", coche); INI_Int(string, InfoVehEmp[e_id][coche][vPrecio]);
		format(string, 64, "v%d_Color_1", coche); INI_Int(string, InfoVehEmp[e_id][coche][vColor_1]);
		format(string, 64, "v%d_Color_2", coche); INI_Int(string, InfoVehEmp[e_id][coche][vColor_2]);
		format(string, 64, "v%d_Gasolina", coche); INI_Int(string, InfoVehEmp[e_id][coche][vGasolina]);
		format(string, 64, "v%d_DañoSuperficie", coche); INI_Int(string, InfoVehEmp[e_id][coche][vDanioSuperficie]);
		format(string, 64, "v%d_DañoPuertas", coche); INI_Int(string, InfoVehEmp[e_id][coche][vDanioPuertas]);
		format(string, 64, "v%d_DañoLuces", coche); INI_Int(string, InfoVehEmp[e_id][coche][vDanioLuces]);
		format(string, 64, "v%d_DañoRuedas", coche); INI_Int(string, InfoVehEmp[e_id][coche][vDanioRuedas]);
		format(string, 64, "v%d_VirtualWorld", coche); INI_Int(string, InfoVehEmp[e_id][coche][vVirtualWorld]);
		format(string, 64, "v%d_Interior", coche); INI_Int(string, InfoVehEmp[e_id][coche][vInterior]);
		format(string, 64, "v%d_Maletero_1", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][0]);
		format(string, 64, "v%d_Maletero_2", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][1]);
		format(string, 64, "v%d_Maletero_3", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][2]);
		format(string, 64, "v%d_Maletero_4", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][3]);
		format(string, 64, "v%d_Maletero_5", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][4]);
		format(string, 64, "v%d_Maletero_6", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][5]);
		format(string, 64, "v%d_Maletero_7", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][6]);
		format(string, 64, "v%d_Maletero_8", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][7]);
		format(string, 64, "v%d_Maletero_9", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][8]);
		format(string, 64, "v%d_Maletero_10", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][9]);
		format(string, 64, "v%d_Maletero_11", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][10]);
		format(string, 64, "v%d_Maletero_12", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][11]);
		format(string, 64, "v%d_Maletero_13", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][12]);
		format(string, 64, "v%d_Maletero_14", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][13]);
		format(string, 64, "v%d_Maletero_15", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaletero][14]);
		format(string, 64, "v%d_Maletero_Cantidad_1", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][0]);
		format(string, 64, "v%d_Maletero_Cantidad_2", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][1]);
		format(string, 64, "v%d_Maletero_Cantidad_3", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][2]);
		format(string, 64, "v%d_Maletero_Cantidad_4", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][3]);
		format(string, 64, "v%d_Maletero_Cantidad_5", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][4]);
		format(string, 64, "v%d_Maletero_Cantidad_6", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][5]);
		format(string, 64, "v%d_Maletero_Cantidad_7", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][6]);
		format(string, 64, "v%d_Maletero_Cantidad_8", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][7]);
		format(string, 64, "v%d_Maletero_Cantidad_9", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][8]);
		format(string, 64, "v%d_Maletero_Cantidad_10", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][9]);
		format(string, 64, "v%d_Maletero_Cantidad_11", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][10]);
		format(string, 64, "v%d_Maletero_Cantidad_12", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][11]);
		format(string, 64, "v%d_Maletero_Cantidad_13", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][12]);
		format(string, 64, "v%d_Maletero_Cantidad_14", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][13]);
		format(string, 64, "v%d_Maletero_Cantidad_15", coche); INI_Int(string, InfoVehEmp[e_id][coche][vMaleteroCantidad][14]);
	}
	return 1;
}

//<=================================> funciones:
funcion split(const strsrc[], strdest[][], delimiter)
{
	new i, li, aNum, len;
	while (i <= strlen(strsrc))
	{
		if (strsrc[i] == delimiter || i == strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock Skin_(playerid, skin = 1)
{
	user[playerid][jRopa] = skin;
	SetPlayerSkin(playerid, skin);
}

stock DarDineroGC(playerid, money)
{
	SetPVarInt(playerid, "Money", GetPVarInt(playerid, "Money") + money);
	GivePlayerMoney(playerid, money);
	return 1;
}

//sistema de hambre, por: Glimma
new
bool:hunger_checked[MAX_PLAYERS],
hunger_effect[MAX_PLAYERS];

funcion verificar_hambre(playerid)
{
	new
	Float:hunger = user[playerid][jHambre],
	Float:difference,
	hunger_random = random(3),
	Float:hunger_bonus;

	switch(hunger_random)
	{
		case 0: hunger_bonus = 0.0;
		case 1: hunger_bonus = 1.0;
		case 2: hunger_bonus = 2.0;
	}
	difference = floatsub(hunger, hunger_bonus);
	if(hunger != 100.0)
	{
		if(difference > 100.0)
		{
			SendClientMessage(playerid, 0x90C3D4FF, "Llegaste al tope máximo del nivel de hambre (100).");
			user[playerid][jHambre] = 100.0;
		}
		else
		{
			user[playerid][jHambre] += hunger_bonus;
			/*new string[128];
			if(hunger != 0)
			{
				format(string, sizeof(string), "Tu nivel de hambre ha aumentado en un %.0f, dando un total de %.0f.", hunger_bonus, user[playerid][jHambre]);
				SendClientMessage(playerid, -1, string);
			}
			else
			{
				format(string, sizeof(string), "Tu nivel de hambre se mantiene en %.0f.", user[playerid][jHambre]);
				SendClientMessage(playerid, -1, string);
			}*/
		}
	}
}

// Faltaría chequear valores negativos, por el tema de vomitar.
funcion CheckHunger(playerid)
{
	if(floatcmp(user[playerid][jHambre], 10.0) == 1 && !hunger_checked[playerid])
 	{
 		hunger_effect[playerid] = SetTimerEx("HealthLoss", 60000, true, "i", playerid);
  		hunger_checked[playerid] = true;
	}
	if(floatcmp(user[playerid][jHambre], 10.0) == -1 && hunger_checked[playerid])
	{
		hunger_checked[playerid] = false;
		KillTimer(hunger_effect[playerid]);
	}
	return 1;
}

funcion HealthLoss(playerid)
{
	new Float:health = user[playerid][jSangre], Float:losthealth, Float:difference, string[128];
	losthealth = user[playerid][jHambre] / 10;
	difference = floatsub(health, losthealth);
	if(difference > 25 || health > 25.0)
	{
		_Sangre(playerid, -losthealth);
		format(string, sizeof(string), "Debes ingerir algún alimento para quitarte el hambre. Pierdes %.0f de salud. Tu salud queda en %.0f.", losthealth, difference);
		SendClientMessage(playerid, 0x90C3D4FF, string);
	}
	return 1;
}

static const objetos_interior[][] = //actualmente 655 objetos
{
	{2711, 12, "Máquina de tatuar"},
	{1514, 30, "Caja registradora"},
	{2750, 8, "Secador del pelo"},
	{2749, 5, "Laca para el pelo"},
	{14679, 80, "Escritorio de tatuajes"},
	{14662, 24, "Espejos de estudio (x2)"},
	{19146, 12, "Reflector"},
	///--------------graffitis,drogas,armas
	{1528, 8, "Graffiti A"},
	{1531, 8, "Graffiti B"},
	{18659, 8, "Graffiti C"},
	{28660, 8, "Graffiti D"},
	{18661, 8, "Graffiti E"},
	{18662, 8, "Graffiti F"},
	{18663, 8, "Graffiti G"},
	{18664, 8, "Graffiti H"},
	{18665, 8, "Graffiti I"},
	{18666, 8, "Graffiti J"},
	{18667, 8, "Graffiti K"},
	{19896, 4, "Caja cigarros"},
	{19897, 5, "Caja cigarros CK"},
	{19473, 24, "Planta de marihuana"},
	{1578, 5, "Paquete verde"},
	{1579, 5, "Paquete azul"},
	{1580, 5, "Paquete rojo"},
	{2725, 40, "Mesa de Narguile"},
	{2726, 25, "Narguile"},
	{19625, 2, "Cigarro"},
	{1485, 2, "Tabaco"},
	{2358, 16, "Caja Ammo 1"},
	{2359, 13, "Caja Ammo 2"},
	{336, 75, "Bate"},
	{339, 200, "Katana"},
	{341, 300, "Moto sierra"},
	{342, 100, "Bomba"},
	{344, 100, "Molotov"},
	{345, 200, "Misil"},
	{346, 500, "Colt .45"},
	{347, 500, "Colt .45 con silenciador"},
	{348, 500, "Eagle"},
	{349, 700, "Escopeta"},
	{350, 800, "Escopeta doble"},
	{351, 900, "Escopeta combate"},
	{352, 630, "Uzi"},
	{372, 630, "Tec"},
	{353, 850, "Mp5k"},
	{355, 900, "Ak-47"},
	{356, 1000, "M4"},
	{357, 900, "Rifle de caza"},
	{358, 1400, "Francotirador"},
	{359, 2100, "Basuka"},
	{360, 3100, "Basuka mortal"},
	{361, 1100, "Lanza llamas"},
	{362, 6100, "Minigun"},
	{370, 2200, "Jetpack"},
	{371, 30, "Mochila"},
	{373, 120, "Chaleco"},
		//------------------casino
	{1212, 5, "Dinero"},
	{1930, 5, "Fichas 1"},
	{1931, 5, "Fichas 2"},
	{1932, 5, "Fichas 3"},
	{1978, 200, "Mesa casino"},
	{1979, 120, "Ruleta casino"},
	{2188, 180, "Mesa de blackyack"},
	{2964, 350, "Mesa de pool"},
	{19474, 100, "Mesa de cartas"},
	{16151, 2200, "Juego de bar"},
	{11686, 1050, "Mini bar"},
		//----------------- baño
	{2097, 20, "Bañera sprunk"},
	{2526, 200, "Bañera"},
	{2522, 220, "Bañera 2"},
	{2516, 120, "Bañera 3"},
	{2527, 150, "Ducha"},
	{2517, 200, "Ducha 2"},
	{2525, 120, "Inodoro"},
	{2528, 150, "Inodoro 2"},
	{2514, 75, "Inodoro 3"},
	{1208, 50, "Lavadora blanca"},
	{2515, 40, "Lava manos"},
	{2518, 60, "Lava manos 2"},
	{2523, 70, "Lava manos 3"},
	{2524, 65, "Lava manos 4"},
	{11707, 8, "Toallero para baño"},
	{11709, 25, "Lavamanos para baño"},
		//---------------- mesas, sillas, sillones
	{1825, 250, "Mesa y sillas"},
	{643, 75, "Mesa y sillas"},
	{1432, 90, "Sillas + mesa"},
	{2030, 100, "Mesa de marmol"},
	{2086, 120, "Mesa de vidrio"},
	{2112, 40, "Mesa de madera A"},
	{2115, 50, "Mesa de madera B"},
	{2118, 200, "Mesa de marmol 2"},
	{2085, 170, "Mesa de vidrio 2"},
	{2762, 70, "Mesa grande"},
	{2763, 55, "Mesa pequeña"},
	{2747, 50, "Mesa pequeña"},
	{2644, 45, "Mesa pequeña"},
	{2638, 40, "Doble sillón o"},
	{2639, 25, "U Sillón o"},
	{11717, 250, "Sillon pro"},
	{2343, 20, "Silla barbero"},
	{2356, 25, "Silla escritorio 2"},
	{1715, 50, "Silla escritorio 3"},
	{1720, 20, "Silla madera 1"},
	{1714, 70, "Silla escritorio 1"},
	{1739, 30, "Silla madera 2"},
	{1811, 15, "Silla pequeña"},
	{1810, 5, "Silla oxidada"},
	{2636, 20, "Silla madera 3"},
	{2310, 10, "Silla i"},
	{2788, 20, "Silla simple"},
	{1716, 10, "Silla pequeña 2"},
	{1721, 8, "Silla pequeña 3"},
	{1805, 12, "Silla pequeña 4"},
	{2079, 20, "Silla madera 4"},
	{2120, 15, "Silla madera 5"},
	{2121, 12, "Silla roja"},
	{2096, 8, "Silla madera 6"},
	{11734, 14, "Silla amacadora"},
	{2295, 14, "Sofa suave"},
	{1768, 45, "Sofa a-3"},
	{1766, 30, "Sofa b-2"},
	{1764, 30, "Sofa c-2"},
	{1763, 25, "Sofa d-2"},
	{1761, 34, "Sofa e-3"},
	{1760, 45, "Sofa f-3"},
	{1757, 24, "Sofa g-2"},
	{1756, 32, "Sofa h-2"},
	{1753, 40, "Sofa i-3"},
	{1713, 37, "Sofa j-2"},
	{1712, 20, "Sofa k-2"},
	{1710, 40, "Sofa l-4"},
	{1709, 75, "Sofa m-6"},
	{1707, 30, "Sofa n-2"},
	{1706, 40, "Sofa ñ-2"},
	{1703, 20, "Sofa o-2"},
	{2572, 65, "2 sofas + mesa"},
	{2571, 79, "2 sofas + mesa"},
	{1754, 15, "Sillón 1"},
	{1755, 17, "Sillón 2"},
	{1758, 16, "Sillón 3"},
	{1759, 14, "Sillón 4"},
	{1762, 15, "Sillón 5"},
	{1765, 18, "Sillón 6"},
	{1769, 20, "Sillón 7"},
	{11689, 50, "Sillón ABC"},
	{11690, 42, "Mesa"},
	{11691, 40, "Mesa 2"},
	{11688, 40, "Parlante"},
	{11687, 15, "Banco"},
		//--------------- juegos de cuarto
	{2562, 190, "Juego de cuarto h"},
	{2563, 250, "Cama h"},
	{2564, 500, "Doble cama h"},
	{2566, 300, "Cama e"},
	{2565, 600, "Doble Cama e"},
	{1700, 112, "Cama rosada"},
	{1701, 125, "Cama de tela"},
	{1793, 80, "Cama blanca p"},
	{1794, 150, "Cama madera"},
	{1795, 60, "Cama pequeña a"},
	{1796, 75, "Cama invidual"},
	{1797, 98, "Cama pequeña e"},
	{1798, 120, "Cama pequeña b"},
	{1799, 137, "Cama pequeña m"},
	{1800, 40, "Cama prisión"},
	{2090, 140, "Cama alta"},
	{2298, 100, "Cama azul"},
	{2299, 120, "Cama marron"},
	{2300, 150, "Cama amarilla + e"},
	{2301, 139, "Cama morada a"},
	{2302, 104, "Cama madera azul"},
	{2025, 40, "Armario"},
	{2167, 60, "Armario 2"},
	{2576, 80, "Armario 3"},
	{2689, 20, "Ropa gris"},
	{2704, 20, "Ropa negro con naranja"},
	{2705, 20, "Ropa blanca"},
	{2706, 20, "Ropa roja"},
	{2389, 25, "Chaquetas blancas + rojo"},
	{2396, 24, "Chaquetetas negras"},
	{2397, 21, "Pantalones gris"},
	{2398, 20, "Monos azules"},
	{2399, 26, "Chaquetas R gris"},
	{2401, 19, "Monos rojos"},
	{2390, 15, "Monos verdes"},
	{2383, 23, "Ropa amarilla"},
	{2374, 21, "Camisas de cuadro azul"},
	{2399, 22, "Franelas R gris"},
	{2382, 18, "Pantalones"},
	{2387, 30, "Pantalones 2"},
	{2392, 25, "Pantalones 3"},
	{2381, 26, "Monos"},
	{2394, 26, "Camisas variada"},
	{1985, 35, "Bolsa de boxeo"},
	{16779, 15, "Ventilador techo"},
	{2375, 149, "Estante de ropa ZIP"},
	{2708, 80, "Estante vacío"},
	{2403, 400, "Estante gigante vacío"},
	{2161, 20, "Estanteria"},
	{2467, 25, "Estanteria cristal A"},
	{2385, 35, "Estanteria cristal B"},
	{2211, 15, "Estanteria cristal C"},
	{2210, 25, "Estanteria cristal D"},
	{2625, 24, "Estante vacío 2"},
	{1744, 10, "Estante"},
	{1742, 40, "Mueble + libros"},
	{2108, 12, "Lampara A"},
	{2076, 12, "Lampara B"},
	{2075, 12, "Lampara C"},
	{2074, 12, "Lampara D"},
	{2073, 12, "Lampara E"},
	{2072, 12, "Lampara F"},
	{2071, 12, "Lampara G"},
	{2069, 12, "Lampara H"},
	{2026, 12, "Lampara I"},
	{2023, 12, "Lampara J"},
	{1734, 12, "Lampara K"},
	{1731, 12, "Lampara L"},
	{2197, 21, "Gavetero oficina"},
	{2323, 20, "Mesa madera"},
	{2180, 18, "Mesa madera 2"},
	{911, 17, "Gavetero de madera"},
		//------------- cocina
	{19916, 70, "Nevera Z"},
	{2131, 80, "Doble cajon A-1"},
	{2132, 120, "Fregadera A-1"},
	{2133, 70, "Cajon invidiual A-1"},
	{2134, 56, "Horno A-1"},
	{2341, 40, "Parte rincón A-1"},
	{2141, 200, "Nevera A-1"},
	{2013, 120, "Fregadera E-1"},
	{2014, 80, "Parte Coc E-1"},
	{2015, 75, "Parte Coc E-2"},
	{2016, 94, "Parte Coc E-3"},
	{2017, 150, "Horno E-1"},
	{2018, 127, "Lavadora E-1"},
	{2019, 100, "Parte Coc E-4"},
	{2022, 68, "Parte rincón E-1"},
	{2127, 120, "Doble cajon Y-1"},
	{2128, 170, "Nevera Y-1"},
	{2129, 100, "Parte Coc Y-1"},
	{2130, 134, "Fregadera Y-1"},
	{2294, 200, "Horno + ext Y-1"},
	{2135, 170, "Horno + ext B-1"},
	{2136, 140, "Fregadera B-1"},
	{2137, 127, "Parte Coc B-1"},
	{2138, 105, "Parte Coc B-2"},
	{2139, 86, "Parte Coc B-3"},
	{2140, 70, "Cajon B-1"},
	{2336, 70, "Fregadera M-1"},
	{2160, 75, "Fregadera M-2"},
	{2158, 60, "Cajon M-1"},
	{2159, 86, "Parte Coc M-1"},
	{2157, 90, "Parte Coc M-2"},
	{2156, 95, "Parte Coc M-3"},
	{19590, 10, "Cuchillo Z"},
	{19583, 7, "Cuchillo P"},
	{1665, 4, "Cenicero 1"},
	{1510, 5, "Cenicero 2"},
	{2149, 12, "Microondas"},
	{2421, 18, "Microondas 2"},
	{19581, 7, "Sartén pequeño"},
	{19584, 8, "Olla de cocina"},
	{19586, 5, "Espátula de cocina"},
	{19585, 10, "Sartén de cocina"},
	{2822, 6, "Platos A"},
	{2820, 6, "Platos B"},
	{2832, 6, "Platos C"},
	{2848, 6, "Platos D"},
	{2821, 5, "Caja cereal"},
	{2002, 40, "Filtro de agua"},
	{1808, 32, "Filtro de agua 2"},
	{11743, 20, "Cafetera"},
	{11744, 4, "Plato"},
		//comida
	{19580, 5, "Pizza"},
	{19579, 2, "Pan"},
	{19578, 2, "Banana"},
	{19577, 2, "Tomate"},
	{19575, 2, "Manzana"},
	{19574, 2, "Naranja"},
	{19573, 3, "Carbon"},
	{19572, 12, "Sixpack"},
	{2212, 3, "Caja de Hambur"},
	{19571, 6, "Caja de pizza"},
	{2838, 8, "Caja de pizza 2"},
	{19570, 3, "Leche envasada"},
	{19569, 3, "Leche envasada en carton"},
	{19568, 3, "Comida empaquetada"},
	{19567, 3, "Chocolate M"},
	{19566, 3, "Fishy Fingers"},
	{19565, 3, "Ice cream"},
	{19564, 2, "Jugo de manzana"},
	{19563, 2, "Jugo de naranja"},
	{19562, 4, "Cereales 2"},
	{19561, 4, "Cereales 1"},
	{19094, 3, "Hamburguesa A"},
	{19811, 4, "Hamburguesa B"},
	{2703, 3, "Hamburguesa C"},
	{2768, 4, "Hamburguesa D"},
	{2702, 1, "Pizza p"},
	{11722, 4, "Envase de ketchup"},
	{11723, 4, "Envase de mostaza"},
	{1644, 5, "Mostaza"},
	{19835, 4, "Vaso de café"},
	{19824, 5, "Botellas A"},
	{19823, 6, "Botellas B"},
	{19822, 4, "Botellas C"},
	{19821, 5, "Botellas D"},
	{19820, 4, "Botellas E"},
	{1551, 5, "Botellas F"},
	{1520, 6, "Botellas G"},
	{1517, 4, "Botellas H"},
	{1512, 3, "Botellas I"},
	{19819, 5, "Copas A"},
	{19818, 4, "Copas B"},
	{1667, 3, "Copas C"},
	{2769, 7, "Burrito CB"},
		//---------------- electrónica
	{19623, 25, "Cámara de fotos"},
	{19893, 30, "Laptop abierta"},
	{19894, 30, "Laptop cerrada"},
	{2165, 50, "PC + Escritorio"},
	{2028, 20, "Consola CJD500"},
	{1718, 12, "Consola nintendo"},
	{1719, 15, "Consola play"},
	{2296, 128, "TV con estante"},
	{2202, 40, "Impresora"},
	{2313, 40, "Mesa + DVD Player"},
	{2627, 60, "Cinta para correr"},
	{2630, 50, "Bicicleta Fija"},
	{2872, 320, "Máquina de juegos A"},
	{2778, 320, "Máquina de juegos B"},
	{2779, 320, "Máquina de juegos C"},
	{19317, 99, "Guitarra eléctrica A"},
	{19318, 99, "Guitarra eléctrica B"},
	{19319, 99, "Guitarra eléctrica C"},
	{19608, 1000, "Lugar de música"},
	{19609, 500, "Bateria"},
	{19610, 14, "Microfono"},
	{19611, 20, "Sostiene Microfono"},
	{19612, 40, "Planta M-1p"},
	{19615, 55, "Planta M-1a"},
	{19616, 60, "Parlante R"},
	{19617, 22, "Disco dorado R"},
	{19614, 75, "Amplificador R"},
	{19613, 80, "Amplificador G"},
	{19787, 450, "TV PLASMA"},
	{2312, 97, "Televisor A"},
	{2316, 110, "Televisor B"},
	{2317, 60, "Televisor C"},
	{2322, 70, "Televisor D"},
	{2596, 120, "Televisor E"},
	{2595, 110, "Televisor F"},
	{14532, 90, "Televisor G"},
	{1747, 40, "Televisor H"},
	{1748, 43, "Televisor I"},
	{1749, 35, "Televisor J"},
	{1751, 69, "Televisor K"},
	{1752, 90, "Televisor L"},
	{1791, 95, "Televisor M"},
	{1792, 114, "Televisor N"},
	{1782, 30, "DVD blanco"},
	{1783, 40, "DVD negro"},
	{1788, 50, "DVD negro 2"},
	{1790, 45, "DVD gris"},
	{1785, 60, "Planta DVD"},
	{2103, 27, "Estereo viejo"},
	{2226, 40, "Estereo nuevo"},
	{1809, 20, "Equipo de música A"},
	{1839, 10, "Equipo de música B"},
	{1840, 12, "Parlante"},
	{1841, 12, "Parlante 2"},
	{2102, 17, "Parlantes"},
	{2229, 28, "Parlante grande"},
	{2233, 19, "Parlante p-b"},
	{2230, 24, "Parlante marron"},
	{2100, 140, "Equipo sonido"},
		//------------ accesorios
	{19555, 5, "Guante Box-1"},
	{19556, 5, "Guante Box-2"},
	{1550, 500, "Bolso con dinero"},
	{19878, 12, "Skate"},
	{3002, 5, "Bola 1 amarilla"},
	{3100, 5, "Bola 2 azul"},
	{3101, 5, "Bola 3 roja"},
	{3102, 5, "Bola 4 morada"},
	{3103, 5, "Bola 5 naranja"},
	{3104, 5, "Bola 6 verde"},
	{3105, 5, "Bola 7 ladrillo"},
	{3106, 5, "Bola 8 negra"},
	{3004, 12, "Palo de pool"},
	{2114, 6, "Balón de basket"},
	{2816, 4, "Revista"},
	{2843, 3, "Ropa tirada"},
	{2845, 4, "Ropa tirada 2"},
	{2846, 5, "Ropa tirada 3"},
	{2844, 4, "Ropa tirada 4"},
	{2499, 4, "Cometa"},
	{1649, 130, "Vidrio"},
	{1828, 23, "Alfombra Leopardo"},
	{2815, 15, "Alfombra A"},
	{2818, 16, "Alfombra B"},
	{2817, 15, "Alfombra C"},
	{2842, 13, "Alfombra D"},
	{2847, 13, "Alfombra E"},
	{19166, 40, "Cuadro de San Andreas"},
	{19172, 40, "Cuadro de Santa Maria B."},
	{19173, 40, "Cuadro de San Francisco"},
	{19174, 40, "Cuadro del Bosque LS"},
	{19175, 40, "Cuadro de San Francisco 2"},
	{2289, 20, "Cuadro de ciudad"},
	{2288, 20, "Cuadro de tabla"},
	{2287, 20, "Cuadro de barcos"},
	{2286, 20, "Cuadro de barco grande"},
	{2284, 20, "Cuadro de iglesia"},
	{2282, 20, "Cuadro de bosque"},
	{2281, 20, "Cuadro de bosque 2"},
	{2280, 20, "Cuadro de bosque 3"},
	{2279, 20, "Cuadro de bosque 4"},
	{2277, 20, "Cuadro de gato"},
	{2276, 20, "Cuadro de puente"},
	{2275, 20, "Cuadro de frutas"},
	{2274, 20, "Cuadro de flor"},
	{2273, 20, "Cuadro de flores"},
	{2271, 20, "Cuadro de blanco"},
	{2270, 20, "Cuadro de hojas"},
	{2269, 20, "Cuadro de lago"},
	{2268, 20, "Cuadro de gato 2"},
	{2267, 20, "Cuadro grande de barco"},
	{2266, 20, "Cuadro de ciudad SF"},
	{2265, 20, "Cuadro de desierto"},
	{2264, 20, "Cuadro de playa"},
	{2262, 20, "Cuadro de ciudad SF"},
	{2261, 20, "Cuadro de puente SF"},
	{2259, 20, "Cuadro de slenderman"},
	{2258, 20, "Cuadro de ciudad LA"},
	{2257, 20, "Cuadro de colores"},
	{2256, 20, "Cuadro de palmeras"},
	{2255, 21, "Cuadro de puta"},
	{19618, 20, "Caja fuerte A"},
	{19619, 12, "Caja fuerte P"},
	{2332, 40, "Caja fuerte C"},
		//
	{628, 9, "Maseta A"},
	{630, 9, "Maseta B"},
	{638, 20, "Maseta C"},
	{949, 12, "Maseta D"},
	{1360, 34, "Maseta E"},
	{1361, 23, "Maseta F"},
	{15038, 9, "Maseta G"},
	{2253, 12, "Maseta 1"},
	{2252, 9, "Maseta 2"},
	{2244, 6, "Maseta 8"},
	{2251, 15, "Florero 1"},
	{2250, 13, "Florero 2"},
	{2249, 12, "Florero 3"},
	{2247, 15, "Florero 4"},
	{2240, 20, "Florero rojo"},
	{1736, 15, "Cabeza de animal"},
	{1962, 100, "Disco azul"},
	{1961, 100, "Disco verde"},
	{1960, 100, "Disco morado"},
	{11712, 4, "Cruz religiosa"},
	{1409, 10, "Tacho de basura"},
	{11725, 23, "Chimenea"},
	{11726, 25, "Candelabro de techo"},
	{11728, 25, "Teléfono de pared"},
	{11733, 13, "Caballito"},
	{11738, 12, "Botiquín"},
	{11745, 23, "Bolso/Maleta"},
	{19814, 3, "Enchufes de pared"},
	{19813, 4, "Enchufes de pared 2"},
	{1778, 21, "Trapeador + cubeta"},
	{19808, 4, "Teclado de PC"},
	{19807, 3, "Teléfono de escritorio"},
	{19806, 4, "Araña(Lámpara de techo)"},
	{19804, 5, "Candado"},
	{19792, 2, "Tarjeta de débito"},
	{19825, 9, "Reloj de pared"},
	{19632, 5, "Leña encendida"},
	{2670, 3, "Basurilla A1"},
	{2671, 3, "Basurilla B1"},
	{2672, 3, "Basurilla Z1"},
	{2673, 3, "Basurilla Y1"},
	{2674, 3, "Basurilla E1"},
		//----------------puertas, ventanas
	{1502, 30, "Puerta madera"},
	{1491, 35, "Puerta madera 2"},
	{1492, 23, "Puerta madera v"},
	{1494, 25, "Puerta madera n"},
	{1498, 20, "Puerta blanca"},
	{1536, 40, "Puerta negra"},
	{19859, 50, "Puerta verde+negro"},
	{1535, 15, "Puerta rosa"},
	{19860, 20, "Puerta azul"},
	{1561, 50, "Puerta 24/7"},
	{19875, 45, "Puerta blue"},
		//-----------------varios tipos de negocios
	{19621, 4, "Aceite"},
	{19622, 4, "Escoba"},
	{19624, 7, "Maleta marron"},
	{19626, 5, "Pala"},
	{19627, 4, "Llave"},
	{19592, 6, "Canasta de compra"},
	{11706, 15, "Bote de basura"},
	{2714, 8, "Cartel Open"},
	{11710, 11, "Fire Exit"},
	{11711, 10, "Exit"},
	{2614, 14, "Banderas EE.UU"},
	{2047, 9, "Fiche LS CDF"},
	{2048, 8, "Fiche Guerra"},
	{2691, 25, "Fiche Base5"},
	{2695, 15, "Fiche P Base5"},
	{2696, 15, "Fiche P-2 Base5"},
	{2662, 15, "Fiche BOBO"},
	{2659, 23, "Fiche G BOBO"},
	{2697, 15, "Fiche Train Hard"},
	{19327, 15, "Fiche Cok o Pops"},
	{19328, 20, "Fiche murky"},
	{19329, 10, "Fiche 24/7"},
	{1775, 200, "Máquina de sprunk"},
	{2713, 4, "Retrete"},
	{918, 15, "Bombona"},
	{1650, 12, "Bidón de gasolina"},
	{2040, 6, "Caja de munición"},
	{19326, 7, "3 for 2"},
	{1984, 150, "Caja registradora"},
	{2623, 350, "Registradora PRO"},
	{19640, 20, "Estante vacío"},
	{1988, 90, "Estante de cereales"},
	{1983, 90, "Estante de cereales 2"},
	{2871, 70, "Estante de jugos"},
	{1842, 120, "Congelador"},
	{1884, 140, "Estante de productos"},
	{1848, 190, "Estante de productos 2"},
	{1991, 120, "Estante de licores"},
	{1996, 120, "Estante de licores 2"},
	{2063, 40, "Estante de hierro"},
	{1989, 25, "Estante pequeño vacío"},
	{2361, 23, "Congelador RD"},
	{2682, 8, "Menú pizzería"},
	{2645, 12, "Menú pizzería 2"},
	{2453, 24, "Movedor de pizza"},
	{2646, 15, "Anuncio pizza TS"},
	{2668, 14, "Anuncio pizza $10"},
	{2665, 25, "Anuncio pizza $5"},
	{2427, 40, "Dispensadora Refres"},
	{2451, 50, "Freidora"},
	{2417, 45, "Freidora 2"},
	{2415, 35, "Freidora 3"},
	{19558, 5, "Gorra de pizza"},
	{2770, 15, "Deposito de basura CB"},
	{2766, 12, "Anuncio CB"},
	{2765, 20, "Anuncio CB 2"},
	{2424, 15, "Meson CB"},
	{2422, 25, "PC CB"},
	{2730, 15, "Cartel de ropa"},
	{2729, 14, "Cartel de ropa 2"},
	{2720, 12, "Cartel de ropa 3"},
	{2722, 14, "Cartel de ropa 4"},
	{2731, 12, "Cartel de ropa 5"},
	{2656, 12, "Anuncio PRO"},
	{2732, 14, "Anuncio ZIP"},
	{2733, 13, "Anuncio ZIP 2"},
	{2734, 14, "Anuncio ZIP 3"},
	{2735, 15, "Anuncio ZIP 4"},
	{2371, 12, "Sostenedor"},
	{2372, 13, "Sostenedor 2"},
	{2373, 14, "Sostenedor 3"},
	{2698, 14, "Cajas pro + estante"},
	{2622, 15, "Sostendor Prolaps"},
	{2654, 7, "Cajas de zapatos"},
	{2694, 8, "Caja de zapato"},
	{2652, 12, "Cajas Pro"},
	{2583, 40, "Revistas XXX"},
	{2582, 40, "Revistas Hardcore"},
	{2578, 23, "Revistas XXX + estante"},
	{2585, 23, "Juguetes + estante"},
	{2581, 34, "Estante de peliculas VHS"},
		//-----------------garaje / mecánica
	{1558, 6, "Caja marron"},
	{2893, 25, "Metal"},
	{2611, 20, "Tabla azul de notas"},
	{2915, 13, "Par de mancuernas"},
	{2418, 24, "Mesa de metal"},
	{1327, 7, "Caucho"},
	{19815, 30, "Tabla de herramientas"},
	{19816, 14, "Óxido nitroso"},
	{19817, 500, "Subida de vehículo"},
	{19898, 4, "Mancha"},
	{19899, 40, "Estante rojo"},
	{19900, 19, "Caja de herramientas"},
	{19903, 35, "Toma de aire"},
	{19904, 7, "Chaleco naranja"},
	{19906, 100, "Portón"},
	{19861, 120, "Portón blanco"},
	{3096, 280, "Llave brillante"},
	{925, 140, "Estante con tanques"},
	{2567, 200, "Estante con cajas"},
	{1073, 1500, "Shadow Wheels"},
	{1074, 1500, "Mega Wheels"},
	{1075, 1500, "Rimshine Wheels"},
	{1076, 1500, "Wires Wheels"},
	{1077, 1500, "Classic Wheels"},
	{1078, 1500, "Twist Wheels"},
	{1079, 1500, "Cutter Wheels"},
	{1080, 1500, "Stitch Wheels"},
	{1081, 1500, "Grove Wheels"},
	{1082, 1500, "Import Wheels"},
	{1083, 2200, "Dollar Wheels"},
	{1084, 1000, "Trance Wheels"},
	{1085, 1000, "Atomic Wheels"},
	{14826, 1200, "Vehículo guardado"},
	{10282, 2080, "Juego de taller completo"},
	{3761, 131, "Estante con cajitas"},
	{14877, 19, "Escalera"},
	{14446, 80, "Cama grande"},
	{2855, 9, "Revistas"},
	{11724, 110, "Chimenea"},
	{2608, 25, "Estante con libros"},
	{19924, 70, "Objeto de cocina"},
	{2184, 30, "Mesa madera xd"},
	{3034, 25, "Ventana negra"},
	{2604, 50, "Escritorio con libros"},
		//------------------paredes,marcos
	{19128, 1500, "Pista de color"},
	{19354, 120, "Pared media negra"},
	{19355, 120, "Pared media gris"},
	{19356, 120, "Pared media madera"},
	{19357, 120, "Pared media blanca"},
	{19358, 120, "Pared media blanca negro"},
	{19360, 120, "Pared media naranja"},
	{19361, 120, "Pared media naranja me"},
	{19364, 120, "Pared media ladron"},
	{19367, 120, "Pared media azul"},
	{19365, 120, "Pared media azul me"},
	{19369, 120, "Pared media gris me"},
	{19384, 35, "Marco puerta negro"},
	{19385, 35, "Marco puerta gris"},
	{19386, 35, "Marco puerta madera"},
	{19387, 35, "Marco puerta blanco"},
	{19388, 35, "Marco puerta blanca negra"},
	{19390, 35, "Marco puerta naranja me"},
	{19393, 35, "Marco puerta ladron"},
	{19395, 35, "Marco puerta azul"},
	{19394, 35, "Marco puerta azul me"},
	{19397, 35, "Marco puerta gris me"},
	{19400, 40, "Marco ventana negro"},
	{19401, 40, "Marco ventana gris"},
	{19402, 40, "Marco ventana madera"},
	{19403, 40, "Marco ventana blanco"},
	{19404, 40, "Marco ventana blanca negra"},
	{19406, 40, "Marco ventana naranja"},
	{19407, 40, "Marco ventana naranja me"},
	{19410, 40, "Marco ventana ladron"},
	{19413, 40, "Marco ventana azul"},
	{19411, 40, "Marco ventana azul me"},
	{19415, 40, "Marco ventana gris me"},
	{19427, 30, "Pared chica negra"},
	{19428, 30, "Pared chica gris"},
	{19429, 30, "Pared chica madera"},
	{19430, 30, "Pared chica blanca"},
	{19431, 30, "Pared chica negra blanca"},
	{19433, 30, "Pared chica naranja"},
	{19434, 30, "Pared chica naranja me"},
	{194374, 30, "Pared chica ladron"},
	{194404, 30, "Pared chica azul"},
	{194384, 30, "Pared chica azul me"},
	{194424, 30, "Pared chica gris me"},
	{19446, 250, "Pared grande negra"},
	{19447, 250, "Pared grande gris"},
	{19448, 250, "Pared grande madera"},
	{19449, 250, "Pared grande blanca"},
	{19450, 250, "Pared grande blanca negra"},
	{19452, 250, "Pared grande naranja"},
	{19453, 250, "Pared grande naranja me"},
	{19456, 250, "Pared grande ladron"},
	{19459, 250, "Pared grande azul"},
	{19457, 250, "Pared grande azul me"},
	{19461, 250, "Pared grande gris me"}
};

enum e_TEXTURE_DATA
{
	tName [22],
	tModelID,
	tTXD [18],
	tTexture [20],
	tColor
}

static const TextureData [][e_TEXTURE_DATA] =
{
	{"Por defecto", 	-1, 	"none",			"none", 			0},
	{"Negro (Opaco)", 	-1, 	"none", 		"none", 			0xFF000000},
	{"Rojo", 			-1, 	"none", 		"none", 			0xFFFB0000},
	{"Azul", 			-1, 	"none", 		"none", 			0xFF535FE6},
	{"Amarillo", 		-1, 	"none", 		"none", 			0xFFFFF301},
	{"Rojo", 			-1, 	"none", 		"none", 			0xFFFB0000},
	{"Manta 1", 		2299, 	"cj_s_beds", 	"CJ_MATRESS2", 		0},
	{"Manta 2", 		2299, 	"cj_s_beds", 	"CJ_MATRESS3", 		0},
	{"Manta 3", 		1755, 	"cj_sofa", 		"CJ_FAB2", 			0},
	{"Manta 4", 		1755, 	"cj_sofa", 		"CJ_TARTAN", 		0},
	{"Manta 5", 		1755, 	"cj_sofa", 		"CJ_FAB4", 			0},
	{"Manta 6", 		1755, 	"cj_sofa", 		"CJ_FAB1", 			0},
	{"Madera 1", 		19375, 	"all_walls", 	"mp_furn_floor", 	0}, // Seca
	{"Madera 2", 		19375, 	"all_walls", 	"mp_diner_woodwall",0}, // Barnizada
	{"Madera 3", 		2030, 	"cj_tables", 	"cj_wood1", 		0}, // clarita
	{"Madera 4", 		2030, 	"cj_tables", 	"cj_lightwood", 	0}, // 19375
	{"Madera 5", 		2030, 	"cj_tables", 	"cj_wood6", 		0}, // nueva
	{"Marmol 1", 		11511, 	"des_nw", 		"des_ranchwall1", 	0},
	{"Marmol 2", 		15033, 	"vegassavesmal","AH_flroortile4", 	0},
	{"Marmol 3",		2030, 	"cj_tables", 	"marble1", 			0},
	{"Rallado 1", 		14718, 	"lasmall1int2", "burglry_wall7", 	0},
	{"Rallado 2", 		14707, 	"labig3int2", 	"GB_mug01", 		0},
	{"Alfombra roja", 	14707, 	"labig3int2", 	"HS2_3Carpet1", 	0},
	{"Alfombra celeste",14707, 	"labig3int2", 	"HS2_3Wall10", 		0},
	{"Puerta 1",		1557, 	"dave_door_2b", "miragedoor1_256", 	0},
	{"Puerta 2",		1536, 	"ext_doors2", 	"clubdoor1_256", 	0},
	{"Puerta 3",		1536, 	"ext_doors2", 	"flat_door01", 		0},
	{"Puerta 4",		1536, 	"ext_doors2", 	"CJ_WOODDOOR4", 	0},
	{"Puerta 5",		1536, 	"ext_doors2", 	"CJ_SCOR_DOOR", 	0},
	{"Puerta 6",		2924, 	"crash3doorx", 	"villagreen128256", 0},
	{"Puerta 7",		2946, 	"sw_doors", 	"bevdoor03_law", 	0},
	{"Puerta 8",		14707, 	"labig3int2", 	"aptdoor01_int", 	0},
	{"Cuadriculado", 	14669, 	"711c", 		"bwtilebroth", 		0},
	{"Piedra", 			6134, 	"venice_law", 	"stonewall_la", 	0},
	{"Ladrillo", 		11450,  "des_nwtown", 	"des_brick1", 		0},
	{"Floreado", 		2030,  	"cj_tables", 	"cj_floral",		0},
	{"Fórmica", 		2030,  	"cj_tables", 	"formica1", 		0},
	{"Metálico", 		1735,  	"cj_tv_stand", 	"cj_steel", 		0},
	{"Cuadriculado2", 	16150,  "ufo_bar", 		"dinerfloor01_128", 0},
	{"Piedra2", 		4600, 	"theatrelan2", 	"gm_labuld2_b", 	0},
	{"Agua", 			3947, 	"rczero_track", "waterclear256", 	0},
	{"Ladrillo2", 		8675,   "wddngchpl02", 	"shingles6", 		0},
	{"Metálico2", 		10932,  "station_sfse", "ws_stationfloor", 	0}
};

#define GetMuebleTextureName(%0) 	TextureData[%0][tName]
#define GetMuebleTextureModelID(%0) TextureData[%0][tModelID]
#define GetMuebleTextureTXD(%0) 	TextureData[%0][tTXD]
#define GetMuebleTextureTexture(%0) TextureData[%0][tTexture]
#define GetMuebleTextureColor(%0)   TextureData[%0][tColor]

funcion SPEC_SetPlayerVirtualWorld(playerid, vw)
{
	SetPlayerVirtualWorld(playerid, vw);
	if(vw == 0)
	{
		DentroNegocio[playerid] = -1;
		DentroAlmacen[playerid] = -1;
		DentroCasa[playerid] = -1;
		DentroEmpresa[playerid] = -1;
		DentroGarage[playerid] = -1;
	}
	//- Empresas
	if(EmpresaActual[playerid] != INVALID_CASA_ID)
	{
		Loop(m, MAX_MUEBLES_E, 0)
		{
	        if(OBJ_MuebleE[playerid][m] != INVALID_OBJECT_ID)
			{
				DestroyPlayerObject(playerid, OBJ_MuebleE[playerid][m]);
	            OBJ_MuebleE[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}
	if(666 <= vw < 666+MAX_EMPRESAS) //Cargar Muebles
	{
		new e_id = vw-666;
		Loop(m, MAX_MUEBLES_E, 0)
		{
			if(i_Empresa[e_id][eObjPosX][m] != 0 && i_Empresa[e_id][eObjPosY][m] != 0 && i_Empresa[e_id][eObjPosX][m] != 0)
			{
				OBJ_MuebleE[playerid][m] = CreatePlayerObject(playerid,  i_Empresa[e_id][eObjModel][m],
    			i_Empresa[e_id][eObjPosX][m], i_Empresa[e_id][eObjPosY][m], i_Empresa[e_id][eObjPosZ][m],
    			i_Empresa[e_id][eObjRotX][m], i_Empresa[e_id][eObjRotY][m], i_Empresa[e_id][eObjRotZ][m]);

				if(i_Empresa[e_id][eTextura1][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleE[playerid][m], 0, GetMuebleTextureModelID(i_Empresa[e_id][eTextura1][m]), GetMuebleTextureTXD(i_Empresa[e_id][eTextura1][m]), GetMuebleTextureTexture(i_Empresa[e_id][eTextura1][m]), GetMuebleTextureColor(i_Empresa[e_id][eTextura1][m]));
				if(i_Empresa[e_id][eTextura2][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleE[playerid][m], 1, GetMuebleTextureModelID(i_Empresa[e_id][eTextura2][m]), GetMuebleTextureTXD(i_Empresa[e_id][eTextura2][m]), GetMuebleTextureTexture(i_Empresa[e_id][eTextura2][m]), GetMuebleTextureColor(i_Empresa[e_id][eTextura2][m]));
				if(i_Empresa[e_id][eTextura3][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleE[playerid][m], 2, GetMuebleTextureModelID(i_Empresa[e_id][eTextura3][m]), GetMuebleTextureTXD(i_Empresa[e_id][eTextura3][m]), GetMuebleTextureTexture(i_Empresa[e_id][eTextura3][m]), GetMuebleTextureColor(i_Empresa[e_id][eTextura3][m]));
				if(i_Empresa[e_id][eTextura4][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleE[playerid][m], 3, GetMuebleTextureModelID(i_Empresa[e_id][eTextura4][m]), GetMuebleTextureTXD(i_Empresa[e_id][eTextura4][m]), GetMuebleTextureTexture(i_Empresa[e_id][eTextura4][m]), GetMuebleTextureColor(i_Empresa[e_id][eTextura4][m]));
			}
		}
		EmpresaActual[playerid] = e_id;
	}
	else { EmpresaActual[playerid] = INVALID_CASA_ID; }
	//- Casas
	if(CasaActual[playerid] != INVALID_CASA_ID)
	{
		Loop(m, MAX_MUEBLES_C, 0)
		{
	        if(OBJ_MuebleC[playerid][m] != INVALID_OBJECT_ID)
			{
				DestroyPlayerObject(playerid, OBJ_MuebleC[playerid][m]);
	            OBJ_MuebleC[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}
	if(6000 <= vw < 6000+MAX_CASAS) //Cargar Muebles
	{
	    new cid = vw-6000;
		Loop(m, MAX_MUEBLES_C, 0)
		{
			if(i_Casa[cid][cObjPosX][m] != 0 && i_Casa[cid][cObjPosY][m] != 0 && i_Casa[cid][cObjPosX][m] != 0)
			{
				OBJ_MuebleC[playerid][m] = CreatePlayerObject(playerid,  i_Casa[cid][cObjModel][m],
    			i_Casa[cid][cObjPosX][m], i_Casa[cid][cObjPosY][m], i_Casa[cid][cObjPosZ][m],
    			i_Casa[cid][cObjRotX][m], i_Casa[cid][cObjRotY][m], i_Casa[cid][cObjRotZ][m]);

				if(i_Casa[cid][cTextura1][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleC[playerid][m], 0, GetMuebleTextureModelID(i_Casa[cid][cTextura1][m]), GetMuebleTextureTXD(i_Casa[cid][cTextura1][m]), GetMuebleTextureTexture(i_Casa[cid][cTextura1][m]), GetMuebleTextureColor(i_Casa[cid][cTextura1][m]));
				if(i_Casa[cid][cTextura2][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleC[playerid][m], 1, GetMuebleTextureModelID(i_Casa[cid][cTextura2][m]), GetMuebleTextureTXD(i_Casa[cid][cTextura2][m]), GetMuebleTextureTexture(i_Casa[cid][cTextura2][m]), GetMuebleTextureColor(i_Casa[cid][cTextura2][m]));
				if(i_Casa[cid][cTextura3][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleC[playerid][m], 2, GetMuebleTextureModelID(i_Casa[cid][cTextura3][m]), GetMuebleTextureTXD(i_Casa[cid][cTextura3][m]), GetMuebleTextureTexture(i_Casa[cid][cTextura3][m]), GetMuebleTextureColor(i_Casa[cid][cTextura3][m]));
				if(i_Casa[cid][cTextura4][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleC[playerid][m], 3, GetMuebleTextureModelID(i_Casa[cid][cTextura4][m]), GetMuebleTextureTXD(i_Casa[cid][cTextura4][m]), GetMuebleTextureTexture(i_Casa[cid][cTextura4][m]), GetMuebleTextureColor(i_Casa[cid][cTextura4][m]));
			}
		}
		CasaActual[playerid] = cid;
	}
	else { CasaActual[playerid] = INVALID_CASA_ID; }
	//- Negocios
	if(NegocioActual[playerid] != INVALID_NEGOCIO_ID) {
		Loop(m, MAX_MUEBLES_N, 0) {
	        if(OBJ_MuebleN[playerid][m] != INVALID_OBJECT_ID) {
				DestroyPlayerObject(playerid, OBJ_MuebleN[playerid][m]);
	            OBJ_MuebleN[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}
	if(300 <= vw < 300+MAX_NEGOCIOS) //Cargar Muebles
	{
	    new nid = vw-300;
		Loop(m, MAX_MUEBLES_N, 0)
		{
			if(i_Negocio[nid][nObjPosX][m] != 0 && i_Negocio[nid][nObjPosY][m] != 0 && i_Negocio[nid][nObjPosX][m] != 0)
			{
				OBJ_MuebleN[playerid][m] = CreatePlayerObject(playerid,  i_Negocio[nid][nObjModel][m],
    			i_Negocio[nid][nObjPosX][m], i_Negocio[nid][nObjPosY][m], i_Negocio[nid][nObjPosZ][m],
    			i_Negocio[nid][nObjRotX][m], i_Negocio[nid][nObjRotY][m], i_Negocio[nid][nObjRotZ][m]);

				if(i_Negocio[nid][nTextura1][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleN[playerid][m], 0, GetMuebleTextureModelID(i_Negocio[nid][nTextura1][m]), GetMuebleTextureTXD(i_Negocio[nid][nTextura1][m]), GetMuebleTextureTexture(i_Negocio[nid][nTextura1][m]), GetMuebleTextureColor(i_Negocio[nid][nTextura1][m]));
				if(i_Negocio[nid][nTextura2][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleN[playerid][m], 1, GetMuebleTextureModelID(i_Negocio[nid][nTextura2][m]), GetMuebleTextureTXD(i_Negocio[nid][nTextura2][m]), GetMuebleTextureTexture(i_Negocio[nid][nTextura2][m]), GetMuebleTextureColor(i_Negocio[nid][nTextura2][m]));
				if(i_Negocio[nid][nTextura3][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleN[playerid][m], 2, GetMuebleTextureModelID(i_Negocio[nid][nTextura3][m]), GetMuebleTextureTXD(i_Negocio[nid][nTextura3][m]), GetMuebleTextureTexture(i_Negocio[nid][nTextura3][m]), GetMuebleTextureColor(i_Negocio[nid][nTextura3][m]));
				if(i_Negocio[nid][nTextura4][m] != 0) SetPlayerObjectMaterial (playerid, OBJ_MuebleN[playerid][m], 3, GetMuebleTextureModelID(i_Negocio[nid][nTextura4][m]), GetMuebleTextureTXD(i_Negocio[nid][nTextura4][m]), GetMuebleTextureTexture(i_Negocio[nid][nTextura4][m]), GetMuebleTextureColor(i_Negocio[nid][nTextura4][m]));
			}
		}
		NegocioActual[playerid] = nid;
	}
	else { NegocioActual[playerid] = INVALID_NEGOCIO_ID; }
	//- Garages
	if(GarageActual[playerid] != INVALID_CASA_ID)
	{
		Loop(m, MAX_MUEBLES_G, 0)
		{
	        if(OBJ_MuebleG[playerid][m] != INVALID_OBJECT_ID)
			{
				DestroyPlayerObject(playerid, OBJ_MuebleG[playerid][m]);
	            OBJ_MuebleG[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}
	if(100 <= vw < 100+MAX_GARAJES) //Cargar Muebles
	{
	    new gid = vw-100;
		Loop(m, MAX_MUEBLES_G, 0)
		{
			if(i_Garaje[gid][gObjPosX][m] != 0 && i_Garaje[gid][gObjPosY][m] != 0 && i_Garaje[gid][gObjPosX][m] != 0)
			{
				OBJ_MuebleG[playerid][m] = CreatePlayerObject(playerid,  i_Garaje[gid][gObjModel][m],
    			i_Garaje[gid][gObjPosX][m], i_Garaje[gid][gObjPosY][m], i_Garaje[gid][gObjPosZ][m],
    			i_Garaje[gid][gObjRotX][m], i_Garaje[gid][gObjRotY][m], i_Garaje[gid][gObjRotZ][m]);
			}
		}
		GarageActual[playerid] = gid;
	}
	else { GarageActual[playerid] = INVALID_CASA_ID; }
	return 1;
}
#define SetPlayerVirtualWorld SPEC_SetPlayerVirtualWorld

new nombre_vehiculo[212][] =
{
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car LS","Police Car SF",
	"Police Car LV","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Trailer A",
	"Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};
//<=================================> vehículos usados
new coches_usados = 0;
enum v_info
{
	uPrecioVeh,
	uModeloVeh,
	uSeguro,
	uPaintJob,
	uColor_1,
	uColor_2,
	uDanioSuperficie,
	uDanioPuertas,
	uDanioLuces,
	uDanioRuedas,
	Float: uVida,
	uModificaciones[MAX_MODVEHICULOS],
	uGasolina,
	uStereo,
	uNeon,
}
new i_Usado[MAX_VEH_USADO][v_info];

funcion CargarVehUsados()
{
	if (!fexist("VehiculosUsados.rp")) return 1;
	new szFileStr[1024], File: iFileHandle = fopen("VehiculosUsados.rp", io_read),vid;
	while (vid < sizeof(i_Usado) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>iiiiiiiiiifiiiiiiiiiiiiiiiiii",
		i_Usado[vid][uPrecioVeh],
		i_Usado[vid][uModeloVeh],
		i_Usado[vid][uSeguro],
		i_Usado[vid][uPaintJob],
		i_Usado[vid][uColor_1],
		i_Usado[vid][uColor_2],
		i_Usado[vid][uDanioSuperficie],
		i_Usado[vid][uDanioPuertas],
		i_Usado[vid][uDanioLuces],
		i_Usado[vid][uDanioRuedas],
		i_Usado[vid][uVida],
		i_Usado[vid][uModificaciones][0],
		i_Usado[vid][uModificaciones][1],
		i_Usado[vid][uModificaciones][2],
		i_Usado[vid][uModificaciones][3],
		i_Usado[vid][uModificaciones][4],
		i_Usado[vid][uModificaciones][5],
		i_Usado[vid][uModificaciones][6],
		i_Usado[vid][uModificaciones][7],
		i_Usado[vid][uModificaciones][8],
		i_Usado[vid][uModificaciones][9],
		i_Usado[vid][uModificaciones][10],
		i_Usado[vid][uModificaciones][11],
		i_Usado[vid][uModificaciones][12],
		i_Usado[vid][uModificaciones][13],
		i_Usado[vid][uModificaciones][14],
		i_Usado[vid][uGasolina],
		i_Usado[vid][uStereo],
		i_Usado[vid][uNeon]);
		if (i_Usado[vid][uModeloVeh] >= 400)
		{
			++vid;
			coches_usados+=1;
		}
	}
	printf("» Sistema de vehículos usados cargado (%d).",vid);
	return fclose(iFileHandle);
}

ActualizarUVeh()
{
	new szFileStr[512], File: fHandle = fopen("VehiculosUsados.rp", io_write);
	for (new vid; vid < MAX_VEH_USADO; vid++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
		i_Usado[vid][uPrecioVeh],
		i_Usado[vid][uModeloVeh],
		i_Usado[vid][uSeguro],
		i_Usado[vid][uPaintJob],
		i_Usado[vid][uColor_1],
		i_Usado[vid][uColor_2],
		i_Usado[vid][uDanioSuperficie],
		i_Usado[vid][uDanioPuertas],
		i_Usado[vid][uDanioLuces],
		i_Usado[vid][uDanioRuedas],
		i_Usado[vid][uVida],
		i_Usado[vid][uModificaciones][0],
		i_Usado[vid][uModificaciones][1],
		i_Usado[vid][uModificaciones][2],
		i_Usado[vid][uModificaciones][3],
		i_Usado[vid][uModificaciones][4],
		i_Usado[vid][uModificaciones][5],
		i_Usado[vid][uModificaciones][6],
		i_Usado[vid][uModificaciones][7],
		i_Usado[vid][uModificaciones][8],
		i_Usado[vid][uModificaciones][9],
		i_Usado[vid][uModificaciones][10],
		i_Usado[vid][uModificaciones][11],
		i_Usado[vid][uModificaciones][12],
		i_Usado[vid][uModificaciones][13],
		i_Usado[vid][uModificaciones][14],
		i_Usado[vid][uGasolina],
		i_Usado[vid][uStereo],
		i_Usado[vid][uNeon]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
//<=================================> sistema de concesionarias
enum e_info
{
	eDisponibles,
	ePrecioVeh,
	eModeloVeh,
	eTipo
};
new i_Conce[MAX_VEH_VENTA][e_info];

funcion CargarConcesionarias()
{
	if (!fexist("VehiculosVenta.rp")) return 1;
	new szFileStr[1024], File: iFileHandle = fopen("VehiculosVenta.rp", io_read),vid;
	while (vid < sizeof(i_Conce) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>iiii",
		i_Conce[vid][eDisponibles],
		i_Conce[vid][eTipo],
		i_Conce[vid][ePrecioVeh],
		i_Conce[vid][eModeloVeh]);
		if (i_Conce[vid][eModeloVeh] >= 400)
		{
			++vid;
		}
	}
	printf("» Sistema de concesionarias cargado (%d).",vid);
	return fclose(iFileHandle);
}

ActualizarVVeh()
{
	new szFileStr[512], File: fHandle = fopen("VehiculosVenta.rp", io_write);
	for (new vid; vid < MAX_VEH_VENTA; vid++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d\r\n",
		i_Conce[vid][eDisponibles],
		i_Conce[vid][eTipo],
		i_Conce[vid][ePrecioVeh],
		i_Conce[vid][eModeloVeh]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
//<=================================> Anti-Cheat de jorge
stock IsValidVehicleID(vehicleid) {
    if(GetVehicleModel(vehicleid)) return 1;
    return 0;
}

enum antichit
{
	bool:teleport,
	bool:reparacion,
	bool:Balas
}
new AntiG[antichit];

enum antichitplayers
{
	Float:vidac1,
	Float:vidac2,
	BalasW
}
new Anti[MAX_PLAYERS][antichitplayers];

stock SetExVehicleHealth(vehicleid, Float:value)
{
	if(!IsValidVehicleID(vehicleid)) return 0;
	new a = GetVehicleDriverID(vehicleid);
	if(a != -1)
	{
		Anti[a][vidac1] = 1400.0;
		Anti[a][vidac2] = 1400.0;
	}
    SetVehicleHealth(vehicleid, value);
	return 1;
}

stock RepairExVehicle(vehicleid)
{
	if(!IsValidVehicleID(vehicleid)) return 0;
	new a = GetVehicleDriverID(vehicleid);
	if(a != -1)
	{
		Anti[a][vidac1] = 1000.0;
		Anti[a][vidac2] = 1000.0;
	}
    RepairVehicle(vehicleid);
	return 1;
}

funcion ExPlayerDialog(playerid, dialogid, dialogstyle, const titulo[], const texto[], const aceptar[], const rechazar[]) // anti dialoghide.
{
    CurrentDialog[playerid] = dialogid;
    ShowPlayerDialog(playerid, dialogid, dialogstyle, titulo, texto, aceptar, rechazar);
    return 1;
}

//
funcion C_VehEmpresa(e_id)
{
	for(new v = 0; v < MAX_VEHFAMILIAS; v++)
	{
		if(InfoVehEmp[e_id][v][vModelo] != 0)
		{
			new Coche = CreateVehicle(InfoVehEmp[e_id][v][vModelo], InfoVehEmp[e_id][v][vPosicionX], InfoVehEmp[e_id][v][vPosicionY], InfoVehEmp[e_id][v][vPosicionZ], InfoVehEmp[e_id][v][vPosicionR], InfoVehEmp[e_id][v][vColor_1], InfoVehEmp[e_id][v][vColor_2], -1);
			random_veh[Coche] = Coche + random(899999);
			InfoVehEmp[e_id][v][vID] = Coche;
			veh_gasolina[Coche] = InfoVehEmp[e_id][v][vGasolina];
			SetExVehicleHealth(Coche, InfoVehEmp[e_id][v][vVida]);
			SetVehicleVirtualWorld(Coche, InfoVehEmp[e_id][v][vVirtualWorld]);
			LinkVehicleToInterior(Coche, InfoVehEmp[e_id][v][vInterior]);
			UpdateVehicleDamageStatus(Coche, InfoVehEmp[e_id][v][vDanioSuperficie], InfoVehEmp[e_id][v][vDanioPuertas], InfoVehEmp[e_id][v][vDanioLuces], InfoVehEmp[e_id][v][vDanioRuedas]);
			SetVehicleMatricula(Coche);
		}
	}
}
//<=================================> gasolineras
enum gsInfo
{
	gsNegocio,
	Float: gsPosicionX,
	Float: gsPosicionY,
	Float: gsPosicionZ
}
new i_Bindon[MAX_GASOLINERAS][gsInfo];

funcion cargar_bindon()
{
	if (!fexist("Gasolineras.rp")) fcreate("Gasolineras.rp");
	new szFileStr[1024], File: iFileHandle = fopen("Gasolineras.rp", io_read),gsid;
	while (gsid < sizeof(i_Bindon) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>dfff",
		i_Bindon[gsid][gsNegocio],
		i_Bindon[gsid][gsPosicionX],
		i_Bindon[gsid][gsPosicionY],
        i_Bindon[gsid][gsPosicionZ]);
		if (i_Bindon[gsid][gsNegocio] != 0)
		{
			++gsid;
		}
	}
	printf("|- Bindones de gasolina [%d]", gsid);
	return fclose(iFileHandle);
}

stock save_bindon()
{
	new szFileStr[512], File: fHandle = fopen("Gasolineras.rp", io_write);
	for (new gsid; gsid < MAX_GASOLINERAS; gsid++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%f|%f|%f\r\n",
		i_Bindon[gsid][gsNegocio],
		i_Bindon[gsid][gsPosicionX],
		i_Bindon[gsid][gsPosicionY],
		i_Bindon[gsid][gsPosicionZ]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
/*//<=================================> dispensadoras
enum d_Info
{
	Float: d_Pos[6],
	d_Object,
	Text3D: d_Label,
}
new i_Maquina[MAX_TELEFONOS][d_Info];

funcion cargar_maquinas()
{
	if (!fexist("Dispensadoras.rp")) fcreate("Dispensadoras.rp");
	new szFileStr[1024], File: iFileHandle = fopen("Dispensadoras.rp", io_read), tpid;
	while (tpid < sizeof(i_Maquina) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ffffff",
		i_Maquina[tpid][d_Pos][0],
		i_Maquina[tpid][d_Pos][1],
		i_Maquina[tpid][d_Pos][2],
		i_Maquina[tpid][d_Pos][3],
		i_Maquina[tpid][d_Pos][4],
		i_Maquina[tpid][d_Pos][5]);
		if (i_Maquina[tpid][d_Pos][0] != 0.0)
		{
			i_Maquina[tpid][d_Object] = CreateDynamicObject(1216, i_Maquina[tpid][d_Pos][0], i_Maquina[tpid][d_Pos][1], i_Maquina[tpid][d_Pos][2], i_Maquina[tpid][d_Pos][3], i_Maquina[tpid][d_Pos][4], i_Maquina[tpid][d_Pos][5]);
			i_Maquina[tpid][d_Label] = CreateDynamic3DTextLabel("Dispensadora\nUse {90C3D4}/maquina{FFFFFF}", 0xFFFFFFFF, i_Maquina[tpid][d_Pos][0], i_Maquina[tpid][d_Pos][1], i_Maquina[tpid][d_Pos][2] + 0.4, 8.0);
			++tpid;
		}
	}
	printf("|- Máquinas dispensadoras [%d]",tpid);
	return fclose(iFileHandle);
}

stock save_maquinas()
{
	new szFileStr[512], File: fHandle = fopen("Dispensadoras.rp", io_write);
	for (new tpid; tpid < MAX_TELEFONOS; tpid++)
	{
		format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%f|%f\r\n",
		i_Maquina[tpid][d_Pos][0],
		i_Maquina[tpid][d_Pos][1],
		i_Maquina[tpid][d_Pos][2],
		i_Maquina[tpid][d_Pos][3],
		i_Maquina[tpid][d_Pos][4],
		i_Maquina[tpid][d_Pos][5]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}*/
//<=================================> teléfonos públicos
enum tpInfo
{
	Float: pp_Pos[6],
	ppObject,
	Text3D: ppLabel,
}
new i_PPhone[MAX_TELEFONOS][tpInfo];

funcion cargar_phones()
{
	if (!fexist("PPhones.rp")) fcreate("PPhones.rp");
	new szFileStr[1024], File: iFileHandle = fopen("PPhones.rp", io_read), tpid;
	while (tpid < sizeof(i_PPhone) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ffffff",
		i_PPhone[tpid][pp_Pos][0],
		i_PPhone[tpid][pp_Pos][1],
		i_PPhone[tpid][pp_Pos][2],
		i_PPhone[tpid][pp_Pos][3],
		i_PPhone[tpid][pp_Pos][4],
		i_PPhone[tpid][pp_Pos][5]);
		if (i_PPhone[tpid][pp_Pos][0] != 0.0)
		{
			i_PPhone[tpid][ppObject] = CreateDynamicObject(1216, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1], i_PPhone[tpid][pp_Pos][2], i_PPhone[tpid][pp_Pos][3], i_PPhone[tpid][pp_Pos][4], i_PPhone[tpid][pp_Pos][5]);
			i_PPhone[tpid][ppLabel] = CreateDynamic3DTextLabel("Teléfono público\nUse {90C3D4}/publico{FFFFFF}", 0xFFFFFFFF, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1], i_PPhone[tpid][pp_Pos][2] + 0.4, 8.0);
			++tpid;
		}
	}
	printf("|- Teléfonos públicos [%d]",tpid);
	return fclose(iFileHandle);
}

stock save_phones()
{
	new szFileStr[512], File: fHandle = fopen("PPhones.rp", io_write);
	for (new tpid; tpid < MAX_TELEFONOS; tpid++)
	{
		format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%f|%f\r\n",
		i_PPhone[tpid][pp_Pos][0],
		i_PPhone[tpid][pp_Pos][1],
		i_PPhone[tpid][pp_Pos][2],
		i_PPhone[tpid][pp_Pos][3],
		i_PPhone[tpid][pp_Pos][4],
		i_PPhone[tpid][pp_Pos][5]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
//<=================================> facciones dinamicas - EdinsonWalker
enum famInfo
{
	fNombre[32],
	fRango1[24],
	fRango2[24],
	fRango3[24],
	fRango4[24],
	fRango5[24],
	fLider[24],
	fLogito[24],
	fMiembros,
	fChat,
	Float: fCajaFuerteX,
	Float: fCajaFuerteY,
	Float: fCajaFuerteZ,
	fCajaFuerteWorld,
	fPickup,
	fArmario[12],
	fArmarioCantidad[12],
	fTipo,
};
new i_Familia[MAX_FAMILIAS][famInfo];

funcion CargaFamilias()
{
	new familia[64];
	for (new fid = 0; fid < sizeof(i_Familia); fid++)
	{
		format(familia, 64, DATOS_FAMILIAS, fid);
		INI_ParseFile(familia, "CargaFamilias_data", .bExtra = true, .extra = fid);
		if (i_Familia[fid][fCajaFuerteX] != 0 && i_Familia[fid][fCajaFuerteY] != 0 && i_Familia[fid][fCajaFuerteZ] != 0)
		{
			i_Familia[fid][fPickup] = CreateDynamicPickup(1239, 1, i_Familia[fid][fCajaFuerteX], i_Familia[fid][fCajaFuerteY], i_Familia[fid][fCajaFuerteZ], i_Familia[fid][fCajaFuerteWorld]);
		}
	}
	print("» Sistema de organizaciones cargado.");
	return 1;
}

funcion CargaFamilias_data(fid, name[], value[])
{
	INI_String("Nombre", i_Familia[fid][fNombre], 32);
	INI_String("Rango_1", i_Familia[fid][fRango1], 24);
	INI_String("Rango_2", i_Familia[fid][fRango2], 24);
	INI_String("Rango_3", i_Familia[fid][fRango3], 24);
	INI_String("Rango_4", i_Familia[fid][fRango4], 24);
	INI_String("Rango_5", i_Familia[fid][fRango5], 24);
	INI_String("Nombre_Lider", i_Familia[fid][fLider], 24);
	INI_String("Logo", i_Familia[fid][fLogito], 24);
	INI_Int("Miembros", i_Familia[fid][fMiembros]);
	INI_Float("CajaFuerte_X", i_Familia[fid][fCajaFuerteX]);
	INI_Float("CajaFuerte_Y", i_Familia[fid][fCajaFuerteY]);
	INI_Float("CajaFuerte_Z", i_Familia[fid][fCajaFuerteZ]);
	INI_Int("Caja_Fuerte_World", i_Familia[fid][fCajaFuerteWorld]);
	INI_Int("Armario_1", i_Familia[fid][fArmario][0]);
	INI_Int("Armario_2", i_Familia[fid][fArmario][1]);
	INI_Int("Armario_3", i_Familia[fid][fArmario][2]);
	INI_Int("Armario_4", i_Familia[fid][fArmario][3]);
	INI_Int("Armario_5", i_Familia[fid][fArmario][4]);
	INI_Int("Armario_6", i_Familia[fid][fArmario][5]);
	INI_Int("Armario_7", i_Familia[fid][fArmario][6]);
	INI_Int("Armario_8", i_Familia[fid][fArmario][7]);
	INI_Int("Armario_9", i_Familia[fid][fArmario][8]);
	INI_Int("Armario_10", i_Familia[fid][fArmario][9]);
	INI_Int("Armario_11", i_Familia[fid][fArmario][10]);
	INI_Int("Armario_12", i_Familia[fid][fArmario][11]);
	INI_Int("Armario_Cantidad_1", i_Familia[fid][fArmarioCantidad][0]);
	INI_Int("Armario_Cantidad_2", i_Familia[fid][fArmarioCantidad][1]);
	INI_Int("Armario_Cantidad_3", i_Familia[fid][fArmarioCantidad][2]);
	INI_Int("Armario_Cantidad_4", i_Familia[fid][fArmarioCantidad][3]);
	INI_Int("Armario_Cantidad_5", i_Familia[fid][fArmarioCantidad][4]);
	INI_Int("Armario_Cantidad_6", i_Familia[fid][fArmarioCantidad][5]);
	INI_Int("Armario_Cantidad_7", i_Familia[fid][fArmarioCantidad][6]);
	INI_Int("Armario_Cantidad_8", i_Familia[fid][fArmarioCantidad][7]);
	INI_Int("Armario_Cantidad_9", i_Familia[fid][fArmarioCantidad][8]);
	INI_Int("Armario_Cantidad_10", i_Familia[fid][fArmarioCantidad][9]);
	INI_Int("Armario_Cantidad_11", i_Familia[fid][fArmarioCantidad][10]);
	INI_Int("Armario_Cantidad_12", i_Familia[fid][fArmarioCantidad][11]);
	INI_Int("Tipo", i_Familia[fid][fTipo]);
	return 1;
}

stock ActualizarFamilia(fid)
{
	new familia[64];
	format(familia, 64, DATOS_FAMILIAS, fid);
	new INI: File = INI_Open(familia);
	INI_SetTag(File, "Informacion");
	INI_WriteString(File, "Nombre", i_Familia[fid][fNombre]);
	INI_WriteString(File, "Rango_1", i_Familia[fid][fRango1]);
	INI_WriteString(File, "Rango_2", i_Familia[fid][fRango2]);
	INI_WriteString(File, "Rango_3", i_Familia[fid][fRango3]);
	INI_WriteString(File, "Rango_4", i_Familia[fid][fRango4]);
	INI_WriteString(File, "Rango_5", i_Familia[fid][fRango5]);
	INI_WriteString(File, "Nombre_Lider", i_Familia[fid][fLider]);
	INI_WriteString(File, "Logo", i_Familia[fid][fLogito]);
	INI_WriteInt(File, "Miembros", i_Familia[fid][fMiembros]);
	INI_WriteFloat(File, "CajaFuerte_X", i_Familia[fid][fCajaFuerteX]);
	INI_WriteFloat(File, "CajaFuerte_Y", i_Familia[fid][fCajaFuerteY]);
	INI_WriteFloat(File, "CajaFuerte_Z", i_Familia[fid][fCajaFuerteZ]);
	INI_WriteInt(File, "Caja_Fuerte_World", i_Familia[fid][fCajaFuerteWorld]);
	INI_WriteInt(File, "Armario_1", i_Familia[fid][fArmario][0]);
	INI_WriteInt(File, "Armario_2", i_Familia[fid][fArmario][1]);
	INI_WriteInt(File, "Armario_3", i_Familia[fid][fArmario][2]);
	INI_WriteInt(File, "Armario_4", i_Familia[fid][fArmario][3]);
	INI_WriteInt(File, "Armario_5", i_Familia[fid][fArmario][4]);
	INI_WriteInt(File, "Armario_6", i_Familia[fid][fArmario][5]);
	INI_WriteInt(File, "Armario_7", i_Familia[fid][fArmario][6]);
	INI_WriteInt(File, "Armario_8", i_Familia[fid][fArmario][7]);
	INI_WriteInt(File, "Armario_9", i_Familia[fid][fArmario][8]);
	INI_WriteInt(File, "Armario_10", i_Familia[fid][fArmario][9]);
	INI_WriteInt(File, "Armario_11", i_Familia[fid][fArmario][10]);
	INI_WriteInt(File, "Armario_12", i_Familia[fid][fArmario][11]);
	INI_WriteInt(File, "Armario_Cantidad_1", i_Familia[fid][fArmarioCantidad][0]);
	INI_WriteInt(File, "Armario_Cantidad_2", i_Familia[fid][fArmarioCantidad][1]);
	INI_WriteInt(File, "Armario_Cantidad_3", i_Familia[fid][fArmarioCantidad][2]);
	INI_WriteInt(File, "Armario_Cantidad_4", i_Familia[fid][fArmarioCantidad][3]);
	INI_WriteInt(File, "Armario_Cantidad_5", i_Familia[fid][fArmarioCantidad][4]);
	INI_WriteInt(File, "Armario_Cantidad_6", i_Familia[fid][fArmarioCantidad][5]);
	INI_WriteInt(File, "Armario_Cantidad_7", i_Familia[fid][fArmarioCantidad][6]);
	INI_WriteInt(File, "Armario_Cantidad_8", i_Familia[fid][fArmarioCantidad][7]);
	INI_WriteInt(File, "Armario_Cantidad_9", i_Familia[fid][fArmarioCantidad][8]);
	INI_WriteInt(File, "Armario_Cantidad_10", i_Familia[fid][fArmarioCantidad][9]);
	INI_WriteInt(File, "Armario_Cantidad_11", i_Familia[fid][fArmarioCantidad][10]);
	INI_WriteInt(File, "Armario_Cantidad_12", i_Familia[fid][fArmarioCantidad][11]);
	INI_WriteInt(File, "Tipo", i_Familia[fid][fTipo]);
	INI_Close(File);
	return 1;
}


enum AccesoriosEnum
{
	ModeloAccesorio,
	PrecioAccesorio,
	NombreAccesorio[36],
};

static const AccesoriosPD[][AccesoriosEnum] =
{
	{19801, 70, "Pasamontañas"},
	{19773, 50, "Pistolera"},
	{19904, 150, "Chaleco reflector"},
	{19942, 60, "Radio portatil"},
	{19775, 25, "Placa"},
	{19141, 250, "Casco tactico"},
	{19142, 300, "Chaleco tactico"},
	{18636, 70, "Gorra negra police"},
	{19099, 70, "Sombrero negro"},
	{19100, 70, "Sombrero marron"},
	{18637, 250, "Escudo antidisturbios"},
	{19161, 130, "Gorra negra con logo"},
	{19162, 130, "Gorra azul con logo"},
	{19200, 150, "Casco de Motorista"},
	{19138, 80, "Gafas negras"},
	{19139, 80, "Gafas rojas"},
	{19140, 80, "Gafas azules"},
	{19472, 120, "Mascara gas"},
	{19347, 40, "Estrella"},
	{19515, 255, "Chaleco tactico gris"},
	{19514, 150, "Casco gris"},
	{19521, 200, "Gorra única."},
	{18642, 20, "Taser"},
	{368, 12, "Visión nocturna"},
	{19781, 12, "Sargento I"},
	{19782, 12, "Sargento II"},
	{19783, 12, "Oficial II"},
	{19784, 12, "Oficial III"},
	{19785, 12, "Oficial III+"},
	{19778, 12, "Detective I"},
	{19779, 12, "Detective II"},
	{19780, 12, "Detective III"}
};

static const Accesorios[][AccesoriosEnum] =
{
	{19781, 12, "Sargento I"},
	{19782, 12, "Sargento II"},
	{19783, 12, "Oficial II"},
	{19784, 12, "Oficial III"},
	{19785, 12, "Oficial III+"},
	{19778, 12, "Detective I"},
	{19779, 12, "Detective II"},
	{19780, 12, "Detective III"},
	//
	{11745, 40, "Bolso"},
	{18976, 12, "Casco motrocross"},
	{18979, 12, "Casco rosa"},
	{18978, 12, "Casco blanco"},
	{368, 12, "Visión nocturna"},
    {19801, 70, "Pasamontañas"},
	{19773, 50, "Pistolera"},
	{19904, 150, "Chaleco reflector"},
	{19942, 60, "Radio portatil"},
	{19775, 25, "Placa"},
	{19141, 250, "Casco Tactico"},
	{19142, 300, "Chaleco Tactico"},
	{18636, 70, "Gorra negra police"},
	{19099, 70, "Sombrero negro"},
	{19100, 70, "Sombrero marron"},
	{18637, 250, "Escudo antidisturbios"},
	{19161, 130, "Gorra negra con logo"},
	{19162, 130, "Gorra azul con logo"},
	{19200, 150, "Casco de Motorista"},
	{19138, 80, "Gafas negras"},
	{19139, 80, "Gafas rojas"},
	{19140, 80, "Gafas azules"},
	{19472, 120, "Mascara gas"},
	{19347, 40, "Estrella"},
	{19515, 255, "Chaleco tactico gris"},
	{19514, 150, "Casco gris"},
	{19521, 200, "Gorra única."},
	{1254, 15, "Calavera"},
	{19320, 15, "Calabaza"},
	{18642, 20, "Taser"},
	{19077, 15, "Peluca normal"},
	{19136, 25, "Peluca con lentes"},
	{19274, 30, "Peluca de payaso"},
	{18975, 20, "Peluca afro 1"},
	{18640, 25, "Peluca afro 2"},
	{19350, 12, "Bigote 1"},
	{19351, 14, "Bigote 2"},
	{18632, 2, "Caña Pesca"},
	{18638, 5, "Casco de minero"},
	{19093, 4, "Gorra blanca"},
	{19160, 5, "Gorra amarilla"},
	{18639, 6, "Sombrero"},
	{18891, 5, "Bandana 1"},
	{18892, 5, "Bandana 2"},
	{18893, 5, "Bandana 3"},
	{18894, 5, "Bandana 4"},
	{18895, 5, "Bandana 5"},
	{18896, 5, "Bandana 6"},
	{18897, 5, "Bandana 7"},
	{18898, 5, "Bandana 8"},
	{18899, 5, "Bandana 9"},
	{18900, 5, "Bandana 10"},
	{18901, 7, "Bandana 11"},
	{18902, 7, "Bandana 12"},
	{18903, 7, "Bandana 13"},
	{18904, 7, "Bandana 14"},
	{18905, 7, "Bandana 15"},
	{18906, 7, "Bandana 16"},
	{18907, 7, "Bandana 17"},
	{18908, 7, "Bandana 18"},
	{18909, 7, "Bandana 19"},
	{18910, 7, "Bandana 20"},
	{18911, 10, "Bandana 21"},
	{18912, 10, "Bandana 22"},
	{18913, 10, "Bandana 23"},
	{18914, 10, "Bandana 24"},
	{18915, 10, "Bandana 25"},
	{18916, 10, "Bandana 26"},
	{18917, 10, "Bandana 27"},
	{18918, 10, "Bandana 28"},
	{18919, 10, "Bandana 29"},
	{18920, 10, "Bandana 30"},
	{19487, 10, "Sombrero VIP"},
	{19488, 10, "Sombrero VIP 2"},
	{18921, 5, "Boina 1"},
	{18922, 5, "Boina 2"},
	{18923, 7, "Boina 3"},
	{18924, 8, "Boina 4"},
	{18925, 8, "Boina 5"},
	{19557, 8, "Máscara sexy"},
	{11704, 8, "Máscara demonio"},
	{360, 8, "Objeto premium"},
	{370, 8, "Jetpack"},
	{371, 8, "Mochila"},
	{19554, 25, "Capucha"},
	{19067, 3, "Capucha 2"},
	{19068, 3, "Capucha 3"},
	{19069, 3, "Capucha 4"},
	{18965, 30, "Gorro VIP"},
	{19528, 30, "Gorro de Bruja"},
	{19623, 25, "Camara"},
	{19627, 25, "Llave"},
	{19555, 25, "Guante Boxeo L"},
	{19556, 25, "Guante Boxeo R"},
	{18952, 10, "Casco Boxeo"},
	{19137, 15, "GorraCluckinBell"},
	{19330, 8, "Casco Bomb"},
	{19331, 9, "Casco Bomb2"},
	{19317, 10, "Guitarra"},
	{19318, 10, "GuitarraX"},
	{19319, 12, "XFireGuitarra"},
	{1210, 5, "Maleta"},
	{19421, 4, "Audífonos 1"},
	{19422, 4, "Audífonos 2"},
	{19423, 4, "Audífonos 3"},
	{19424, 4, "Audífonos 4"},
	{19558, 4, "Gorra pizzero"},
	{19559, 50, "Mochila"},
	{19624, 50, "Maleta de mano"},
	{19330, 25 ,"Casco bombero"},
	{1242, 100, "Chaleco"},
	{19036, 11, "Mascara 1"},
	{19037, 11, "Mascara 2"},
	{19038, 11, "Mascara 3"},
	{19163, 12, "Mascara CJ"},
	{19064, 19, "Gorro santa 1"},
	{19065, 22, "Gorro santa 2"},
	{19066, 24, "Gorro santa 3"},
	{18645, 25, "Casco de moto"},
	{18926, 2, "Gorra 1"},
	{18927, 2, "Gorra 2"},
	{18928, 2, "Gorra 3"},
	{18929, 2, "Gorra 4"},
	{18930, 2, "Gorra 5"},
	{18931, 2, "Gorra 6"},
	{18932, 2, "Gorra 7"},
	{18933, 2, "Gorra 8"},
	{18934, 2, "Gorra 9"},
	{18935, 2, "Gorra 10"},
	{18939, 7, "Gorra 11"},
	{18940, 7, "Gorra 12"},
	{18941, 7, "Gorra 13"},
	{18942, 4, "Gorra 14"},
	{18955, 7, "Gorra 15"},
	{18956, 7, "Gorra 16"},
	{18957, 7, "Gorra 17"},
	{18958, 7, "Gorra 18"},
	{18959, 7, "Gorra 19"},
	{18960, 10, "Gorra 20"},
	{18953, 12, "Gorra 21"},
	{18954, 7, "Gorra 22"},
	{18943, 4, "Gorra 23"},
	{18961, 10, "Gorra 24"},
	{18966, 5, "Gorra 25"},
	{18967, 5, "Gorra 26"},
	{18968, 6, "Gorra 27"},
	{18969, 8, "Gorra 28"},
	{18936, 10, "Casco 1"},
	{18937, 8, "Casco 2"},
	{18938, 8, "Casco 3"},
	{18944, 20, "Sombrero 1"},
	{18945, 20, "Sombrero 2"},
	{18946, 30, "Sombrero 3"},
	{18947, 35, "Sombrero 4"},
	{18948, 20, "Sombrero 5"},
	{18949, 20, "Sombrero 6"},
	{18950, 20, "Sombrero 7"},
	{18951, 20, "Sombrero 8"},
	{18962, 35, "Sombrero 9"},
	{18971, 22, "Sombrero 10"},
	{18972, 18, "Sombrero 11"},
	{18973, 18, "Sombrero 12"},
	{18970, 22, "Sombrero 13"},
	{19006, 9, "Lentes 1"},
	{19007, 9, "Lentes 2"},
	{19008, 9, "Lentes 3"},
	{19009, 9, "Lentes 4"},
	{19010, 9, "Lentes 4"},
	{19011, 9, "Lentes 6"},
	{19012, 9, "Lentes 7"},
	{19013, 9, "Lentes 8"},
	{19014, 9, "Lentes 9"},
	{19015, 9, "Lentes 10"},
	{19016, 9, "Lentes 11"},
	{19017, 9, "Lentes 12"},
	{19018, 9, "Lentes 13"},
	{19019, 9, "Lentes 14"},
	{19020, 9, "Lentes 15"},
	{19021, 9, "Lentes 16"},
	{19022, 9, "Lentes 17"},
	{19023, 9, "Lentes 18"},
	{19024, 9, "Lentes 19"},
	{19025, 9, "Lentes 20"},
	{19026, 9, "Lentes 21"},
	{19027, 9, "Lentes 22"},
	{19028, 9, "Lentes 23"},
	{19029, 9, "Lentes 24"},
	{19030, 9, "Lentes 25"},
	{19031, 9, "Lentes 26"},
	{19032, 9, "Lentes 27"},
	{19033, 9, "Lentes 28"},
	{19034, 9, "Lentes 29"},
	{19035, 9, "Lentes 30"},
	{19039, 150, "Reloj de diamante"},
	{19040, 90, "Reloj de plata"},
	{19041, 65, "Reloj de cobre"},
	{19042, 135, "Reloj de oro"},
	{19043, 40, "Reloj normal"},
	{19044, 32, "Reloj purpura"},
	{19045, 32, "Reloj rosa"},
	{19046, 32, "Reloj verde"},
	{19047, 32, "Reloj morado"},
	{19048, 32, "Reloj azul"},
	{19049, 32, "Reloj de colores"},
	{19050, 32, "Reloj azul claro"},
	{19051, 32, "Reloj naranja"},
	{19052, 32, "Reloj rosa 2"},
	{19053, 32, "Reloj militar"},
	{18641, 25, "Linterna"},
	{19095, 12, "Sombrero vaquero 2"},
	{19096, 10, "Sombrero vaquero 3"},
	{19097, 8, "Sombrero vaquero 4"},
	{19098, 7, "Sombrero vaquero 5"},
	{19553, 3, "Sombrero de paja"},
	{19101, 15, "Casco militar 1"},
	{19102, 15, "Casco militar 2"},
	{19103, 15, "Casco militar 3"},
	{19104, 15, "Casco militar 4"},
	{19105, 15, "Casco militar 5"},
	{19106, 15, "Casco militar 6"},
	{19107, 15, "Casco militar 7"},
	{19108, 15, "Casco militar 8"},
	{19109, 15, "Casco militar 9"},
	{19110, 15, "Casco militar 10"},
	{19111, 15, "Casco militar 11"},
	{19112, 15, "Casco militar 12"}
};

new ParteAccesorios[][] =
{
	"Ninguna",
	"Columna vertebral",
	"Cabeza",
	"Brazo izquierdo",
	"Brazo derecho",
	"Mano izquierda",
	"Mano derecha",
	"Muslo izquierdo",
	"Muslo derecho",
	"Pie izquierdo",
	"Pie derecho",
	"Pantorrilla derecha",
	"Pantorrilla izquierda",
	"Antebrazo izquierdo",
	"Antebrazo derecho",
	"Clavícula izquierda",
	"Clavícula derecha",
	"Cuello",
	"Mandíbula"
};

enum accCaid
{
	AccID,
	Float:AccX,
	Float:AccY,
	Float:AccZ,
	AccVWorld,
	AccInterior,
	aParte,
	Float: aPosicionX,
	Float: aPosicionY,
	Float: aPosicionZ,
	Float: aRotacionX,
	Float: aRotacionY,
	Float: aRotacionZ,
	Float: aEscalaX,
	Float: aEscalaY,
	Float: aEscalaZ,
};
new InfoCaido[MAX_OBJETOS_S][accCaid], AccCaido[MAX_OBJETOS_S];
//<=================================> sistema de licencias, sublime rp

//Licenses Exam
#define EXAM_TYPE_VEHICLES  			(1)
#define EXAM_TYPE_BOATS     			(2)
#define EXAM_TYPE_PLANES    			(3)

enum E_LICENSES
{
	Float:licenseX,
	Float:licenseY,
	Float:licenseZ,
	licenseType
};
static const LicensesPoint[][E_LICENSES] =
{
	{1111.9210, -1795.5494, 16.5938, EXAM_TYPE_VEHICLES},
	{706.1506, -1697.1390, 3.4197, EXAM_TYPE_BOATS},
	{1767.6909, -2432.3108, 13.5557, EXAM_TYPE_PLANES}
};

static const Float:VehiclesCheckpoints[][] =
{
    {1077.9421, -1760.8413, 13.1062},
    {1069.7742, -1743.6262, 13.1792},
    {1125.6846, -1742.9705, 13.1255},
    {1173.2028, -1795.8419, 13.1255},
    {1171.8732, -1848.7852, 13.1255},
    {1064.7334, -1848.9559, 13.1275},
    {868.2761, -1767.7832, 13.1099},
    {662.2955, -1734.7739, 13.3051},
    {638.0414, -1608.3522, 15.2394},
    {637.0955, -1437.5593, 13.7718},
    {777.1824, -1402.8928, 13.0962},
    {1003.7480, -1403.3344, 12.7427},
    {1056.4824, -1461.9592, 13.0966},
    {1035.2485, -1601.7378, 13.1099},
    {1035.6083, -1708.9515, 13.1176},
    {1153.0645, -1714.3525, 13.5083},
    {1105.6610, -1738.3989, 13.2321}
};

static const Float:BoatCheckpoints[][] =
{
    {727.4661, -1666.3586, 0.2809},
    {723.5377, -1982.4436, 0.0888},
    {888.5245, -2217.5752, 0.3867},
    {948.2952, -2436.8877, 0.2301},
    {817.9743, -2402.8032, 0.3553},
    {636.3235, -2252.9739, -0.268},
    {266.1196, -2009.4774, -0.064},
    {073.9761, -1747.9764, 0.1840},
    {053.8207, -1324.1001, 0.0670},
    {120.4853, -1142.0376, -0.106},
    {059.5887, -1215.6620, 0.0118},
    {047.4178, -1406.1908, 0.1741},
    {068.7567, -1802.8402, 0.4297},
    {316.2246, -2129.4150, 0.5696},
    {670.3423, -2154.7117, 0.1586},
    {725.7950, -1955.5662, 0.0710},
    {719.1813, -1635.8275, -0.132}
};

static const Float:PlaneCheckpoints[][] =
{
    {1865.8528, -2493.6243, 14.0206},
    {1563.2400, -2498.1423, 52.9784},
    {1433.8646, -2183.6011, 130.979},
    {1335.1072, -1939.5640, 137.020},
    {1124.7063, -1567.8174, 215.672},
    {1416.3463, -1464.9330, 210.027},
    {1881.0192, -1355.0537, 176.554},
    {2343.5874, -1535.4296, 188.288},
    {2490.6567, -1746.6843, 198.788},
    {2551.4136, -1982.3473, 191.512},
    {2300.9019, -2448.9773, 100.085},
    {1828.0278, -2495.6440, 14.0391},
    {1761.8984, -2496.6870, 14.0280}
};

//<=================================> posiciones:

static const Float:p_granjero[][] =
{
	{-310.3220,-1343.6019,8.5391},
	{-242.2087,-1358.7137,9.1925},
	{-232.1254,-1436.2472,5.1867},
	{-282.2103,-1506.9939,6.4768},
	{-230.1935,-1502.7699,7.5455},
	{-275.4666,-1442.4436,9.0312},
	{-303.2246,-1371.3523,8.8672},
	{-241.5340,-1314.2330,10.6801},
	{-186.5779,-1383.4722,4.6812},
	{-280.7169,-1429.3323,11.4508},
	{-327.1384,-1544.0621,14.7354},
	{-219.7765,-1483.9117,7.4775},
	{-198.7410,-1350.1140,6.7301},
	{-296.7588,-1321.7921,8.8109}
};

static const Float:_COMISARIAp[][3] =
{
	{322.3042, 311.5955, 999.2017},
	{322.0996, 316.5232, 999.2017}
};

static const Float:d_trafico[][4] =
{
	{2316.5281, -61.9243, 26.5151, 664703.96},
	{1311.1685, 351.1704, 19.5823, 045323.72},
	{2795.2341, -1619.5961, 10.8852, 08823.51},
	{-146.0256, -89.1870, 3.0863, 05523.81}
};

static const Float:_FEDERALp[][3] =
{
	{205.94289, 1467.37976, 10.71816},
	{197.50482, 1463.73804, 10.71816},
	{209.57596, 1452.06970, 10.71816},
	{223.01373, 1464.81934, 10.71816}
};

///////////////

stock registrar_l(playerid, tipo, numero = 0)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(numero == 0) return Mensaje_(playerid, -1, "ERROR");
    new string[128];

	new t_llamada[20];
	switch(tipo)
	{
		case 1: t_llamada = "{00C1D1}entrante";
		case 2: t_llamada = "{00BE00}saliente";
		case 3: t_llamada = "{F60000}perdida";
	}
	new contacto = -1;
	for (new e = 0; e < 20; e++)
	{
		if(user[playerid][jContacto][e] == numero) contacto = e;
	}
	for(new x = 0; x < 20; x++)
	{
		if (llamada_2registro[playerid][x] == 0)
		{
			llamada_2registro[playerid][x] = 1;
			if(contacto == -1)
			{
				format(string, sizeof(string), "{ffffff}Llamada %s{ffffff} (%d) - %s.\n", t_llamada, numero, el_2tiempo());
			}
			else
			{
				format(string, sizeof(string), "{ffffff}Llamada %s{ffffff} (%s) - %s.\n", t_llamada, verificar_c(playerid, contacto), el_2tiempo());
			}
			alm(llamada_registro[playerid][x], string);
			return 1;
		}
	}
	return 1;
}

stock verificar_c(i, numero)
{
	new nombre[32] = "Desconocido";
	switch (numero)
	{
		case 0: format(nombre, sizeof(nombre), "%s", user[i][jContactoN1]);
		case 1: format(nombre, sizeof(nombre), "%s", user[i][jContactoN2]);
		case 2: format(nombre, sizeof(nombre), "%s", user[i][jContactoN3]);
		case 3: format(nombre, sizeof(nombre), "%s", user[i][jContactoN4]);
		case 4: format(nombre, sizeof(nombre), "%s", user[i][jContactoN5]);
		case 5: format(nombre, sizeof(nombre), "%s", user[i][jContactoN6]);
		case 6: format(nombre, sizeof(nombre), "%s", user[i][jContactoN7]);
		case 7: format(nombre, sizeof(nombre), "%s", user[i][jContactoN8]);
		case 8: format(nombre, sizeof(nombre), "%s", user[i][jContactoN9]);
		case 9: format(nombre, sizeof(nombre), "%s", user[i][jContactoN10]);
		case 10: format(nombre, sizeof(nombre), "%s", user[i][jContactoN11]);
		case 11: format(nombre, sizeof(nombre), "%s", user[i][jContactoN12]);
		case 12: format(nombre, sizeof(nombre), "%s", user[i][jContactoN13]);
		case 13: format(nombre, sizeof(nombre), "%s", user[i][jContactoN14]);
		case 14: format(nombre, sizeof(nombre), "%s", user[i][jContactoN15]);
		case 15: format(nombre, sizeof(nombre), "%s", user[i][jContactoN16]);
		case 16: format(nombre, sizeof(nombre), "%s", user[i][jContactoN17]);
		case 17: format(nombre, sizeof(nombre), "%s", user[i][jContactoN18]);
		case 18: format(nombre, sizeof(nombre), "%s", user[i][jContactoN19]);
		case 19: format(nombre, sizeof(nombre), "%s", user[i][jContactoN20]);
	}
	return nombre;
}

//<=================================> teléfono
funcion LlamarTelefono(playerid, numero)
{
	if(numero == user[playerid][jTelefono]){_Mensaje(playerid, 0, "0", "ERROR: No te puedes llamar a tí mismo."); return 1;}
	new string[128];
	if(numero == 911) //emergencias
	{
		if(EnServicioPD[playerid] != 0) return _Mensaje(playerid, 0, "0", "No puedes llamar a la estación estando de servicio.");

		EnLlamada[playerid] = 911;
		SetPVarInt(playerid, "en_emergencias", 0);

		Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: 911 emergencias, ¿qué servicio necesita? ¿PD o FD?");
		return 1;
	}
	else if(numero == 305) //noticias
	{
		if(user[playerid][jMiembro] == 3){_Mensaje(playerid, 0, "0", "No puedes llamar a SA Network siendo parte de ella."); return 1;}
		if ( _sanCall == -1 )
		{
			EnLlamada[playerid] = 305;
			new repors;
			for(new i=0;i<MAX_PLAYERS;i++)
			{
				if(user[i][jMiembro] == 3)
				{
					format(string, sizeof(string), "* Llamada entrante del %d, escribe /conectar [número]", user[playerid][jTelefono]);
					_Mensaje(i, 4, "EFFF00", string);
					repors++;
				}
			}
			if(repors < 1){_Mensaje(playerid, 0, "0", "En estos momentos no se encuentran reporteros en la línea."); EnLlamada[playerid] = 0; return 1;}
			_Mensaje(playerid, 1, "0", "Llamando al 305, número de SA Network...");
		} else _Mensaje(playerid, 0, "0", "El número al que llama se encuentra ocupado.");
		return 1;
	}
	new tlfencontrado;
	for(new x=0; x<MAX_PLAYERS; x++)
	{
		if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
		{
			if(user[x][jTelefono] == numero)
			{
				new contacto = -1;
				for (new e = 0; e < 20; e++)
				{
					if(user[x][jContacto][e] == user[playerid][jTelefono]) contacto = e;
				}
				if(EnLlamada[x] != 0 || PersonaEnLlamada[x] != -1){tlfencontrado = -1; break;}
				if(!_Telefono3(x)) return _Mensaje(playerid, 0, "0", "El teléfono seleccionado se encuentra apagado.");
				if (user[x][j_uTelefono] > 0) return _Mensaje(playerid, 0, "0", "El teléfono seleccionado se encuentra apagado.");
				tlfencontrado = 1;
				accion_rol(x, 0, "le suena el teléfono.");
				if(contacto == -1)
				{
					format(string, sizeof(string), "* Llamada entrante del %d, escribe /atender para responder la llamada.", user[playerid][jTelefono]);
					_Mensaje(x, 4, "00c200", string);


				}
				else
				{
					format(string, sizeof(string), "* Llamada entrante de %s, escribe /atender para responder la llamada.", verificar_c(x, contacto));
					_Mensaje(x, 4, "00c200", string);
				}
				format(string, sizeof(string), "Llamando al número %d.", numero);
				_Mensaje(playerid, 1, "0", string);
				/*PlayerAudio(playerid, 3600, 15.0);
				PlayerAudio(x, 20600, 15.0);*/
				ToqueLlamada[x] = 0;
				PersonaEnLlamada[playerid] = x;
				PersonaEnLlamada[x] = playerid;
				EnLlamada[playerid] = 1;
				ToqueLlamadaTimer[x] = SetTimerEx("D_Llamada", 15000, true, "i", x);
				registrar_l(x, 1, user[playerid][jTelefono]);
				break;
			}
		}
	}
	for (new e; e < sizeof(i_Empresa); e++)
	{
		if (i_Empresa[e][eTelefono] == numero)
		{
			//
			new repors;
			for(new i=0;i<MAX_PLAYERS;i++)
			{
				if(user[i][jContrato] == e)
				{
					format(string, sizeof(string), "* Llamada entrante del %d, escribe /atendert para responder la llamada.", user[playerid][jTelefono]);
					Mensaje_(i, 0x33CCFFFF, string);
					repors++;
				}
			}
			if(repors < 1) { _Mensaje(playerid, 0, "0", "En estos momentos no hay quien tome tu llamada."); EnLlamada[playerid] = 0; return 1; }
			//
			tlfencontrado = 1;
			EnLlamada[playerid] = 59;
			EmpresaLlamada[playerid] = e;
			format(string, sizeof(string), "Llamando al %d, número de {33CCFF}%s{ffffff}...", numero, i_Empresa[e][eNombre]);
			_Mensaje(playerid, 1, "0", string);
			break;
		}
	}
	if(tlfencontrado == -1){_Mensaje(playerid, 0, "0", "El número que ha marcado está en una llamada."); return 1;}
	if(tlfencontrado == 0){_Mensaje(playerid, 0, "0", "El número que ha marcado no existe o no está disponible."); return 1;}
	return 1;
}

funcion ColgarTelefono(playerid)
{
	new string[128], oyente = PersonaEnLlamada[playerid];
	if(EnLlamada[playerid] == 1) //está llamando a alguien
	{
		EnLlamada[playerid] = 0;
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
		format(string, sizeof(string), "Tienes una llamada perdida del %d.", user[playerid][jTelefono]);
		_Mensaje(oyente, 2, "0", string);
		KillTimer(ToqueLlamadaTimer[oyente]);
		ToqueLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		registrar_l(oyente, 3, user[playerid][jTelefono]);
		return 1;
	}
	if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3) //llamando normal
	{
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
		_Mensaje(oyente, 4, "b0b0b0", "Han colgado.");
		if(EnLlamada[playerid] == 3)
		{
			_Mensaje(playerid, 1, "0", "Coste de la llamada: 1$");
			user[playerid][jSaldo] -= 1;
		}
		if(EnLlamada[oyente] == 3)
		{
			_Mensaje(oyente, 1, "0", "Coste de la llamada: 1$");
			user[oyente][jSaldo] -= 1;
		}
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		EmpresaLlamada[playerid] = -1;
		return 1;
	}
	if(EnLlamada[playerid] == 911) //llamando a emergencias
	{
		EnLlamada[playerid] = 0;
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
	}
	if(EnLlamada[playerid] == 59) //llamando a empresa
	{
		EnLlamada[playerid] = 0;
		EmpresaLlamada[playerid] = -1;
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
	}
	if(EnLlamada[playerid] == 912) //llamada de emergencias
	{
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
		_Mensaje(oyente, 4, "b0b0b0", "Han colgado.");
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
	}
	if(EnLlamada[playerid] == 305) //llamando a cnn
	{
	    if ( _sanCall == playerid ) {
			_MensajeSAN(0x00DC3AFF, "[INN] Conexión telefónica finalizada.");
			_sanCall = -1;
		}
		EnLlamada[playerid] = 0;
		_Mensaje(playerid, 4, "b0b0b0", "Has colgado");
	}
	return 1;
}

funcion D_Llamada(playerid)
{
	new string[128];
	if(!_Telefono(playerid))
	{
		EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		_Mensaje(PersonaEnLlamada[playerid], 1, "0", "No contestan.");
		PersonaEnLlamada[PersonaEnLlamada[playerid]] = -1;
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	if(ToqueLlamada[playerid] > 4)
	{
		if(PersonaEnLlamada[playerid] != -1) EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		format(string, sizeof(string), "Llamada perdida del %d.", user[PersonaEnLlamada[playerid]][jTelefono]);
		_Mensaje(playerid, 2, "0", string);
		_Mensaje(PersonaEnLlamada[playerid], 1, "0", "No contestan.");
		for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){PersonaEnLlamada[i] = -1; break;} }
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		registrar_l(playerid, 3, user[PersonaEnLlamada[playerid]][jTelefono]);
		return 1;
	}
	/*PlayerAudio(playerid, 20600, 15.0);*/
	_Mensaje(PersonaEnLlamada[playerid], 1, "0", "Llamando...");
	ToqueLlamada[playerid] ++;
	return 1;
}
//<=================================> nombres de zonas
enum szInfo
{
	sz_Nombre[28],
	Float:sz_Area[6]
};

static const NombreZona[][szInfo] =
{
	// Barrios y pueblos
	{"Escobar International",	{5611.79, -9279.61, 0.00, 6291.79, -7269.61, 300.00} },
	{"Francis Intl. Airport",	{6617.03, 6905.29, -45.94, 7781.37, 7981.56, 254.70} },
	{"Aldea Malvada",	{-1372.14, 2498.52, 0.00, -1277.59, 2615.35, 200.00} },
	{"San Andreas",	{-3000.00, -3000.00, -500.00, 3000.00, 3000.00, 2000.00} },
	{"Angel Pine",	{-2324.94, -2584.29, -0.00, -1964.22, -2212.11, 200.00} },
	{"Arco del Oeste",	{-901.13, 2221.86, 0.00, -592.09, 2571.97, 200.00} },
	{"Fort Baxter Air Base",	{5701.95, -7815.20, 0.00, 5944.15, -7541.91, 500.00} },
	{"Atlantis",	{7302.93, -890.68, -500.00, 8980.42, 797.66, 500.00} },
	{"Back o Beyond",	{-1166.97, -2641.19, 0.00, -321.74, -1856.03, 200.00} },
	{"Las Barrancas",	{-926.13, 1398.73, -0.00, -719.23, 1634.69, 200.00} },
	{"Battery Point",	{-2741.07, 1268.41, -0.00, -2533.04, 1490.47, 200.00} },
	{"Palisades",	{-2994.49, 458.41, -0.00, -2741.07, 1339.61, 200.00} },
	{"Beacon Hill",	{-399.63, -1075.52, -1.49, -319.03, -977.52, 198.51} },
	{"Blackfield Chapel",	{1375.60, 596.35, -89.08, 1558.09, 823.23, 110.92} },
	{"Blackfield Chapel",	{1325.60, 596.35, -89.08, 1375.60, 795.01, 110.92} },
	{"Blackfield",	{964.39, 1203.22, -89.08, 1197.39, 1403.22, 110.92} },
	{"Blackfield",	{964.39, 1403.22, -89.08, 1197.39, 1726.22, 110.92} },
	{"Cochrane Dam",	{6855.50, 8343.44, -46.74, 7382.48, 8954.54, 253.34} },
	{"'The Big Ear'",	{-410.02, 1403.34, -0.00, -137.97, 1681.23, 200.00} },
	{"Saint Mark's",	{9290.00, 7690.61, 0.00, 9387.09, 7852.80, 161.00} },
	{"Saint Mark's",	{9290.00, 7852.80, 0.00, 9360.21, 7944.62, 161.00} },
	{"Saint Mark's",	{9290.00, 7944.62, 0.00, 9360.21, 8007.69, 161.00} },
	{"Trenton",	{9315.77, 7611.18, 0.00, 9387.09, 7690.61, 161.00} },
	{"Trenton",	{9310.77, 7421.18, 0.00, 9387.09, 7471.18, 161.00} },
	{"Trenton",	{9315.77, 7471.18, 0.00, 9387.09, 7538.62, 161.00} },
	{"Trenton",	{9315.77, 7538.62, 0.00, 9387.09, 7611.18, 161.00} },
	{"Blackfield Intersection",	{1166.53, 795.01, -89.08, 1375.60, 1044.69, 110.92} },
	{"Blackfield Intersection",	{1197.39, 1044.69, -89.08, 1277.05, 1163.39, 110.92} },
	{"Blackfield Intersection",	{1277.05, 1044.69, -89.08, 1315.35, 1087.63, 110.92} },
	{"Blackfield Intersection",	{1375.60, 823.23, -89.08, 1457.39, 919.45, 110.92} },
	{"Blueberry Acres",	{-319.68, -220.14, 0.00, 104.53, 293.32, 200.00} },
	{"Blueberry",	{19.61, -404.14, 0.00, 349.61, -220.14, 200.00} },
	{"Blueberry",	{104.53, -220.14, 0.00, 349.61, 152.24, 200.00} },
	{"Verdant Bluffs",	{930.22, -2488.42, -89.08, 1249.62, -2006.78, 110.92} },
	{"Verdant Bluffs",	{1073.22, -2006.78, -89.08, 1249.62, -1842.27, 110.92} },
	{"Verdant Bluffs",	{1249.62, -2179.25, -89.08, 1692.62, -1842.27, 110.92} },
	{"Bone County",	{-480.54, 596.35, -242.99, 869.46, 2993.87, 900.00} },
	{"Las Brujas",	{-365.17, 2123.01, -0.00, -208.57, 2217.68, 200.00} },
	{"Bullworth Academy",	{8078.79, 13948.30, -89.00, 8557.20, 14373.90, 500.00} },
	{"Happy Volts Asylum",	{8078.79, 13778.80, -89.00, 8206.92, 13948.30, 500.00} },
	{"New Coventry",	{8589.46, 13556.30, -89.00, 8911.03, 14034.40, 500.00} },
	{"Bullworth Academy",	{8346.21, 14187.90, -89.00, 8420.89, 14287.50, 500.00} },
	{"New Coventry",	{8730.16, 13965.40, -89.00, 8857.77, 14034.40, 500.00} },
	{"New Coventry",	{8638.83, 13928.00, -89.00, 8730.16, 14034.40, 500.00} },
	{"New Coventry",	{8730.16, 13871.30, -89.00, 8826.67, 13965.40, 500.00} },
	{"New Coventry",	{8618.51, 13807.30, -89.00, 8730.16, 13928.00, 500.00} },
	{"New Coventry",	{8730.16, 13742.80, -89.00, 8853.89, 13871.30, 500.00} },
	{"Blue Skies Industrial Park",	{8078.79, 13556.30, -89.00, 8589.46, 13948.30, 500.00} },
	{"Bullworth Academy",	{8197.77, 14218.20, -89.00, 8245.66, 14245.20, 500.00} },
	{"Bullworth Academy",	{8192.25, 14130.00, -89.00, 8245.66, 14218.20, 500.00} },
	{"Bullworth Academy",	{8245.66, 14130.00, -89.00, 8322.41, 14204.60, 500.00} },
	{"Bullworth",	{8059.07, 13586.00, -500.00, 9024.89, 14888.20, 500.00} },
	{"Bullworth Academy",	{8408.77, 14056.50, -89.00, 8465.74, 14115.80, 500.00} },
	{"Bullworth Academy",	{8278.03, 14094.20, -89.00, 8326.98, 14140.10, 500.00} },
	{"Harrington House",	{8332.06, 14090.60, -89.00, 8371.73, 14143.80, 500.00} },
	{"Old Bullworth Vale",	{8649.22, 14678.70, -89.00, 8734.51, 14781.00, 500.00} },
	{"Old Bullworth Vale",	{8734.51, 14732.90, -89.00, 8816.73, 14808.00, 500.00} },
	{"Old Bullworth Vale",	{8734.51, 14678.70, -89.00, 8851.73, 14732.90, 500.00} },
	{"Old Bullworth Vale",	{8734.51, 14578.70, -89.00, 8851.72, 14678.70, 500.00} },
	{"Old Bullworth Vale",	{8588.14, 14641.30, -89.00, 8649.22, 14742.10, 500.00} },
	{"Old Bullworth Vale",	{8464.24, 14290.90, -89.00, 8963.91, 14915.50, 500.00} },
	{"Bullworth Town",	{8630.36, 14034.40, -89.00, 8911.03, 14315.90, 500.00} },
	{"Bayside Tunnel",	{-2290.19, 2548.29, -89.08, -1950.19, 2723.29, 110.92} },
	{"Caligula's Palace",	{2087.39, 1543.23, -89.08, 2437.39, 1703.23, 110.92} },
	{"Caligula's Palace",	{2137.40, 1703.23, -89.08, 2437.39, 1783.23, 110.92} },
	{"Calton Heights",	{-2274.17, 744.17, -0.00, -1982.32, 1358.90, 200.00} },
	{"The Camel's Toe",	{2087.39, 1203.23, -89.08, 2640.40, 1383.23, 110.92} },
	{"Carcer City",	{3911.54, 4640.75, -89.00, 6137.65, 6000.00, 500.00} },
	{"Fort Carson",	{-376.23, 826.33, -0.00, 123.72, 1220.44, 200.00} },
	{"Sunshine Auto's",	{6439.46, -8410.66, 0.00, 6540.30, -8307.18, 100.00} },
	{"Central",	{4772.33, 4956.29, -89.00, 5190.23, 5267.37, 500.00} },
	{"East Los Albos",	{5660.80, 4763.34, -89.00, 6033.23, 5368.04, 500.00} },
	{"East Los Albos",	{6033.23, 5269.62, -89.00, 6137.65, 5440.81, 500.00} },
	{"East Los Albos",	{5932.54, 5368.04, -89.00, 6033.23, 5440.81, 500.00} },
	{"Stockyard",	{5017.50, 5541.06, -89.00, 5552.00, 5702.78, 500.00} },
	{"Wapona Hills",	{4374.37, 5738.15, -89.00, 4716.95, 6089.94, 500.00} },
	{"Las Colinas",	{1994.33, -1100.82, -89.08, 2056.86, -920.82, 110.92} },
	{"Las Colinas",	{2056.86, -1126.32, -89.08, 2126.86, -920.82, 110.92} },
	{"Las Colinas",	{2126.86, -1126.32, -89.08, 2185.33, -934.49, 110.92} },
	{"Las Colinas",	{2185.33, -1154.59, -89.08, 2281.45, -934.49, 110.92} },
	{"Las Colinas",	{2281.45, -1135.04, -89.08, 2632.74, -945.03, 110.92} },
	{"Las Colinas",	{2747.74, -1120.04, -89.08, 2959.35, -945.03, 110.92} },
	{"Las Colinas",	{2632.74, -1135.04, -89.08, 2747.74, -945.03, 110.92} },
	{"Chinatown",	{-2274.17, 578.40, -0.00, -2078.67, 744.17, 200.00} },
	{"Chinatown",	{8995.42, 7341.71, -21.20, 9315.42, 7786.31, 129.59} },
	{"Prawn Island",	{7492.19, -6682.81, 0.00, 7625.00, -6464.06, 500.00} },
	{"Prawn Island",	{7328.13, -6682.81, 0.00, 7492.19, -6464.06, 500.00} },
	{"Prawn Island",	{7328.13, -6464.06, 0.00, 7625.00, -6245.31, 500.00} },
	{"InterGlobal Films",	{7363.60, -6647.96, 0.00, 7515.70, -6454.25, 100.00} },
	{"City Hall",	{-2867.85, 277.41, -0.00, -2593.44, 458.41, 200.00} },
	{"Santa Flora",	{-2741.07, 458.41, -0.00, -2533.04, 793.41, 200.00} },
	{"Liberty Campus",	{8367.27, 7838.38, 0.00, 8489.27, 8188.38, 500.00} },
	{"Aspatria",	{8021.87, 8239.06, 0.00, 8201.56, 8410.94, 500.00} },
	{"Cedar Grove",	{7381.25, 8430.63, 0.00, 7560.94, 8594.69, 500.00} },
	{"Cedar Grove",	{7560.94, 8430.63, 0.00, 7787.50, 8594.69, 500.00} },
	{"Cedar Grove",	{7787.50, 8430.63, 0.00, 7975.00, 8743.13, 500.00} },
	{"Cedar Grove",	{7381.25, 8594.69, 0.00, 7787.50, 8743.13, 500.00} },
	{"Fort Staunton",	{8490.62, 7840.63, 0.00, 8865.62, 7996.88, 500.00} },
	{"Fort Staunton",	{8490.62, 7996.88, 0.00, 8864.32, 8188.38, 500.00} },
	{"",	{8537.50, 8192.19, 0.00, 8865.62, 8410.94, 500.00} },
	{"",	{8367.24, 8188.89, 0.00, 8537.50, 8410.94, 500.00} },
	{"Aspatria",	{8021.87, 7840.63, 0.00, 8201.56, 7981.25, 500.00} },
	{"Aspatria",	{8201.56, 7840.63, 0.00, 8365.62, 8106.25, 500.00} },
	{"Aspatria",	{8021.87, 7981.25, 0.00, 8201.56, 8239.06, 500.00} },
	{"Aspatria",	{8201.56, 8106.25, 0.00, 8365.62, 8410.94, 500.00} },
	{"Commerce",	{1323.90, -1722.26, -89.08, 1440.90, -1577.59, 110.92} },
	{"Commerce",	{1370.85, -1577.59, -89.08, 1463.90, -1384.95, 110.92} },
	{"Commerce",	{1463.90, -1577.59, -89.08, 1667.96, -1430.87, 110.92} },
	{"Commerce",	{1667.96, -1577.59, -89.08, 1812.62, -1430.87, 110.92} },
	{"Commerce",	{1583.50, -1722.26, -89.08, 1758.90, -1577.59, 110.92} },
	{"Newport",	{8450.11, 7190.81, -0.00, 8865.11, 7837.81, 198.86} },
	{"Staunton Island",	{7984.52, 6530.03, -114.77, 8865.52, 8617.26, 485.23} },
	{"Conference Center",	{1073.22, -1842.27, -89.08, 1323.90, -1804.21, 110.92} },
	{"Conference Center",	{1046.15, -1804.21, -89.08, 1323.90, -1722.26, 110.92} },
	{"Starfish Casino",	{2437.39, 1858.10, -39.08, 2495.09, 1970.85, 60.92} },
	{"Fort Staunton",	{8489.88, 7838.38, 0.00, 8864.32, 8188.38, 163.82} },
	{"",	{9385.80, 7554.98, 6.97, 9432.36, 7618.98, 56.97} },
	{"Cranberry Station",	{-2007.83, 56.31, 0.00, -1922.00, 224.78, 100.00} },
	{"Creek",	{2749.90, 1937.25, -89.08, 2921.62, 2669.79, 110.92} },
	{"Shady Creeks",	{-1820.64, -2643.68, -0.00, -1226.78, -1771.66, 200.00} },
	{"Shady Creeks",	{-2030.12, -2174.89, -0.00, -1820.64, -1771.66, 200.00} },
	{"Avispa Country Club",	{-2470.04, -355.49, 0.00, -2270.04, -318.49, 46.10} },
	{"Avispa Country Club",	{-2831.89, -430.28, -0.00, -2646.40, -222.59, 200.00} },
	{"Avispa Country Club",	{-2550.04, -355.49, 0.00, -2470.04, -318.49, 39.70} },
	{"The Sherman Dam",	{-968.77, 1929.41, -0.00, -481.13, 2155.26, 200.00} },
	{"Hepburn Heights",	{9360.21, 8007.69, 0.00, 9445.77, 8074.93, 161.00} },
	{"Hepburn Heights",	{9097.53, 7997.86, 0.00, 9203.27, 8115.37, 161.00} },
	{"Hepburn Heights",	{9046.78, 7997.86, 0.00, 9097.53, 8119.23, 161.00} },
	{"Hepburn Heights",	{9046.78, 8119.23, 0.00, 9097.53, 8172.55, 161.00} },
	{"Hepburn Heights",	{9360.21, 8074.93, 0.00, 9455.78, 8136.18, 161.00} },
	{"Hepburn Heights",	{9360.21, 8136.18, 0.00, 9465.36, 8228.70, 161.00} },
	{"Hepburn Heights",	{9204.01, 8228.70, 2.52, 9378.67, 8284.96, 161.00} },
	{"Hepburn Heights",	{9243.78, 8115.37, 0.00, 9360.21, 8228.70, 161.00} },
	{"Hepburn Heights",	{9097.53, 8115.37, 1.57, 9243.78, 8172.55, 161.00} },
	{"Hepburn Heights",	{9126.80, 8172.55, 0.00, 9243.78, 8228.70, 161.00} },
	{"Hepburn Heights",	{9290.00, 8007.69, 0.00, 9360.21, 8115.37, 161.00} },
	{"Hepburn Heights",	{9203.27, 7997.86, 0.00, 9290.00, 8115.37, 161.00} },
	{"Dillimore",	{580.79, -674.88, -0.00, 861.09, -404.79, 200.00} },
	{"Dunsfold",	{-9359.45, -1025.13, -89.00, -6132.36, 1943.17, 500.00} },
	{"Viceport",	{6291.79, -9279.61, 0.00, 7246.79, -8398.74, 300.00} },
	{"Doherty",	{-2270.04, -324.11, -0.00, -1794.92, -222.59, 200.00} },
	{"Doherty",	{-2173.04, -222.59, -0.00, -1794.92, 265.24, 200.00} },
	{"The Four Dragons Casino",	{1817.39, 863.23, -89.08, 2027.39, 1083.23, 110.92} },
	{"Downtown Vice City",	{6296.90, -7096.88, 0.00, 6593.75, -6281.25, 500.00} },
	{"Downtown Vice City",	{6593.80, -7096.88, 0.00, 6710.94, -6710.94, 500.00} },
	{"Downtown Vice City",	{6710.94, -7120.31, 0.00, 6968.75, -6893.75, 500.00} },
	{"Downtown Vice City",	{6593.75, -6276.56, 0.00, 6976.56, -6159.37, 500.00} },
	{"Downtown Vice City",	{6593.75, -6159.37, 0.00, 6695.31, -6003.12, 500.00} },
	{"Downtown Vice City",	{6695.31, -6159.37, 0.00, 6914.06, -6003.12, 500.00} },
	{"Downtown Vice City",	{6765.63, -6893.75, 0.00, 7031.25, -6760.94, 500.00} },
	{"Downtown Vice City",	{6851.56, -6760.94, 0.00, 7085.94, -6604.69, 500.00} },
	{"Downtown Vice City",	{6593.75, -6760.94, 0.00, 6851.56, -6675.00, 500.00} },
	{"Downtown Vice City",	{6851.56, -6604.69, 0.00, 7218.75, -6378.12, 500.00} },
	{"Downtown Vice City",	{6593.75, -6675.00, 0.00, 6851.56, -6378.12, 500.00} },
	{"Downtown Vice City",	{6976.56, -6378.12, 0.00, 7257.81, -6104.69, 500.00} },
	{"Downtown Vice City",	{6593.75, -6378.12, 0.00, 6976.56, -6276.56, 500.00} },
	{"Downtown Vice City",	{6445.31, -6276.56, 0.00, 6593.75, -6003.12, 500.00} },
	{"Easter Basin",	{-1794.92, 249.90, -0.00, -1242.98, 578.40, 200.00} },
	{"Easter Basin",	{-1794.92, -50.10, -0.00, -1499.89, 249.90, 200.00} },
	{"Portland Beach",	{9639.37, 7636.53, -29.88, 10047.60, 8449.63, 120.12} },
	{"Easter Bay Chemicals",	{-1132.82, -768.03, 0.00, -956.48, -578.12, 200.00} },
	{"Easter Bay Chemicals",	{-1132.82, -787.39, 0.00, -956.48, -768.03, 200.00} },
	{"East Beach",	{2747.74, -1498.62, -89.08, 2959.35, -1120.04, 110.92} },
	{"East Beach",	{2632.83, -1668.13, -89.08, 2747.74, -1393.42, 110.92} },
	{"East Beach",	{2747.74, -1668.13, -89.08, 2959.35, -1498.62, 110.92} },
	{"East Beach",	{2632.83, -1852.87, -89.08, 2959.35, -1668.13, 110.92} },
	{"El Castillo del Diablo",	{-464.51, 2217.68, 0.00, -208.57, 2580.36, 200.00} },
	{"El Castillo del Diablo",	{-208.57, 2123.01, -0.00, 114.03, 2337.18, 200.00} },
	{"El Castillo del Diablo",	{-208.57, 2337.18, 0.00, 8.43, 2487.18, 200.00} },
	{"El Corona",	{1692.62, -2179.25, -89.08, 1812.62, -1842.27, 110.92} },
	{"El Corona",	{1812.62, -2179.25, -89.08, 1970.62, -1852.87, 110.92} },
	{"El Quebrados",	{-1645.23, 2498.52, 0.00, -1372.14, 2777.85, 200.00} },
	{"East Los Santos",	{2281.45, -1372.04, -89.08, 2381.68, -1135.04, 110.92} },
	{"East Los Santos",	{2381.68, -1454.35, -89.08, 2462.13, -1135.04, 110.92} },
	{"East Los Santos",	{2462.13, -1454.35, -89.08, 2581.73, -1135.04, 110.92} },
	{"East Los Santos",	{2222.56, -1628.53, -89.08, 2421.03, -1494.03, 110.92} },
	{"East Los Santos",	{2266.26, -1494.03, -89.08, 2381.68, -1372.04, 110.92} },
	{"East Los Santos",	{2381.68, -1494.03, -89.08, 2421.03, -1454.35, 110.92} },
	{"East Los Santos",	{2421.03, -1628.53, -89.08, 2632.83, -1454.35, 110.92} },
	{"Esplanade East",	{-1620.30, 1176.52, -0.00, -1580.01, 1274.26, 200.00} },
	{"Esplanade East",	{-1580.01, 1025.98, -0.00, -1499.89, 1274.26, 200.00} },
	{"Esplanade East",	{-1499.89, 578.40, -79.62, -1339.89, 1274.26, 20.38} },
	{"Esplanade North",	{-2533.04, 1358.90, -0.00, -1996.66, 1501.21, 200.00} },
	{"Esplanade North",	{-1996.66, 1358.90, -0.00, -1524.24, 1592.51, 200.00} },
	{"Esplanade North",	{-1982.32, 1274.26, -0.00, -1524.24, 1358.90, 200.00} },
	{"Easter Tunnel",	{-1709.71, -833.03, -0.00, -1446.01, -730.12, 200.00} },
	{"Fallow Bridge",	{434.34, 366.57, 0.00, 603.03, 555.68, 200.00} },
	{"The Farm",	{-1209.67, -1317.10, 114.98, -908.16, -787.39, 251.98} },
	{"Fern Ridge",	{508.19, -139.26, 0.00, 1306.66, 119.53, 200.00} },
	{"",	{9613.77, 7636.66, -4.44, 9639.17, 7737.46, 70.43} },
	{"Financial",	{-1871.72, 744.17, -0.00, -1701.30, 1176.42, 300.00} },
	{"Fisher's Lagoon",	{1916.99, -233.32, -100.00, 2131.72, 13.80, 200.00} },
	{"",	{9194.21, 7070.19, -9.73, 9266.14, 7173.99, 40.27} },
	{"Flint County",	{-1213.91, -2892.97, -242.99, 44.61, -768.03, 900.00} },
	{"Flint Intersection",	{-187.70, -1596.76, -89.08, 17.06, -1276.60, 110.92} },
	{"Flint Range",	{-594.19, -1648.55, 0.00, -187.70, -1276.60, 200.00} },
	{"Flint Water",	{-314.43, -753.87, -89.08, -106.34, -463.07, 110.92} },
	{"Bedford Point",	{8021.87, 6575.00, 0.00, 8451.56, 6700.00, 500.00} },
	{"Belleville Park",	{8295.31, 7481.25, 0.00, 8451.56, 7684.38, 500.00} },
	{"Belleville Park",	{8139.06, 7481.25, 0.00, 8295.31, 7684.38, 500.00} },
	{"Belleville Park",	{8139.06, 7684.38, 0.00, 8451.56, 7840.63, 500.00} },
	{"Newport",	{8451.56, 7192.19, 0.00, 8685.94, 7340.63, 500.00} },
	{"Newport",	{8451.56, 7340.63, 0.00, 8865.62, 7489.06, 500.00} },
	{"Newport",	{8451.56, 7489.06, 0.00, 8576.56, 7840.63, 500.00} },
	{"Newport",	{8576.56, 7489.06, 0.00, 8865.62, 7660.94, 500.00} },
	{"Newport",	{8576.56, 7660.94, 0.00, 8865.62, 7840.63, 500.00} },
	{"Saint Mark's",	{9537.18, 7728.42, 0.00, 9666.99, 7858.39, 161.00} },
	{"Bedford Point",	{8225.00, 6700.00, 0.00, 8451.56, 6840.63, 500.00} },
	{"Bedford Point",	{8021.87, 6700.00, 0.00, 8115.62, 7059.38, 500.00} },
	{"Bedford Point",	{8115.62, 6700.00, 0.00, 8225.00, 7059.38, 500.00} },
	{"Bedford Point",	{8225.00, 6840.63, 0.00, 8451.56, 7059.38, 500.00} },
	{"Bedford Point",	{8209.37, 7059.38, 0.00, 8451.56, 7246.88, 500.00} },
	{"Bedford Point",	{8021.87, 7059.38, 0.00, 8209.37, 7246.88, 500.00} },
	{"Belleville Park",	{8131.25, 7246.88, 0.00, 8451.56, 7348.44, 500.00} },
	{"Belleville Park",	{8131.25, 7348.44, 0.00, 8451.56, 7481.25, 500.00} },
	{"Frederick Bridge",	{2759.25, 296.50, 0.00, 2774.25, 594.76, 200.00} },
	{"Ganton",	{2222.56, -1722.33, -89.08, 2632.83, -1628.53, 110.92} },
	{"Ganton",	{2222.56, -1852.87, -89.08, 2632.83, -1722.33, 110.92} },
	{"Gant Bridge",	{-2741.45, 1659.68, -0.00, -2616.40, 2175.15, 200.00} },
	{"Gant Bridge",	{-2741.07, 1490.47, -0.00, -2616.40, 1659.68, 200.00} },
	{"Garcia",	{-2411.22, -222.59, -0.00, -2173.04, 265.24, 200.00} },
	{"Garver Bridge",	{-1339.89, 828.13, -89.08, -1213.91, 1057.04, 110.92} },
	{"Garver Bridge",	{-1213.91, 950.02, -89.08, -1087.93, 1178.93, 110.92} },
	{"Garver Bridge",	{-1499.89, 696.44, -179.62, -1339.89, 925.35, 20.38} },
	{"Greenglass College",	{964.39, 1044.69, -89.08, 1197.39, 1203.22, 110.92} },
	{"Greenglass College",	{964.39, 930.89, -89.08, 1166.53, 1044.69, 110.92} },
	{"Glen Park",	{1812.62, -1350.72, -89.08, 2056.86, -1100.82, 110.92} },
	{"Glen Park",	{1812.62, -1100.82, -89.08, 1994.33, -973.38, 110.92} },
	{"Glen Park",	{1812.62, -1449.67, -89.08, 1996.91, -1350.72, 110.92} },
	{"Leaf Links",	{7286.27, -7741.43, 0.00, 7663.66, -6702.40, 300.00} },
	{"Hankypanky Point",	{2576.92, 62.16, 0.00, 2759.25, 385.50, 200.00} },
	{"Harwood",	{8995.98, 8471.82, -48.58, 9638.98, 8572.68, 101.42} },
	{"Hashbury",	{-2593.44, -222.59, -0.00, -2411.22, 54.72, 200.00} },
	{"Fallen Tree",	{-792.25, -698.55, -0.00, -452.40, -380.04, 200.00} },
	{"Hampton Barns",	{603.03, 264.31, 0.00, 761.99, 366.57, 200.00} },
	{"Harry Gold Parkway",	{1777.39, 863.23, -89.08, 1817.39, 2342.83, 110.92} },
	{"The High Roller",	{1817.39, 1283.23, -89.08, 2027.39, 1469.23, 110.92} },
	{"Missionary Hill",	{-2994.49, -811.28, 0.00, -2178.69, -430.28, 200.00} },
	{"Wichita Gardens",	{7732.81, 8211.88, 0.00, 7881.25, 8430.63, 500.00} },
	{"Wichita Gardens",	{7584.37, 8211.88, 0.00, 7732.81, 8430.63, 500.00} },
	{"Wichita Gardens",	{7435.94, 8071.25, 0.00, 7584.37, 8430.63, 500.00} },
	{"Wichita Gardens",	{7584.37, 8071.25, 0.00, 7881.25, 8211.88, 500.00} },
	{"Pike Creek",	{7303.12, 8071.25, 0.00, 7435.94, 8290.00, 500.00} },
	{"Pike Creek",	{7115.62, 8071.25, 0.00, 7303.12, 8290.00, 500.00} },
	{"Pike Creek",	{6842.19, 8071.25, 0.00, 7115.62, 8290.00, 500.00} },
	{"Pike Creek",	{6842.19, 8290.00, 0.00, 7115.62, 8430.63, 500.00} },
	{"Pike Creek",	{7115.62, 8290.00, 0.00, 7435.94, 8430.63, 500.00} },
	{"Rockford",	{9386.09, 7390.02, 6.29, 9432.09, 7728.83, 56.29} },
	{"Rockford",	{8367.24, 8188.89, -17.07, 8865.24, 8518.89, 83.75} },
	{"Hyman Memorial Stadium",	{5921.88, -6331.25, 0.00, 6445.31, -5948.44, 500.00} },
	{"Portland",	{8867.15, 6920.28, -117.53, 10152.70, 8684.12, 482.46} },
	{"The Emerald Isle",	{2011.94, 2202.76, -89.08, 2237.40, 2508.23, 110.92} },
	{"Idlewood",	{1812.62, -1602.31, -89.08, 2124.66, -1449.67, 110.92} },
	{"Idlewood",	{2124.66, -1742.31, -89.08, 2222.56, -1494.03, 110.92} },
	{"Idlewood",	{1812.62, -1852.87, -89.08, 1971.66, -1742.31, 110.92} },
	{"Idlewood",	{1812.62, -1742.31, -89.08, 1951.66, -1602.31, 110.92} },
	{"Idlewood",	{1951.66, -1742.31, -89.08, 2124.66, -1602.31, 110.92} },
	{"Idlewood",	{1971.66, -1852.87, -89.08, 2222.56, -1742.31, 110.92} },
	{"Jefferson",	{2185.33, -1210.74, -89.08, 2281.45, -1154.59, 110.92} },
	{"Jefferson",	{2056.86, -1210.74, -89.08, 2185.33, -1126.32, 110.92} },
	{"Jefferson",	{2056.86, -1372.04, -89.08, 2281.45, -1210.74, 110.92} },
	{"Jefferson",	{1996.91, -1449.67, -89.08, 2056.86, -1350.72, 110.92} },
	{"Jefferson",	{2056.86, -1449.67, -89.08, 2266.21, -1372.04, 110.92} },
	{"Jefferson",	{2124.66, -1494.03, -89.08, 2266.21, -1449.67, 110.92} },
	{"Julius Thruway East",	{2685.16, 1055.96, -89.08, 2749.90, 2626.55, 110.92} },
	{"Julius Thruway East",	{2623.18, 943.24, -89.08, 2749.90, 1055.96, 110.92} },
	{"Julius Thruway East",	{2625.16, 2202.76, -89.08, 2685.16, 2442.55, 110.92} },
	{"Julius Thruway East",	{2536.43, 2442.55, -89.08, 2685.16, 2542.55, 110.92} },
	{"Julius Thruway North",	{2498.21, 2542.55, -89.08, 2685.16, 2626.55, 110.92} },
	{"Julius Thruway North",	{2237.40, 2542.55, -89.08, 2498.21, 2663.17, 110.92} },
	{"Julius Thruway North",	{2121.40, 2508.23, -89.08, 2237.40, 2663.17, 110.92} },
	{"Julius Thruway North",	{1938.80, 2508.23, -89.08, 2121.40, 2624.23, 110.92} },
	{"Julius Thruway North",	{1534.56, 2433.23, -89.08, 1848.40, 2583.23, 110.92} },
	{"Julius Thruway North",	{1848.40, 2478.49, -89.08, 1938.80, 2553.49, 110.92} },
	{"Julius Thruway North",	{1377.39, 2433.23, -89.08, 1534.56, 2507.23, 110.92} },
	{"Julius Thruway North",	{1704.59, 2342.83, -89.08, 1848.40, 2433.23, 110.92} },
	{"Julius Thruway South",	{1457.39, 823.23, -89.08, 2377.39, 863.23, 110.92} },
	{"Julius Thruway South",	{2377.39, 788.89, -89.08, 2537.39, 897.90, 110.92} },
	{"Julius Thruway West",	{1197.39, 1163.39, -89.08, 1236.63, 2243.23, 110.92} },
	{"Julius Thruway West",	{1236.63, 2142.86, -89.08, 1297.47, 2243.23, 110.92} },
	{"Juniper Hill",	{-2533.04, 578.40, -0.00, -2274.17, 968.37, 200.00} },
	{"Juniper Hollow",	{-2533.04, 968.37, -0.00, -2274.17, 1358.90, 200.00} },
	{"Vice City Junkyard",	{6103.24, -7542.91, 0.00, 6291.79, -7269.61, 300.00} },
	{"K.A.C.C. Military Fuels",	{2498.21, 2626.55, -89.08, 2749.90, 2861.55, 110.92} },
	{"Kaufman Cabs",	{6484.64, -7321.09, 0.00, 6505.96, -7278.25, 100.00} },
	{"Kaufman Cabs",	{6506.62, -7323.52, 0.00, 6520.15, -7280.68, 100.00} },
	{"Kincaid Bridge",	{-1339.89, 599.22, -89.08, -1213.91, 828.13, 110.92} },
	{"Kincaid Bridge",	{-1213.91, 721.11, -89.08, -1087.93, 950.02, 110.92} },
	{"Kincaid Bridge",	{-1087.93, 855.37, -89.08, -961.95, 986.28, 110.92} },
	{"Los Santos",	{44.61, -2892.97, -242.99, 2997.06, -768.03, 900.00} },
	{"Los Santos International",	{1249.62, -2394.33, -89.08, 1852.00, -2179.25, 110.92} },
	{"Los Santos International",	{1852.00, -2394.33, -89.08, 2089.00, -2179.25, 110.92} },
	{"Los Santos International",	{1382.73, -2730.88, -89.08, 2201.82, -2394.33, 110.92} },
	{"Los Santos International",	{1974.63, -2394.33, -39.08, 2089.00, -2256.59, 60.92} },
	{"Los Santos International",	{1400.97, -2669.26, -39.08, 2189.82, -2597.26, 60.92} },
	{"Los Santos International",	{2051.63, -2597.26, -39.08, 2152.45, -2394.33, 60.92} },
	{"Francis Intl. Airport",	{6607.81, 6895.31, 0.00, 7482.81, 7864.06, 500.00} },
	{"Francis Intl. Airport",	{7482.81, 6895.31, 0.00, 7787.50, 7434.38, 500.00} },
	{"Cochrane Dam",	{6842.19, 8430.63, 0.00, 7381.25, 8954.06, 500.00} },
	{"Last Dime Motel",	{1823.08, 596.35, -89.08, 1997.22, 823.23, 110.92} },
	{"Ocean Docks",	{2089.00, -2394.33, -89.08, 2201.82, -2235.84, 110.92} },
	{"Ocean Docks",	{2201.82, -2418.33, -89.08, 2324.00, -2095.00, 110.92} },
	{"Ocean Docks",	{2324.00, -2145.10, -89.08, 2703.58, -2059.23, 110.92} },
	{"Ocean Docks",	{2324.00, -2302.33, -89.08, 2703.58, -2145.10, 110.92} },
	{"Ocean Docks",	{2201.82, -2730.88, -89.08, 2324.00, -2418.33, 110.92} },
	{"Ocean Docks",	{2703.58, -2302.33, -89.08, 2959.35, -2126.90, 110.92} },
	{"Ocean Docks",	{2373.77, -2697.09, -89.08, 2809.22, -2330.46, 110.92} },
	{"Linden Side",	{2749.90, 943.24, -89.08, 2923.39, 1198.99, 110.92} },
	{"Downtown Los Santos",	{1370.85, -1170.87, -89.08, 1463.90, -1130.85, 110.92} },
	{"Downtown Los Santos",	{1378.33, -1130.85, -89.08, 1463.90, -1026.33, 110.92} },
	{"Downtown Los Santos",	{1391.05, -1026.33, -89.08, 1463.90, -927.00, 110.92} },
	{"Downtown Los Santos",	{1370.85, -1384.95, -89.08, 1463.90, -1170.87, 110.92} },
	{"Downtown Los Santos",	{1463.90, -1290.87, -89.08, 1724.76, -1150.87, 110.92} },
	{"Downtown Los Santos",	{1463.90, -1430.87, -89.08, 1724.76, -1290.87, 110.92} },
	{"Downtown Los Santos",	{1724.76, -1250.90, -89.08, 1812.62, -1150.87, 110.92} },
	{"Downtown Los Santos",	{1724.76, -1430.87, -89.08, 1812.62, -1250.90, 110.92} },
	{"Downtown Los Santos",	{1507.51, -1385.21, 110.92, 1582.55, -1325.31, 335.92} },
	{"Leafy Hollow",	{-1166.97, -1856.03, 0.00, -815.62, -1602.07, 200.00} },
	{"Los Flores",	{2581.73, -1454.35, -89.08, 2632.83, -1393.42, 110.92} },
	{"Los Flores",	{2581.73, -1393.42, -89.08, 2747.74, -1135.04, 110.92} },
	{"Liberty City",	{6137.65, 6000.00, -500.00, 10000.00, 10000.00, 2000.00} },
	{"Little Haiti",	{6242.19, -7815.63, 0.00, 6710.94, -7753.13, 500.00} },
	{"Little Haiti",	{6500.00, -7753.13, 0.00, 6710.94, -7464.06, 500.00} },
	{"Little Haiti",	{6710.94, -7612.50, 0.00, 6820.31, -7323.44, 500.00} },
	{"Little Haiti",	{6710.94, -7323.44, 0.00, 6859.38, -7120.31, 500.00} },
	{"Little Haiti",	{6242.19, -7753.13, 0.00, 6500.00, -7565.63, 500.00} },
	{"Little Haiti",	{6335.94, -7464.06, 0.00, 6710.94, -7276.56, 500.00} },
	{"Little Haiti",	{6218.75, -7565.63, 0.00, 6500.00, -7464.06, 500.00} },
	{"Little Haiti",	{6335.94, -7276.56, 0.00, 6710.94, -7096.88, 500.00} },
	{"Little Havana",	{6562.50, -8050.00, 0.00, 6765.63, -7925.00, 500.00} },
	{"Little Havana",	{6435.23, -8440.32, 0.00, 6584.84, -8353.49, 500.00} },
	{"Little Havana",	{6474.38, -8520.69, 0.00, 6584.84, -8440.32, 500.00} },
	{"Little Havana",	{6446.92, -8597.13, 0.00, 6584.84, -8520.69, 500.00} },
	{"Little Havana",	{6584.84, -8619.02, 0.00, 6658.99, -8520.69, 500.00} },
	{"Little Havana",	{6562.50, -8245.31, 0.00, 6726.56, -8050.00, 500.00} },
	{"Little Havana",	{6429.69, -8245.31, 0.00, 6562.50, -8050.00, 500.00} },
	{"Little Havana",	{6296.88, -8268.75, 0.00, 6429.69, -8050.00, 500.00} },
	{"Little Havana",	{6468.75, -7925.00, 0.00, 6710.94, -7815.63, 500.00} },
	{"Little Havana",	{6242.19, -8050.00, 0.00, 6562.50, -7925.00, 500.00} },
	{"Little Havana",	{6242.19, -7925.00, 0.00, 6468.75, -7815.63, 500.00} },
	{"Little Havana",	{6257.81, -8604.69, 0.00, 6750.00, -8268.75, 500.00} },
	{"Little Havana",	{6355.81, -8396.48, 0.00, 6435.23, -8258.38, 500.00} },
	{"Willowfield",	{1970.62, -2179.25, -89.08, 2089.00, -1852.87, 110.92} },
	{"Willowfield",	{2089.00, -2235.84, -89.08, 2201.82, -1989.90, 110.92} },
	{"Willowfield",	{2089.00, -1989.90, -89.08, 2324.00, -1852.87, 110.92} },
	{"Willowfield",	{2201.82, -2095.00, -89.08, 2324.00, -1989.90, 110.92} },
	{"Willowfield",	{2324.00, -2059.23, -89.08, 2541.70, -1852.87, 110.92} },
	{"Willowfield",	{2541.70, -2059.23, -89.08, 2703.58, -1941.40, 110.92} },
	{"Willowfield",	{2541.70, -1941.40, -89.08, 2703.58, -1852.87, 110.92} },
	{"Linden Station",	{2811.25, 1229.59, -39.59, 2861.25, 1407.59, 60.41} },
	{"Saint Mark's",	{9315.90, 7737.68, -14.30, 9638.90, 8171.68, 135.70} },
	{"Little Mexico",	{1701.90, -1842.27, -89.08, 1812.62, -1722.26, 110.92} },
	{"Little Mexico",	{1758.90, -1722.26, -89.08, 1812.62, -1577.59, 110.92} },
	{"Come-A-Lot",	{2087.39, 943.24, -89.08, 2623.18, 1203.23, 110.92} },
	{"Los Santos Inlet",	{-321.74, -2224.43, -89.08, 44.61, -1724.43, 110.92} },
	{"Linden Station",	{2749.90, 1198.99, -89.08, 2923.39, 1548.99, 110.92} },
	{"LVA Freight Depot",	{1457.39, 863.23, -89.08, 1777.40, 1143.21, 110.92} },
	{"LVA Freight Depot",	{1375.60, 919.45, -89.08, 1457.37, 1203.28, 110.92} },
	{"LVA Freight Depot",	{1277.05, 1087.63, -89.08, 1375.60, 1203.28, 110.92} },
	{"LVA Freight Depot",	{1315.35, 1044.69, -89.08, 1375.60, 1087.63, 110.92} },
	{"LVA Freight Depot",	{1236.63, 1163.41, -89.08, 1277.05, 1203.28, 110.92} },
	{"Las Venturas Airport",	{1515.81, 1586.40, -12.50, 1729.95, 1714.56, 87.50} },
	{"Saint Mark's",	{9387.09, 7728.42, 0.00, 9537.18, 7852.80, 161.00} },
	{"Saint Mark's",	{9360.21, 7886.18, 0.00, 9503.62, 7944.62, 161.00} },
	{"Trenton",	{9398.01, 7353.36, 0.00, 9458.50, 7420.14, 161.00} },
	{"Saint Mark's",	{9360.21, 7852.80, 0.00, 9503.62, 7886.18, 161.00} },
	{"Saint Mark's",	{9503.62, 7852.80, 0.00, 9537.18, 7944.62, 161.00} },
	{"Saint Mark's",	{9537.18, 7858.39, 0.00, 9666.99, 7944.62, 161.00} },
	{"Saint Mark's",	{9555.78, 7944.62, 0.00, 9666.99, 8056.21, 161.00} },
	{"Saint Mark's",	{9537.18, 7944.62, 0.00, 9555.78, 8056.21, 161.00} },
	{"Saint Mark's",	{9435.96, 7944.62, 0.00, 9537.18, 8007.69, 161.00} },
	{"Saint Mark's",	{9445.77, 8007.69, 0.00, 9537.18, 8074.93, 161.00} },
	{"Saint Mark's",	{9360.21, 7944.62, 0.00, 9435.96, 8007.69, 161.00} },
	{"",	{9287.53, 7342.73, 0.00, 9315.16, 7612.31, 30.01} },
	{"",	{9216.08, 7612.63, 0.00, 9314.83, 7640.44, 30.08} },
	{"",	{9215.79, 7641.01, 0.00, 9245.31, 7779.77, 30.93} },
	{"",	{9245.59, 7738.91, 0.00, 9315.11, 7779.77, 30.08} },
	{"",	{9285.88, 7786.44, 0.00, 9314.83, 7967.14, 30.36} },
	{"",	{9286.15, 7968.04, 0.00, 9314.85, 8070.78, 30.65} },
	{"The Mako Span",	{1664.62, 401.75, 0.00, 1785.14, 567.20, 200.00} },
	{"Vice Point",	{7671.88, -6276.56, 0.00, 8093.75, -6151.56, 500.00} },
	{"Vice Point",	{7750.00, -6432.81, 0.00, 8093.75, -6276.56, 500.00} },
	{"Vice Point",	{7773.44, -6643.75, 0.00, 8093.75, -6432.81, 500.00} },
	{"Vice Point",	{7656.25, -6878.13, 0.00, 7890.63, -6643.75, 500.00} },
	{"Vice Point",	{7890.63, -6878.13, 0.00, 8093.75, -6643.75, 500.00} },
	{"Vice Point",	{7843.75, -7034.38, 0.00, 8093.75, -6878.13, 500.00} },
	{"Vice Point",	{7750.00, -7245.31, 0.00, 8093.75, -7034.38, 500.00} },
	{"Midway",	{-2291.98, 11543.70, -500.00, 1189.76, 15185.10, 1500.00} },
	{"Marina",	{647.71, -1577.59, -89.08, 807.92, -1416.25, 110.92} },
	{"Marina",	{807.92, -1577.59, -89.08, 926.92, -1416.25, 110.92} },
	{"Marina",	{647.71, -1804.21, -89.08, 851.45, -1577.59, 110.92} },
	{"Market Station",	{787.46, -1410.93, -34.13, 866.01, -1310.21, 65.87} },
	{"Martin Bridge",	{-222.18, 293.32, 0.00, -122.13, 476.46, 200.00} },
	{"Verdant Meadows",	{37.03, 2337.18, -0.00, 435.99, 2677.90, 200.00} },
	{"Market",	{1072.66, -1416.25, -89.08, 1370.85, -1130.85, 110.92} },
	{"Market",	{926.92, -1577.59, -89.08, 1370.85, -1416.25, 110.92} },
	{"Market",	{787.46, -1416.25, -89.08, 1072.66, -1310.21, 110.92} },
	{"Market",	{952.66, -1310.21, -89.08, 1072.66, -1130.85, 110.92} },
	{"Montgomery Intersection",	{1546.65, 208.16, 0.00, 1745.83, 347.46, 200.00} },
	{"Montgomery Intersection",	{1582.44, 347.46, 0.00, 1664.62, 401.75, 200.00} },
	{"Montgomery",	{1119.51, 119.53, -0.00, 1451.40, 493.32, 200.00} },
	{"Montgomery",	{1451.40, 347.46, -0.00, 1582.44, 420.80, 200.00} },
	{"Salvatore's House",	{9666.99, 8040.35, 0.00, 9750.13, 8112.73, 161.00} },
	{"Mount Chiliad",	{-2994.49, -2189.91, -47.92, -2178.69, -1115.58, 576.08} },
	{"Mount Chiliad",	{-2178.69, -1771.66, -47.92, -1936.12, -1250.97, 576.08} },
	{"Mount Chiliad",	{-2997.47, -1115.58, -47.92, -2178.69, -971.91, 576.08} },
	{"Mount Chiliad",	{-2178.69, -2189.91, -47.92, -2030.12, -1771.66, 576.08} },
	{"Mulholland",	{687.80, -860.62, -89.08, 911.80, -768.03, 110.92} },
	{"Mulholland",	{737.57, -768.03, -89.08, 1142.29, -674.88, 110.92} },
	{"Mulholland",	{861.09, -674.88, -89.08, 1156.55, -600.90, 110.92} },
	{"Mulholland",	{1281.13, -452.43, -89.08, 1641.13, -290.91, 110.92} },
	{"Mulholland",	{1269.13, -768.03, -89.08, 1414.07, -452.43, 110.92} },
	{"Mulholland",	{1414.07, -768.03, -89.08, 1667.61, -452.43, 110.92} },
	{"Mulholland",	{768.69, -954.66, -89.08, 952.60, -860.62, 110.92} },
	{"Mulholland",	{1096.47, -910.17, -89.08, 1169.13, -768.03, 110.92} },
	{"Mulholland",	{952.60, -937.18, -89.08, 1096.47, -860.62, 110.92} },
	{"Mulholland",	{911.80, -860.62, -89.08, 1096.47, -768.03, 110.92} },
	{"Mulholland",	{1169.13, -910.17, -89.08, 1318.13, -768.03, 110.92} },
	{"Mulholland",	{1357.00, -927.00, -89.08, 1463.90, -768.03, 110.92} },
	{"Mulholland",	{1318.13, -910.17, -89.08, 1357.00, -768.03, 110.92} },
	{"Mulholland Intersection",	{1463.90, -1150.87, -89.08, 1812.62, -768.03, 110.92} },
	{"",	{13092.20, -11764.20, 990.45, 13237.90, -11476.70, 1049.62} },
	{"North Rock",	{2285.37, -768.03, 0.00, 2770.59, -269.74, 200.00} },
	{"Ocean Beach",	{7718.75, -8706.25, 0.00, 7906.25, -8300.00, 500.00} },
	{"Ocean Beach",	{7554.69, -8612.50, 0.00, 7718.75, -8300.00, 500.00} },
	{"Ocean Beach",	{7304.69, -8612.50, 0.00, 7554.69, -8354.69, 500.00} },
	{"Ocean Beach",	{7250.00, -8768.75, 0.00, 7718.75, -8612.50, 500.00} },
	{"Ocean Beach",	{7718.75, -9057.81, 0.00, 7835.94, -8706.25, 500.00} },
	{"Ocean Beach",	{7273.44, -8925.00, 0.00, 7718.75, -8768.75, 500.00} },
	{"Ocean Beach",	{7320.31, -9120.31, 0.00, 7718.75, -8925.00, 500.00} },
	{"Ocean Flats",	{-2994.49, 277.41, -0.00, -2867.85, 458.41, 200.00} },
	{"Ocean Flats",	{-2994.49, -222.59, -0.00, -2593.44, 277.41, 200.00} },
	{"Ocean Flats",	{-2994.49, -430.28, -0.00, -2831.89, -222.59, 200.00} },
	{"Octane Springs",	{338.66, 1228.51, 0.00, 664.31, 1655.05, 200.00} },
	{"Old Venturas Strip",	{2162.39, 2012.18, -89.08, 2685.16, 2202.76, 110.92} },
	{"Green Palms",	{176.58, 1305.45, -0.00, 338.66, 1520.72, 200.00} },
	{"Palomino Creek",	{2160.22, -149.00, 0.00, 2576.92, 228.32, 200.00} },
	{"The Panopticon",	{-947.98, -304.32, -0.00, -319.68, 327.07, 200.00} },
	{"Paradiso",	{-2741.07, 793.41, -0.00, -2533.04, 1268.41, 200.00} },
	{"Belleville Park",	{8128.43, 7246.93, -46.75, 8449.27, 7836.93, 224.16} },
	{"Las Payasadas",	{-354.33, 2580.36, 0.00, -133.63, 2816.82, 200.00} },
	{"Peachtree",	{8030.73, 146.70, -500.00, 8558.64, 670.66, 500.00} },
	{"Pershing Square",	{1440.90, -1722.26, -89.08, 1583.50, -1577.59, 110.92} },
	{"Pilgrim",	{2437.39, 1383.23, -89.08, 2624.40, 1783.23, 110.92} },
	{"Pilgrim",	{2624.40, 1383.23, -89.08, 2685.16, 1783.23, 110.92} },
	{"The Pink Swan",	{1817.39, 1083.23, -89.08, 2027.39, 1283.23, 110.92} },
	{"Pilson Intersection",	{1098.39, 2243.23, -89.08, 1377.39, 2507.23, 110.92} },
	{"Pirates in Men's Pants",	{1817.39, 1469.23, -89.08, 2027.40, 1703.23, 110.92} },
	{"Playa del Seville",	{2703.58, -2126.90, -89.08, 2959.35, -1852.87, 110.92} },
	{"Portland Harbor",	{9613.68, 7180.35, -18.86, 10065.70, 7636.35, 131.14} },
	{"Trenton",	{9315.88, 7180.15, 1.50, 9613.38, 7507.95, 151.50} },
	{"Atlantic Quays",	{9315.88, 6998.45, -13.50, 9751.88, 7180.07, 136.50} },
	{"Callahan Point",	{9001.68, 7071.78, -13.87, 9315.68, 7291.27, 136.13} },
	{"Vice City Printworks",	{6362.76, -7815.20, 0.00, 6458.24, -7660.20, 500.00} },
	{"Lil' Probe Inn",	{-90.22, 1286.85, -0.00, 153.86, 1554.12, 200.00} },
	{"Wichita Gardens",	{7438.17, 7981.93, -45.87, 7878.96, 8342.73, 254.24} },
	{"Prickle Pine",	{1534.56, 2583.23, -89.08, 1848.40, 2863.23, 110.92} },
	{"Prickle Pine",	{1117.40, 2507.23, -89.08, 1534.56, 2723.23, 110.92} },
	{"Prickle Pine",	{1848.40, 2553.49, -89.08, 1938.80, 2863.23, 110.92} },
	{"Prickle Pine",	{1938.80, 2624.23, -89.08, 2121.40, 2861.55, 110.92} },
	{"Hunter Quarry",	{337.24, 710.84, -115.24, 860.55, 1031.71, 203.76} },
	{"Red County",	{-1213.91, -768.03, -242.99, 2997.06, 596.35, 900.00} },
	{"Redsands East",	{1817.39, 2011.83, -89.08, 2106.70, 2202.76, 110.92} },
	{"Redsands East",	{1817.39, 2202.76, -89.08, 2011.94, 2342.83, 110.92} },
	{"Redsands East",	{1848.40, 2342.83, -89.08, 2011.94, 2478.49, 110.92} },
	{"Red Light District",	{8995.38, 7786.38, -22.67, 9315.38, 7967.38, 147.33} },
	{"Redsands West",	{1297.47, 2142.86, -89.08, 1777.39, 2243.23, 110.92} },
	{"Redsands West",	{1236.63, 1883.11, -89.08, 1777.39, 2142.86, 110.92} },
	{"Redsands West",	{1377.39, 2243.23, -89.08, 1704.59, 2433.23, 110.92} },
	{"Redsands West",	{1704.59, 2243.23, -89.08, 1777.39, 2342.83, 110.92} },
	{"Restricted Area",	{-91.59, 1655.05, -50.00, 421.23, 2123.01, 250.00} },
	{"Randolph Industrial Estate",	{1558.09, 596.35, -89.08, 1823.08, 823.24, 110.92} },
	{"Richman",	{321.36, -860.62, -89.08, 687.80, -768.03, 110.92} },
	{"Richman",	{321.36, -768.03, -89.08, 700.79, -674.88, 110.92} },
	{"Richman",	{321.36, -1044.07, -89.08, 647.56, -860.62, 110.92} },
	{"Richman",	{72.65, -1404.97, -89.08, 225.16, -1235.07, 110.92} },
	{"Richman",	{72.65, -1235.07, -89.08, 321.36, -1008.15, 110.92} },
	{"Richman",	{321.36, -1235.07, -89.08, 647.52, -1044.07, 110.92} },
	{"Richman",	{647.56, -1118.28, -89.08, 787.46, -954.66, 110.92} },
	{"Richman",	{647.56, -954.66, -89.08, 768.69, -860.62, 110.92} },
	{"Richman",	{225.16, -1369.62, -89.08, 334.50, -1292.07, 110.92} },
	{"Richman",	{225.16, -1292.07, -89.08, 466.22, -1235.07, 110.92} },
	{"The Clown's Pocket",	{2162.39, 1783.23, -89.08, 2437.39, 1883.23, 110.92} },
	{"Callahan Bridge",	{8867.44, 7291.65, 6.26, 9315.44, 7341.65, 206.26} },
	{"Callahan Bridge",	{8694.77, 7291.70, 30.74, 8864.88, 7341.70, 180.74} },
	{"Tierra Robada",	{-2997.47, 1659.68, -242.99, -480.54, 2993.87, 900.00} },
	{"Tierra Robada",	{-1213.91, 596.35, -242.99, -480.54, 1659.68, 900.00} },
	{"Robada Intersection",	{-1119.01, 1178.93, -89.08, -862.02, 1351.45, 110.92} },
	{"Roca Escalante",	{2237.40, 2202.76, -89.08, 2536.43, 2542.55, 110.92} },
	{"Roca Escalante",	{2536.43, 2202.76, -89.08, 2625.16, 2442.55, 110.92} },
	{"Rodeo",	{225.16, -1684.65, -89.08, 312.80, -1501.95, 110.92} },
	{"Rodeo",	{225.16, -1501.95, -89.08, 334.50, -1369.62, 110.92} },
	{"Rodeo",	{334.50, -1501.95, -89.08, 422.68, -1406.05, 110.92} },
	{"Rodeo",	{334.50, -1406.05, -89.08, 466.22, -1292.07, 110.92} },
	{"Rodeo",	{466.22, -1385.07, -89.08, 647.52, -1235.07, 110.92} },
	{"Rodeo",	{312.80, -1684.65, -89.08, 422.68, -1501.95, 110.92} },
	{"Rodeo",	{422.68, -1684.65, -89.08, 558.10, -1570.20, 110.92} },
	{"Rodeo",	{558.10, -1684.65, -89.08, 647.52, -1384.93, 110.92} },
	{"Rodeo",	{466.22, -1570.20, -89.08, 558.10, -1385.07, 110.92} },
	{"Rodeo",	{422.68, -1570.20, -89.08, 466.22, -1406.05, 110.92} },
	{"Rodeo",	{72.65, -1544.17, -89.08, 225.16, -1404.97, 110.92} },
	{"Rodeo",	{72.65, -1684.65, -89.08, 225.16, -1544.17, 110.92} },
	{"Royal Casino",	{2087.39, 1383.23, -89.08, 2437.39, 1543.23, 110.92} },
	{"Rockshore East",	{2537.39, 676.55, -89.08, 2902.35, 943.24, 110.92} },
	{"Rockshore West",	{1997.22, 596.35, -89.08, 2377.39, 823.23, 110.92} },
	{"Rockshore West",	{2377.39, 596.35, -89.08, 2537.39, 788.89, 110.92} },
	{"Portland View",	{9316.10, 7508.19, -34.21, 9613.60, 7737.19, 115.79} },
	{"United States",	{-24000.00, -24000.00, -2000.00, 24000.00, 24000.00, 2000.00} },
	{"San Fierro Bay",	{-2616.40, 1501.21, -0.00, -1996.66, 1659.68, 200.00} },
	{"San Fierro Bay",	{-2616.40, 1659.68, -0.00, -1996.66, 2175.15, 200.00} },
	{"San Andreas Sound",	{2450.39, 385.50, -100.00, 2759.25, 562.35, 200.00} },
	{"San Fierro",	{-2997.47, -1115.58, -242.99, -1213.91, 1659.68, 900.00} },
	{"Easter Bay Airport",	{-1794.92, -730.12, -0.00, -1213.91, -50.10, 200.00} },
	{"Easter Bay Airport",	{-1242.98, -50.10, 0.00, -1213.91, 578.40, 200.00} },
	{"Easter Bay Airport",	{-1499.89, -50.10, -0.00, -1242.98, 249.90, 200.00} },
	{"Easter Bay Airport",	{-1213.91, -730.12, 0.00, -1132.82, -50.10, 200.00} },
	{"Easter Bay Airport",	{-1213.91, -50.10, -0.00, -947.98, 578.40, 200.00} },
	{"Easter Bay Airport",	{-1490.33, -209.54, 15.41, -1264.40, -148.39, 25.41} },
	{"Easter Bay Airport",	{-1315.42, -405.39, 15.41, -1264.40, -209.54, 25.41} },
	{"Easter Bay Airport",	{-1354.39, -287.40, 15.41, -1315.42, -209.54, 25.41} },
	{"Downtown",	{-1982.32, 744.17, -0.00, -1871.72, 1274.26, 200.00} },
	{"Downtown",	{-1871.72, 1176.42, -0.00, -1620.30, 1274.26, 200.00} },
	{"Downtown",	{-1700.01, 744.27, -0.00, -1580.01, 1176.52, 200.00} },
	{"Downtown",	{-1580.01, 744.27, -0.00, -1499.89, 1025.98, 200.00} },
	{"Downtown",	{-2078.67, 578.40, -0.00, -1499.89, 744.27, 200.00} },
	{"Downtown",	{-1993.28, 265.24, -0.00, -1794.92, 578.40, 200.00} },
	{"Avispa Country Club",	{-2361.51, -417.20, 0.00, -2270.04, -355.49, 200.00} },
	{"Avispa Country Club",	{-2667.81, -302.13, -28.83, -2646.40, -262.32, 71.17} },
	{"Garcia",	{-2395.14, -222.59, -0.00, -2354.09, -204.79, 200.00} },
	{"Avispa Country Club",	{-2646.40, -355.49, 0.00, -2270.04, -222.59, 200.00} },
	{"Shady Cabin",	{-1632.83, -2263.44, -0.00, -1601.33, -2231.79, 200.00} },
	{"",	{272.46, -443.94, 1021.16, 302.06, -416.64, 1030.56} },
	{"Sherman Reservoir",	{-789.74, 1659.68, -89.08, -599.50, 1929.41, 110.92} },
	{"Bedford Point",	{8025.56, 6577.95, -61.32, 8449.56, 7245.55, 432.35} },
	{"Foster Valley",	{-2178.69, -1115.58, 0.00, -1794.92, -599.88, 200.00} },
	{"Foster Valley",	{-2178.69, -1250.97, 0.00, -1794.92, -1115.58, 200.00} },
	{"Foster Valley",	{-2270.04, -430.28, -0.00, -2178.69, -324.11, 200.00} },
	{"Foster Valley",	{-2178.69, -599.88, -0.00, -1794.92, -324.11, 200.00} },
	{"Red Light District",	{9046.78, 7917.87, 0.00, 9150.79, 7997.86, 161.00} },
	{"Red Light District",	{9175.77, 7741.18, 0.00, 9234.39, 7852.80, 161.00} },
	{"Red Light District",	{9234.39, 7788.91, 0.00, 9290.00, 7852.80, 161.00} },
	{"Red Light District",	{9234.39, 7690.61, 0.00, 9290.00, 7788.91, 161.00} },
	{"Red Light District",	{9150.79, 7917.87, 0.00, 9250.77, 7997.86, 161.00} },
	{"Red Light District",	{9250.77, 7921.18, 0.00, 9290.00, 7997.86, 161.00} },
	{"Red Light District",	{9250.77, 7852.80, 0.00, 9290.00, 7921.18, 161.00} },
	{"Red Light District",	{9150.79, 7852.80, 0.00, 9250.77, 7917.87, 161.00} },
	{"Red Light District",	{9046.78, 7852.80, 0.00, 9150.79, 7917.87, 161.00} },
	{"Red Light District",	{9105.93, 7805.97, 0.00, 9175.77, 7852.80, 161.00} },
	{"Red Light District",	{9046.78, 7741.18, 0.00, 9175.77, 7805.97, 161.00} },
	{"Red Light District",	{9046.78, 7805.97, 0.00, 9105.93, 7852.80, 161.00} },
	{"Santa Maria Beach",	{342.65, -2173.29, -89.08, 647.71, -1684.65, 110.92} },
	{"Santa Maria Beach",	{72.65, -2173.29, -89.08, 342.65, -1684.65, 110.92} },
	{"Spinybed",	{2121.40, 2663.17, -89.08, 2498.21, 2861.55, 110.92} },
	{"Sobell Rail Yards",	{2749.90, 1548.99, -89.08, 2923.39, 1937.25, 110.92} },
	{"Aspatria",	{8024.24, 7837.40, -0.00, 8366.24, 8410.50, 120.27} },
	{"Starfish Casino",	{2162.39, 1883.23, -89.08, 2437.39, 2012.18, 110.92} },
	{"Starfish Casino",	{2437.39, 1783.23, -89.08, 2685.16, 2012.18, 110.92} },
	{"Starfish Island",	{6765.63, -7971.88, 0.00, 7031.25, -7729.69, 500.00} },
	{"Starfish Island",	{7031.25, -7971.88, 0.00, 7140.63, -7729.69, 500.00} },
	{"Starfish Island",	{7140.63, -7971.88, 0.00, 7343.75, -7729.69, 500.00} },
	{"Starfish Island",	{6765.63, -8182.81, 0.00, 6960.94, -7971.88, 500.00} },
	{"Starfish Island",	{6960.94, -8182.81, 0.00, 7343.75, -7971.88, 500.00} },
	{"The Strip",	{2027.40, 863.23, -89.08, 2087.39, 1703.23, 110.92} },
	{"The Strip",	{2106.70, 1863.23, -89.08, 2162.39, 2202.76, 110.92} },
	{"The Strip",	{2027.40, 1783.23, -89.08, 2162.39, 1863.23, 110.92} },
	{"The Strip",	{2027.40, 1703.23, -89.08, 2137.40, 1783.23, 110.92} },
	{"Pike Creek",	{6842.43, 7982.03, -49.68, 7437.69, 8342.76, 250.44} },
	{"Shoreside Vale",	{7984.56, 8411.11, -41.71, 8128.71, 8617.04, 358.29} },
	{"Shoreside Vale",	{7984.57, 8329.09, -45.82, 8023.67, 8411.06, 354.18} },
	{"Shoreside Vale",	{6605.36, 6898.62, -117.00, 7983.10, 9456.35, 483.00} },
	{"Temple",	{952.66, -1130.84, -89.08, 1096.47, -937.18, 110.92} },
	{"Temple",	{1096.47, -1026.33, -89.08, 1252.33, -910.17, 110.92} },
	{"Temple",	{1252.33, -1130.85, -89.08, 1378.33, -1026.33, 110.92} },
	{"Temple",	{1252.33, -1026.33, -89.08, 1391.05, -927.00, 110.92} },
	{"Temple",	{1252.33, -927.00, -89.08, 1357.00, -910.17, 110.92} },
	{"Temple",	{1096.47, -1130.84, -89.08, 1252.33, -1026.33, 110.92} },
	{"Bayside Marina",	{-2353.17, 2275.79, 0.00, -2153.17, 2475.79, 200.00} },
	{"Bayside",	{-2741.07, 2175.15, 0.00, -2353.17, 2722.79, 200.00} },
	{"Cedar Grove",	{7382.77, 8343.39, -50.11, 7983.09, 8900.06, 250.43} },
	{"Commerce",	{1323.90, -1842.27, -89.08, 1701.90, -1722.26, 110.92} },
	{"King's",	{-2329.31, 458.41, -0.00, -1993.28, 578.40, 200.00} },
	{"King's",	{-2411.22, 265.24, -0.00, -1993.28, 373.54, 200.00} },
	{"King's",	{-2253.54, 373.54, -0.00, -1993.28, 458.41, 200.00} },
	{"Regular Tom",	{-405.77, 1712.86, -0.00, -276.72, 1892.75, 200.00} },
	{"Hilltop Farm",	{967.38, -450.39, -0.00, 1176.78, -217.90, 200.00} },
	{"Hepburn Heights",	{8995.42, 7967.60, -13.41, 9315.42, 8171.23, 136.59} },
	{"Chinatown",	{9046.78, 7538.62, 0.00, 9139.95, 7690.61, 161.00} },
	{"Chinatown",	{9139.95, 7538.62, 0.00, 9234.27, 7690.61, 161.00} },
	{"Chinatown",	{9046.78, 7690.61, 0.00, 9234.39, 7741.18, 161.00} },
	{"Chinatown",	{9139.95, 7471.18, 0.00, 9235.77, 7538.62, 161.00} },
	{"Chinatown",	{9139.95, 7421.18, 0.00, 9310.77, 7471.18, 161.00} },
	{"Chinatown",	{9046.78, 7456.65, 0.00, 9139.95, 7538.62, 161.00} },
	{"Chinatown",	{9235.77, 7471.18, 0.00, 9315.77, 7538.62, 161.00} },
	{"Chinatown",	{9234.27, 7538.62, 0.00, 9315.77, 7690.61, 161.00} },
	{"",	{9162.50, 7098.44, 0.00, 9318.75, 7184.38, 500.00} },
	{"Unity Station",	{1692.62, -1971.80, -20.49, 1812.62, -1932.80, 79.51} },
	{"Liberty Campus",	{8367.27, 7838.38, 0.00, 8489.27, 8188.38, 166.36} },
	{"Las Venturas Airport",	{1236.63, 1203.28, -89.08, 1457.37, 1883.11, 110.92} },
	{"Las Venturas Airport",	{1457.37, 1203.28, -89.08, 1777.39, 1883.11, 110.92} },
	{"Las Venturas Airport",	{1457.37, 1143.21, -89.08, 1777.40, 1203.28, 110.92} },
	{"Valle Ocultado",	{-936.67, 2611.44, 0.00, -715.96, 2847.90, 200.00} },
	{"Escobar International",	{5609.38, -9276.56, 0.00, 6257.81, -8315.63, 500.00} },
	{"Escobar International",	{5640.63, -8315.63, 0.00, 6242.19, -7807.81, 500.00} },
	{"Vice City Beach",	{8093.75, -9323.44, 0.00, 8492.19, -6151.56, 500.00} },
	{"Vice City Beach",	{8023.44, -9315.63, 0.00, 8093.75, -7979.69, 500.00} },
	{"Vice City Beach",	{7906.25, -9307.81, 0.00, 8023.44, -8300.00, 500.00} },
	{"Vice City Beach",	{7351.56, -9307.81, 0.00, 7906.25, -9120.31, 500.00} },
	{"Vice City Beach",	{7835.94, -9120.31, 0.00, 7906.25, -8706.25, 500.00} },
	{"Vice City Beach",	{7718.75, -9120.31, 0.00, 7835.94, -9057.81, 500.00} },
	{"Construction Site",	{7517.34, -7937.03, 0.00, 7778.24, -7745.83, 100.00} },
	{"Las Venturas",	{869.46, 596.35, -242.99, 2997.06, 2993.87, 900.00} },
	{"Verona Beach",	{851.45, -1804.21, -89.08, 1046.15, -1577.59, 110.92} },
	{"Verona Beach",	{1046.15, -1722.26, -89.08, 1161.52, -1577.59, 110.92} },
	{"Verona Beach",	{1161.52, -1722.26, -89.08, 1323.90, -1577.59, 110.92} },
	{"Verona Beach",	{647.71, -2173.29, -89.08, 930.22, -1804.21, 110.92} },
	{"Verona Beach",	{930.22, -2006.78, -89.08, 1073.22, -1804.21, 110.92} },
	{"Vice City",	{5500.00, -10000.00, -500.00, 10000.00, -5500.00, 2000.00} },
	{"Vinewood",	{647.71, -1416.25, -89.08, 787.46, -1227.28, 110.92} },
	{"Vinewood",	{647.56, -1227.28, -89.08, 787.46, -1118.28, 110.92} },
	{"Vinewood",	{787.46, -1130.84, -89.08, 952.60, -954.66, 110.92} },
	{"Vinewood",	{787.46, -1310.21, -89.08, 952.66, -1130.84, 110.92} },
	{"The Visage",	{1817.39, 1863.23, -89.08, 2106.70, 2011.83, 110.92} },
	{"The Visage",	{1817.39, 1703.23, -89.08, 2027.40, 1863.23, 110.92} },
	{"Washington Beach",	{7812.50, -7378.13, 0.00, 8093.75, -7245.31, 500.00} },
	{"Washington Beach",	{7718.75, -7550.00, 0.00, 8093.75, -7378.13, 500.00} },
	{"Washington Beach",	{7937.50, -7979.69, 0.00, 8093.75, -7550.00, 500.00} },
	{"Washington Beach",	{7718.75, -7800.00, 0.00, 7890.63, -7550.00, 500.00} },
	{"Washington Beach",	{7546.88, -7979.69, 0.00, 7937.50, -7800.00, 500.00} },
	{"Washington Beach",	{7507.81, -8135.94, 0.00, 8023.44, -7979.69, 500.00} },
	{"Washington Beach",	{7593.75, -8300.00, 0.00, 8000.00, -8135.94, 500.00} },
	{"Cochrane Dam",	{7011.41, 8556.84, -0.49, 7339.56, 8754.65, 39.51} },
	{"Queens",	{-2533.04, 458.41, 0.00, -2329.31, 578.40, 200.00} },
	{"Queens",	{-2593.44, 54.72, 0.00, -2411.22, 458.41, 200.00} },
	{"Queens",	{-2411.22, 373.54, 0.00, -2253.54, 458.41, 200.00} },
	{"Whetstone",	{-2997.47, -2892.97, -242.99, -1213.91, -1115.58, 900.00} },
	{"Whitewood Estates",	{883.31, 1726.22, -89.08, 1098.31, 2507.23, 110.92} },
	{"Whitewood Estates",	{1098.31, 1726.22, -89.08, 1197.39, 2243.23, 110.92} },
	{"Torrington",	{8451.56, 7082.81, 0.00, 8826.56, 7192.19, 500.00} },
	{"Torrington",	{8451.56, 6973.44, 0.00, 8826.56, 7082.81, 500.00} },
	{"Torrington",	{8623.44, 6793.75, 0.00, 8826.56, 6973.44, 500.00} },
	{"Torrington",	{8451.56, 6793.75, 0.00, 8623.44, 6973.44, 500.00} },
	{"Torrington",	{8623.44, 6575.00, 0.00, 8826.56, 6793.75, 500.00} },
	{"Torrington",	{8451.56, 6575.00, 0.00, 8623.44, 6793.75, 500.00} },
	{"Torrington",	{8449.77, 6577.58, -61.76, 8827.77, 7190.07, 432.69} },
	{"Yellow Bell Golf Course",	{1117.40, 2723.23, -89.08, 1457.46, 2863.23, 110.92} },
	{"Yellow Bell Golf Course",	{1457.46, 2723.23, -89.08, 1534.56, 2863.23, 110.92} },
	{"Yellow Bell Station",	{1377.48, 2600.43, -21.93, 1492.45, 2687.36, 78.07} }
};
//<=================================> inventario/bolsillos
enum dData
{
	DropID,
	DropCantidad,
	Float:DropPosX,
	Float:DropPosY,
	Float:DropPosZ,
	DropVWorld,
	DropInterior,
};
new InfoSuelo[MAX_OBJETOS_S][dData], ObjetoCaido[MAX_OBJETOS_S], ObjTimer[MAX_OBJETOS_S];

enum oInfo
{
	IDObjeto,
	NombreObjeto[30],
	ModeloObjeto,
	IDArma,
	Guardable,
	Arrojadizo,
	Capacidad,
	oQuality, //pureza, solo drogas
	oDefinition, /* 1. Simple Objetos - 2. Arma con simple munición - 3. Arma/Cargador/fardos - 4. objeto con usos */
};

static const InfoObjeto[][oInfo] =
{
    {0, "Vacío", 0, 0, 0, 0, 0, 0, 0},
    {1, "Nudillera", 331, 1, 1, 0, 1, 0, 1},
    {2, "Palo de golf", 333, 2, 3, 0, 1, 0, 1},
    {3, "Bastón policial", 334, 3, 1, 0, 1, 0, 1},
    {4, "Billete", 1212, 0, 1, 1, 311, 0, 1},
    {5, "Bate", 336, 0, 3, 0, 1, 0, 1},
    {6, "Pala", 337, 0, 3, 0, 1, 0, 1},
    {7, "Palo de billar", 338, 0, 3, 0, 1, 0, 1},
    {8, "Sable", 339, 8, 3, 0, 1, 0, 1},
    {9, "Motosierra", 341, 9, 3, 0, 1, 0, 1},
    {10, "Consolador rosa", 321, 0, 1, 0, 1, 0, 1},
    {11, "Consolador pequeño", 322, 0, 1, 0, 1, 0, 1},
    {12, "Consolador largo", 323, 0, 1, 0, 1, 0, 1},
    {13, "Consolador plateado", 324, 0, 1, 0, 1, 0, 1},
    {14, "Flores", 325, 0, 3, 0, 1, 0, 1},
    {15, "Baston", 326, 0, 3, 0, 1, 0, 1},
    {16, "Granada", 342, 16, 1, 1, 1, 0, 2},
    {17, "Granada de gas", 343, 17, 1, 1, 30, 0, 2},
    {18, "Coctel molotov", 344, 0, 1, 1, 10, 0, 2},
    {19, "Colt", 346, 22, 1, 0, 2000, 0, 3},
    {20, "Colt con silenciador", 347, 23, 1, 0, 2000, 0, 3},
    {21, "Desert eagle", 348, 24, 1, 0, 1500, 0, 3},
    {22, "Escopeta", 349, 25, 3, 0, 500, 0, 3},
    {23, "Recortada", 350, 26, 3, 0, 500, 0, 3},
    {24, "Escopeta de combate", 351, 27, 3, 0, 800, 0, 3},
    {25, "Uzi", 352, 28, 1, 0, 3500, 0, 3},
    {26, "MP5K", 353, 29, 3, 0, 2000, 0, 3},
    {27, "Ak47", 355, 30, 3, 0, 1500, 0, 3},
    {28, "M4A1", 356, 31, 3, 0, 1500, 0, 3},
    {29, "Tec9", 372, 32, 1, 0, 3500, 0, 3},
    {30, "Rifle de caza", 357, 33, 3, 0, 200, 0, 3},
    {31, "Rifle de francotirador", 358, 34, 3, 0, 100, 0, 3},
    {32, "Cohete", 359, 35, 3, 0, 100, 0, 2},
    {33, "RPG Cohete", 360, 36, 3, 0, 100, 0, 2},
    {34, "Lanzallamas", 361, 37, 3, 0, 100, 0, 2},
    {35, "Minigun", 362, 38, 3, 0, 9999, 0, 2},
    {36, "Spray", 365, 41, 1, 0, 99999, 0, 2},
    {37, "Extintor", 366, 42, 3, 0, 99999, 0, 2},
    {38, "Camara fotografica", 367, 43, 1, 0, 500, 0, 2},
    {39, "Paracaidas", 371, 46, 3, 1, 1, 0, 1},
    {40, "Taser", 347, 23, 1, 0, 2, 0, 2},
    {41, "Cargador Colt", 19995, 0, 1, 0, 500, 0, 3},
    {42, "Cargador D. eagle", 19995, 0, 1, 0, 500, 0, 3},
    {43, "Cargador Uzi", 19995, 0, 1, 0, 500, 0, 3},
    {44, "Cargador MP5K", 19995, 0, 1, 0, 500, 0, 3},
    {45, "Cargador Tec9", 19995, 0, 1, 0, 500, 0, 3},
    {46, "Cargador Ak47", 2037, 0, 1, 0, 500, 0, 3},
    {47, "Cargador M4A1", 2037, 0, 1, 0, 500, 0, 3},
    {48, "Cargador rifle", 2037, 0, 1, 0, 100, 0, 3},
    {49, "Cartuchos de escopeta", 2037, 0, 2, 1, 100, 0, 3},
    {50, "Caja especial", 3052, 0, 2, 1, 700, 0, 1}, // MAX_CAJAS + 500
    {51, "C. Colt", 3052, 0, 2, 1, 20, 0, 1},
    {52, "C. D. eagle", 3052, 0, 2, 1, 20, 0, 1},
    {53, "C. Tec9", 3052, 0, 2, 1, 20, 0, 1},
    {54, "C. Uzi", 3052, 0, 2, 1, 20, 0, 1},
    {55, "C. MP5K", 3052, 0, 2, 1, 20, 0, 1},
    {56, "C. Escopeta", 3052, 0, 2, 1, 20, 0, 1},
    {57, "C. Escopeta recortada", 3052, 0, 2, 1, 20, 0, 1},
    {58, "C. Escopeta de combate", 3052, 0, 2, 1, 20, 0, 1},
    {59, "C. Ak47", 3052, 0, 2, 1, 20, 0, 1},
    {60, "C. M4A1", 3052, 0, 2, 1, 20, 0, 1},
    {61, "C. Rifle de caza", 3052, 0, 2, 1, 20, 0, 1},
    {62, "C. Rifle de francotirador", 3052, 0, 2, 1, 20, 0, 1},
    {63, "C. Cargadores Colt", 2040, 0, 2, 1, 20, 0, 1},
    {64, "C. Cargadores D. eagle", 2040, 0, 2, 1, 20, 0, 1},
    {65, "C. Cargadores Tec9", 2040, 0, 2, 1, 20, 0, 1},
    {66, "C. Cargadores Uzi", 2040, 0, 2, 1, 20, 0, 1},
    {67, "C. Cargadores MP5K", 2040, 0, 2, 1, 20, 0, 1},
    {68, "C. Cargadores Ak47", 2040, 0, 2, 1, 20, 0, 1},
    {69, "C. Cargadores M4A1", 2040, 0, 2, 1, 20, 0, 1},
    {70, "C. Cargadores Rifle", 2040, 0, 2, 1, 20, 0, 1},
    {71, "Spray", 365,  0,  1, 1, 1000, 0, 1},
    {72, "Chaleco", 1242, 0, 2, 1, 120, 0, 1},
    {73, "Esposas", 19418, 0, 1, 1, 1, 0, 1},
    {74, "Marihuana", 2709, 0, 1, 1, 50, 0, 4},
    {75, "Ziploc de cocaína", -1008, 0, 1, 1, 50, 2, 4},
    {76, "Crack", 2709, 0, 1, 1, 50, 2, 4},
    {77, "Heroina", 2709, 0, 1, 1, 50, 0, 4},
    {78, "Metanfetamina", 2709, 0, 1, 1, 50, 2, 4},
    {79, "Semilla marihuana", 327, 0, 1, 1, 30, 0, 4},
    {80, "Telefono blanco", 18874, 0, 1, 0, 1, 0, 1},
    {81, "GPS", 18875, 0, 1, 0, 1, 0, 1},
    {82, "Radio", 330, 0, 1, 0, 1, 0, 1},
    {83, "Dados", 1852, 0, 1, 0, 1, 0, 1},
    {84, "Tarjeta de debito", 19792, 0, 1, 1, 1, 0, 1},
    {85, "Caña de pesca", 18632, 0, 2, 0, 1, 0, 1},
    {86, "Destornillador", 18644, 0, 1, 0, 1, 0, 1},
    {87, "Encendedor", 19998, 0, 1, 1, 30, 0, 4},
    {88, "C. Cigarrillos", 19896, 0, 1, 1, 10, 0, 4},
    {89, "Bidon de gasolina", 1650, 0, 2, 1, 10, 0, 4},
    {90, "Bolsa de doritos", 2663, 0, 1, 1, 5, 0, 4},
    {91, "Bolsa de patatas", 2663, 0, 1, 1, 5, 0, 4},
    {92, "Bolsa de nachos", 2663, 0, 1, 1, 5, 0, 4},
    {93, "Lata de sprunk", 2601, 0, 1, 1, 10, 0, 4},
    {94, "Lata de pepsi", 2601, 0, 1, 1, 10, 0, 4},
    {95, "Botella de agua", 1484, 0, 1, 1, 10, 0, 4},
    {96, "Cerveza", 1486, 0, 1, 1, 8, 0, 4},
    {97, "Copa de vino", 1667, 0, 1, 1, 2, 0, 4},
    {98, "Vaso de whisky", 1666, 0, 1, 1, 1, 0, 4},
    {99, "Vaso de ron", 1666, 0, 1, 1, 1, 0, 4},
    {100, "Hamburguesa", 2768, 0, 1, 1, 5, 0, 4},
    {101, "Burrito", 2769, 0, 1, 1, 5, 0, 4},
    {102, "Pizza", 2814, 0, 1, 1, 8, 0, 4},
    {103, "Botella de ron", 1544, 0, 1, 1, 12, 0, 4},
    {104, "Botella de whisky", 1520, 0, 1, 1, 12, 0, 4},
    {105, "Botella de vino", 1517, 0, 1, 1, 12, 0, 4},
    {106, "Cigarro", 19625, 0, 1, 1, 5, 0, 4},
    {107, "Billete", 1212, 0, 1, 1, 311, 0, 1},
    {108, "C. Cargadores Escopeta", 2040, 0, 2, 1, 20, 0, 4},
    {109, "Optiwand", 356, 0, 0, 3, 1, 0, 1},
    {110, "Fardo de Marihuana", 1575, 0, 2, 1, 500, 0, 3},
    {111, "Fardo de Cocaína", -1002, 0, 2, 1, 500, 0, 3},
    {112, "Fardo de Crack", 1575, 0, 2, 1, 500, 0, 3},
    {113, "Fardo de Heroína", 1575, 0, 2, 1, 500, 0, 3},
    {114, "Fardo de Metanfetamina", 1575, 0, 2, 1, 500, 0, 3},
    {115, "Telefono oro", 18865, 0, 1, 0, 1, 0, 1},
    {116, "Telefono celeste", 18866, 0, 1, 0, 1, 0, 1},
    {117, "Telefono naranja", 18867, 0, 1, 0, 1, 0, 1},
    {118, "Telefono negro", 18868, 0, 1, 0, 1, 0, 1},
    {119, "Telefono rosa", 18869, 0, 1, 0, 1, 0, 1},
    {120, "Telefono rojo", 18870, 0, 1, 0, 1, 0, 1},
    {121, "Telefono verde", 18871, 0, 1, 0, 1, 0, 1},
    {122, "Telefono azul", 18872, 0, 1, 0, 1, 0, 1},
    {123, "Telefono amarillo", 18873, 0, 1, 0, 1, 0, 1},
    {124, "Purple drank", 1546, 0, 1, 1, 10, 0, 4},
    {125, "Codeine", 1543, 0, 1, 1, 2, 0, 4},
    {126, "Goma de mascar", 0, 0, 1, 1, 1, 0, 4},
    {127, "Cuchillo", 11716, 0, 1, 0, 1, 0, 1},
    {128, "Palanca", 18634, 0, 1, 1, 1, 0, 1},
    {129, "Alcoholimetro", 2711, 0, 1, 1, 1, 0, 1},
    {130, "Botiquin", 11738, 0, 2, 1, 1, 0, 1},
    {131, "Caja registradora", 1514, 0, 2, 0, 10000, 0, 1},
    {132, "Porro", 3027, 0, 1, 1, 5, 0, 4}, 					//no está en uso
	{133, "Lata de carnadas", 327, 0, 1, 1, 50, 0, 4},
    {134, "Ganzua", 18644, 0, 1, 1, 3, 0, 4},
    {135, "Escopeta no-letal", 349, 25, 3, 0, 15, 0, 2}, //escopetita
    {136, "Caja de cerveza", 19572, 0, 3, 1, 6, 0, 4},
    {137, "Camara de velocidad", 367, 0, 1, 0, 1, 0, 1},
	{138, "Extasis", 2709, 0, 1, 1, 50, 0, 4},
	{139, "LSD", 2709, 0, 1, 1, 50, 0, 4},
	{140, "Ketamina", 2709, 0, 1, 1, 50, 0, 4},
	{141, "PCP", 2709, 0, 1, 1, 50, 0, 4},
	{142, "Hachis", 2709, 0, 1, 1, 50, 0, 4},
	{143, "Esteroides", 2709, 0, 1, 1, 50, 0, 4},
	{144, "Fardo de Extasis", 1575, 0, 2, 1, 500, 0, 3},
	{145, "Fardo de LSD", 1575, 0, 1, 2, 500, 0, 3},
	{146, "Fardo de Ketamina", 1575, 0, 2, 1, 500, 0, 3},
	{147, "Fardo de PCP", 1575, 0, 2, 1, 500, 0, 3},
	{148, "Fardo de Hachis", 1575, 0, 2, 1, 500, 0, 3},
	{149, "Paquete de Puros", 327, 0, 1, 1, 5, 0, 4},
	{150, "Puro", 1485, 0, 1, 1, 10, 0, 4},
	{151, "Canuto de Marihuana", 3027, 0, 1, 1, 5, 0, 4},
	{152, "Canuto de Hachis", 3027, 0, 1, 1, 5, 0, 4},
	{153, "Blunt de Marihuana", 3044, 0, 1, 1, 5, 0, 4},
	{154, "Blunt de Hachis", 3044, 0, 1, 1, 5, 0, 4},
	{155, "Metadona", 2709, 0, 1, 1, 50, 0, 4},
	{156, "Taco", -19346, 0, 1, 1, 5, 0, 4},
	{157, "Hot dog", 19346, 0, 1, 1, 5, 0, 4},
	{158, "Pescado frito", 19630, 0, 1, 1, 5, 0, 4},
	{159, "Cafe", 19835, 0, 1, 1, 6, 0, 4},
	{160, "Pierna de pavo", 19847, 0, 1, 1, 10, 0, 4},
	{161, "Paintball SMG", 29316, 409, 3, 0, 2000, 0, 3},
	{162, "MP5K (FAC)", 353, 29, 3, 0, 2000, 0, 3}
};

funcion PonerObjeto(playerid, slot, objetoid) //colocaobjeto
{
	new modelo = InfoObjeto[objetoid][ModeloObjeto];
	if (slot == 1)
	{
		if (objetoid == 1) ColocarObject(playerid, 7, modelo, 6); //- Nudillera
		if (objetoid == 2) ColocarObject(playerid, 7, modelo, 6); //- Palo de golf
		if (objetoid == 3) ColocarObject(playerid, 7, modelo, 6); //- Bastón policial
		if (objetoid == 4) ColocarObject(playerid, 7, modelo, 6, 0.057998, 0.028998, 0.004001, -69.499977, -5.499964, -96.500000, 0.825999, 0.620998, 0.762996); //- billetes
		if (objetoid == 5) ColocarObject(playerid, 7, modelo, 6); //- Bate
		if (objetoid == 6) ColocarObject(playerid, 7, modelo, 6); //- Pala
		if (objetoid == 7) ColocarObject(playerid, 7, modelo, 6); //- Palo de billar
		if (objetoid == 8) ColocarObject(playerid, 7, modelo, 6); //- Sable
		if (objetoid == 9) ColocarObject(playerid, 7, modelo, 6); //- Motosierra
		if (objetoid == 10) ColocarObject(playerid, 7, modelo, 6); //- Consolador 1
		if (objetoid == 11) ColocarObject(playerid, 7, modelo, 6); //- Consolador 2
		if (objetoid == 12) ColocarObject(playerid, 7, modelo, 6); //- Consolador 3
		if (objetoid == 13) ColocarObject(playerid, 7, modelo, 6); //- Consolador 4
		if (objetoid == 14) ColocarObject(playerid, 7, modelo, 6); //- Flores
		if (objetoid == 15) ColocarObject(playerid, 7, modelo, 6); //- Bastón - Palanca
		if (objetoid == 16) ColocarObject(playerid, 7, modelo, 6); //- Granada
		if (objetoid == 17) ColocarObject(playerid, 7, modelo, 6); //- Granada de gas
		if (objetoid == 18) ColocarObject(playerid, 7, modelo, 6); //- Cóctel molotov
		if (objetoid == 19) ColocarObject(playerid, 7, modelo, 6); //- 45. Colt
		if (objetoid == 20) ColocarObject(playerid, 7, modelo, 6); //- 45. Colt + silenciador
		if (objetoid == 21) ColocarObject(playerid, 7, modelo, 6); //- Desert Eagle
		if (objetoid == 22) ColocarObject(playerid, 7, modelo, 6); //- Escopeta
		if (objetoid == 23) ColocarObject(playerid, 7, modelo, 6); //- Recortada
		if (objetoid == 24) ColocarObject(playerid, 7, modelo, 6); //- Escopeta combate
		if (objetoid == 25) ColocarObject(playerid, 7, modelo, 6); //- UZI
		if (objetoid == 26) ColocarObject(playerid, 7, modelo, 6); //- MP5K
		if (objetoid == 27) ColocarObject(playerid, 7, modelo, 6); //- AK47
		if (objetoid == 28) ColocarObject(playerid, 7, modelo, 6); //- M4
		if (objetoid == 29) ColocarObject(playerid, 7, modelo, 6); //- Tec9
		if (objetoid == 30) ColocarObject(playerid, 7, modelo, 6); //- Rifle de caza
		if (objetoid == 31) ColocarObject(playerid, 7, modelo, 6); //- Rifle de francotirador
		if (objetoid == 32) ColocarObject(playerid, 7, modelo, 6); //- Cohete
		if (objetoid == 33) ColocarObject(playerid, 7, modelo, 6); //- RPG Cohete
		if (objetoid == 34) ColocarObject(playerid, 7, modelo, 6); //- Lanzallamas
		if (objetoid == 35) ColocarObject(playerid, 7, modelo, 6); //- Minigun
		if (objetoid == 36) ColocarObject(playerid, 7, modelo, 6); //- Spray
		if (objetoid == 37) ColocarObject(playerid, 7, modelo, 6); //- Extintor
		if (objetoid == 38) ColocarObject(playerid, 7, modelo, 6); //- Cámara fotográfica
		if (objetoid == 39) ColocarObject(playerid, 7, modelo, 6); //- Paracaidas
		if (objetoid == 40) ColocarObject(playerid, 7, modelo, 6); //- Táser
		if (objetoid >= 41 && objetoid <= 45) ColocarObject(playerid, 7, modelo, 6, 0.083999, 0.039000, -0.003999, 0.799998, -5.099998, -92.599990, 1.000000, 1.000000, 1.000000); //- Cargador pequeño
		if (objetoid >= 46 && objetoid <= 49) ColocarObject(playerid, 7, modelo, 6, 0.064999, 0.035998, 0.018999, 1.599980, -105.499984, 1.800009, 0.649999, 0.910999, 0.476999); //- Cargador grande
		if (objetoid >= 50 && objetoid <= 62) ColocarObject(playerid, 7, modelo, 6, 0.152999, 0.106998, 0.034999, -85.699996, 179.999969, 78.399993, 1.038999, 0.752000, 0.854999); //- Cajas grandes
		if (objetoid >= 63 && objetoid <= 70) ColocarObject(playerid, 7, modelo, 6, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //- Cajas pequeñas
		if (objetoid == 71) ColocarObject(playerid, 7, modelo, 6); //- Spray (no arma)
		if (objetoid == 72) ColocarObject(playerid, 7, modelo, 6); //- Chaleco
		if (objetoid == 73) ColocarObject(playerid, 7, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //- Esposas
		if (objetoid == 74) ColocarObject(playerid, 7, modelo, 6, 0.073000, 0.073000, 0.015999, -9.699999, 0.600041, -0.299999, 1.000000, 1.000000, 1.000000); //- Marihuana
		if (objetoid == 75) ColocarObject(playerid, 7, modelo, 6, 0.114000, 0.035999, 0.024000, 88.699996, 0.000000, -174.800033, 1.000000, 1.000000, 1.000000); //ziploc de cocaína
		if (objetoid >= 76 && objetoid <= 78) ColocarObject(playerid, 7, modelo, 6, 0.073000, 0.073000, 0.015999, -9.699999, 0.600041, -0.299999, 1.000000, 1.000000, 1.000000); //crack, heroína y metanfetamina
		if (objetoid == 79) ColocarObject(playerid, 7, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //semillas de marihuana
		if (objetoid == 80) ColocarObject(playerid, 7, modelo, 6, 0.093999, 0.012000, -0.010999, -81.199974, 10.000000, 179.099945, 0.990999, 0.829000, 0.903000); //- Teléfono
		if (objetoid == 81) ColocarObject(playerid, 7, modelo, 6, 0.042000, 0.042000, 0.003999, 78.999961, 1.699989, 103.699920, 0.724999, 0.667999, 0.480999); //- GPS
		if (objetoid == 82) ColocarObject(playerid, 7, modelo, 6, -0.005000, -0.010000, -0.024000, 10.800001, 1.499994, 0.000000, 1.000000, 1.000000, 1.000000); //- Radio
		if (objetoid == 83) ColocarObject(playerid, 7, modelo, 6, 0.080000, 0.032000, 0.003999, 81.299957, 2.899988, 102.499923, 0.176999, 0.100000, 0.121999); //- Dados
		if (objetoid == 84) ColocarObject(playerid, 7, modelo, 6, 0.065000, 0.044000, -0.001000, 87.699981, -119.399978, -81.000007, 1.000000, 1.000000, 1.000000); //- Tarjeta débito
		if (objetoid == 85) ColocarObject(playerid, 7, modelo, 6, 0.076000, 0.001999, 0.002000, 9.400000, -171.900024, 150.999969, 1.000000, 1.000000, 0.717999); //- Caña de pesca
		if (objetoid == 86) ColocarObject(playerid, 7, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Destornillador
		if (objetoid == 87) ColocarObject(playerid, 7, modelo, 6, 0.059000, 0.041000, 0.012999, 0.199999, -21.399997, 0.099999, 0.389000, 0.939000, 0.409999); //- Encendedor
		if (objetoid == 88) ColocarObject(playerid, 7, modelo, 6, 0.070999, 0.032999, 0.025999, 10.800001, 89.800041, 0.000000, 1.000000, 1.000000, 1.000000); //- Cigarrillos
		if (objetoid == 89) ColocarObject(playerid, 7, modelo, 6, 0.095997, 0.005997, 0.049004, 32.000011, -103.499977, 10.299985, 0.825999, 0.620998, 0.762996); //- Bidón de gasolina
		if (objetoid >= 90 && objetoid <= 92) ColocarObject(playerid, 7, modelo, 6, 0.204000, 0.029998, 0.016999, 10.800001, -103.099998, 0.000000, 0.839000, 0.423999, 0.645000); //- Doritos, patatas y nachos
		if (objetoid == 93 || objetoid == 94) ColocarObject(playerid, 7, modelo, 6, 0.043999, 0.029998, 0.016999, 10.800001, -13.199980, 1.000000, 1.000000, 1.000000, 1.000000); //Sprunk y fanta
		if (objetoid == 95) ColocarObject(playerid, 7, modelo, 6, -0.031000, -0.030001, 0.060999, 10.800001, 17.200008, 0.000000, 1.000000, 1.000000, 1.000000); //- Botella agua
		if (objetoid == 96) ColocarObject(playerid, 7, modelo, 6, 0.042000, 0.055999, -0.085000, 10.800001, 1.100013, 0.000000, 1.000000, 1.000000, 1.000000); //- Botella cerveza
		if (objetoid == 97) ColocarObject(playerid, 7, modelo, 6, 0.064999, 0.029998, 0.016999, 10.800001, -30.299997, 0.000000, 1.000000, 1.000000, 1.000000); //- Copa de vino
		if (objetoid == 98 || objetoid == 99) ColocarObject(playerid, 7, modelo, 6, 0.059999, 0.029998, 0.016999, 10.800001, -31.300012, 0.000000, 1.000000, 1.000000, 1.000000); //- Vaso de whisky y ron
		if (objetoid == 100) ColocarObject(playerid, 7, modelo, 6, 0.088999, 0.029998, 0.045999, -43.799991, -24.899995, -10.599997, 1.000000, 1.000000, 0.833999); //- Hamburguesa
		if (objetoid == 101) ColocarObject(playerid, 7, modelo, 6, 0.054000, 0.029998, 0.016999, 106.699981, -11.200008, -105.300056, 1.000000, 1.000000, 1.000000); //- Burrito
		if (objetoid == 102) ColocarObject(playerid, 7, modelo, 6, 0.296000, 0.126998, 0.016999, 103.400001, 0.199999, 0.000000, 1.000000, 1.000000, 1.000000); //- Pizza
		if (objetoid == 103) ColocarObject(playerid, 7, modelo, 6, 0.035000, 0.059999, -0.076000, 10.800001, 5.399998, 0.000000, 1.000000, 1.000000, 1.000000); //- Botella ron
		if (objetoid == 104) ColocarObject(playerid, 7, modelo, 6, 0.037000, 0.072998, -0.065001, 10.800001, 0.100004, 0.000000, 1.000000, 1.000000, 1.000000); //- Botella whisky
		if (objetoid == 105) ColocarObject(playerid, 7, modelo, 6, 0.036000, 0.034998, 0.064998, 10.800001, -0.399997, 0.000000, 1.000000, 1.000000, 1.000000); //- Botella vino
		if (objetoid == 106) ColocarObject(playerid, 7, modelo, 6, 0.121999, -0.004000, 0.004999, 9.599995, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Cigarro
		if (objetoid == 107) ColocarObject(playerid, 7, modelo, 6, 0.057998, 0.028998, 0.004001, -69.499977, -5.499964, -96.500000, 0.825999, 0.620998, 0.762996); //- billetes
		if (objetoid == 108) ColocarObject(playerid, 7, modelo, 6, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //- Caja Cargador escopeta
		if (objetoid == 109) ColocarObject(playerid, 7, modelo, 6, 0.004999, -0.046999, -0.090999, 1.899999, -21.999998, -1.299999, 0.850000, 0.920000, 0.920000); //- Optiwand
		if (objetoid == 110) ColocarObject(playerid, 7, modelo, 6, 0.082000, 0.000000, 0.000000, 0.099999, 76.499984, 1.000000, 1.000000, 1.000000, 1.000000); //marihuana
		if (objetoid == 111) ColocarObject(playerid, 7, modelo, 6, 0.056999, 0.000000, 0.000000, 0.000000, 85.300025, 0.000000, 1.000000, 1.000000, 1.000000); //fardo de cocaína
		if (objetoid >= 112 && objetoid <= 114) ColocarObject(playerid, 7, modelo, 6, 0.082000, 0.000000, 0.000000, 0.099999, 76.499984, 1.000000, 1.000000, 1.000000, 1.000000); //fardos: crack, heroína y metanfetamina
		if (objetoid >= 115 && objetoid <= 123) ColocarObject(playerid, 7, modelo, 6, 0.093999, 0.012000, -0.010999, -81.199974, 10.000000, 179.099945, 0.990999, 0.829000, 0.903000); //- Teléfonos
		if (objetoid == 124) ColocarObject(playerid, 7, modelo, 6, 0.093999, 0.052000, 0.004003, -1.100001, -27.100055, -73.999977, 0.777999, 0.982000, 0.851000); //- Purple drank
		if (objetoid == 125) ColocarObject(playerid, 7, modelo, 6, 0.042000, 0.055999, -0.085000, 10.800001, 1.100013, 0.000000, 1.000000, 1.000000, 1.000000); //- Codeine
		if (objetoid == 126) ColocarObject(playerid, 7, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); // chicle
		if (objetoid == 127) ColocarObject(playerid, 7, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Cuchillo
		if (objetoid == 128) ColocarObject(playerid, 7, modelo, 6, 0.074000, 0.013999, 0.050999, 95.600013, 0.000000, 0.000000, 0.818000, 0.447000, 0.685000); //- Palanca
		if (objetoid == 129) ColocarObject(playerid, 7, modelo, 6, -0.048000, 0.025999, 0.083000, -174.299987, 45.499992, 1.100000, 1.000000, 1.000000, 1.500000); //- Alcoholimetro
		if (objetoid == 130) ColocarObject(playerid, 7, modelo, 6, 0.178000, 0.019999, 0.031998, 0.000000, -101.600021, 0.000000, 0.630999, 0.452998, 0.611998); //- Botiquin
		if (objetoid == 131) ColocarObject(playerid, 7, modelo, 6, 0.098000, 0.153000, -0.219999, -110.699958, -10.599965, -99.099998, 0.825999, 0.620999, 0.762999); //- Caja registradora
		if (objetoid == 132) ColocarObject(playerid, 7, modelo, 6, 0.098000, 0.034000, 0.037999, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //- Porro
		if (objetoid == 133) ColocarObject(playerid, 7, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //- Carnadas
		if (objetoid == 134) ColocarObject(playerid, 7, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Ganzúa
		if (objetoid == 135) ColocarObject(playerid, 7, modelo, 6); //escopetita
		if (objetoid == 136) ColocarObject(playerid, 7, modelo, 6, 0.359000, 0.000000, 0.051000, 0.000000, -104.400009, -2.099995, 0.898000, 0.936000, 1.000000); //sixpack cerveza
		if (objetoid == 137) ColocarObject(playerid, 7, modelo, 6); //cámara de velocidad
		if (objetoid >= 138 && objetoid <= 143) ColocarObject(playerid, 7, modelo, 6, 0.073000, 0.073000, 0.015999, -9.699999, 0.600041, -0.299999, 1.000000, 1.000000, 1.000000); //éxtasis, lsd, ketamina, pcp, hachís y esteroides
		if (objetoid >= 144 && objetoid <= 148) ColocarObject(playerid, 7, modelo, 6, 0.082000, 0.000000, 0.000000, 0.099999, 76.499984, 1.000000, 1.000000, 1.000000, 1.000000); //fardos: éxtasis, lsd, ketamina, pcp, hachís y esteroides
		if (objetoid == 149) ColocarObject(playerid, 7, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //paquete de puros
        if (objetoid == 150) ColocarObject(playerid, 7, modelo, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //puros
		if (objetoid == 151 || objetoid == 152) ColocarObject(playerid, 7, modelo, 6, 0.098000, 0.034000, 0.037999, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //canutos
        if (objetoid == 153 || objetoid == 154) ColocarObject(playerid, 7, modelo, 6, 0.045999, 0.111999, 0.032000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //blunts
		if (objetoid == 155) ColocarObject(playerid, 7, modelo, 6, 0.073000, 0.073000, 0.015999, -9.699999, 0.600041, -0.299999, 1.000000, 1.000000, 1.000000); //metadona
		if (objetoid == 156) ColocarObject(playerid, 7, modelo, 6, 0.105000, 0.023000, 0.003999, 13.100005, -101.000007, 3.900000, 1.000000, 1.000000, 1.000000); //taco
		if (objetoid == 157) ColocarObject(playerid, 7, modelo, 6, 0.042000, 0.031999, 0.027000, -84.399993, -0.600000, -13.100000, 1.000000, 1.000000, 1.000000); //hot dog
		if (objetoid == 158) ColocarObject(playerid, 7, modelo, 6, 0.044000, 0.015000, 0.011000, -172.999908, -92.200019, 2.399999, 1.000000, 1.000000, 1.000000); //pescado frito
		if (objetoid == 159) ColocarObject(playerid, 7, modelo, 6, 0.067000, 0.041000, 0.014000, 0.000000, -14.799998, 0.000000, 1.000000, 1.000000, 1.000000); //café
		if (objetoid == 160) ColocarObject(playerid, 7, modelo, 6, 0.054000, 0.024000, 0.012000, -81.200012, 1.200000, -3.000001, 1.000000, 1.000000, 1.000000); //pierna de pavo
		if (objetoid == 161) ColocarObject(playerid, 7, modelo, 6); //- Paintball smg
	}
	if (slot == 2)
	{
		if (objetoid == 1) ColocarObject(playerid, 8, modelo, 5, 0.024999, 0.000000, -0.005999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Nudillera
		if (objetoid == 2) ColocarObject(playerid, 8, modelo, 5, -0.040000, 0.067000, -0.003000, -29.899999, 152.000000, 176.000030, 1.000000, 1.000000, 1.000000); //- Palo de golf
		if (objetoid == 3) ColocarObject(playerid, 8, modelo, 5, 0.000000, 0.059999, -0.022000, 161.599990, 10.700001, 5.800002, 1.000000, 1.000000, 1.000000); //- Bastón policial
		if (objetoid == 4) ColocarObject(playerid, 8, modelo, 5, 0.080998, 0.056998, -0.023998, 75.300010, -21.099960, -83.500007, 0.825999, 0.620998, 0.762996); //- billete
		if (objetoid == 5) ColocarObject(playerid, 8, modelo, 5, 0.135999, 0.030999, 0.053999, -17.900001, 153.800018, 0.000000, 1.000000, 1.000000, 1.000000); //- Bate
		if (objetoid == 6) ColocarObject(playerid, 8, modelo, 5, 0.041999, 0.051999, -0.080000, -27.899986, 155.800018, -167.499938, 1.000000, 1.000000, 1.000000); //- Pala
		if (objetoid == 7) ColocarObject(playerid, 8, modelo, 5, 0.156999, 0.092000, 0.071999, -25.099998, 172.899963, -19.899995, 1.000000, 1.000000, 1.000000); //- Palo de billar
		if (objetoid == 8) ColocarObject(playerid, 8, modelo, 5, 0.058000, 0.008000, -0.109000, -27.999998, 155.100036, 172.699966, 1.000000, 1.000000, 1.000000); //- Sable
		if (objetoid == 9) ColocarObject(playerid, 8, modelo, 5, 0.000000, 0.078999, -0.009000, 155.599990, 7.200000, 4.800000, 1.000000, 1.000000, 1.000000); //- Motosierra
		if (objetoid == 10) ColocarObject(playerid, 8, modelo, 5, 0.015000, 0.041000, -0.068000, -25.599971, 162.900054, -175.300018, 1.000000, 1.000000, 1.000000); //- Consolador 1
		if (objetoid == 11) ColocarObject(playerid, 8, modelo, 5, 0.023999, 0.052999, -0.041999, 157.899978, 2.499999, 0.000000, 1.000000, 1.000000, 1.000000); //- Consolador 2
		if (objetoid == 12) ColocarObject(playerid, 8, modelo, 5, -0.002000, 0.074000, 0.001000, 151.200042, 23.000000, -9.100001, 1.000000, 1.000000, 1.000000); //- Consolador 3
		if (objetoid == 13) ColocarObject(playerid, 8, modelo, 5, 0.017999, 0.003999, -0.047999, 168.200012, 18.300003, -27.900005, 1.000000, 1.000000, 1.000000); //- Consolador 4
		if (objetoid == 14) ColocarObject(playerid, 8, modelo, 5, 0.176000, 0.000000, -0.011000, -23.399999, 160.599990, -6.399995, 1.000000, 1.000000, 1.000000); //- Flores
		if (objetoid == 15) ColocarObject(playerid, 8, modelo, 5, 0.008999, -0.018999, -0.047999, -33.199996, 159.900085, 156.399902, 1.000000, 1.000000, 1.000000); //- Bastón
		if (objetoid == 16) ColocarObject(playerid, 8, modelo, 5, 0.019000, 0.047000, -0.021000, 164.499984, 0.000000, -17.599994, 1.000000, 1.000000, 1.000000); //- Granada
		if (objetoid == 17) ColocarObject(playerid, 8, modelo, 5, 0.034000, 0.063000, -0.037999, 164.500000, 14.599996, -4.700009, 1.000000, 1.000000, 1.000000); //- Granada de gas
		if (objetoid == 18) ColocarObject(playerid, 8, modelo, 5, 0.022999, 0.039000, -0.125999, 165.700012, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Cóctel molotov
		if (objetoid == 19) ColocarObject(playerid, 8, modelo, 5, 0.033000, 0.057999, -0.017999, 146.299987, 14.999998, -4.700002, 1.000000, 1.000000, 1.000000); //- 45. Colt + silenciador
		if (objetoid == 20) ColocarObject(playerid, 8, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //- 45. Colt
		if (objetoid == 21) ColocarObject(playerid, 8, modelo, 5, 0.041000, 0.038000, -0.026999, 173.899963, 0.000000, 1.799999, 1.000000, 1.000000, 1.000000); //- Desert Eagle
		if (objetoid == 22) ColocarObject(playerid, 8, modelo, 5, 0.000000, 0.089000, 0.000000, 153.500015, 10.000001, 4.800000, 1.000000, 1.000000, 1.000000); //- Escopeta
		if (objetoid == 23) ColocarObject(playerid, 8, modelo, 5, 0.040000, 0.026000, 0.011000, -156.300003, 0.000000, 2.600000, 1.000000, 1.000000, 1.000000); //- Recortada
		if (objetoid == 24) ColocarObject(playerid, 8, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //- Escopeta combate
		if (objetoid == 25) ColocarObject(playerid, 8, modelo, 5, 0.024999, 0.048000, -0.012000, 172.000076, -3.099988, -2.099991, 1.000000, 1.000000, 1.000000); //- UZI
		if (objetoid == 26) ColocarObject(playerid, 8, modelo, 5, 0.005000, 0.065000, -0.016000, 162.399963, 9.599999, 8.400000, 1.000000, 1.000000, 1.000000); //- MP5K
		if (objetoid == 27) ColocarObject(playerid, 8, modelo, 5, 0.057999, 0.076999, -0.023999, 162.799942, 14.399999, 0.000000, 1.000000, 1.000000, 1.000000); //- AK47
		if (objetoid == 28) ColocarObject(playerid, 8, modelo, 5, 0.043999, 0.028999, -0.038000, 167.499969, 15.999998, 0.000000, 1.000000, 1.000000, 1.000000); //- M4
		if (objetoid == 29) ColocarObject(playerid, 8, modelo, 5, 0.048000, 0.049999, 0.011000, -172.600006, -2.299995, 5.999999, 1.000000, 1.000000, 1.000000); //- Tec9
		if (objetoid == 30) ColocarObject(playerid, 8, modelo, 5, -0.043000, 0.065999, -0.044999, 167.499954, 17.399999, 0.000000, 1.000000, 1.000000, 1.000000); //- Rifle de caza
		if (objetoid == 31) ColocarObject(playerid, 8, modelo, 5, -0.018000, 0.085000, 0.033000, 167.399978, 12.200000, -0.299997, 1.000000, 1.000000, 1.000000); //- Rifle de francotirador
		if (objetoid == 32) ColocarObject(playerid, 8, modelo, 5, -0.019999, 0.053999, -0.042000, -33.100013, -174.800018, 171.199890, 0.757999, 0.782000, 0.979999); //- Cohete
		if (objetoid == 33) ColocarObject(playerid, 8, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //- RPG Cohete
		if (objetoid == 34) ColocarObject(playerid, 8, modelo, 5, 0.044999, 0.083999, 0.034999, 47.699974, -79.599967, -89.300102, 0.654999, 0.782000, 0.758000); //- Lanzallamas
		if (objetoid == 35) ColocarObject(playerid, 8, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //- Minigun
		if (objetoid == 36) ColocarObject(playerid, 8, modelo, 5, 0.036999, 0.026999, -0.079999, 152.899993, 14.900004, -0.400000, 1.000000, 1.000000, 1.000000); //- Spray
		if (objetoid == 37) ColocarObject(playerid, 8, modelo, 5, 0.004000, 0.061999, -0.063999, 126.599990, 33.099998, 2.200000, 1.000000, 1.000000, 1.000000); //- Extintor
		if (objetoid == 39) ColocarObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Cámara fotográfica
		if (objetoid == 39) ColocarObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Paracaidas
		if (objetoid == 40) ColocarObject(playerid, 8, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //- Táser
		if (objetoid >= 41 && objetoid <= 45) ColocarObject(playerid, 8, modelo, 5, 0.088999, 0.023000, 0.006000, -9.600001, 178.099945, 92.899978, 1.000000, 1.000000, 1.000000); //- Cargador pequeño
		if (objetoid >= 46 && objetoid <= 49) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.038000, -0.026000, -37.200008, 82.199996, 3.499996, 0.649999, 0.910999, 0.476999); //- Cargador grande
		if (objetoid >= 50 && objetoid <= 62) ColocarObject(playerid, 8, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //- Cajas grandes
		if (objetoid >= 63 && objetoid <= 70) ColocarObject(playerid, 8, modelo, 5,  0.059000, 0.053000, 0.005000, -2.100000, -99.399963, 103.800018, 0.425000, 0.560000, 0.482999); //- Cargador escopeta
		if (objetoid == 71) ColocarObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Spray (no arma)
		if (objetoid == 72) ColocarObject(playerid, 8, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //- Chaleco
		if (objetoid == 73) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //- Esposas
		if (objetoid == 74) ColocarObject(playerid, 8, modelo, 5, 0.094000, 0.065000, -0.026000, 0.000000, -177.499969, 0.000000, 1.000000, 1.000000, 1.000000); //marihuana
		if (objetoid == 75) ColocarObject(playerid, 8, modelo, 5, 0.120999, 0.025998, -0.008001, 58.399959, 20.199996, -170.600006, 1.000000, 1.000000, 1.000000); //ziploc de cocaína
		if (objetoid >= 76 && objetoid <= 78) ColocarObject(playerid, 8, modelo, 5, 0.094000, 0.065000, -0.026000, 0.000000, -177.499969, 0.000000, 1.000000, 1.000000, 1.000000); //crack, heroína y metanfetamina
		if (objetoid == 79) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //semilla de marihuana
		if (objetoid == 80) ColocarObject(playerid, 8, modelo, 5, 0.056000, 0.000000, 0.007000, -97.100006, 0.000000, 0.000000, 0.990999, 0.829000, 0.903000); //- Teléfono
		if (objetoid == 81) ColocarObject(playerid, 8, modelo, 5, 0.076000, 0.031000, 0.003999, 81.299957, 2.899988, 102.499923, 0.724999, 0.667999, 0.480999); //- GPS
		if (objetoid == 82) ColocarObject(playerid, 8, modelo, 5, 0.144999, -0.009999, 0.027000, -23.500009, -173.399993, 3.499995, 1.000000, 1.000000, 1.000000); //- Radio
		if (objetoid == 83) ColocarObject(playerid, 8, modelo, 5, 0.091000, 0.032000, -0.011000, 81.299957, 2.899988, 102.499923, 0.176999, 0.100000, 0.121999); //- Dados
		if (objetoid == 84) ColocarObject(playerid, 8, modelo, 5, 0.065000, 0.044000, -0.001000, 87.699981, -119.399978, -81.000007, 1.000000, 1.000000, 1.000000); //- Tarjeta débito
		if (objetoid == 85) ColocarObject(playerid, 8, modelo, 5, 0.095999, 0.016999, -0.005999, 151.600036, -178.500000, 11.999951, 1.000000, 1.000000, 0.717999); //- Caña de pesca
		if (objetoid == 86) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, -18.400012, 3.499995, 1.000000, 1.000000, 1.000000); //- Destornillador
		if (objetoid == 87) ColocarObject(playerid, 8, modelo, 5, 0.084000, 0.026000, -0.014000, 156.000076, -21.299989, -1.399998, 0.389000, 0.939000, 0.409999); //- Encendedor
		if (objetoid == 88) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.038000, -0.026000, -37.200008, 82.199996, 3.499996, 1.000000, 1.000000, 1.000000); //- Cigarrillos
		if (objetoid == 89) ColocarObject(playerid, 8, modelo, 5, 0.133997, 0.013997, -0.038995, 158.099990, -81.999946, 5.999985, 0.825999, 0.620998, 0.762996); //- Bidón de gasolina
		if (objetoid >= 90 && objetoid <= 92) ColocarObject(playerid, 8, modelo, 5, 0.216999, 0.037999, -0.002999, -13.699973, -98.399971, 3.000000, 0.839000, 0.423999, 0.645000); //- Doritos, patatas y nachos
		if (objetoid == 93 || objetoid == 94) ColocarObject(playerid, 8, modelo, 5, 0.072000, 0.036999, -0.026000, -11.800009, 175.100036, 3.000000, 1.000000, 1.000000, 1.000000); //- Sprunk y fanta
		if (objetoid == 95) ColocarObject(playerid, 8, modelo, 5, 0.134000, 0.001999, -0.122000, -37.200008, -149.699951, -37.999996, 1.000000, 1.000000, 1.000000); //- Botella agua
		if (objetoid == 96) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.114000, 0.069000, -37.200008, -173.000015, 3.499995, 1.000000, 1.000000, 1.000000); //- Botella cerveza
		if (objetoid == 97) ColocarObject(playerid, 8, modelo, 5, 0.077000, 0.037999, -0.026000, -37.200008, -174.300003, 3.499995, 1.000000, 1.000000, 1.000000); //- Copa vino
		if (objetoid == 98 || objetoid == 99) ColocarObject(playerid, 8, modelo, 5, 0.081000, 0.037999, -0.012999, -37.200008, 172.500061, 3.499995, 1.000000, 1.000000, 1.000000); //- Vaso de whisky y ron
		if (objetoid == 100) ColocarObject(playerid, 8, modelo, 5, 0.125999, 0.037999, -0.006999, -143.300033, -3.300006, 144.699966, 1.000000, 1.000000, 0.833999); //- Hamburguesa
		if (objetoid == 101) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, 82.199996, -175.000000, 1.000000, 1.000000, 1.000000); //- Burrito
		if (objetoid == 102) ColocarObject(playerid, 8, modelo, 5, 0.293000, 0.108000, -0.049999, -116.499977, 170.400054, 3.799995, 1.000000, 1.000000, 1.000000); //- Pizza
		if (objetoid == 103) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.096000, 0.066999, -25.500007, 179.099990, 3.499995, 1.000000, 1.000000, 1.000000); //- Botella de ron
		if (objetoid == 104) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.092000, 0.045000, -37.200008, -165.699996, 3.499995, 1.000000, 1.000000, 1.000000); //- Botella de whisky
		if (objetoid == 105) ColocarObject(playerid, 8, modelo, 5, 0.072000, 0.037999, -0.038000, -15.100006, -158.999984, 3.499995, 1.000000, 1.000000, 1.000000); //- Botella de vino
		if (objetoid == 106) ColocarObject(playerid, 8, modelo, 5, 0.130000, 0.013999, 0.007999, 9.599995, 6.699999, 29.500005, 1.000000, 1.000000, 1.000000); //- Cigarro
		if (objetoid == 107) ColocarObject(playerid, 8, modelo, 5, 0.080998, 0.056998, -0.023998, 75.300010, -21.099960, -83.500007, 0.825999, 0.620998, 0.762996); //- billetes
		if (objetoid == 108) ColocarObject(playerid, 8, modelo, 5, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //- Caja Cargador escopeta
		if (objetoid == 109) ColocarObject(playerid, 8, modelo, 5, -0.023000, 0.200000, 0.049000, 152.099975, -3.699999, -5.899998, 0.850000, 0.920000, 0.920000); //- Optiwand
		if (objetoid == 110) ColocarObject(playerid, 8, modelo, 5, 0.082000, 0.000000, 0.000000, -0.399999, 76.499984, -25.099998, 1.000000, 1.000000, 1.000000); //marihuana
		if (objetoid == 111) ColocarObject(playerid, 8, modelo, 5, 0.050999, -0.010000, 0.000000, -26.500000, 77.000007, 0.000000, 1.000000, 1.000000, 1.000000); //fardo de cocaína
		if (objetoid >= 112 && objetoid <= 114) ColocarObject(playerid, 8, modelo, 5, 0.082000, 0.000000, 0.000000, -0.399999, 76.499984, -25.099998, 1.000000, 1.000000, 1.000000); //fardos: crack, heroína y metanfetamina
		if (objetoid >= 115 && objetoid <= 123) ColocarObject(playerid, 8, modelo, 5, 0.056000, 0.000000, 0.007000, -97.100006, 0.000000, 0.000000, 0.990999, 0.829000, 0.903000); //- Teléfonos
		if (objetoid == 124) ColocarObject(playerid, 8, modelo, 5, 0.093998, 0.052000, -0.017997, 1.899998, -168.300033, -73.999977, 0.777998, 0.981999, 0.851000); //- Purple drank
		if (objetoid == 125) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.114000, 0.069000, -37.200008, -173.000015, 3.499995, 1.000000, 1.000000, 1.000000); //- Codeine
		if (objetoid == 126) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); // chicle
		if (objetoid == 127) ColocarObject(playerid, 8, modelo, 5, 0.180999, 0.000000, 0.017999, 0.000000, 177.800018, -8.799996, 1.000000, 1.000000, 1.000000); //- Cuchillo
		if (objetoid == 128) ColocarObject(playerid, 8, modelo, 5, 0.082000, 0.022000, -0.040999, -110.899955, 0.000000, -20.699991, 1.000000, 0.541000, 0.599999); //- Palanca
		if (objetoid == 129) ColocarObject(playerid, 8, modelo, 5, -0.000000, 0.004999, -0.080999, -16.900087, 43.799995, 4.500000, 1.000000, 1.000000, 1.500000); //- Alcoholimetro
		if (objetoid == 130) ColocarObject(playerid, 8, modelo, 5, 0.193000, 0.029000, -0.001001, 0.000000, -101.600021, 12.900000, 0.630999, 0.452998, 0.611998); //- Botiquin
		if (objetoid == 131) ColocarObject(playerid, 7, modelo, 6, 0.098000, 0.153000, -0.219999, -110.699958, -10.599965, -99.099998, 0.825999, 0.620999, 0.762999); //- Caja registradora
		if (objetoid == 132) ColocarObject(playerid, 8, modelo, 5, 0.116999, 0.034000, -0.037000, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //- Porro
		if (objetoid == 133) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //- Carnadas
		if (objetoid == 134) ColocarObject(playerid, 8, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, -18.400012, 3.499995, 1.000000, 1.000000, 1.000000); //- Ganzúa
		if (objetoid == 135) ColocarObject(playerid, 8, modelo, 5, 0.000000, 0.089000, 0.000000, 153.500015, 10.000001, 4.800000, 1.000000, 1.000000, 1.000000); //escopetita
		if (objetoid == 136) ColocarObject(playerid, 8, modelo, 5, 0.366999, 0.000000, 0.000000, -171.600021, -88.899925, -166.500076, 0.898000, 0.936000, 1.000000); //sixpack cerveza
		if (objetoid == 137) ColocarObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //cámara de velocidad
		if (objetoid >= 138 && objetoid <= 143) ColocarObject(playerid, 8, modelo, 5, 0.094000, 0.065000, -0.026000, 0.000000, -177.499969, 0.000000, 1.000000, 1.000000, 1.000000); //éxtasis, lsd, ketamina, pcp, hachís y esteroides
		if (objetoid >= 144 && objetoid <= 148) ColocarObject(playerid, 8, modelo, 5, 0.082000, 0.000000, 0.000000, -0.399999, 76.499984, -25.099998, 1.000000, 1.000000, 1.000000); //fardos: éxtasis, lsd, ketamina, pcp, hachís y esteroides
		if (objetoid == 149) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //paquete de poros
		if (objetoid == 150) ColocarObject(playerid, 8, modelo, 5, 0.017999, 0.011000, -0.055000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //poro
		if (objetoid == 151 || objetoid == 152) ColocarObject(playerid, 8, modelo, 5, 0.116999, 0.034000, -0.037000, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //canutos
		if (objetoid == 153 || objetoid == 154) ColocarObject(playerid, 8, modelo, 5, 0.036000, 0.074000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //blunts
		if (objetoid == 155) ColocarObject(playerid, 8, modelo, 5, 0.094000, 0.065000, -0.026000, 0.000000, -177.499969, 0.000000, 1.000000, 1.000000, 1.000000); //metadona
		if (objetoid == 156) ColocarObject(playerid, 8, modelo, 5, 0.109999, 0.031999, -0.009999, 5.600001, -104.400024, 3.900000, 1.000000, 1.000000, 1.000000); //taco
		if (objetoid == 157) ColocarObject(playerid, 8, modelo, 5, 0.072999, 0.038999, -0.002000, 61.500000, -163.300003, 0.000000, 1.000000, 1.000000, 1.000000); //hot dog
		if (objetoid == 158) ColocarObject(playerid, 8, modelo, 5, 0.078000, 0.026000, -0.000999, 0.000000, -92.799995, 1.199999, 1.000000, 1.000000, 1.000000); //pescado frito
		if (objetoid == 159) ColocarObject(playerid, 8, modelo, 5, 0.101999, 0.055999, -0.015999, -23.099994, -176.100051, -3.100000, 1.000000, 1.000000, 1.000000); //café
		if (objetoid == 160) ColocarObject(playerid, 8, modelo, 5, 0.067999, 0.032999, -0.030000, 60.699993, 1.600000, 19.599996, 1.000000, 1.000000, 1.000000); //pierna de pavo
		if (objetoid == 161) ColocarObject(playerid, 8, modelo, 5, 0.005000, 0.065000, -0.016000, 162.399963, 9.599999, 8.400000, 1.000000, 1.000000, 1.000000); //- paintball smg
	}
	if (slot == 3)
	{
	    if (InfoAccesorio[playerid][7][aPosicionX] != 0.0)
	    {
	        if (InfoAccesorio[playerid][7][aParte] == 0) InfoAccesorio[playerid][7][aParte] = 1;
			ColocarObject(playerid, 9, modelo, InfoAccesorio[playerid][7][aParte],
			InfoAccesorio[playerid][7][aPosicionX], InfoAccesorio[playerid][7][aPosicionY], InfoAccesorio[playerid][7][aPosicionZ],
			InfoAccesorio[playerid][7][aRotacionX], InfoAccesorio[playerid][7][aRotacionY], InfoAccesorio[playerid][7][aRotacionZ],
			1.000000, 1.000000, 1.000000);
		}
		else
		{
			switch (objetoid)
			{
				case 2: ColocarObject(playerid, 9, modelo, 1, 0.378000, -0.112998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Palo de golf
				case 5: ColocarObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Bate
				case 6: ColocarObject(playerid, 9, modelo, 1, 0.265000, -0.157998, 0.061000, 6.499971, -108.600013, 92.200012, 1.000000, 1.000000, 1.000000); //- Pala
				case 7: ColocarObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Palo de billar
				case 8: ColocarObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Sable
				case 9: ColocarObject(playerid, 9, modelo, 1, 0.427000, -0.131998, 0.038000, -2.800032, -18.000013, 172.900024, 1.000000, 1.000000, 1.000000); //- Motosierra
				case 14: ColocarObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Flores
				case 15: ColocarObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 1.000000, 1.000000, 1.000000); //- Bastón
				case 22: ColocarObject(playerid, 9, modelo, 1, 0.220000, -0.135998, 0.113000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //- Escopeta
				case 23: ColocarObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //- Recortada
				case 24: ColocarObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //- Escopeta combate
				case 26: ColocarObject(playerid, 9, modelo, 1, 0.205000, -0.136998, 0.156000, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //- MP5K
				case 27: ColocarObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //- AK47
				case 28: ColocarObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //- M4
				case 30: ColocarObject(playerid, 9, modelo, 1, 0.017999, -0.133999, 0.000000, 11.899997, 32.799995, 9.599994, 1.000000, 1.000000, 1.000000); //- Rifle de caza
				case 31: ColocarObject(playerid, 9, modelo, 1, 0.018000, -0.133999, 0.000000, 11.899998, 32.799995, 9.599995, 1.000000, 1.000000, 1.000000); //- Rifle de francotirador
				case 32: ColocarObject(playerid, 9, modelo, 1, -0.019999, -0.155000, 0.068000, 15.799981, 164.600006, -3.100142, 1.000000, 1.000000, 1.000000); //- Cohete
				case 33: ColocarObject(playerid, 9, modelo, 1, 0.195999, -0.142000, -0.129000, -1.799999, 18.200000, 0.000000, 1.000000, 1.000000, 1.000000); //- Cohete RPG
				case 34: ColocarObject(playerid, 9, modelo, 1, 0.363999, -0.155000, 0.083000, 15.799981, 164.600006, -3.100142, 1.000000, 1.000000, 1.000000); //- Lanzallamas
				case 35: ColocarObject(playerid, 9, modelo, 1, -0.289000, -0.114999, -0.048000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //- Minigun
				case 37: ColocarObject(playerid, 9, modelo, 1, 0.439999, -0.114999, 0.157000, -27.400011, 134.299942, -2.600011, 1.000000, 1.000000, 1.000000); //- Extintor
				case 39: ColocarObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.000000, 1.000000, 1.000000); //- Paracaidas
				case 135: ColocarObject(playerid, 9, modelo, 1, 0.220000, -0.135998, 0.113000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //escopetita
				case 161: ColocarObject(playerid, 9, modelo, 1, 0.205000, -0.136998, 0.156000, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //- Paintball smg
				default: ColocarObject(playerid, 9, modelo, 1, -0.116, 0.189, 0.088, 0.0, 44.5, 0.0, 1.000000, 1.000000, 1.000000);
				
			}
			InfoAccesorio[playerid][7][aParte] = 1;
			EditAttachedObject(playerid, 9);
			EditandoObjetoJ[playerid] = 2;
			Mensaje_(playerid, -1, "Mantén presionado {90C3D4}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
		}
	}
	return 1;
}

//<=================================> sistema de cajas dinámicas
enum j_info
{
	cjID,
	cjObjeto[10],
	cjObjetoCant[10],
};
new i_Caja[MAX_CAJAS][j_info];

new con_caja[MAX_PLAYERS];

funcion CargarCajas()
{
	new total_cajas, caja[64];
	for (new id = 0; id < sizeof(i_Caja); id++)
	{
		format(caja, 64, DATOS_CAJAS, id);
		INI_ParseFile(caja, "CargarCajas_data", .bExtra = true, .extra = id);
		if (i_Caja[id][cjID] != 0)
		{
			total_cajas++;
		}
	}
	printf("|- Cajas dinámicas [%d]", total_cajas);
	return 1;
}

funcion CargarCajas_data(id, name[], value[])
{
	INI_Int("ID", i_Caja[id][cjID]);
	INI_Int("objeto_1", i_Caja[id][cjObjeto][0]);
	INI_Int("objeto_2", i_Caja[id][cjObjeto][1]);
	INI_Int("objeto_3", i_Caja[id][cjObjeto][2]);
	INI_Int("objeto_4", i_Caja[id][cjObjeto][3]);
	INI_Int("objeto_5", i_Caja[id][cjObjeto][4]);
	INI_Int("objeto_6", i_Caja[id][cjObjeto][5]);
	INI_Int("objeto_7", i_Caja[id][cjObjeto][6]);
	INI_Int("objeto_8", i_Caja[id][cjObjeto][7]);
	INI_Int("objeto_9", i_Caja[id][cjObjeto][8]);
	INI_Int("objeto_10", i_Caja[id][cjObjeto][9]);
	INI_Int("objetoCant_1", i_Caja[id][cjObjetoCant][0]);
	INI_Int("objetoCant_2", i_Caja[id][cjObjetoCant][1]);
	INI_Int("objetoCant_3", i_Caja[id][cjObjetoCant][2]);
	INI_Int("objetoCant_4", i_Caja[id][cjObjetoCant][3]);
	INI_Int("objetoCant_5", i_Caja[id][cjObjetoCant][4]);
	INI_Int("objetoCant_6", i_Caja[id][cjObjetoCant][5]);
	INI_Int("objetoCant_7", i_Caja[id][cjObjetoCant][6]);
	INI_Int("objetoCant_8", i_Caja[id][cjObjetoCant][7]);
	INI_Int("objetoCant_9", i_Caja[id][cjObjetoCant][8]);
	INI_Int("objetoCant_10", i_Caja[id][cjObjetoCant][9]);
	return 1;
}

stock save_caja(id, bool:Todo = true)
{
	new caj[64];
	format(caj, 64, DATOS_CAJAS, id);
	new INI: File = INI_Open(caj);
	INI_SetTag(File, "Informacion");
	if(Todo)
	{
		INI_WriteInt(File, "ID", i_Caja[id][cjID]);
		INI_WriteInt(File, "objeto_1", i_Caja[id][cjObjeto][0]);
		INI_WriteInt(File, "objeto_2", i_Caja[id][cjObjeto][1]);
		INI_WriteInt(File, "objeto_3", i_Caja[id][cjObjeto][2]);
		INI_WriteInt(File, "objeto_4", i_Caja[id][cjObjeto][3]);
		INI_WriteInt(File, "objeto_5", i_Caja[id][cjObjeto][4]);
		INI_WriteInt(File, "objeto_6", i_Caja[id][cjObjeto][5]);
		INI_WriteInt(File, "objeto_7", i_Caja[id][cjObjeto][6]);
		INI_WriteInt(File, "objeto_8", i_Caja[id][cjObjeto][7]);
		INI_WriteInt(File, "objeto_9", i_Caja[id][cjObjeto][8]);
		INI_WriteInt(File, "objeto_10", i_Caja[id][cjObjeto][9]);
		INI_WriteInt(File, "objetoCant_1", i_Caja[id][cjObjetoCant][0]);
		INI_WriteInt(File, "objetoCant_2", i_Caja[id][cjObjetoCant][1]);
		INI_WriteInt(File, "objetoCant_3", i_Caja[id][cjObjetoCant][2]);
		INI_WriteInt(File, "objetoCant_4", i_Caja[id][cjObjetoCant][3]);
		INI_WriteInt(File, "objetoCant_5", i_Caja[id][cjObjetoCant][4]);
		INI_WriteInt(File, "objetoCant_6", i_Caja[id][cjObjetoCant][5]);
		INI_WriteInt(File, "objetoCant_7", i_Caja[id][cjObjetoCant][6]);
		INI_WriteInt(File, "objetoCant_8", i_Caja[id][cjObjetoCant][7]);
		INI_WriteInt(File, "objetoCant_9", i_Caja[id][cjObjetoCant][8]);
		INI_WriteInt(File, "objetoCant_10", i_Caja[id][cjObjetoCant][9]);
		INI_Close(File);
	}
	return 1;
}

stock cajita(id = -1, playerid)
{
	if (id == -1) return Mensaje_(playerid, -1, "Error, informe esto a bish0p, (cajita).");

	update_manos(playerid);

	new dialog[1024], string[128], string2[50];

	for(new x = 0; x < 10; x++)
	{
		new Bol = i_Caja[id][cjObjeto][x];
		if(Bol == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s [%d]", InfoObjeto[Bol][NombreObjeto], i_Caja[id][cjObjetoCant][x]);
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);

	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s [%d]", InfoObjeto[user[playerid][jm_Izquierda]][NombreObjeto], user[playerid][jm_IzquierdaCant]);
	strcat(dialog, string);

	format(string2, sizeof(string2), "{D6E1EB}Caja n%d", id+500);
	ExPlayerDialog(playerid, D_Caja, DIALOG_STYLE_LIST, string2, dialog, "Seleccionar", "Cancelar");

	con_caja[playerid] = id;
	return 1;
}

stock borrar_caja(id = -1)
{
	if (id == -1) return 1;
	for(new x = 0; x < 10; x++)
	{
		i_Caja[id][cjObjeto][x] = 0;
		i_Caja[id][cjObjetoCant][x] = 0;
	}
	i_Caja[id][cjID] = 0;
	save_caja(id, true);
	return 1;
}

funcion S_caja(playerid, x)
{
	new id = con_caja[playerid];
	if (id == -1) return Mensaje_(playerid, -1, "Error, informe esto a bish0p, (S_caja).");

	update_manos(playerid);
	new cajaobj = i_Caja[id][cjObjeto][x], Cant = i_Caja[id][cjObjetoCant][x], string[128];

	if (cajaobj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");

	if (user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = cajaobj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, cajaobj);
		i_Caja[id][cjObjeto][x] = 0;
		i_Caja[id][cjObjetoCant][x] = 0;

		format(string, sizeof(string), "%s sacó %s de la caja.", nombre_pj(playerid, 0), InfoObjeto[cajaobj][NombreObjeto]);
		ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
		save_caja(id, true);
		con_caja[playerid] = 0;
		new borrar = 0;
		for(new j = 0; j < 10; j++)
		{
			if(i_Caja[id][cjObjeto][j] == 0) borrar++;
		}
		if (borrar == 10) user[playerid][jm_DerechaCant] = 1, borrar_caja(id);
		return 1;
	}
	else return _Mensaje(playerid, 0, "1", "ERROR: Posees tu mano izquierda ocupada."), con_caja[playerid] = 0;
}

funcion G_caja(playerid)
{
	new id = con_caja[playerid];
	if (id == -1) return Mensaje_(playerid, -1, "Error, informe esto a bish0p, (G_caja).");

	update_manos(playerid);

	if (user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
	new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], id_libre;

	for(new x = 0; x < 10; x++)
	{
		if(i_Caja[id][cjObjeto][x] == 0)
		{
			i_Caja[id][cjObjeto][x] = Mano;
			i_Caja[id][cjObjetoCant][x] = Cant;
			RemovePlayerAttachedObject(playerid, 8);
			user[playerid][jm_Izquierda] = 0;
			user[playerid][jm_IzquierdaCant] = 0;

			format(string, sizeof(string), "%s guardó %s en la caja.", nombre_pj(playerid, 0), InfoObjeto[Mano][NombreObjeto]);
			ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			id_libre = 1;
			save_caja(id, true);
			con_caja[playerid] = 0;
			return 1;
		}
	}
	if(id_libre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras de la caja están ocupadas."), con_caja[playerid] = 0;
	return 1;
}

////////////

funcion TirarAcc(ObjetoID, Float: X, Float: Y, Float: Z, world, interior, playerid)
{
	if (ObjetoID != 0)
	{
		new Float: rotx, Float: roty, Float: rotz;
		for (new i = 0; i < sizeof(InfoCaido); i++)
		{
			if (InfoCaido[i][AccX] == 0.0 && InfoCaido[i][AccY] == 0.0 && InfoCaido[i][AccZ] == 0.0)
			{
				InfoCaido[i][AccID] = ObjetoID;
				InfoCaido[i][AccX] = X;
				InfoCaido[i][AccY] = Y;
				InfoCaido[i][AccZ] = Z;
				InfoCaido[i][AccVWorld] = world;
				InfoCaido[i][AccInterior] = interior;
				InfoCaido[i][aParte] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte];
				InfoCaido[i][aPosicionX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX];
				InfoCaido[i][aPosicionY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY];
				InfoCaido[i][aPosicionZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ];
				InfoCaido[i][aRotacionX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX];
				InfoCaido[i][aRotacionY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY];
				InfoCaido[i][aRotacionZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ];
				InfoCaido[i][aEscalaZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ];
				InfoCaido[i][aEscalaY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY];
				InfoCaido[i][aEscalaX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX];
				rotx = 80;
				roty = 0;
				rotz = 0;
				AccCaido[i] = CreateDynamicObject(ObjetoID, X, Y, Z - 1, rotx, roty, rotz, world);
				SetTimerEx("TirarAccTimer", 600000, false, "i", i);
				return 1;
			}
		}
		return 1;
	}
	return 1;
}

funcion TirarAccTimer(i)
{
	DestroyDynamicObject(AccCaido[i]);
	InfoCaido[i][AccX] = 0.0;
	InfoCaido[i][AccY] = 0.0;
	InfoCaido[i][AccZ] = 0.0;
	InfoCaido[i][AccID] = 0;
	return 1;
}

funcion TirarObjeto(ObjetoID, Cantidad, Float: X, Float: Y, Float: Z, world, interior)
{
	if (ObjetoID != 0)
	{
		new Float: rotx, Float: roty, Float: rotz;
		for (new i = 0; i < sizeof(InfoSuelo); i++)
		{
			if (InfoSuelo[i][DropPosX] == 0.0)
			{
				InfoSuelo[i][DropID] = ObjetoID;
				InfoSuelo[i][DropCantidad] = Cantidad;
				InfoSuelo[i][DropPosX] = X;
				InfoSuelo[i][DropPosY] = Y;
				InfoSuelo[i][DropPosZ] = Z;
				InfoSuelo[i][DropVWorld] = world;
				InfoSuelo[i][DropInterior] = interior;
				//
				switch (ObjetoID)
				{
					case 1..40: { rotx = 80; roty = 0; rotz = 0; Z += 0.02; }
					case 41..45: { rotx = 0; roty = 90; rotz = 0; Z += 0.02; }
					case 46..49: { rotx = 0; roty = 0; rotz = 0; Z += 0.06; }
					case 50..70: { rotx = 0; roty = 0; rotz = 0; Z += 0.08; }
					case 71: { rotx = 0; roty = 0; rotz = 0; Z += 0.15; }
					case 72: { rotx = 0; roty = 0; rotz = 0; Z += 0.14; }
					case 73: { rotx = 80; roty = 0; rotz = 0; Z += 0.02; }
					case 74..78: { rotx = 0; roty = 0; rotz = 0; Z += 0.12; }
					case 79: { rotx = 0; roty = 90; rotz = 0; Z += 0.06; }
					case 80,81: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 82,83: { rotx = 90; roty = 0; rotz = 0; Z += 0.02; }
					case 84: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 85,86: { rotx = 90; roty = 0; rotz = 0; Z += 0.02; }
					case 87,88: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 89: { rotx = 0; roty = 0; rotz = 0; Z += 0.30; }
					case 90,91,92: { rotx = 0; roty = 0; rotz = 0; Z += 0.20; }
					case 93,94: { rotx = 0; roty = 0; rotz = 0; Z += 0.09; }
					case 95: { rotx = 0; roty = 30; rotz = 0; Z += 0.18; }
					case 96: { rotx = 0; roty = 0; rotz = 0; Z += 0.10; }
					case 97,98,99: { rotx = 0; roty = 0; rotz = 0; Z += 0.05; }
					case 100..104: { rotx = 0; roty = 0; rotz = 0; Z += 0.03; }
					case 105: { rotx = 0; roty = 0; rotz = 0; Z += 0.16; }
					case 106,107: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 108: { rotx = 0; roty = 0; rotz = 0; Z += 0.08; }
					case 109: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 110..128: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 129: { rotx = 90; roty = 0; rotz = 0; Z += 0.02; }
					case 130: { rotx = 0; roty = 0; rotz = 0; Z += 0.04; }
					case 131: { rotx = 0; roty = 0; rotz = 0; Z += 0.18; }
					case 132,133,134: { rotx = 0; roty = 90; rotz = 0; Z += 0.02; }
					case 135: { rotx = 80; roty = 0; rotz = 0; Z += 0.02; }
					case 136,137: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 138..143: { rotx = 0; roty = 0; rotz = 0; Z += 0.12; }
					case 144..148: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
					case 149: { rotx = 0; roty = 90; rotz = 0; Z += 0.06; }
					case 150..154: { rotx = 0; roty = 90; rotz = 0; Z += 0.02; }
					case 155: { rotx = 0; roty = 0; rotz = 0; Z += 0.12; }
				}
				ObjetoCaido[i] = CreateDynamicObject(InfoObjeto[ObjetoID][ModeloObjeto], X, Y, Z - 1, rotx, roty, rotz, world);
				ObjTimer[i] = SetTimerEx("SueloTime", 3600000*5, false, "i", i);
				return 1;
			}
		}
	}
	return 1;
}

funcion _Recoger(playerid)
{
	if(user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) { _Mensaje(playerid, 0, "9", "Tienes ambas manos ocupadas."); return 1; }
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { _Mensaje(playerid, 0, "9", "No puedes usar este comando en esta situación."); return 1; }
	new ObjetoRecogido, string[256];
	for(new i = 0; i < sizeof(InfoSuelo); i++)
	{
		if(en_pos(playerid, 2.0, InfoSuelo[i][DropPosX], InfoSuelo[i][DropPosY], InfoSuelo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == InfoSuelo[i][DropVWorld] && GetPlayerInterior(playerid) == InfoSuelo[i][DropInterior])
			{
				if(InfoSuelo[i][DropID] == 0) break;
				new weaponid = InfoObjeto[InfoSuelo[i][DropID]][IDArma];
				if (user[playerid][j_Horas] < 10)
				{
					if (weaponid >= 22 && weaponid <= 29309)
					{
				    	_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
				    	return 1;
				    }
				}
				DestroyDynamicObject(ObjetoCaido[i]);
				if(user[playerid][jm_Derecha] == 0)
				{
					user[playerid][jm_Derecha] = InfoSuelo[i][DropID], user[playerid][jm_DerechaCant] = InfoSuelo[i][DropCantidad];
					if(InfoObjeto[InfoSuelo[i][DropID]][IDArma] > 0 && InfoSuelo[i][DropCantidad] > 0) { _GiveWeapon(playerid, InfoObjeto[InfoSuelo[i][DropID]][IDArma], InfoSuelo[i][DropCantidad]); }
					PonerObjeto(playerid, 1, InfoSuelo[i][DropID]);
				}
				else if(user[playerid][jm_Izquierda] == 0)
				{
					user[playerid][jm_Izquierda] = InfoSuelo[i][DropID], user[playerid][jm_IzquierdaCant] = InfoSuelo[i][DropCantidad];
					PonerObjeto(playerid, 2, InfoSuelo[i][DropID]);
				}
				format(string, sizeof(string), "Recogiste un ~b~%s~w~ del suelo.", InfoObjeto[InfoSuelo[i][DropID]][NombreObjeto]);
                if (InfoSuelo[i][DropID] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				ShowPlayerFooter(playerid, string);
				InfoSuelo[i][DropPosX] = 0.0;
				InfoSuelo[i][DropPosY] = 0.0;
				InfoSuelo[i][DropPosZ] = 0.0;
				InfoSuelo[i][DropID] = 0;
				InfoSuelo[i][DropCantidad] = 0;
				KillTimer(ObjTimer[i]);
				Streamer_Update(playerid);
				ObjetoRecogido = 1;
				break;
			}
		}
	}
	if(ObjetoRecogido == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto cercano a ti.");
	return 1;
}

funcion delete_centra(x)
{
	info_c[x][aID] = 0;
	info_c[x][aTipo] = 0;
	info_c[x][aAtendido] = 0;
	KillTimer(CentrTimer[x]);
	return 1;
}

funcion SueloTime(i)
{
	if (InfoSuelo[i][DropID] == 50)
	{
		if (InfoSuelo[i][DropCantidad] != 1)
		{
			borrar_caja(InfoSuelo[i][DropCantidad]-500);
		}
	}
	DestroyDynamicObject(ObjetoCaido[i]);
	InfoSuelo[i][DropPosX] = 0.0;
	InfoSuelo[i][DropPosY] = 0.0;
	InfoSuelo[i][DropPosZ] = 0.0;
	InfoSuelo[i][DropID] = 0;
	InfoSuelo[i][DropCantidad] = 0;
	KillTimer(ObjTimer[i]);
	return 1;
}

funcion TieneObjeto(playerid, objetoid)
{
	for (new x = 0; x < 10; x++)
	{
		if (user[playerid][jBolsillo][x] == objetoid)
		{
			return x;
		}
	}
	if (user[playerid][jm_Derecha] == objetoid) return 10;
	if (user[playerid][jm_Izquierda] == objetoid) return 11;
	return 0;
}

funcion _Telefono(playerid)
{
	switch(user[playerid][jm_Derecha])
	{
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
	}
	switch(user[playerid][jm_Izquierda])
	{
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
	}
	return 0;
}

funcion _Telefono3(playerid)
{
	switch(user[playerid][jm_Derecha])
	{
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
	}
	switch(user[playerid][jm_Izquierda])
	{
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
	}
	for (new x = 0; x < 10; x++)
	{
		switch(user[playerid][jBolsillo][x])
		{
			case 80: return 80;
			case 115: return 115;
			case 116: return 116;
			case 117: return 117;
			case 118: return 118;
			case 119: return 119;
			case 120: return 120;
			case 121: return 121;
			case 122: return 122;
			case 123: return 123;
		}
	}
	return 0;
}

funcion _Telefono2(playerid, mano)
{
	if(mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 80: return 80;
			case 115: return 115;
			case 116: return 116;
			case 117: return 117;
			case 118: return 118;
			case 119: return 119;
			case 120: return 120;
			case 121: return 121;
			case 122: return 122;
			case 123: return 123;
		}
	}
	else if(mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 80: return 80;
			case 115: return 115;
			case 116: return 116;
			case 117: return 117;
			case 118: return 118;
			case 119: return 119;
			case 120: return 120;
			case 121: return 121;
			case 122: return 122;
			case 123: return 123;
		}
	}
	return 0;
}

funcion TieneCaja(playerid, mano)
{
	if(mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 51: return 19; //- 45. Colt
			case 52: return 21; //- D. Eagle
			case 53: return 29; //- Tec-9
			case 54: return 25; //- UZI
			case 55: return 26; //- MP5K
			case 56: return 22; //- Escopeta
			case 57: return 23; //- Escopeta recortada
			case 58: return 24; //- Escopeta de combate
			case 59: return 27; //- Ak-47
			case 60: return 28; //- M4A1
			case 61: return 30; //- Rifle de caza
			case 62: return 31; //- Rifle de francotirador
			case 63: return 41; //- Cargador 45. Colt
			case 64: return 42; //- Cargador D. Eagle
			case 65: return 45; //- Cargador Tec-9
			case 66: return 43; //- Cargador UZI
			case 67: return 44; //- Cargador MP5K
			case 68: return 46; //- Cargador Ak-47
			case 69: return 47; //- Cargador M4A1
			case 70: return 48; //- Cargador rifle
			case 108: return 49; //- Cargador Escopeta
			case 136: return 96; //cerveza
		}
	}
	else if(mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 51: return 19; //- 45. Colt
			case 52: return 21; //- D. Eagle
			case 53: return 29; //- Tec-9
			case 54: return 25; //- UZI
			case 55: return 26; //- MP5K
			case 56: return 22; //- Escopeta
			case 57: return 23; //- Escopeta recortada
			case 58: return 24; //- Escopeta de combate
			case 59: return 27; //- Ak-47
			case 60: return 28; //- M4A1
			case 61: return 30; //- Rifle de caza
			case 62: return 31; //- Rifle de francotirador
			case 63: return 41; //- Cargador 45. Colt
			case 64: return 42; //- Cargador D. Eagle
			case 65: return 45; //- Cargador Tec-9
			case 66: return 43; //- Cargador UZI
			case 67: return 44; //- Cargador MP5K
			case 68: return 46; //- Cargador Ak-47
			case 69: return 47; //- Cargador M4A1
			case 70: return 48; //- Cargador rifle
			case 108: return 49; //- Cargador Escopeta
			case 136: return 96; //cerveza
		}
	}
	return 0;
}

funcion tiene_fardo(playerid, mano)
{
	if(mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 110: return 74; //marihuana
			case 111: return 75; //cocaína
			case 112: return 76; //crack
			case 113: return 77; //heroína
			case 114: return 78; //metanfetamina
			case 144: return 138; //éxtasis
			case 145: return 139; //LSD
			case 146: return 140; //ketamina
			case 147: return 141; //PCP
			case 148: return 142; //hachis
		}
	}
	else if(mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 110: return 74; //marihuana
			case 111: return 75; //cocaína
			case 112: return 76; //crack
			case 113: return 77; //heroína
			case 114: return 78; //metanfetamina
			case 144: return 138; //éxtasis
			case 145: return 139; //LSD
			case 146: return 140; //ketamina
			case 147: return 141; //PCP
			case 148: return 142; //hachis
		}
	}
	return 0;
}

funcion tiene_droga(playerid, mano)
{
	if(mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 74: return 110; //marihuana
			case 75: return 111; //cocaína
			case 76: return 112; //crack
			case 77: return 113; //heroína
			case 78: return 114; //metanfetamina
			case 138: return 144; //éxtasis
			case 139: return 145; //LSD
			case 140: return 146; //ketamina
			case 141: return 147; //PCP
			case 142: return 148; //hachis
		}
	}
	else if(mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 74: return 110; //marihuana
			case 75: return 111; //cocaína
			case 76: return 112; //crack
			case 77: return 113; //heroína
			case 78: return 114; //metanfetamina
			case 138: return 144; //éxtasis
			case 139: return 145; //LSD
			case 140: return 146; //ketamina
			case 141: return 147; //PCP
			case 142: return 148; //hachis
		}
	}
	return 0;
}

funcion SetVehicleMatricula(carid)
{
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	format(matricula, sizeof(matricula), "LS-%d", carid);
	SetVehicleNumberPlate(carid, matricula);
	return 1;
}

funcion DarMatricula(carid, id)
{
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	format(matricula, sizeof(matricula), "LS-%d", id);
	SetVehicleNumberPlate(carid, matricula);
	return 1;
}

check_code(const account[])
{
	new count[128];
	format(count, sizeof(count), data_codes, account);
	return fexist(count);
}


new
	code_nivel[MAX_PLAYERS],
	code_horas[MAX_PLAYERS],
	code_dinero[MAX_PLAYERS]
;
funcion Code_data(playerid, name[], value[])
{
	INI_Int("Dinero", code_dinero[playerid]);
	INI_Int("Nivel", code_nivel[playerid]);
	INI_Int("Horas", code_horas[playerid]);
	return 0;
}
/*funcion C_data(playerid, name[], value[])
{
	new tipo = tipo_carga[playerid];
	switch (tipo)
	{
	    case 1:
	    {
			INI_String("Contraseña", user[playerid][jClave], 24);
			INI_Int("SQLID", user[playerid][jSQLID]);
			INI_String("Nombre", user[playerid][jNombre], MAX_PLAYER_NAME);
			INI_String("Email", user[playerid][jEmail], 255);
			INI_Int("Admin", user[playerid][jAdmin]);
			INI_String("Staff", user[playerid][jStaff], 32);
			INI_Int("Encargado1", user[playerid][jEncargado][0]);
			INI_Int("Encargado2", user[playerid][jEncargado][1]);
			INI_Int("Encargado3", user[playerid][jEncargado][2]);
			INI_Int("Encargado4", user[playerid][jEncargado][3]);
			INI_Int("Encargado5", user[playerid][jEncargado][4]);
			INI_String("IP", user[playerid][jIP], 16);
			INI_String("Cuenta_1", user[playerid][jCuenta_1], MAX_PLAYER_NAME);
			INI_String("Cuenta_2", user[playerid][jCuenta_2], MAX_PLAYER_NAME);
			INI_String("Cuenta_3", user[playerid][jCuenta_3], MAX_PLAYER_NAME);
			//INI_Int("Eliminado", 0);
			INI_String("Fecha_Reg", user[playerid][pfechaUreg], 128);
			return 0;
	    }
	    case 2:
		{
			INI_Int("Registrado", user[playerid][jRegistrado]);
			INI_Int("Time_Game", user[playerid][ptimegame]);
			INI_String("Fecha_reg", user[playerid][pfechareg], 128);
			INI_Float("Posicion_X", user[playerid][jPosicion_X]);
			INI_Float("Posicion_Y", user[playerid][jPosicion_Y]);
			INI_Float("Posicion_Z", user[playerid][jPosicion_Z]);
			INI_Float("Posicion_R", user[playerid][jPosicion_R]);
			INI_Float("Vida", user[playerid][jSangre]);
			INI_Float("Chaleco", user[playerid][jChaleco]);
			INI_Int("Interior", user[playerid][jInterior]);
			INI_Int("VirtualWorld", user[playerid][jVirtualWorld]);
			INI_Int("Sexo", user[playerid][jSexo]);
			INI_Int("Raza", user[playerid][jRaza]);
			INI_Int("Edad", user[playerid][jEdad]);
			INI_Int("Ciudad", user[playerid][jCiudad]);
			INI_Int("Hablar", user[playerid][jHablar]);
			INI_Int("Estilo", user[playerid][jEstilo]);
			INI_Int("Pelea", user[playerid][jPelea]);
			INI_Int("Sed", user[playerid][jSed]);
			INI_Float("Hambre", user[playerid][jHambre]);
			INI_Int("Alcohol", user[playerid][jAlcohol]);
			INI_Int("Fuerza", user[playerid][jFuerza]);
			INI_Int("Dinero", user[playerid][jDinero]);
			SetPVarInt(playerid, "Money", user[playerid][jDinero]);
			INI_Int("Banco", user[playerid][jBanco]);
			INI_Int("Cheques", user[playerid][jCheques]);
			INI_Int("Debito", user[playerid][jDebito]);
			INI_Int("PuntosRol", user[playerid][jPuntosRol][0]);
			INI_Int("PuntosNRol", user[playerid][jPuntosRol][1]);
			INI_Int("Nivel", user[playerid][jNivel]);
			INI_Int("Experiencia", user[playerid][jExperiencia]);
			INI_Int("Horas", user[playerid][j_Horas]);
			INI_Int("Multicuenta", user[playerid][jMulticuenta]);
			INI_Int("Baneado", user[playerid][jBaneado]);
			INI_Int("bTiempo", user[playerid][jBtiempo]);
			INI_String("bCulpable", user[playerid][jBculpable], 32);
			INI_String("bRazon", user[playerid][jBrazon], 128);
			INI_String("bMomento", user[playerid][jBmomento], 150);
			INI_Int("Casa", user[playerid][jCasaKey]);
			INI_Int("Casa2", user[playerid][jCasaKey2]);
			INI_Int("CasaRenta", user[playerid][jAlquiler]);
			INI_Int("timeunrent", user[playerid][j_timeunrent]);
			INI_Int("CasaLlaves", user[playerid][jCasaLlaves]);
			INI_Int("Casa2Llaves", user[playerid][jCasa2Llaves]);
			INI_Int("2CasaLlaves", user[playerid][j2CasaLlaves]);
			INI_Int("2Casa2Llaves", user[playerid][j2Casa2Llaves]);
			INI_Int("Negocio", user[playerid][jNegocioKey]);
			INI_Int("Negocio2", user[playerid][jNegocioKey2]);
			INI_Int("NegocioLlaves", user[playerid][jNegocioLlaves]);
			INI_Int("Negocio2Llaves", user[playerid][jNegocio2Llaves]);
			INI_Int("Empresa", user[playerid][jEmpresaKey]);
			INI_Int("EmpresaLlaves", user[playerid][jEmpresaLlaves]);
			INI_Int("Empresa2Llaves", user[playerid][jEmpresa2Llaves]);
			INI_Int("Contrato", user[playerid][jContrato]);
			INI_Int("HorasE", user[playerid][jHorasE]);
			INI_Int("Almacen", user[playerid][jAlmacen]);
			for(new i = 0; i < 6; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Coche%d", i);
				INI_Int(sql, user[playerid][jLlaveCoche][i]);
				format(sql, sizeof(sql), "CocheLlaves%d", i);
				INI_Int(sql, user[playerid][j2Vehiculos][i]);
				format(sql, sizeof(sql), "CochexLlaves%d", i);
				INI_Int(sql, user[playerid][j2Vehixculos][i]);
			}
			INI_Int("Premium", user[playerid][jPremium]);
			INI_Int("ColorP", user[playerid][jColorP]);
			INI_Int("dPremium", user[playerid][jD_premium]);
			INI_Int("mPremium", user[playerid][jM_premium]);
			for(new i = 0; i < 10; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Bolsillo%d", i);
				INI_Int(sql, user[playerid][jBolsillo][i]);
				format(sql, sizeof(sql), "BolsilloCant%d", i);
				INI_Int(sql, user[playerid][jBolsilloCant][i]);
			}
			INI_Int("Izquierda", user[playerid][jm_Izquierda]);
			INI_Int("IzquierdaCant", user[playerid][jm_IzquierdaCant]);
			INI_Int("Derecha", user[playerid][jm_Derecha]);
			INI_Int("DerechaCant", user[playerid][jm_DerechaCant]);
			INI_Int("Espalda", user[playerid][jEspalda]);
			INI_Int("EspaldaCant", user[playerid][jEspaldaCant]);
			for(new i = 0; i < 6; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Cinturon%d", i);
				INI_Int(sql, user[playerid][jCinturon][i]);
				format(sql, sizeof(sql), "CinturonCant%d", i);
				INI_Int(sql, user[playerid][jCinturonCant][i]);
			}
			INI_Int("Ropa", user[playerid][jRopa]);
			INI_Int("Skin", user[playerid][jSkin]);

			INI_Int("RopaArmario1", user[playerid][jRopaArmario][0]);
			INI_Int("RopaArmario2", user[playerid][jRopaArmario][1]);
			INI_Int("RopaArmario3", user[playerid][jRopaArmario][2]);
			INI_Int("RopaArmario4", user[playerid][jRopaArmario][3]);
			INI_Int("RopaArmario5", user[playerid][jRopaArmario][4]);
			INI_Int("RopaArmario6", user[playerid][jRopaArmario][5]);
			INI_Int("RopaArmario7", user[playerid][jRopaArmario][6]);
			INI_Int("RopaArmario8", user[playerid][jRopaArmario][7]);
			INI_Int("Payday", user[playerid][jPayday]);
			INI_Int("timeP", user[playerid][jtimeP]);
			INI_Int("Lider", user[playerid][jLider]);
			INI_Int("Miembro", user[playerid][jMiembro]);
			INI_Int("Rango", user[playerid][jRango]);
			INI_Int("Lider2", user[playerid][jLiderFam]);
			INI_Int("Miembro2", user[playerid][jMiembroFam]);
			INI_Int("Rango2", user[playerid][jRangoFam]);
			INI_Int("Muerto", user[playerid][jMuerto]);
			INI_Int("Muerto2", user[playerid][jMuerto2]);
			INI_Int("Telefono", user[playerid][jTelefono]);
			INI_Int("Saldo", user[playerid][jSaldo]);
			INI_Int("Frecuencia", user[playerid][jFrecuencia]);
			INI_Int("Boombox", user[playerid][jBoombox]);
			INI_Int("Loteria", user[playerid][jLoteria]);
			INI_Int("Mascara", user[playerid][jMascara]);
			INI_Int("MascaraPD", user[playerid][jMascaraPD]);
			INI_Int("Estrellas", user[playerid][jEstrellas]);
			INI_Int("Arrestos", user[playerid][jArrestos]);
			INI_Int("PuntosLic", user[playerid][jPuntosLic]);
			INI_Int("Sanciones", user[playerid][jSanciones]);
			INI_Int("Encarcelado", user[playerid][jEncarcelado]);
			INI_String("jCulpable", user[playerid][jJculpable], 128);
			INI_String("jRazon", user[playerid][jJrazon], 150);
			INI_String("jMomento", user[playerid][jJmomento], 32);
			INI_Int("TiempoCarcel", user[playerid][jTiempoCarcel]);
			INI_Int("tiempito", user[playerid][jtiempito]);
			INI_Int("Cargas", user[playerid][jCargas]);
			INI_Int("Troncos", user[playerid][jTroncos]);
			INI_Int("Pescados", user[playerid][jPescados]);
			INI_Int("Cosechas", user[playerid][jMuebles]);
			INI_Int("cosechitas", user[playerid][jCosechas]);
			INI_Int("Trabajo1", user[playerid][jTrabajo1]);
			INI_Int("Trabajo2", user[playerid][jTrabajo2]);
			INI_Int("Trabajo3", user[playerid][jTrabajo3]);
			INI_Int("Licencias1", user[playerid][jLicencias][0]);
			INI_Int("Licencias2", user[playerid][jLicencias][1]);
			INI_Int("Licencias3", user[playerid][jLicencias][2]);
			INI_Int("Licencias4", user[playerid][jLicencias][3]);
			INI_Int("Licencias5", user[playerid][jLicencias][4]);
			INI_Int("Licencias6", user[playerid][jLicencias][5]);
			INI_Int("Licencias7", user[playerid][jLicencias][6]);
			for(new i = 0; i < 10; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Habilidad%d", i);
				INI_Int(sql, user[playerid][jHabilidad][i]);
				format(sql, sizeof(sql), "Habilidadx%d", i);
				INI_Int(sql, user[playerid][jHabilidad2][i]);
				format(sql, sizeof(sql), "Adiccion%d", i);
				INI_Int(sql, user[playerid][jAdiccion][i]);
			}
			INI_String("Estado", user[playerid][jEstado], 128);
			INI_Int("Documento", user[playerid][jDocumento]);
			INI_Int("fEdad", user[playerid][jf_Edad]);
			INI_Int("fDocumento", user[playerid][jf_Dni]);
			INI_String("fNombre", user[playerid][jf_Nombre], 32);
			INI_String("Delito1", p_delito[playerid][0], 80);
			INI_String("Delito2", p_delito[playerid][1], 80);
			INI_String("Delito3", p_delito[playerid][2], 80);
			INI_String("Delito4", p_delito[playerid][3], 80);
			INI_String("Delito5", p_delito[playerid][4], 80);
			INI_String("Delito6", p_delito[playerid][5], 80);
			INI_String("Delito7", p_delito[playerid][6], 80);
			INI_String("Delito8", p_delito[playerid][7], 80);
			INI_String("Delito9", p_delito[playerid][8], 80);
			INI_String("Delito10", p_delito[playerid][9], 80);
			INI_Int("Delitox1", user[playerid][jDelito][0]);
			INI_Int("Delitox2", user[playerid][jDelito][1]);
			INI_Int("Delitox3", user[playerid][jDelito][2]);
			INI_Int("Delitox4", user[playerid][jDelito][3]);
			INI_Int("Delitox5", user[playerid][jDelito][4]);
			INI_Int("Delitox6", user[playerid][jDelito][5]);
			INI_Int("Delitox7", user[playerid][jDelito][6]);
			INI_Int("Delitox8", user[playerid][jDelito][7]);
			INI_Int("Delitox9", user[playerid][jDelito][8]);
			INI_Int("Delitox10", user[playerid][jDelito][9]);
			for(new i = 0; i < 20; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Contacto%d", i);
				INI_Int(sql, user[playerid][jContacto][i]);
			}
			INI_String("ContactoN1", user[playerid][jContactoN1], 32);
			INI_String("ContactoN2", user[playerid][jContactoN2], 32);
			INI_String("ContactoN3", user[playerid][jContactoN3], 32);
			INI_String("ContactoN4", user[playerid][jContactoN4], 32);
			INI_String("ContactoN5", user[playerid][jContactoN5], 32);
			INI_String("ContactoN6", user[playerid][jContactoN6], 32);
			INI_String("ContactoN7", user[playerid][jContactoN7], 32);
			INI_String("ContactoN8", user[playerid][jContactoN8], 32);
			INI_String("ContactoN9", user[playerid][jContactoN9], 32);
			INI_String("ContactoN10", user[playerid][jContactoN10], 32);
			INI_String("ContactoN11", user[playerid][jContactoN11], 32);
			INI_String("ContactoN12", user[playerid][jContactoN12], 32);
			INI_String("ContactoN13", user[playerid][jContactoN13], 32);
			INI_String("ContactoN14", user[playerid][jContactoN14], 32);
			INI_String("ContactoN15", user[playerid][jContactoN15], 32);
			INI_String("ContactoN16", user[playerid][jContactoN16], 32);
			INI_String("ContactoN17", user[playerid][jContactoN17], 32);
			INI_String("ContactoN18", user[playerid][jContactoN18], 32);
			INI_String("ContactoN19", user[playerid][jContactoN19], 32);
			INI_String("ContactoN20", user[playerid][jContactoN20], 32);
			for(new i = 0; i < 22; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Tiempos%d", i);
				INI_Int(sql, user[playerid][jTiempos][i]);
			}
			INI_Int("uHora", user[playerid][jHoras]);
			INI_Int("uMinuto", user[playerid][jMinutos]);
			INI_Int("uSegundo", user[playerid][jSegundos]);
			INI_Int("uDia", user[playerid][jDias]);
			INI_Int("uMes", user[playerid][jMeses]);
			INI_Int("uAno", user[playerid][jAnos]);
			for(new i = 0; i < 5; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "Empeno%d", i);
				INI_Int(sql, user[playerid][jEmpeno][i]);
				format(sql, sizeof(sql), "Empenox%d", i);
				INI_Int(sql, user[playerid][jEmpeno2][i]);
			}
			for(new i = 0; i < 12; i++)
			{
				new sql[100];
				format(sql, sizeof(sql), "obPF%d", i);
				INI_Int(sql, user[playerid][job_PF][i]);
				format(sql, sizeof(sql), "obPFCant%d", i);
				INI_Int(sql, user[playerid][job_PFCant][i]);
			}
			INI_Int("DineroPF", user[playerid][jDineroPF]);
			INI_Int("ObjetosRep", user[playerid][ObjetosRep]);
			INI_Int("Droga_tipo", user[playerid][jDtipo]);
			INI_Int("Droga_tiempo", user[playerid][jDtiempo]);
			INI_Int("Droga_power", user[playerid][jDpower]);
			INI_Int("Droga_bonus1", user[playerid][jDbonus][0]);
			INI_Int("Droga_bonus2", user[playerid][jDbonus][1]);
			INI_Int("AbstinenceEffect", user[playerid][pAbstinenceEffect]);
			INI_Int("AbstinenceTime", user[playerid][pAbstinenceTime]);
			INI_Int("Textdraw_T", user[playerid][pHud]);
			INI_Int("Fianza", user[playerid][jFianza]);
			INI_Int("uTelefono", user[playerid][j_uTelefono]);
			INI_Int("uManos", user[playerid][j_uManos]);
			INI_Int("uMP", user[playerid][j_uMP]);
			INI_String("uMP2", user[playerid][j_uMP2], 32);
			INI_Int("uRadio", user[playerid][j_uRadio]);
			INI_Int("uAudio", user[playerid][j_uAudio]);
			INI_Int("uSAN", user[playerid][j_uSAN]);
			INI_Int("uOOC", user[playerid][j_uOOC]);
			INI_Int("uTextdraw", user[playerid][pUseHud]);
			INI_Int("rand_veh1", user[playerid][jCoche][0]);
			INI_Int("rand_veh2", user[playerid][jCoche][1]);
			INI_String("Casado", user[playerid][jCasado], 32);
			INI_Int("Graffito", user[playerid][jGraffito]);
			for(new v = 0; v < MAX_ACCESORIOS; v++)
			{
				new string[128];
				format(string, 128, "%d_Modelo", v);
				INI_Int(string, InfoAccesorio[playerid][v][aModelo]);
				format(string, 128, "%d_Parte", v);
				INI_Int(string, InfoAccesorio[playerid][v][aParte]);
				format(string, 128, "%d_Posicion_X", v);
				INI_Float(string, InfoAccesorio[playerid][v][aPosicionX]);
				format(string, 128, "%d_Posicion_Y", v);
				INI_Float(string, InfoAccesorio[playerid][v][aPosicionY]);
				format(string, 128, "%d_Posicion_Z", v);
				INI_Float(string, InfoAccesorio[playerid][v][aPosicionZ]);
				format(string, 128, "%d_Rotacion_X", v);
				INI_Float(string, InfoAccesorio[playerid][v][aRotacionX]);
				format(string, 128, "%d_Rotacion_Y", v);
				INI_Float(string, InfoAccesorio[playerid][v][aRotacionY]);
				format(string, 128, "%d_Rotacion_Z", v);
				INI_Float(string, InfoAccesorio[playerid][v][aRotacionZ]);
				format(string, 128, "%d_Escala_X", v);
				INI_Float(string, InfoAccesorio[playerid][v][aEscalaX]);
				format(string, 128, "%d_Escala_Y", v);
				INI_Float(string, InfoAccesorio[playerid][v][aEscalaY]);
				format(string, 128, "%d_Escala_Z", v);
				INI_Float(string, InfoAccesorio[playerid][v][aEscalaZ]);
				format(string, 128, "%d_Colocado", v);
				INI_Int(string, InfoAccesorio[playerid][v][aColocado]);
			}
			return 0;
	    }
	}
	return 0;
}*/

vehicle_lock_doors(vehicle)
{
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle)
{
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock alm(string[], const string2[])
{
	strmid(string, string2, 0, strlen(string2), strlen(string2) + 1);
	return 1;
}

RespawnNearbyVehicles(playerid, Float: radi)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleModel(i))
		{
			new Float: posx, Float: posy, Float: posz;
			new Float: tempposx, Float: tempposy, Float: tempposz;
			GetVehiclePos(i, posx, posy, posz);
			tempposx = (posx - x);
			tempposy = (posy - y);
			tempposz = (posz - z);
			if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				SetVehicleToRespawn(i);
			}
		}
	}
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//by: whoever
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid))
	{
		case 0: GetPlayerFacingAngle(playerid, a);
		case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

forward _FGomas(playerid); public _FGomas(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	_Gomas[playerid] = 0;
	return 1;
}

forward _FGomas2(playerid); public _FGomas2(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	Taseado[playerid] = 0;
	return 1;
}

stock Float:GetRealDistance(playerid, playerid2, unit)
{
	new Float:Pos[3], Float:Pos2[3], Float:converter;
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerPos(playerid2, Pos2[0], Pos2[1], Pos2[2]);

	Pos[0] -= Pos2[0];
	Pos[1] -= Pos2[1];
	Pos[2] -= Pos2[2];

	switch(unit)
	{
        case 0: converter = 1.0; // Metros
        case 1: converter = 1.0/1000.0; // Kilómetros
        case 2: converter = (1.0/1000.0)/1.6; // Millas
        case 3: converter = 100.0; // Centímetros
        case 4: converter = 39.3701; // Pulgadas
    }
    return floatsqroot((Pos[0]*Pos[0]) + (Pos[1]*Pos[1]) + (Pos[2]*Pos[2]))*converter;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, WEAPON:weaponid, bodypart)
{
	switch(weaponid)
	{
		case 49,50,53,54:
		{
			_arma[playerid] = weaponid;
			asesino[playerid] = issuerid;
			_Sangre(playerid, -amount);
		}
		case 51:
		{
		    if (issuerid != INVALID_PLAYER_ID)
		    {
		        if (user[issuerid][jm_Derecha] != 16 && user[issuerid][jm_Derecha] != 32 && user[issuerid][jm_Derecha] != 33) // anticheat de explosivos
		        {
				    new text_[144];
					format(text_, sizeof(text_), "{FF6347}Administración: %s fue expulsado. Razón:[Arma no sincronizada (posible whitebug o cheat)]", nombre_pj(issuerid));
					MensajeAdmin(text_);
					_Expulsar(issuerid, 0, "Arma no sincronizada");
					return 0;
		        }
		        else
		        {
					_arma[playerid] = weaponid;
					asesino[playerid] = issuerid;
					_Sangre(playerid, -amount);
		        }
		    }
		}
	}
	return 0;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, WEAPON:weaponid, bodypart)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		if(!IsPlayerConnected(damagedid)) { return 1; }
		if(GetPlayerTeam(playerid) == GetPlayerTeam(damagedid))
		{
			if (InfoObjeto[user[playerid][jm_Derecha]][IDArma] != weaponid && weaponid != 0) return 1; // si es un arma invisible, evitar el daño

			if(EnServicioADM[damagedid] == 1 || EnServicioADM[damagedid] == 2) return 1;
			if(user[damagedid][jMuerto2] == 2) return 1;
			if(GetPlayerState(damagedid) == PLAYER_STATE_WASTED) return 1;
            if (GetPVarInt(damagedid, "EnEvento") == 1) return 1;

			_arma[damagedid] = weaponid;
			asesino[damagedid] = playerid;

			new
				arma_no = 0,
				Float:armour = user[damagedid][jChaleco],
				Float:damage,
				drug_effect_damagedid = user[damagedid][jDtipo], // #fede#
				drug_power_damagedid = user[damagedid][jDpower] // #fede#
			;
			/*
				drug_effect_playerid = user[playerid][jDtipo], // #fede#
				drug_power_playerid = user[playerid][jDpower], // #fede#
				Float:strength =  float(user[playerid][jFuerza]/50),
			;

			switch(drug_effect_playerid) // #fede#
			{
				case 1,2:
				{
					switch(drug_power_playerid) // #fede#
					{
						case 1: strength = strength+(strength*0.3);
						case 2: strength = strength+(strength*0.4);
						case 3: strength = strength+(strength*0.5);
					}
				}
				case 3:
				{
					switch(drug_power_playerid) // #fede#
					{
						case 1: strength = strength+(strength*0.15);
						case 2: strength = strength+(strength*0.2);
						case 3: strength = strength+(strength*0.35);
					}
				}
			}*/
			if(amount == 2.64 && (weaponid > 21 && weaponid < 409))
			{
			    damage = 5.0;
			}
			else
			{
				switch(weaponid)
				{
					case 0: damage = amount/2; //puños
					case 1: damage = amount; //nudillera
      				case 2,3,5..7: //palo de golf, porra, bate, pala, palo de billar
        			{
        			    damage = amount;
     				}
       				case 4: damage = amount; //navaja
      				case 8,9: damage = amount; //katana y motosierra
					case 10..15: damage = amount; //dildos, flor, palanca
     				case 22,23: //colt, silenciadora
        			{
	        			if(user[playerid][jm_Derecha] == 40)//táser
						{
							if(IsPlayerInAnyVehicle(damagedid))
							{
								if(EnMotos_Bicis(GetPlayerVehicleID(damagedid)))
								{
									if(!CercaDelWeon(10.0, playerid, damagedid)) return _Mensaje(playerid, 0, "0", "No lograste tasear al jugador, está muy lejos.");
									new string[128];
									RemovePlayerFromVehicle(damagedid);
									TogglePlayerControllable(damagedid, 0);
									Taseado[damagedid] = 1;
									PlayerAudio(damagedid, 6003, 8.0);
									format(string, sizeof(string), "%s te ha paralizado con cables de táser, 10 segundos para pasar efecto.", nombre_pj(playerid));
									_Mensaje(damagedid, 5, "0", string);
									format(string, sizeof(string), "Has paralizado con cables de táser a %s.", nombre_pj(damagedid));
									_Mensaje(playerid, 5, "0", string);
									SetTimerEx("_FGomas2", 10000, false, "i", damagedid);
								}
								else { return 1; }
							}
							else
							{
								if(!CercaDelWeon(10.0, playerid, damagedid)) return _Mensaje(playerid, 0, "0", "No lograste tasear al jugador, está muy lejos.");
								new string[128];
								TogglePlayerControllable(damagedid, 0);
								Taseado[damagedid] = 1;
								PlayerAudio(damagedid, 6003, 8.0);
								format(string, sizeof(string), "%s te ha paralizado con cables de táser.", nombre_pj(playerid));
								_Mensaje(damagedid, 5, "0", string);
								format(string, sizeof(string), "Has paralizado con cables de táser a %s. (/quitarcables)", nombre_pj(damagedid));
								_Mensaje(playerid, 5, "0", string);
							}
						}
						else
						{
	    					switch(bodypart)
		 					{
								case 3,4: damage = COLT_DAMAGE_TORSO_AND_GROIN;
								case 5,6: damage = COLT_DAMAGE_ARMS;
								case 7,8: damage = COLT_DAMAGE_LEGS;
							}
						}
	    			}
	    			case 24: //eagle
        			{
	    				switch(bodypart)
		 				{
							case 3,4: damage = DESERT_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = DESERT_DAMAGE_ARMS;
							case 7,8: damage = DESERT_DAMAGE_LEGS;
						}
	    			}
	    			case 25: //escopeta normal y escopetita
        			{
        			    if(user[playerid][jm_Derecha] == 135)
						{
							if(IsPlayerInAnyVehicle(damagedid))
							{
								if(EnMotos_Bicis(GetPlayerVehicleID(damagedid)))
								{
									if(_Gomas[damagedid] == 1) return 1;
									new string[128];
									TogglePlayerControllable(damagedid, 0);
									RemovePlayerFromVehicle(damagedid);
									_Gomas[damagedid] = 1;
									format(string, sizeof(string), "%s te ha paralizado con balas de goma, 10 segundos para pasar efecto.", nombre_pj(playerid));
									_Mensaje(damagedid, 5, "0", string);
									format(string, sizeof(string), "Has paralizado con balas de goma a %s.", nombre_pj(damagedid));
									_Mensaje(playerid, 5, "0", string);
									TogglePlayerControllable(damagedid, 0);
									SetTimerEx("_FGomas", 10000, false, "i", damagedid);
								}
								else { return 1; }
							}
							else
							{
								if(_Gomas[damagedid] == 1) return 1;
								new string[128];
								TogglePlayerControllable(damagedid, 0);
								_Gomas[damagedid] = 1;
								format(string, sizeof(string), "%s te ha paralizado con balas de goma, 10 segundos para pasar efecto.", nombre_pj(playerid));
								_Mensaje(damagedid, 5, "0", string);
								format(string, sizeof(string), "Has paralizado con balas de goma a %s.", nombre_pj(damagedid));
								_Mensaje(playerid, 5, "0", string);
								TogglePlayerControllable(damagedid, 0);
								SetTimerEx("_FGomas", 10000, false, "i", damagedid);
							}
						}
						else
						{
		    				switch(bodypart)
			 				{
								case 3,4: damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN;
								case 5,6: damage = SHOTGUN_DAMAGE_ARMS;
								case 7,8: damage = SHOTGUN_DAMAGE_LEGS;
							}
						}
	    			}
	    			case 26: //escopeta recortada
        			{
	    				switch(bodypart)
		 				{
							case 3,4: damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = SAWNOFF_DAMAGE_ARMS;
							case 7,8: damage = SAWNOFF_DAMAGE_LEGS;
						}
	    			}
	    			case 27: //escopeta de combate
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = SPAS12_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = SPAS12_DAMAGE_ARMS;
							case 7,8: damage = SPAS12_DAMAGE_LEGS;
						}
			    	}
			    	case 28: //uzi
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = UZI_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = UZI_DAMAGE_ARMS;
							case 7,8: damage = UZI_DAMAGE_LEGS;
						}
			    	}
			    	case 29: //mp5
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = MP5_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = MP5_DAMAGE_ARMS;
							case 7,8: damage = MP5_DAMAGE_LEGS;
						}
			    	}
			    	case 30: //ak47
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = AK47_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = AK47_DAMAGE_ARMS;
							case 7,8: damage = AK47_DAMAGE_LEGS;
						}
			    	}
			    	case 31: //m4
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = M4_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = M4_DAMAGE_ARMS;
							case 7,8: damage = M4_DAMAGE_LEGS;
						}
			    	}
			    	case 32: //tec
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = UZI_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = UZI_DAMAGE_ARMS;
							case 7,8: damage = UZI_DAMAGE_LEGS;
						}
			    	}
			    	case 33: //rifle caza
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = RIFLE_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = RIFLE_DAMAGE_ARMS;
							case 7,8: damage = RIFLE_DAMAGE_LEGS;
						}
			    	}
			    	case 34: //francotirador
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = SNIPER_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = SNIPER_DAMAGE_ARMS;
							case 7,8: damage = SNIPER_DAMAGE_LEGS;
						}
			    	}
					case 409: //paintball smg
		        	{
			    		switch(bodypart)
				 		{
							case 3,4: damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;
							case 5,6: damage = ug_paintball_DAMAGE_ARMS;
							case 7,8: damage = ug_paintball_DAMAGE_LEGS;
						}
			    	}
					case 41: if(user[playerid][jMiembro] == 1) damage = 0.1; //spray
			    	default: damage = amount;
				}
    		}
    		//detección de daños // headshot
    		new si_hs = 0;
			if(bodypart == 9 && (weaponid >= 22 && weaponid <= 29309))
			{
				if(weaponid >= 22 && weaponid <= 29309)
				{
			    	new Float:distance = GetRealDistance(damagedid, playerid, 0);
					if(distance <= 20.0)
					{
    					new headshot = random(10);
			    		switch(weaponid)
						{
	        				case 22,23:
							{
								/*if(headshot == 0 || headshot == 9) damage = 90.0;
								else damage = COLT_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot == 0 || headshot == 9) damage = COLT_DAMAGE_TORSO_AND_GROIN+COLT_DAMAGE_ARMS;
								else damage = COLT_DAMAGE_TORSO_AND_GROIN;
							}
							case 24:
							{
								/*if(headshot == 0 || (headshot > 3 && headshot < 7) || headshot == 9) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = DESERT_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot == 0 || (headshot > 3 && headshot < 7) || headshot == 9) damage = DESERT_DAMAGE_TORSO_AND_GROIN+DESERT_DAMAGE_ARMS;
								else damage = DESERT_DAMAGE_TORSO_AND_GROIN;
							}
							case 25:
							{
								/*if(headshot != 1 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 3 && headshot != 7) damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN+SHOTGUN_DAMAGE_ARMS;
								else damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN;
							}
							case 26:
							{
								/*if(headshot != 1 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 3 && headshot != 7) damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN+SAWNOFF_DAMAGE_ARMS;
								else damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN;
							}
							case 27:
							{
								/*if(headshot != 1 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = SPAS12_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 3 && headshot != 7) damage = SPAS12_DAMAGE_TORSO_AND_GROIN+SPAS12_DAMAGE_ARMS;
								else damage = SPAS12_DAMAGE_TORSO_AND_GROIN;
							}
							case 28:
							{
								/*if(headshot == 0 || headshot == 4 || headshot == 5 || headshot == 9) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = UZI_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot == 0 || headshot == 4 || headshot == 5 || headshot == 9) damage = UZI_DAMAGE_TORSO_AND_GROIN+UZI_DAMAGE_ARMS;
								else damage = UZI_DAMAGE_TORSO_AND_GROIN;
							}
							case 29:
							{
								/*if(headshot != 1 && headshot != 2 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = MP5_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 2 && headshot != 3 && headshot != 7) damage = MP5_DAMAGE_TORSO_AND_GROIN;
								else damage = MP5_DAMAGE_TORSO_AND_GROIN;
							}
							case 30:
							{
								/*if(headshot != 1 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = AK47_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 3 && headshot != 7) damage = AK47_DAMAGE_TORSO_AND_GROIN;
								else damage = AK47_DAMAGE_TORSO_AND_GROIN;
							}
							case 31:
							{
								/*if(headshot != 1 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = M4_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 3 && headshot != 7) damage = M4_DAMAGE_TORSO_AND_GROIN;
								else damage = M4_DAMAGE_TORSO_AND_GROIN;
							}
							case 32:
							{
								/*if(headshot == 0 || headshot == 4 || headshot == 5 || headshot == 9) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = TEC_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot == 0 || headshot == 4 || headshot == 5 || headshot == 9) damage = TEC_DAMAGE_TORSO_AND_GROIN+TEC_DAMAGE_ARMS;
								else damage = TEC_DAMAGE_TORSO_AND_GROIN;
							}
							case 409:
							{
								/*if(headshot != 1 && headshot != 2 && headshot != 3 && headshot != 7) damage = 0.0, si_hs = 1, _Sangre(damagedid, -90.0);
								else damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;*/
								if(headshot != 1 && headshot != 2 && headshot != 3 && headshot != 7) damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;
								else damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;
							}
						}
					}
					else
					{
    					switch(weaponid)
		   		 		{
        					case 22,23: damage = COLT_DAMAGE_TORSO_AND_GROIN;
	        				case 24: damage = DESERT_DAMAGE_TORSO_AND_GROIN;
	        				case 25: damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN;
	        				case 26: damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN;
	        				case 27: damage = SPAS12_DAMAGE_TORSO_AND_GROIN;
	        				case 28: damage = UZI_DAMAGE_TORSO_AND_GROIN;
	        				case 29: damage = MP5_DAMAGE_TORSO_AND_GROIN;
	        				case 30: damage = AK47_DAMAGE_TORSO_AND_GROIN;
	        				case 31: damage = M4_DAMAGE_TORSO_AND_GROIN;
	        				case 32: damage = TEC_DAMAGE_TORSO_AND_GROIN;
							case 409: damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;
						}
     				}
				}
				else
				{
    				switch(weaponid)
   		 			{
        				case 22,23: damage = COLT_DAMAGE_TORSO_AND_GROIN;
        				case 24: damage = DESERT_DAMAGE_TORSO_AND_GROIN;
        				case 25: damage = SHOTGUN_DAMAGE_TORSO_AND_GROIN;
        				case 26: damage = SAWNOFF_DAMAGE_TORSO_AND_GROIN;
        				case 27: damage = SPAS12_DAMAGE_TORSO_AND_GROIN;
        				case 28: damage = UZI_DAMAGE_TORSO_AND_GROIN;
        				case 29: damage = MP5_DAMAGE_TORSO_AND_GROIN;
        				case 30: damage = AK47_DAMAGE_TORSO_AND_GROIN;
        				case 31: damage = M4_DAMAGE_TORSO_AND_GROIN;
        				case 32: damage = TEC_DAMAGE_TORSO_AND_GROIN;
						case 409: damage = ug_paintball_DAMAGE_TORSO_AND_GROIN;
					}
     			}
			}
			//bajo efectos de droga
			switch(drug_effect_damagedid) // #fede#
			{
		    	case 1:
				{
			    	switch(drug_power_damagedid) // #fede#
			    	{
						case 1: damage = damage-(damage*0.07);
						case 2: damage = damage-(damage*0.085);
						case 3: damage = damage-(damage*0.095);
					}
				}
		    	case 2:
		    	{
					switch(drug_power_damagedid) // #fede#
					{
						case 1: damage = damage-(damage*0.08);
						case 2: damage = damage-(damage*0.09);
						case 3: damage = damage-(damage*0.1);
					}
   				}
				case 3:
				{
					switch(drug_power_damagedid) // #fede#
					{
						case 1: damage = damage-(damage*0.04);
						case 2: damage = damage-(damage*0.045);
						case 3: damage = damage-(damage*0.06);
					}
				}
				case 4: damage = damage-(damage*0.055);
				case 5: damage = damage-(damage*0.03);
				case 6: damage = damage-(damage*0.06);
				case 7: damage = damage-(damage*0.08);
				case 8: damage = damage-(damage*0.09);
				case 9: if(drug_power_damagedid > drug_power_damagedid) damage = damage-(damage*0.01); // #fede#
				case 10: if(drug_power_damagedid > drug_power_damagedid) damage = damage-(damage*0.02); // #fede#
			}
			// SI ESTÁ EN UN VEHÍCULO SWAT BLINDADO.

			if(IsPlayerInAnyVehicle(damagedid))
			{
				new a = GetVehicleModel(GetPlayerVehicleID(damagedid));
			    if(a == 528 || a == 427 || a == 490)
			    {
					Mensaje_(damagedid, C_ROJO, "El camión blindado redujo tu impacto de bala a la mitad");
					damage = damage/3;
			    }
			}

			if((weaponid > 21 && weaponid < 29309) && (bodypart == 3 || bodypart == 4) && armour)
			{
				if(armour > damage)
				{
					user[damagedid][jChaleco] = armour-damage;
				}
				else
				{
					user[damagedid][jChaleco] = 0.0;
					armour = damage-armour;
					_Sangre(damagedid, -armour);
				}
			}
			else
			{
			    if (bodypart == 9)
			    {
					if(si_hs == 1) _Sangre(damagedid, -90.0);
					else
					{
						if(armour > damage)
						{
							user[damagedid][jChaleco] = armour-damage;
						}
						else
						{
							user[damagedid][jChaleco] = 0.0;
							armour = damage-armour;
							_Sangre(damagedid, -armour);
						}
					}
			    }
			    else
			    {
					_Sangre(damagedid, -damage);
				}
			}
			new weaponname[24];
			GetWeaponName(weaponid, weaponname, sizeof(weaponname));
			if (weaponid >= 22 && weaponid <= 29309)
			{
			    static const partName[7][32] = {"el Torso", "la Entrepierna", "el Brazo izquierdo", "el Brazo derecho", "el Pierna izquierda", "el Pierna derecha", "la Cabeza"};

				arma_no = 1;

				contador_balas[damagedid]++;
				new str[128];
				if (bodypart == 9)
				{
					if(si_hs == 1) format(str, sizeof(str), "Te han disparado en la Cabeza.");
					else format(str, sizeof(str), "Te han disparado en el Torso.");
				}
				else format(str, sizeof(str), "Te han disparado en %s.", partName[bodypart - 3]);
				if (user[damagedid][jMuerto] == 0) Mensaje_(damagedid, 0xFF6347FF, str);
			}
			if (weaponid > 3)
			{
			    if(arma_no == 1)
			    {
					if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
					{
				  		usandoYo[damagedid] = 2;
				  		new str[128];
						format(str, sizeof(str), "(( Este jugador está herido de bala %d veces, /heridas %d para más información ))", contador_balas[damagedid], damagedid);
						if (user[damagedid][jMuerto] == 0) mensaje_bubble(damagedid, str, 0xFF6347FF, 15.0);
					}
					switch(bodypart)
					{
						case 3://torso
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][Torso], 24, weaponname);
								InfoHeridas[damagedid][Torsor]++;
							}
						}
						case 4://entre piernas
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][EntreP], 24, weaponname);
								InfoHeridas[damagedid][EntrePr]++;
							}
						}
						case 5://brazo izquierdo
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][BrazoI], 24, weaponname);
								InfoHeridas[damagedid][BrazoIr]++;
							}
						}
						case 6://brazo derecho
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][BrazoD], 24, weaponname);
								InfoHeridas[damagedid][BrazoDr]++;
							}
						}
						case 7://pierna izquierda
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][PiernaI], 24, weaponname);
								InfoHeridas[damagedid][PiernaIr]++;
							}
						}
						case 8://pierna derecha
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								format(InfoHeridas[damagedid][PiernaD], 24, weaponname);
								InfoHeridas[damagedid][PiernaDr]++;
							}
						}
						case 9://cabeza
						{
							if(user[playerid][jm_Derecha] != 135 && user[playerid][jm_Derecha] != 40 && user[playerid][jm_Derecha] != 36)
							{
								if(si_hs == 1)
								{
									format(InfoHeridas[damagedid][Cabeza], 24, weaponname);
									InfoHeridas[damagedid][Cabezar]++;
								}
								else
								{
									format(InfoHeridas[damagedid][Torso], 24, weaponname);
									InfoHeridas[damagedid][Torsor]++;
								}
							}
						}
					}
				} else InfoHeridas[damagedid][Lesionesr]++;
			} else InfoHeridas[damagedid][Lesionesr]++;

		}
		else
		if(user[playerid][jAdmin] < 10) // si su team no es el definido y daÃ±a a otro jugador [NOPS & SOBEIT]
		{
  			new text_[144];
			format(text_, sizeof(text_), "{FF6347}Administración: %s fue expulsado. Razón:[Vida y ataque no sincronizado (TEAM)]", nombre_pj(playerid));
			MensajeAdmin(text_);
			_Expulsar(playerid, 0, "Vida y ataque desincronizado.");
		}
	}//- inválido
    return 1;
}

main()
{
	print(" ");
	print("SERVIDOR INICIADO CON ÉXITO.");
	print(" ");
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			i_Vehiculo[v][vPaintJob] = paintjobid;
		}
	}
	return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			i_Vehiculo[v][vColor_1] = color1;
			i_Vehiculo[v][vColor_2] = color2;
		}
	}
	return 0;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 0)
	{
		for (new v = 0; v < MAX_VEHICULOS; v++)
		{
			if(i_Vehiculo[v][vID] == GetPlayerVehicleID(playerid))
			{
				ActualizarMods(i_Vehiculo[v][vID]);
			}
		}
		SetPlayerInterior(playerid, 0);
	}
	return 0;
}

stock Es_job(jugador, trabajo, extra = -1, extra2 = -1)//trabajos
{
	if(IsPlayerConnected(jugador))
	{
	    new job=user[jugador][jTrabajo1], job2=user[jugador][jTrabajo2], job3=user[jugador][jTrabajo3];

		if(job == trabajo || job == extra || job == extra2) return 1;
		else if(job2 == trabajo || job2 == extra || job2 == extra2) return 1;
		else if(job3 == trabajo || job3 == extra || job3 == extra2) return 1;
	}
	return 0;
}

stock Es_Faccion(jugador, faccion, extra = -1, extra2 = -1)//facciones
{
	if(IsPlayerConnected(jugador))
	{
		new
			lider = user[jugador][jLider],
			miembro = user[jugador][jMiembro]
		;
		if (miembro==1)
			if (user[jugador][jRango] == 0) return 0;

		if(miembro == faccion || miembro == extra || miembro == extra2) return 1;
		else if(lider == faccion || lider == extra || lider == extra2) return 1;

	}
	return 0;
}

stock Es_Lider(jugador, faccion, extra = -1, extra2 = -1, extra3 = -1, extra4 = -1)//lideres
{
	if(IsPlayerConnected(jugador))
	{
		new lider = user[jugador][jLider];
		if(lider == faccion || lider == extra || lider == extra2 || lider == extra3 || lider == extra4) return 1;
	}
	return 0;
}

stock Es_Org(playerid)//organizaciones
{
	if(IsPlayerConnected(playerid))
	{
		new familia = user[playerid][jMiembroFam];
		if(familia == 1 || familia == 2 || familia == 3 || familia == 4 || familia == 5 || familia == 6 ||
		familia == 7 || familia == 8 || familia == 9 || familia == 10 || familia == 11 || familia == 12 || familia == 13) return 1;
	}
	return 0;
}

//- Cerca/Dentro de:
en_Concesionaria(playerid)
{
	if		(IsPlayerInRangeOfPoint(playerid, 5.0,	8727.8135,14170.5762,6.5043)) { return 1; }	//	*	Motos
	else if (IsPlayerInRangeOfPoint(playerid, 5.0,	8683.3047,14367.3936,6.6591)) { return 1; }	//	*   Clase media
	else if (IsPlayerInRangeOfPoint(playerid, 5.0,	555.2177, -1438.9354, 15.7073)) { return 1; }	//	*	Clase alta
	else if (IsPlayerInRangeOfPoint(playerid, 5.0,	942.8696, -1418.1125, 13.5469)) { return 1; }	//	*	Camionetas
	else if	(IsPlayerInRangeOfPoint(playerid, 5.0,	2006.0568, -2271.4482, 13.5344)) { return 1; }	//  *   Aviones LV
	else if	(IsPlayerInRangeOfPoint(playerid, 5.0,	2770.6709, -1628.4618, 12.1775)) { return 1; }	//  *   Clase baja
	else if	(IsPlayerInRangeOfPoint(playerid, 5.0,	-63.0295, -1121.5996, 1.1733)) { return 1; }	//	*	coches usados
	else if (IsPlayerInRangeOfPoint(playerid, 5.0,	354.5555, -2055.0317, 7.8399)) { return 1; }	//	*	barcos
	return 0;
}

is_player_taller(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,10.0,720.4227, -465.2718, 16.3359)) { return 1; } // dillimore
	else if(IsPlayerInRangeOfPoint(playerid,10.0,1025.0483, -1031.6508, 31.9656)) { return 2; } // vinewood
	else if(IsPlayerInRangeOfPoint(playerid,10.0,-1904.5531, 276.1320, 41.0469)) { return 3; } // sf 1
	else if(IsPlayerInRangeOfPoint(playerid,10.0,-2713.8391, 216.8167, 4.2731)) { return 4; } // sf 2
	else if(IsPlayerInRangeOfPoint(playerid,10.0,2386.7439, 1040.9083, 10.8203)) { return 5; } // lv transfer
	else if(IsPlayerInRangeOfPoint(playerid,10.0,2072.9839, -1831.3838, 13.5455)) { return 6; } // idlewood
	return 0;
}

Auto_SAN(carid)
{
	if(GetVehicleModel(carid) == 582 || GetVehicleModel(carid) == 488) return 1;
	return 0;
}

en_muelle(playerid)
{
	if(en_pos(playerid, 1, 403.8266, -2088.7598, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 398.7553, -2088.7490, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 396.2197, -2088.6692, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 391.1094, -2088.7976, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 383.4157, -2088.7849, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 374.9598, -2088.7979, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 369.8107, -2088.7927, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 367.3637, -2088.7925, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 362.2244, -2088.7981, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 354.5382, -2088.7979, 7.8359)) return 1;
	else if(en_pos(playerid, 1, 8470.9131, 14471.0557, 4.3955)) return 1;
	else if(en_pos(playerid, 1, 8470.8008, 14507.8643, 4.4209)) return 1;
	else if(en_pos(playerid, 1, 8465.4512, 14491.3350, 4.5447)) return 1;
	else if(en_pos(playerid, 1, 8482.2891, 14495.5928, 4.6008)) return 1;
	return 0;
}
en_paradabus(playerid)
{
	if(en_pos(playerid, 5.0, 8647.1846, 14746.0244, 23.1869)) return 1;
	else if(en_pos(playerid, 5.0, 8836.5840,14202.1211, 6.9101)) return 1;
	return 0;
}
Esta_Banco(playerid)
{
	if(en_pos(playerid, 2.0, -1539.4642,321.0930,53.5363)) return 1;
	else if(en_pos(playerid, 2.0, 2311.9250,-13.7656,26.7422)) return 1;
	return 0;
}

Esta_Gob(playerid)
{
	if (en_pos(playerid, 2.0, -196.9528, -1752.3590, 675.7817)) return 1;
	else if (en_pos(playerid, 2.0, 858.4502, 2316.3831, 1910.4048)) return 1;
	else if (en_pos(playerid, 2.0, 374.3038,186.4248,1014.1875)) return 1;
	return 0;
}

Esta_Arresto(playerid)
{
	if(en_pos(playerid, 5.0, 897.6996, 2279.0515, 1910.4048)) return 1; // Interior policia
	else if(en_pos(playerid, 5.0, 261.7050, 1988.9712, 17.6406)) return 1; // Prisión federal
	return 0;
}

en_cosechas(playerid)
{
	if(en_pos(playerid, 6.0, -310.3220,-1343.6019,8.5391)) return 1;
	else if(en_pos(playerid, 6.0, -242.2087,-1358.7137,9.1925)) return 1;
	else if(en_pos(playerid, 6.0, -232.1254,-1436.2472,5.1867)) return 1;
	else if(en_pos(playerid, 6.0, -282.2103,-1506.9939,6.4768)) return 1;
	else if(en_pos(playerid, 6.0, -230.1935,-1502.7699,7.5455)) return 1;
	else if(en_pos(playerid, 6.0, -275.4666,-1442.4436,9.0312)) return 1;
	else if(en_pos(playerid, 6.0, -303.2246,-1371.3523,8.8672)) return 1;
	else if(en_pos(playerid, 6.0, -241.5340,-1314.2330,10.6801)) return 1;
	else if(en_pos(playerid, 6.0, -186.5779,-1383.4722,4.6812)) return 1;
	else if(en_pos(playerid, 6.0, -280.7169,-1429.3323,11.4508)) return 1;
	else if(en_pos(playerid, 6.0, -327.1384,-1544.0621,14.7354)) return 1;
	else if(en_pos(playerid, 6.0, -219.7765,-1483.9117,7.4775)) return 1;
	else if(en_pos(playerid, 6.0, -198.7410,-1350.1140,6.7301)) return 1;
	else if(en_pos(playerid, 6.0, -296.7588,-1321.7921,8.8109)) return 1;
	return 0;
}

Esta_Ropa(playerid)
{
	if(en_pos(playerid, 30.0, 207.5627, -103.7291, 1005.2578)) return 1;
	else if(en_pos(playerid, 30.0, 203.9068, -41.0728, 1001.8047)) return 1;
	else if(en_pos(playerid, 25.0, 203.9068, -41.0728, 1001.8047)) return 1;
	else if(en_pos(playerid, 30.0, 214.4470, -7.6471, 1001.2109)) return 1;
	else if(en_pos(playerid, 50.0, 161.3765, -83.8416, 1001.8047)) return 1;
	else if(en_pos(playerid, 30.0, -2664.3318, 1538.4259, 907.1797)) return 1;
	else if(en_pos(playerid, 30.0, 1395.0045, -1896.1139, 13.3733)) return 1;
	else if(en_pos(playerid, 30.0, 202.6777, -163.0623, 1000.5306)) return 1;
	//< gimnasios
	else if(en_pos(playerid, 5.0, 756.48889, 5.55770, 1000.67487)) return 1;
	else if(en_pos(playerid, 5.0, 754.77521, -26.26781, 1000.61298)) return 1;
	else if(en_pos(playerid, 5.0, 754.31891, -40.28869, 1000.61298)) return 1;
	else if(en_pos(playerid, 5.0, 770.95917, -77.91425, 1000.59155)) return 1;
	else if(en_pos(playerid, 5.0, 758.47638, -77.76210, 1000.59155)) return 1;
	return 0;
}

//variables de vehículos
EstaAutoEnganche(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574) { return 1; }
	return 0;
}

veh_Pescador(carid)
{
	for(new v = 0; v < sizeof(Pescador_Veh); v++) { if(carid == Pescador_Veh[v]) return 1; }
	return 0;
}

veh_Granjero(carid)
{
	for(new v = 0; v < sizeof(Granjero_Veh); v++) { if(carid == Granjero_Veh[v]) return 1; }
	return 0;
}

en_rentable(carid)
{
	for(new v = 0; v < sizeof(coche_renta); v++) { if(carid == coche_renta[v]) return 1; }
	return 0;
}

LSPD_Veh(carid)
{
	for(new v = 0; v < sizeof(LSPDveh); v++) { if(carid == LSPDveh[v]) return 1; }
	return 0;
}
SADOC_Veh(carid)
{
	for(new v = 0; v < sizeof(SADOCveh); v++) { if(carid == SADOCveh[v]) return 1; }
	return 0;
}
LSPD_Veh2(carid)
{
	for(new v = 0; v < 54; v++) { if(carid == LSPDveh[v]) return 1; }
	return 0;
}
LSPD_Veh3(carid)
{
	for(new v = 54; v < 92; v++) { if(carid == LSPDveh[v]) return 1; }
	return 0;
}
SAN_Vehicle(carid)
{
	for(new v = 0; v < sizeof(SANveh); v++) { if(carid == SANveh[v]) return 1; }
	return 0;
}
ALS_Veh(carid)
{
	for(new v = 0; v < sizeof(ALSveh); v++) { if(carid == ALSveh[v]) return 1; }
	return 0;
}
LSFD_Veh(carid)
{
	for(new v = 0; v < sizeof(LSFDveh); v++) { if(carid == LSFDveh[v]) return 1; }
	return 0;
}
LSFD_2Veh(carid)
{
	for(new v = 0; v < 15; v++) { if(carid == LSFDveh[v]) return 1; }
	return 0;
}
EstaEnBicis(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 510) { return 1; }
	return 0;
}
EnMotos_Bicis(carid)
{
	new Bike[] = { 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
	for(new i = 0; i < sizeof(Bike); i++) { if(GetVehicleModel(carid) == Bike[i]) return 1; }
	return 0;
}
EstaEnAvion(carid)
{
	new Avion[] = {592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469};
	for(new i = 0; i < sizeof(Avion); i++) { if(GetVehicleModel(carid) == Avion[i]) return 1; }
	return 0;
}
BOTE(carid)
{
	if(GetVehicleModel(carid) == 453) { return 1; }
	return 0;
}
EstaEnBote(carid)
{
	new Boats[] = {472, 473, 493, 484, 430, 454, 453, 452, 446};
	for(new i = 0; i < sizeof(Boats); i++) { if(GetVehicleModel(carid) == Boats[i]) return 1; }
	return 0;
}
Veh_MaleteroGrande(carid)
{
	new veh[] = {400, 413, 414, 418, 427, 428, 440, 456, 459, 482, 483, 489, 490, 495, 498, 499, 479, 482, 609};
	for(new i = 0; i < sizeof(veh); i++) { if(GetVehicleModel(carid) == veh[i]) return 1; }
	return 0;
}

_LimpiarM(vid)
{
	i_Vehiculo[vid][vGuantera][0] = 0;
	i_Vehiculo[vid][vGuantera][1] = 0;
	i_Vehiculo[vid][vGuantera][2] = 0;
	i_Vehiculo[vid][vGuantera][3] = 0;
	i_Vehiculo[vid][vGuantera][4] = 0;
	i_Vehiculo[vid][vGuantera][5] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][0] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][1] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][2] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][3] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][4] = 0;
	i_Vehiculo[vid][vGuanteraCantidad][5] = 0;
	i_Vehiculo[vid][vMaletero][0] = 0;
	i_Vehiculo[vid][vMaletero][1] = 0;
	i_Vehiculo[vid][vMaletero][2] = 0;
	i_Vehiculo[vid][vMaletero][3] = 0;
	i_Vehiculo[vid][vMaletero][4] = 0;
	i_Vehiculo[vid][vMaletero][5] = 0;
	i_Vehiculo[vid][vMaletero][6] = 0;
	i_Vehiculo[vid][vMaletero][7] = 0;
	i_Vehiculo[vid][vMaletero][8] = 0;
	i_Vehiculo[vid][vMaletero][9] = 0;
	i_Vehiculo[vid][vMaletero][10] = 0;
	i_Vehiculo[vid][vMaletero][11] = 0;
	i_Vehiculo[vid][vMaletero][12] = 0;
	i_Vehiculo[vid][vMaletero][13] = 0;
	i_Vehiculo[vid][vMaletero][14] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][0] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][1] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][2] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][3] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][4] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][5] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][6] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][7] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][8] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][9] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][10] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][11] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][12] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][13] = 0;
	i_Vehiculo[vid][vMaleteroCantidad][14] = 0;
}

QuitarBolsillos(playerid)
{
	user[playerid][jBolsillo][0] = 0;
	user[playerid][jBolsillo][1] = 0;
	user[playerid][jBolsillo][2] = 0;
	user[playerid][jBolsillo][3] = 0;
	user[playerid][jBolsillo][4] = 0;
	user[playerid][jBolsillo][5] = 0;
	user[playerid][jBolsillo][6] = 0;
	user[playerid][jBolsillo][7] = 0;
	user[playerid][jBolsillo][8] = 0;
	user[playerid][jBolsillo][9] = 0;
	user[playerid][jBolsilloCant][0] = 0;
	user[playerid][jBolsilloCant][1] = 0;
	user[playerid][jBolsilloCant][2] = 0;
	user[playerid][jBolsilloCant][3] = 0;
	user[playerid][jBolsilloCant][4] = 0;
	user[playerid][jBolsilloCant][5] = 0;
	user[playerid][jBolsilloCant][6] = 0;
	user[playerid][jBolsilloCant][7] = 0;
	user[playerid][jBolsilloCant][8] = 0;
	user[playerid][jBolsilloCant][9] = 0;
}

QuitarCinturon(playerid)
{
	user[playerid][jCinturon][0] = 0;
	user[playerid][jCinturon][1] = 0;
	user[playerid][jCinturon][2] = 0;
	user[playerid][jCinturon][3] = 0;
	user[playerid][jCinturon][4] = 0;
	user[playerid][jCinturon][5] = 0;
	user[playerid][jCinturonCant][0] = 0;
	user[playerid][jCinturonCant][1] = 0;
	user[playerid][jCinturonCant][2] = 0;
	user[playerid][jCinturonCant][3] = 0;
	user[playerid][jCinturonCant][4] = 0;
	user[playerid][jCinturonCant][5] = 0;
}

QuitarManos(playerid)
{
	user[playerid][jm_Izquierda] = 0;
	user[playerid][jm_IzquierdaCant] = 0;
	user[playerid][jm_Derecha] = 0;
	user[playerid][jm_DerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 7);
	RemovePlayerAttachedObject(playerid, 8);
	ResetPlayerWeapons(playerid);
}

stock QuitarEspalda(playerid)
{
	user[playerid][jEspalda] = 0, user[playerid][jEspaldaCant] = 0;
	RemovePlayerAttachedObject(playerid, 9);
}

stock nombre_sin(playerid)
{
	new N[24], NombrePJ[24];
	GetPlayerName(playerid, NombrePJ, 24);
	strmid(N, NombrePJ, 0, strlen(NombrePJ), 24);
	for(new i = 0; i < MAX_PLAYER_NAME; i++)
	{
		if(N[i] == '_') N[i] = ' ';
	}
	return N;
}

stock nombre_pj(playerid, con_ = 1)
{
	new playersName[MAX_PLAYER_NAME + 2];
	GetPlayerName(playerid, playersName, sizeof(playersName));

	if(!con_)
	{
		if(user[playerid][j_Mascara])
			format(playersName, sizeof(playersName), "[Extraño %i]", number_mask[playerid]);

		else
		{
			for(new i = 0, j = strlen(playersName); i < j; i ++)
			{
				if(playersName[i] == '_')
				{
					playersName[i] = ' ';
				}
			}
		}
	}
	return playersName;
}

detener_playsound(playerid)
{
	PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	return 1;
}

stock PlayerPlaySoundEx(soundid, Float: x, Float: y, Float: z, Float: radio = 10.0)// Realistic sound playback
{
	foreach(new i: Player)
	{
		if(en_pos(i, radio, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

stock PlayerAudio(playerid, soundid, Float: radio = 10.0)// Realistic sound playback
{
    new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i: Player)
	{
		if(en_pos(i, radio, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

PartesVehiculo(type)
{
	new name[64];
	switch(type)
	{
		case 0: name = "Alerón";
		case 1: name = "Capó";
		case 2: name = "Techo";
		case 3: name = "Lados";
		case 4: name = "Lamps";
		case 5: name = "Nitro";
		case 6: name = "Escape";
		case 7: name = "Ruedas";
		case 8: name = "Stereo";
		case 9: name = "Hidráulica";
		case 10: name = "Parachoque D.";
		case 11: name = "Parachoque T.";
		case 12: name = "Ventilacion Izq.";
		case 13: name = "Ventilacion Der.";
		default: name = "Desconocida";
	}
	return name;
}

PartesNombres(part)
{
	new name[24];
	switch(part - 1000)
	{
		case 0: name = "Pro";
		case 1: name = "Win";
		case 2: name = "Drag";
		case 3: name = "Alpha";
		case 4: name = "Champ Scoop";
		case 5: name = "Fury Scoop";
		case 6: name = "Roof Scoop";
		case 7: name = "Sideskirt";
		case 8: name = "2x";
		case 9: name = "5x";
		case 10: name = "10x";
		case 11: name = "Race Scoop";
		case 12: name = "Worx Scoop";
		case 13: name = "Round Fog";
		case 14: name = "Champ";
		case 15: name = "Race";
		case 16: name = "Worx";
		case 17: name = "Sideskirt";
		case 18: name = "Upswept";
		case 19: name = "Twin";
		case 20: name = "Large";
		case 21: name = "Medium";
		case 22: name = "Small";
		case 23: name = "Fury";
		case 24: name = "Square Fog";
		case 26: name = "Alien";
		case 27: name = "Alien";
		case 28: name = "Alien";
		case 29: name = "X-Flow";
		case 30: name = "X-Flow";
		case 31: name = "X-Flow";
		case 32: name = "Alien Roof Vent";
		case 33: name = "X-Flow Roof Vent";
		case 34: name = "Alien";
		case 35: name = "X-Flow Roof Vent";
		case 36: name = "Alien";
		case 37: name = "X-Flow";
		case 38: name = "Alien Roof Vent";
		case 39: name = "X-Flow";
		case 40: name = "Alien";
		case 41: name = "X-Flow";
		case 42: name = "Chrome";
		case 43: name = "Slamin";
		case 44: name = "Chrome";
		case 45: name = "X-Flow";
		case 46: name = "Alien";
		case 47: name = "Alien";
		case 48: name = "X-Flow";
		case 49: name = "Alien";
		case 50: name = "X-Flow";
		case 51: name = "Alien";
		case 52: name = "X-Flow";
		case 53: name = "X-Flow";
		case 54: name = "Alien";
		case 55: name = "Alien";
		case 56: name = "Alien";
		case 57: name = "X-Flow";
		case 58: name = "Alien";
		case 59: name = "X-Flow";
		case 60: name = "X-Flow";
		case 61: name = "X-Flow";
		case 62: name = "Alien";
		case 63: name = "X-Flow";
		case 64: name = "Alien";
		case 65: name = "Alien";
		case 66: name = "X-Flow";
		case 67: name = "Alien";
		case 68: name = "X-Flow";
		case 69: name = "Alien";
		case 70: name = "X-Flow";
		case 71: name = "Alien";
		case 72: name = "X-Flow";
		case 88: name = "Alien";
		case 89: name = "X-Flow";
		case 90: name = "Alien";
		case 91: name = "X-Flow";
		case 92: name = "Alien";
		case 93: name = "X-Flow";
		case 94: name = "Alien";
		case 95: name = "X-Flow";
		case 99: name = "Chrome";
		case 100: name = "Chrome Grill";
		case 101: name = "Chrome Flames";
		case 102: name = "Chrome Strip";
		case 103: name = "Convertible";
		case 104: name = "Chrome";
		case 105: name = "Slamin";
		case 106: name = "Chrome Arches";
		case 107: name = "Chrome Strip";
		case 108: name = "Chrome Strip";
		case 109: name = "Chrome";
		case 110: name = "Slamin";
		case 113: name = "Chrome";
		case 114: name = "Slamin";
		case 115: name = "Chrome";
		case 116: name = "Slamin";
		case 117: name = "Chrome";
		case 118: name = "Chrome Trim";
		case 119: name = "Wheelcovers";
		case 120: name = "Chrome Trim";
		case 121: name = "Wheelcovers";
		case 122: name = "Chrome Flames";
		case 123: name = "Bullbar Chrome Bars";
		case 124: name = "Chrome Arches";
		case 125: name = "Bullbar Chrome Lights";
		case 126: name = "Chrome";
		case 127: name = "Slamin";
		case 128: name = "Vinyl Hardtop";
		case 129: name = "Chrome";
		case 130: name = "Hardtop";
		case 131: name = "Softtop";
		case 132: name = "Slamin";
		case 133: name = "Chrome Strip";
		case 134: name = "Chrome Strip";
		case 135: name = "Slamin";
		case 136: name = "Chrome";
		case 137: name = "Chrome Strip";
		case 138: name = "Alien";
		case 139: name = "X-Flow";
		case 140: name = "X-Flow";
		case 141: name = "Alien";
		case 142: name = "Left Oval Vents";
		case 143: name = "Right Oval Vents";
		case 144: name = "Left Square Vents";
		case 145: name = "Right Square Vents";
		case 146: name = "X-Flow";
		case 147: name = "Alien";
		case 148: name = "X-Flow";
		case 149: name = "Alien";
		case 150: name = "Alien";
		case 151: name = "X-Flow";
		case 152: name = "X-Flow";
		case 153: name = "Alien";
		case 154: name = "Alien";
		case 155: name = "Alien";
		case 156: name = "X-Flow";
		case 157: name = "X-Flow";
		case 158: name = "X-Flow";
		case 159: name = "Alien";
		case 160: name = "Alien";
		case 161: name = "X-Flow";
		case 162: name = "Alien";
		case 163: name = "X-Flow";
		case 164: name = "Alien";
		case 165: name = "X-Flow";
		case 166: name = "Alien";
		case 167: name = "X-Flow";
		case 168: name = "Alien";
		case 169: name = "Alien";
		case 170: name = "X-Flow";
		case 171: name = "Alien";
		case 172: name = "X-Flow";
		case 173: name = "X-Flow";
		case 174: name = "Chrome";
		case 175: name = "Slamin";
		case 176: name = "Chrome";
		case 177: name = "Slamin";
		case 178: name = "Slamin";
		case 179: name = "Chrome";
		case 180: name = "Chrome";
		case 181: name = "Slamin";
		case 182: name = "Chrome";
		case 183: name = "Slamin";
		case 184: name = "Chrome";
		case 185: name = "Slamin";
		case 186: name = "Slamin";
		case 187: name = "Chrome";
		case 188: name = "Slamin";
		case 189: name = "Chrome";
		case 190: name = "Slamin";
		case 191: name = "Chrome";
		case 192: name = "Chrome";
		case 193: name = "Slamin";
	}
	return name;
}

enum Nombres
{
	_Componente,
	_Nombre[32],
	_Precio
};

static _tuneo[][Nombres] =
{
	{1000, "Pro Spoiler", 3500},
	{1001, "Win Spoiler", 3500},
	{1002, "Drag Spoiler", 3500},
	{1003, "Alpha Spoiler", 3500},
	{1004, "Champ Scoop", 1250},
	{1005, "Fury Scoop", 1250},
	{1006, "Roof Scoop", 1250},
	{1007, "Right Sideskirt", 2500},
	{1008, "Nitrous x5", 12000},
	{1009, "Nitrous x2", 5000},
	{1010, "Nitrous x10", 20000},
	{1011, "Race Scoop", 1250},
	{1012, "Worx Scoop", 1250},
	{1013, "Round Fog Lights", 1500},
	{1014, "Champ Spoiler", 3500},
	{1015, "Race Spoiler", 3500},
	{1016, "Worx Spoiler", 3500},
	{1017, "Left Sideskirt", 2500},
	{1018, "Upswept Exhaust", 1000},
	{1019, "Twin Exhaust", 1000},
	{1020, "Large Exhaust", 1000},
	{1021, "Medium Exhaust", 1000},
	{1022, "Small Exhaust", 1000},
	{1023, "Fury Spoiler", 3500},
	{1024, "Square Fog Lights", 1500},
	{1025, "Offroad Wheels", 3000},
	{1026, "Right Alien Sideskirt", 2500},
	{1027, "Left Alien Sideskirt", 2500},
	{1028, "Alien Exhaust", 1000},
	{1029, "X-Flow Exhaust", 1000},
	{1030, "Right X-Flow Sideskirt", 2500},
	{1031, "Left X-Flow Sideskirt", 2500},
	{1032, "Alien Roof Vent", 2000},
	{1033, "X-Flow Roof Vent", 1500},
	{1034, "Alien Exhaust", 1000},
	{1035, "X-Flow Roof Vent", 1500},
	{1036, "Right Alien Sideskirt", 2500},
	{1037, "X-Flow Exhaust", 1000},
	{1038, "Alien Roof Vent", 2000},
	{1039, "Right X-Flow Sideskirt", 2500},
	{1040, "Left Alien Sideskirt", 2500},
	{1041, "Left X-Flow Sideskirt", 2500},
	{1042, "Right Chrome Sideskirt", 2500},
	{1043, "Slamin Exhaust", 1000},
	{1044, "Chrome Exhaust", 1000},
	{1045, "X-Flow Exhaust", 1000},
	{1046, "Alien Exhaust", 1000},
	{1047, "Right Alien Sideskirt", 2500},
	{1048, "Right X-Flow Sideskirt", 2500},
	{1049, "Alien Spoiler", 7500},
	{1050, "X-Flow Spoiler", 5000},
	{1051, "Left Alien Sideskirt", 2500},
	{1052, "Left X-Flow Sideskirt", 2500},
	{1053, "X-Flow Roof Vent", 1500},
	{1054, "Alien Roof Vent", 2000},
	{1055, "Alien Roof Vent", 2000},
	{1056, "Right Alien Sideskirt", 2500},
	{1057, "Right X-Flow Sideskirt", 2500},
	{1058, "X-Flow Spoiler", 5000},
	{1059, "X-Flow Exhaust", 1000},
	{1060, "Alien Spoiler", 7000},
	{1061, "X-Flow Roof Vent", 1500},
	{1062, "Left Alien Sideskirt", 2500},
	{1063, "Left X-Flow Sideskirt", 2500},
	{1064, "Alien Exhaust", 1000},
	{1065, "Alien Exhaust", 1000},
	{1066, "X-Flow Exhaust", 1000},
	{1067, "Alien Roof Vent", 2000},
	{1068, "X-Flow Roof Vent", 1500},
	{1069, "Right Alien Sideskirt", 2500},
	{1070, "Right X-Flow Sideskirt", 2500},
	{1071, "Left Alien Sideskirt", 2500},
	{1072, "Left X-Flow Sideskirt", 2500},
	{1073, "Shadow Wheels", 2000},
	{1074, "Mega Wheels", 2000},
	{1075, "Rimshine Wheels", 2000},
	{1076, "Wires Wheels", 2000},
	{1077, "Classic Wheels", 2000},
	{1078, "Twist Wheels", 2000},
	{1079, "Cutter Wheels", 2000},
	{1080, "Stitch Wheels", 2000},
	{1081, "Grove Wheels", 2000},
	{1082, "Import Wheels", 2000},
	{1083, "Dollar Wheels", 3500},
	{1084, "Trance Wheels", 2000},
	{1085, "Atomic Wheels", 2000},
	{1086, "Stereo", 2000},
	{1087, "Hydraulics", 6000},
	{1088, "Alien Roof Vent", 2000},
	{1089, "X-Flow Exhaust", 1000},
	{1090, "Right Alien Sideskirt", 2500},
	{1091, "X-Flow Roof Vent", 1500},
	{1092, "Alien Exhaust", 1000},
	{1093, "Left X-Flow Sideskirt", 2500},
	{1094, "Left Alien Sideskirt", 2500},
	{1095, "Right X-Flow Sideskirt", 2500},
	{1096, "Ahab Wheels", 2000},
	{1097, "Virtual Wheels", 2000},
	{1098, "Access Wheels", 2000},
	{1099, "Left Chrome Sideskirt", 2500},
	{1100, "Chrome Grill", 1500},
	{1101, "Left Chrome Flames Sideskirt", 2500},
	{1102, "Left Chrome Strip Sideskirt", 2500},
	{1103, "Convertible Roof", 1500},
	{1104, "Chrome Exhaust", 1000},
	{1105, "Slamin Exhaust", 1000},
	{1106, "Left Chrome Arches Sideskirt", 2500},
	{1107, "Left Chrome Strip Sideskirt", 2500},
	{1108, "Right Chrome Strip Sideskirt", 2500},
	{1109, "Chrome Rear Bullbars", 5000},
	{1110, "Slamin Rear Bullbars", 5000},
	{1111, "Front Sign", 1500},
	{1112, "Front Sign", 1500},
	{1113, "Chrome Exhaust", 1000},
	{1114, "Slamin Exhaust", 1000},
	{1115, "Chrome Front Bullbars", 5000},
	{1116, "Slamin Front Bullbars", 5000},
	{1117, "Chrome Front Bumper", 5000},
	{1118, "Right Chrome Trim Sideskirt", 2500},
	{1119, "Right Wheelcovers Sideskirt", 2500},
	{1120, "Left Chrome Trim Sideskirt", 2500},
	{1121, "Left Wheelcovers Sideskirt", 2500},
	{1122, "Right Chrome Flames Sideskirt", 2500},
	{1123, "Bullbar Chrome Bars", 1500},
	{1124, "Left Chrome Arches Sideskirt", 2500},
	{1125, "Bullbar Chrome Lights", 1500},
	{1126, "Chrome Exhaust", 1000},
	{1127, "Slamin Exhaust", 1000},
	{1128, "Vinyl Hardtop Roof", 1500},
	{1129, "Chrome Exhaust", 1000},
	{1130, "Hardtop Roof", 1500},
	{1131, "Softtop Roof", 1500},
	{1132, "Slamin Exhaust", 1000},
	{1133, "Right Chrome Strip Sideskirt", 2500},
	{1134, "Right Chrome Strip Sideskirt", 2500},
	{1135, "Slamin Exhaust", 1000},
	{1136, "Chrome Exhaust", 1000},
	{1138, "Alien Spoiler", 7000},
	{1139, "X-Flow Spoiler", 5000},
	{1140, "X-Flow Rear Bumper", 5000},
	{1141, "Alien Rear Bumper", 5000},
	{1142, "Left Oval Vents", 1250},
	{1143, "Right Oval Vents", 1250},
	{1144, "Left Square Vents", 1250},
	{1145, "Right Square Vents", 1250},
	{1146, "X-Flow Spoiler", 5000},
	{1147, "Alien Spoiler", 7000},
	{1148, "X-Flow Rear Bumper", 5000},
	{1149, "Alien Rear Bumper", 5000},
	{1150, "Alien Rear Bumper", 5000},
	{1151, "X-Flow Rear Bumper", 5000},
	{1152, "X-Flow Front Bumper", 5000},
	{1153, "Alien Front Bumper", 5000},
	{1154, "Alien Rear Bumper", 5000},
	{1155, "Alien Front Bumper", 5000},
	{1156, "X-Flow Rear Bumper", 5000},
	{1157, "X-Flow Front Bumper", 5000},
	{1158, "X-Flow Spoiler", 5000},
	{1159, "Alien Rear Bumper", 5000},
	{1160, "Alien Front Bumper", 5000},
	{1161, "X-Flow Rear Bumper", 5000},
	{1162, "Alien Spoiler", 7000},
	{1163, "X-Flow Spoiler", 5000},
	{1164, "Alien Spoiler", 7000},
	{1165, "X-Flow Front Bumper", 5000},
	{1166, "Alien Front Bumper", 5000},
	{1167, "X-Flow Rear Bumper", 5000},
	{1168, "Alien Rear Bumper", 5000},
	{1169, "Alien Front Bumper", 5000},
	{1170, "X-Flow Front Bumper", 5000},
	{1171, "Alien Front Bumper", 5000},
	{1172, "X-Flow Front Bumper", 5000},
	{1173, "X-Flow Front Bumper", 5000},
	{1174, "Chrome Front Bumper", 5000},
	{1175, "Slamin Front Bumper", 5000},
	{1176, "Chrome Rear Bumper", 5000},
	{1177, "Slamin Rear Bumper", 5000},
	{1178, "Slamin Rear Bumper", 5000},
	{1179, "Chrome Front Bumper", 5000},
	{1180, "Chrome Rear Bumper", 5000},
	{1181, "Slamin Front Bumper", 5000},
	{1182, "Chrome Front Bumper", 5000},
	{1183, "Slamin Rear Bumper", 5000},
	{1184, "Chrome Rear Bumper", 5000},
	{1185, "Slamin Front Bumper", 5000},
	{1186, "Slamin Rear Bumper", 5000},
	{1187, "Chrome Rear Bumper", 5000},
	{1188, "Slamin Front Bumper", 5000},
	{1189, "Chrome Front Bumper", 5000},
	{1190, "Slamin Front Bumper", 5000},
	{1191, "Chrome Front Bumper", 5000},
	{1192, "Chrome Rear Bumper", 5000},
	{1193, "Slamin Rear Bumper", 5000}
};

static VehiclesMods[][TOTAL_MODS] =
{
	{400, 1008,1009,1010,1013,1018,1019,1020,1021,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1001,1003,1004,1005,1006,1007,1008,1009,1010,1013,1017,1019,1020,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,0000},
	{402, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{403, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{404, 1000,1002,1007,1008,1009,1010,1013,1016,1017,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000},
	{405, 1000,1001,1008,1009,1010,1014,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{406, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{407, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{408, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{409, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1001,1003,1007,1008,1009,1010,1013,1017,1019,1020,1021,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{411, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{412, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{413, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{414, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1001,1003,1007,1008,1009,1010,1017,1018,1019,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{416, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{417, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1002,1006,1008,1009,1010,1016,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{419, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1001,1003,1004,1005,1008,1009,1010,1019,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1000,1008,1009,1010,1014,1016,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{422, 1007,1008,1009,1010,1013,1017,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{423, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{424, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{425, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1001,1003,1004,1005,1006,1008,1009,1010,1019,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{427, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{428, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{429, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{430, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{431, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{432, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{433, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{434, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{435, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1001,1003,1006,1007,1008,1009,1010,1013,1017,1019,1020,1021,1022,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{437, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{438, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1001,1003,1007,1008,1009,1010,1013,1017,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000,0000,0000,0000},
	{440, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{441, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{442, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{443, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{444, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{445, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{446, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{447, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{448, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{449, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{450, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{451, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{452, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{453, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{454, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{455, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{456, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{457, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{458, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{459, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{460, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{461, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{462, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{463, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{464, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{465, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{466, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{467, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{468, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{469, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{470, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{471, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{472, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{473, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{474, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{475, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{476, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1006,1007,1008,1009,1010,1017,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{478, 1004,1005,1008,1009,1010,1012,1013,1020,1021,1022,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{479, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{480, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{481, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{482, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{483, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{484, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{485, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{486, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{487, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{488, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1000,1002,1004,1005,1006,1008,1009,1010,1013,1016,1018,1019,1020,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{490, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1003,1007,1008,1009,1010,1014,1017,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{492, 1000,1004,1005,1006,1008,1009,1010,1016,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{493, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{494, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{495, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1001,1002,1003,1006,1007,1008,1009,1010,1011,1017,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,0000,0000},
	//{497, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{498, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{499, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{500, 1008,1009,1010,1013,1019,1020,1021,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{501, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{502, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{503, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{504, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{505, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{506, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{507, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{508, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{509, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{510, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{511, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{512, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{513, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{514, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{515, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1000,1002,1004,1007,1008,1009,1010,1015,1016,1017,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{517, 1002,1003,1007,1008,1009,1010,1016,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{518, 1001,1003,1005,1006,1007,1008,1009,1010,1013,1017,1018,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	//{519, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{520, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{521, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{522, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{523, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{524, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{525, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{526, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{527, 1001,1007,1008,1009,1010,1014,1015,1017,1018,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{528, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1001,1003,1006,1007,1008,1009,1010,1011,1012,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{530, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{531, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{532, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{533, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{534, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1100,1101,1106,1122,1123,1124,1125,1126,1127,1178,1179,1180,1185,0000},
	{535, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1109,1110,1113,1114,1115,1116,1117,1118,1119,1120,1121,0000,0000,0000},
	{536, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1103,1104,1105,1107,1108,1128,1181,1182,1183,1184,0000,0000,0000,0000},
	//{537, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{538, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{539, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1001,1004,1006,1007,1008,1009,1010,1017,1018,1019,1020,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{541, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{542, 1008,1009,1010,1014,1015,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1144,1145,0000,0000,0000,0000,0000,0000},
	{543, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{544, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{545, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1001,1002,1004,1006,1007,1008,1009,1010,1017,1018,1019,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{547, 1000,1003,1008,1009,1010,1016,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,0000,0000,0000,0000,0000},
	//{548, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1001,1003,1007,1008,1009,1010,1011,1012,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{550, 1001,1003,1004,1005,1006,1008,1009,1010,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{551, 1002,1003,1005,1006,1008,1009,1010,1016,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{552, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{553, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{554, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{555, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{556, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{557, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1163,1164,1165,1166,1167,1168},
	{559, 1008,1009,1010,1025,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1158,1159,1160,1161,1162,1173},
	{560, 1008,1009,1010,1025,1026,1027,1028,1029,1030,1031,1032,1033,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1138,1139,1140,1141,1169,1170},
	{561, 1008,1009,1010,1025,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1154,1155,1156,1157},
	{562, 1008,1009,1010,1025,1034,1035,1036,1037,1038,1039,1040,1041,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1146,1147,1148,1149,1171,1172},
	//{563, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{564, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{565, 1008,1009,1010,1025,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1150,1151,1152,1153},
	{566, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{567, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1102,1129,1130,1131,1132,1133,1186,1187,1188,1189,0000,0000,0000,0000},
	{568, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{569, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{570, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{571, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{572, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{573, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{574, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1008,1009,1010,1025,1042,1043,1044,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1099,1174,1175,1176,1177,0000,0000,0000,0000,0000,0000},
	{576, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1134,1135,1136,1137,1190,1191,1192,1193,0000,0000,0000,0000,0000,0000},
	//{577, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{578, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{579, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1001,1006,1007,1008,1009,1010,1017,1018,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	//{581, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{582, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{583, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{584, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{585, 1001,1003,1006,1007,1008,1009,1010,1013,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	//{586, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{587, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{588, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1000,1004,1005,1006,1007,1008,1009,1010,1013,1016,1017,1018,1020,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1144,1145,0000},
	//{590, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{591, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{592, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{593, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{594, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{595, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{596, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{597, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{598, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{599, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{600, 1004,1005,1006,1007,1008,1009,1010,1013,1017,1018,1020,1022,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000},
	{601, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{602, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1001,1006,1007,1008,1009,1010,1017,1018,1019,1020,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{604, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{605, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{606, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{607, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{608, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{609, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{610, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{611, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}
};

stock _infoFaccion(jugador, rango[64], faccion[64])
{
	switch (user[jugador][jMiembro])
	{
		case 1:
		{
			faccion = "Policía";
			switch (user[jugador][jRango])
			{
				case 1: rango = "Oficial I";
                case 2: rango = "Oficial II";
                case 3: rango = "Oficial III";
                case 4: rango = "Oficial III+";
                case 5: rango = "Detective I";
                case 6: rango = "Detective II";
                case 7: rango = "Detective III";
                case 8: rango = "Sargento I";
                case 9: rango = "Sargento II";
                case 10: rango = "Teniente I";
                case 11: rango = "Teniente II";
                case 12: rango = "Capitán";
                default: rango = "Cadete";
			}
		}//
		case 2:
		{
			faccion = "SADOC";
			switch (user[jugador][jRango])
			{
				case 1: rango = "Oficial de C.";
				case 2: rango = "Oficial de C. II";
				case 3: rango = "Oficial de C. III";
				case 4: rango = "Oficial ejecutivo";
				case 5: rango = "Sargento I";
				case 6: rango = "Sargento II";
				case 7: rango = "Teniente";
				case 8: rango = "Capitan";
				case 9: rango = "Director";
				case 10: rango = "Director A.";
				case 11: rango = "Alcaide";
				default: rango = "Oficial en P.";
			}
		}
		case 3:
		{
			faccion = "Noticias";
			switch (user[jugador][jRango])
			{
				case 1: rango = "Fotógrafo";
				case 2: rango = "Redactor";
				case 3: rango = "Guardia";
				case 4: rango = "Periodista";
				case 5: rango = "Gerente";
				case 6: rango = "Sub Director";
				case 7: rango = "Director";
				default: rango = "Chofer";
			}
		}
		case 4:
		{
			faccion = "Alcaldía";
			switch (user[jugador][jRango])
			{
				case 1: rango = "Becario";
				case 2: rango = "Secretario";
				case 3: rango = "Concejal";
				case 4: rango = "Vicealcalde";
				case 5: rango = "Alcalde";
				default: rango = "Seguridad";
			}
		}
		case 5:
		{
			faccion = "Emergencias";
			switch (user[jugador][jRango])
			{
				case 1: rango = "Bombero probatorio";
				case 2: rango = "Bombero de II";
				case 3: rango = "Bombero de I";
				case 4: rango = "Ingeniero de II";
				case 5: rango = "Ingeniero de I";
				case 6: rango = "Teniente";
				case 7: rango = "Capitán";
				case 8: rango = "Jefe del Departamento";
				default: rango = "Aspirante";
			}
		}
		default:
		{
			faccion = "Civil";
			rango = "Sin rango";
		}
	}
	return 1;
}

funcion _panelJ(jugador, jugador2)
{
	if (IsPlayerConnected(jugador) && IsPlayerConnected(jugador2))
	{
		//sexo
		new sexo[8];
		switch(user[jugador2][jSexo])
		{
			case 1: sexo = "Hombre";
			case 2: sexo = "Mujer";
		}

		//facciones
		new faccion[64], rango[64];
		_infoFaccion(jugador2, rango, faccion);

		//trabajos
		new jtext[21], jtext2[21];
		switch (user[jugador2][jTrabajo1])
		{
			case 1: jtext = "Carguero";
			case 2: jtext = "Delincuente";
			case 3: jtext = "Pescador";
			case 4: jtext = "Leñador";
			case 5: jtext = "Ladrón de coches";
			case 6: jtext = "Granjero";
			case 10: jtext = "Carpintero";
			default: jtext = "Vacío";
		}
		switch (user[jugador2][jTrabajo2])
		{
			case 1: jtext2 = "Carguero";
			case 2: jtext2 = "Delincuente";
			case 3: jtext2 = "Pescador";
			case 4: jtext2 = "Leñador";
			case 5: jtext2 = "Ladrón de coches";
			case 6: jtext2 = "Granjero";
			case 10: jtext2 = "Carpintero";
			default: jtext2 = "Vacío";
		}

		//
		new proximonvl = user[jugador2][jNivel] + 1, cantidadexp = proximonvl * nivelexp;
		new cuenta[200];
		new Ano, Mes, Dia, Hora, Minutos, Segundos;
		getdate(Ano, Mes, Dia);
		gettime(Hora, Minutos, Segundos);

		new id_skin = user[jugador2][jRopa];
		if (id_skin >= 25000) id_skin-=24689;

		format(cuenta, sizeof(cuenta), "|______________________%s (%s) [%d de %s del %d, %02d:%02d:%02d]______________________|\n", nombre_pj(jugador2), username[jugador2], Dia, GetMonth(Mes), Ano, Hora, Minutos, Segundos);
		_Mensaje(jugador, 5, "0", cuenta);

		format(cuenta, sizeof(cuenta), "| Edad: [%d] - Sexo: [%s] - Teléfono: [%d] - Documento: [%d]\n", user[jugador2][jEdad], sexo, user[jugador2][jTelefono], user[jugador2][jDocumento]);
		Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "| Nivel: [%d] - Experiencia: [%d/%d] - Horas jugando: [%d] - Contrato: [%d]\n", user[jugador2][jNivel], user[jugador2][jExperiencia], cantidadexp, user[jugador2][j_Horas], user[jugador2][jContrato]);
        Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "| Efectivo: [$%d] - Banco: [$%d] - Cuenta bancaria: [%d] - Alquiler: [%d]\n", ComprobarDineroJ(jugador2), user[jugador2][jBanco], user[jugador2][jDebito], user[jugador2][jAlquiler]);
        Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "| Casas: [%d / %d / P: %d / P2: %d] - Negocios: [%d / %d / P: %d] - Empresa: [%d / P: %d]\n", user[jugador2][jCasaKey], user[jugador2][jCasaKey2], user[jugador2][jCasaLlaves], user[jugador2][j2CasaLlaves], user[jugador2][jNegocioKey], user[jugador2][jNegocioKey2], user[jugador2][jNegocioLlaves], user[jugador2][jEmpresaKey], user[jugador2][jEmpresaLlaves]);
        Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "| Skin: [%d] - Facción: [%s / %s] - Facción NO: [%s / %d]\n", id_skin, faccion, rango, NombreFamilia(jugador2), user[jugador2][jRangoFam]);
        Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "| Trabajos: [%s / %s] - Tiempo de cárcel: [%d min] - Sanciones: [IC %d / OOC %d]\n", jtext, jtext2, user[jugador2][jTiempoCarcel], user[jugador2][jArrestos], user[jugador2][jSanciones]);
        Mensaje_(jugador, 0xD5E6DAFF, cuenta);

		format(cuenta, sizeof(cuenta), "|______________________%s (%s) [%d de %s del %d, %02d:%02d:%02d]______________________|\n", nombre_pj(jugador2), username[jugador2], Dia, GetMonth(Mes), Ano, Hora, Minutos, Segundos);
		_Mensaje(jugador, 5, "0", cuenta);
	} //
	return 1;
}

funcion _panelC(jugador, jugador2)
{
	new i_c = user[jugador2][jCasaKey], i_c2 = user[jugador2][jCasaKey2];
	new coordsstring[200];
	new DialogStatus[1000];
	if (user[jugador2][jCasaKey] == INVALID_CASA_ID && user[jugador2][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(jugador, 0, "0", "Usted no posee ninguna casa.");
	if (IsPlayerConnected(jugador) && IsPlayerConnected(jugador2))
	{
		if (i_c != -1)
		{

			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, i_Casa[i_c][cExteriorX], i_Casa[i_c][cExteriorY], i_Casa[i_c][cExteriorZ]);

			format(coordsstring, sizeof(coordsstring),
			"{00A02C}NOMBRE:	{ffffff}(%d) %s\n\
			{00A02C}ESPACIO:	{ffffff}%s\n\
			{00A02C}DINERO:	{ffffff}$%d\n\
			{00A02C}PUERTA:	{ffffff}%s\n\
			{00A02C}DIRECCIÓN:	{ffffff}%s\n\n",
			i_c, i_Casa[i_c][cNombre], _EspacioC(i_c), i_Casa[i_c][cDinero], _EstadoC(i_c,2), location);

			strcat(DialogStatus, coordsstring);
		}
		if (i_c2 != -1)
		{

			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, i_Casa[i_c2][cExteriorX], i_Casa[i_c2][cExteriorY], i_Casa[i_c2][cExteriorZ]);

			format(coordsstring, sizeof(coordsstring),
			"{00A02C}NOMBRE:	{ffffff}(%d) %s\n\
			{00A02C}ESPACIO:	{ffffff}%s\n\
			{00A02C}DINERO:	{ffffff}$%d\n\
			{00A02C}PUERTA:	{ffffff}%s\n\
			{00A02C}DIRECCIÓN:	{ffffff}%s\n\n",
			i_c2, i_Casa[i_c2][cNombre], _EspacioC(i_c2), i_Casa[i_c2][cDinero], _EstadoC(i_c2,2), location);

			strcat(DialogStatus, coordsstring);
		}
	}
	ExPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Casas", DialogStatus, "Cerrar", "");
	return 1;
}

funcion _panelN(jugador, jugador2)
{
	new i_n = user[jugador2][jNegocioKey], i_n2 = user[jugador2][jNegocioKey2];
	new coordsstring[300];
	new DialogStatus[3000];
	if (user[jugador2][jNegocioKey] == INVALID_NEGOCIO_ID && user[jugador2][jNegocioKey2] == INVALID_NEGOCIO_ID) return _Mensaje(jugador, 0, "0", "Usted no posee ningún negocio.");
	if (IsPlayerConnected(jugador) && IsPlayerConnected(jugador2))
	{
		if (i_n != -1)
		{

			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, i_Negocio[i_n][nExteriorX], i_Negocio[i_n][nExteriorY], i_Negocio[i_n][nExteriorZ]);

			format(coordsstring, sizeof(coordsstring),
			"{0090AF}NOMBRE:    	{ffffff}%s (%d)\n\
			{0090AF}TIPO:		{ffffff}%s\n\
			{0090AF}DINERO:	{ffffff}$%d\n\
			{0090AF}PUERTA:	{ffffff}%s\n\
			{0090AF}PRODUCTOS:	{ffffff}%d\n\
			{0090AF}CUOTAS:	{ff0000}-{ffffff}$%d\n\n",
			i_Negocio[i_n][nNombre], i_n,
			_tipoN(i_n),
			i_Negocio[i_n][nDinero],
			_estadoN(i_n, 2),
			i_Negocio[i_n][nProductos],
			i_Negocio[i_n][nCuotas]);

			strcat(DialogStatus, coordsstring);
		}
		if (i_n2 != -1)
		{

			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, i_Negocio[i_n2][nExteriorX], i_Negocio[i_n2][nExteriorY], i_Negocio[i_n2][nExteriorZ]);

			format(coordsstring, sizeof(coordsstring),
			"{0090AF}NOMBRE:    	{ffffff}%s (%d)\n\
			{0090AF}TIPO:		{ffffff}%s\n\
			{0090AF}DINERO:	{ffffff}$%d\n\
			{0090AF}PUERTA:	{ffffff}%s\n\
			{0090AF}PRODUCTOS:	{ffffff}%d\n\
			{0090AF}CUOTAS:	{ff0000}-{ffffff}$%d\n\n",
			i_Negocio[i_n2][nNombre], i_n2,
			_tipoN(i_n2),
			i_Negocio[i_n2][nDinero],
			_estadoN(i_n2, 2),
			i_Negocio[i_n2][nProductos],
			i_Negocio[i_n2][nCuotas]);

			strcat(DialogStatus, coordsstring);
		}
	}
	ExPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Negocios", DialogStatus, "Listo", "");
	return 1;
}

funcion CargarStuff()
{
	new arrCoords[16][64], strFromFile2[128];
	new File: file = fopen("Stuff.rp", io_read);
	if(file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		c_cuentas = strval(arrCoords[0]);
		c_personajes = strval(arrCoords[1]);
		d_san = strval(arrCoords[2]);
		d_loteria = strval(arrCoords[3]);
		d_estado = strval(arrCoords[4]);
		d_impuestos = strval(arrCoords[5]);
		d2_experiencia = strval(arrCoords[6]);
		strmid(d_pedidos[0], arrCoords[7], 0, strlen(arrCoords[7]), 32);
		strmid(d_pedidos[1], arrCoords[8], 0, strlen(arrCoords[8]), 32);
		d_peaje = strval(arrCoords[9]);
		max_miembros[1] = strval(arrCoords[10]);
		max_miembros[2] = strval(arrCoords[11]);
		max_miembros[3] = strval(arrCoords[12]);
		max_miembros[4] = strval(arrCoords[13]);
		max_miembros[5] = strval(arrCoords[14]);
		c_codes = strval(arrCoords[15]);
		fclose(file);
		print("» Sistema de status del servidor cargado.");
	}
	else print("» Error con el sistema de status.");
	return 1;
}

stock save_stuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d",
	c_cuentas,
	c_personajes,
	d_san,
	d_loteria,
	d_estado,
	d_impuestos,
	d2_experiencia,
	d_pedidos[0],
	d_pedidos[1],
	d_peaje,
	max_miembros[1], max_miembros[2], max_miembros[3], max_miembros[4], max_miembros[5],
	c_codes);
	new File: file2 = fopen("Stuff.rp", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

funcion GuardarCuentas(){
	yield 1;
	foreach(new playerid: Player){
		if(charLoggedIn[playerid])
			characterSave(playerid);
	}
	return 1;
}

funcion GuardarUsuarios(){
	yield 1;
	foreach(new playerid: Player){
		if(LoggedIn[playerid])
			accountSave(playerid);
	}
}

public OnGameModeExit()
{
    AntiAmx();
    GuardarCuentas();
	GuardarUsuarios();
    save_stuff();
    save_incendios();
    save_bindon();
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if (IsPlayerNPC(playerid)) return 1;
	if (user[playerid][State] == 0)
	{
		PreloadAnimations(playerid);												//  Cargado de animaciones
		//_cIniciales(playerid, 2);
		PlayerPlaySound(playerid, 19800, 0, 0, 0);
		TextDrawHideForPlayer(playerid, D_LOGIN);
		new hora_s, minuto_s, segundo_s;
		gettime(hora_s, minuto_s, segundo_s);
		SetPlayerTime(playerid, hora_s, minuto_s);

		new cuenta2[128];
		yield 1;
		mysql_format(mainDatabase, cuenta2, sizeof cuenta2, "SELECT * FROM accounts WHERE Nombre = '%e' LIMIT 1", username[playerid]);
		await mysql_aquery(mainDatabase, cuenta2);
		

		if(cache_num_rows())
		{
			accountORMInit(playerid);
			orm_apply_cache(accountORM[playerid], 0);
			format(cuenta2, sizeof(cuenta2), "Bienvenido %s\n\nPor favor introduzca su contraseña:", username[playerid]);
			ExPlayerDialog(playerid, D_INGRESO, DIALOG_STYLE_PASSWORD, "Iniciar Sesión", cuenta2, "Ingresar", "Salir");
		}
		else
		{
			if (ActRegistro == 0) _Expulsar(playerid, 1, "Registro deshabilitado");
			format(cuenta2, sizeof(cuenta2), "Bienvenido %s\n\nPor favor introduzca una contraseña:", username[playerid]);
			ExPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", cuenta2, "Registrar", "Salir");
		}
	}
	return 0;
}

public OnPlayerConnect(playerid)
{
	TextDrawShowForPlayer(playerid, D_LOGIN);
    conectado[playerid] = 0;
	GetPlayerName(playerid, username[playerid], MAX_PLAYER_NAME);
	CreateTextDraws(playerid);
	//  new's;
	new
		ip[16],
		string[256]
	;

	foreach(new p: Player)
	{
		if (conectado[p] == 1)
		{
			if (strcmp(username[playerid], username[p], true) == 0)
			{
				SendClientMessage(playerid, 0xFF6347AA, "Has sido expulsado del servidor, ésta cuenta ya está conectada.");
				SendClientMessage(p, 0xFF6347AA, "Alguien intento entrar hace poco a tu cuenta.");
				Expulsar(playerid, 1);
				return 1;
			}
		}
	}

    conectado[playerid] = 1;
	format(string, sizeof(string), "Conectando_%d", playerid);
	SetPlayerName(playerid, string);
	SetPlayerScore(playerid, -1);

	GetPlayerIp(playerid, ip, sizeof(ip));
    format(user[playerid][jIP], 16, "%s", ip);

	//  sistema de bloqueo de ip
	if (CheckBan(ip) == 1)
	{
		new elban[128];
		format(elban, 128, "Baneados/%s.rp", ip);
		INI_ParseFile(elban, "CargarBan_data", .bExtra = true, .extra = playerid);

		format(string, sizeof(string), "{CB2700}{FFFFFF} Responsable: %s\n{CB2700}{FFFFFF} Razón: %s\n{CB2700}{FFFFFF} Fecha del baneo: %s\n", eBculpable[playerid], eBrazon[playerid], eBmomento[playerid]);
		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{B00000}Bloqueo de IP", string, "Cerrar", "");

		SetPlayerTime(playerid, 0, 0);

		Expulsar(playerid, 2);
		new name[] = "ip_baneada";
		SetPlayerName(playerid, name);
		return 1;
	}

	//  variables
	RemoveBuildingForPlayerEx(playerid);                                        //  Remover mapeos
	create_phone(playerid);														//  Textdraw de teléfono
	tp_timers(playerid);                                                        //  Anti TP - trabajos
	user_clean(playerid);                                                       //  Reinicio de variables
	create_hud(playerid);                                                   	//  Textdraw de HUD
	SetPlayerColor(playerid, 0xAFAFAF00);                                       //  Color gris de ingreso

	//chinatown
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1354.9453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1349.6953, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1344.4453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1418.4219, -1357.2344, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1422.2344, -1357.2891, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1420.1172, -1356.8438, 13.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1426.7344, -1357.1797, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4711, 1392.1875, -1336.8047, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1403.3750, -1342.4063, 15.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1403.3750, -1328.8672, 15.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1403.3750, -1299.2734, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1339.1953, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1333.9453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1321.3516, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1425.9141, -1322.2734, 12.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1425.5313, -1320.5781, 13.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1415.6016, -1299.1875, 13.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1316.1016, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1310.8516, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1305.6016, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1425.5703, -1317.9688, 13.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1425.8516, -1316.2266, 12.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4738, 1435.7969, -1331.0469, 24.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1436.3906, -1322.8750, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1439.8594, -1323.7031, 13.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1441.5547, -1323.3125, 12.9844, 0.25);
    //mapeo de market
	RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
	return 0;
}

public OnPlayerDisconnect(playerid, reason)
{
	//
	new
		name[50 + MAX_PLAYER_NAME]
	;
	if (user[playerid][jMascaraPD] == 1)
	{
		GetPVarString(playerid, "NombreP", name, sizeof(name));
		SetPlayerName(playerid, name);
		user[playerid][jMascaraPD] = 0;
	}
	//
	new year, month, day, hour, minute, second, string[128];
	getdate(year, month, day); gettime(hour, minute, second);
	if (user[playerid][jBaneado] == 0)
	{
		user[playerid][jMeses] = month; user[playerid][jDias] = day; user[playerid][jAnos] = year;
		user[playerid][jHoras] = hour; user[playerid][jMinutos] = minute;
	}
	//

	if (p_bank[playerid][0] != -1)
	{
		format(string, sizeof(string), "%s se ha desconectado, el sistema te retiró permisos de su cuenta bancaria.", nombre_pj(playerid));
		_Mensaje(p_bank[playerid][0], 4, "cccc00", string);
		p_bank[p_bank[playerid][0]][1] = -1;
	}

	if (p_bank[playerid][1] != -1)
	{
		format(string, sizeof(string), "%s se ha desconectado, el sistema le retiró permisos de tu cuenta bancaria.", nombre_pj(playerid));
		_Mensaje(p_bank[playerid][1], 4, "cccc00", string);
		p_bank[p_bank[playerid][1]][0] = -1;
	}

	//
	if (UsandoGym2[playerid] != 0) FinEntrenar(playerid,UsandoGym2[playerid]+1);
	if(_Pesca[playerid] == 1) DestroyObject(pescador[playerid]);
	if (pago_tune[playerid] != 0)
	{
		for(new x = 0; x < 11; x++) { RemoveVehicleComponent(veh_tune[playerid], pieza_tune[playerid][x]); pieza_tune[playerid][x] = 0; }
		for (new vid = 0; vid < MAX_VEHICULOS; vid++) { if(i_Vehiculo[vid][vID] == veh_tune[playerid]) { ActualizarMods(i_Vehiculo[vid][vID]); } }
		VehSeguro[veh_tune[playerid]] = 0;
		pago_tune[playerid] = 0;
		veh_tune[playerid] = 0;
	}
	if (r_negocio[playerid] != -1)
	{
		i_Negocio[r_negocio[playerid]][EnPedido] = 0;
		r_negocio[playerid] = -1;
		tipo_reparto[playerid] = 0;
	}
	if (_mirilla[playerid] != -1)
	{
		if(tipo_m[playerid] == 1)
		{
			new h = _mirilla[playerid];
			user[playerid][jInterior] = i_Casa[h][cInterior]; //
			user[playerid][jVirtualWorld] = h + 6000; //
			user[playerid][jPosicion_X] = i_Casa[h][cInteriorX]; //
			user[playerid][jPosicion_Y] = i_Casa[h][cInteriorY]; //
			user[playerid][jPosicion_Z] = i_Casa[h][cInteriorZ]; //
		}
		else if(tipo_m[playerid] == 2)
		{
			new p = _mirilla[playerid];
			user[playerid][jPosicion_X] = i_Puerta[p][pInt_X];
			user[playerid][jPosicion_Y] = i_Puerta[p][pInt_Y];
			user[playerid][jPosicion_Z] = i_Puerta[p][pInt_Z];
			user[playerid][jInterior] = i_Puerta[p][pInt_Int];
			user[playerid][jVirtualWorld] = i_Puerta[p][pInt_VW];
		}
		tipo_m[playerid] = 0;
	}
	//
	if (pused_mesa[playerid] != -1)
	{
 		mesa_used[pused_mesa[playerid]] = 0;
		pused_mesa[playerid] = -1;
	}
	if (Granjero[playerid] != 0) DisableRemoteVehicleCollisions(playerid, false);
	//en tractor o en bote
	if (used_vehicle[playerid] != 0)
	{
		if (veh_Pescador(used_vehicle[playerid]))
		{
			SetVehicleToRespawn(used_vehicle[playerid]);
			used_vehicle[playerid] = 0;
		}
	}
	if (enter_vehicle[playerid] != 0)
	{
		if (veh_Granjero(enter_vehicle[playerid]))
		{
			SetVehicleToRespawn(enter_vehicle[playerid]);
			enter_vehicle[playerid] = 0;
		}
		if (veh_Pescador(enter_vehicle[playerid]))
		{
			SetVehicleToRespawn(enter_vehicle[playerid]);
			enter_vehicle[playerid] = 0;
		}
	}
	DeletePVar(playerid, "change_pj");
	//
	if (con_cartel[playerid] != 0)
	{
	    con_cartel[playerid] = 0;
		Delete3DTextLabel(cartel[playerid]);
		cartel[playerid] = Create3DTextLabel("cartelito", -1, -1266.9980, 44.1900, 32.9023, 1.0, playerid+666, 1);
	}
	//
	if (IsTaller[playerid] != 0)
	{
		new idcoche = IsTaller[playerid];
		SetPlayerPos(playerid, TallerX[idcoche], TallerY[idcoche], TallerZ[idcoche]);
		user[playerid][jPosicion_X] = TallerX[idcoche]; user[playerid][jPosicion_Y] = TallerY[idcoche]; user[playerid][jPosicion_Z] = TallerZ[idcoche];
		user[playerid][jInterior] = 0; user[playerid][jVirtualWorld] = 0;
		IsTaller[playerid] = 0;
	}
	if (EnTaller[playerid] != 0)
	{
		new idcoche = EnTaller[playerid];
		SetVehiclePos(idcoche, TallerX[idcoche], TallerY[idcoche], TallerZ[idcoche]);
		SetVehicleZAngle(idcoche, TallerAngulo[idcoche]);
		foreach(new p: Player)
		{
			if (IsPlayerInVehicle(p, idcoche))
			{
				SetCameraBehindPlayer(p);
				TogglePlayerControllable(p, 1);
				DeletePVar(p, "Congelado");
			}
		}
		EnTaller[playerid] = 0;
	}
	//
	if (user[playerid][jMiembro] == 2) sadocs--;
	if (UsandoOptiwand[playerid] != -1)
	{
		user[playerid][jInterior] = 0;
		TipoOptiwand[playerid] = 0;
		user[playerid][jVirtualWorld] = 0;
	}
	if (checkcoche[playerid] != 0)
	{
		if (cocherobo[playerid] != 0) DestroyVehicle(cocherobo[playerid]);
		random_veh[cocherobo[playerid]] = 0;
		checkcoche[playerid] = 0;
		cocherobo[playerid] = 0;
		veh_robo[playerid] = 0;
	}
	if (GetPVarInt(playerid, "EnCrack") == 1)
	{
		user[playerid][jMuerto] = 1;
		EliminarHerido(playerid);
	}
	if (user[playerid][jMuerto] > 0)
	{
		format(string, sizeof(string), "[SISTEMA] %s desconectó en estado herido/muerto posible evasión de rol.", nombre_pj(playerid));
		_MensajeRfac(1, 0x237D00FF, string);
		_MensajeRfac(5, 0x237D00FF, string);
	}

	//
	static const reasonQuit[3][20] = {"Crash", "Quit", "Kick/Ban"};

	if (EnServicioADM[playerid] == 0)
	{
		format(string, sizeof(string), "%s se ha desconectado del servidor. (%s)", nombre_pj(playerid), reasonQuit[reason]);
		ProxDetector(25.0, playerid, string, 0x92936FFF, 0x92936FFF, 0x92936FFF, 0x92936FFF, 0x92936FFF);
		//
		if (GetPVarInt(playerid, "EnEvento") == 1)
		{
			user[playerid][jInterior] = jEvento[playerid][eInterior];
			user[playerid][jVirtualWorld] = jEvento[playerid][eVW];
			user[playerid][jPosicion_R] = jEvento[playerid][eVariable][0];
			user[playerid][jPosicion_X] = jEvento[playerid][eVariable][1];
			user[playerid][jPosicion_Y] = jEvento[playerid][eVariable][2];
			user[playerid][jPosicion_Z] = jEvento[playerid][eVariable][3];
			user[playerid][jSangre] = jEvento[playerid][eVariable][4];
			user[playerid][jChaleco] = jEvento[playerid][eVariable][5];
    	}
	}
	else
	{
		user[playerid][jPosicion_X] = 8301.9980; user[playerid][jPosicion_Y] = 13680.3301; user[playerid][jPosicion_Z] = 33.5163;
		user[playerid][jInterior] = 0; user[playerid][jVirtualWorld] = 0;
	}
	//
	KillTimer(VisitaTimer[playerid]);
	KillTimer(ToqueLlamadaTimer[playerid]); //Sistema teléfono
	if(PersonaEnLlamada[playerid] != -1) KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
	if(EnLlamada[playerid] == 3) user[playerid][jSaldo] -= 3;
	if(PersonaEnLlamada[playerid] != -1)
	{
		if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			_Mensaje(PersonaEnLlamada[playerid], 1, "0", "Coste de la llamada: 1$");
			user[PersonaEnLlamada[playerid]][jSaldo] -= 1;
		}
	}
	if ( _sanCall == playerid )
	{
		_MensajeSAN(0x00DC3AFF, "[INN] Conexión telefónica finalizada.");
		_sanCall = -1;
	}
	for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){_Mensaje(i, 1, "0", "Se ha cortado la línea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = -1; break;} }
	//
	if (GetPVarType(playerid, "AreaVehPos"))
	{
		if (GetPVarType(playerid, "AreaVehMus"))
		{
			foreach(new i: Player)
			{
				if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
				{
					PararMVeh(i);
					_Mensaje(i, 2, "0", "El dueño del vehículo ha salido del servidor.");
				}
			}
		}
	}
	if (i_boox[playerid][BB_obj])
	{
		DestroyDynamicObject(i_boox[playerid][BB_obj]);
		DestroyDynamic3DTextLabel(Text3D: i_boox[playerid][BB_label]);
		i_boox[playerid][BB_obj] = 0;
		if (i_boox[playerid][BB_area])
		{
			foreach(new i: Player)
			{
				if (IsPlayerInDynamicArea(i, i_boox[playerid][BB_area]))
				{
					StopAudioStreamForPlayer(i);
					_Mensaje(i, 2, "0", "El dueño del equipo de sonido ha salido del servidor.");
				}
			}
		}
	}
	//
	if(user[playerid][Started])
	{
		arr_Engine {user[playerid][Vehicle]} = 0;
		DestroyVehicle(user[playerid][Vehicle]);
		random_veh[user[playerid][Vehicle]] = 0;
		//Iter_Remove(Vehicles, user[playerid][Vehicle]);
		Exam_ResetVars(playerid);
	}
	//
	if (Spectate[playerid] < 553)
	{
		SpectadorID[Spectate[playerid]] = 999;
		Spectate[playerid] = 999;
	}
	foreach(new i: Player)
	{
		if (_MedicAcept[i] == playerid)
		{
			_MedicAcept[playerid] = 999;
			textgame_player(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			_Medic2Call[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if (_BombAcept[i] == playerid)
		{
			_BombAcept[playerid] = 999;
			textgame_player(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			_Bomb2Call[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}
	if (Es_Faccion(playerid, 5)) members_fd--;
	PlayerTextDrawDestroy(playerid, TextTrabajo[playerid]);
	PlayerTextDrawDestroy(playerid, info_w[playerid][Velocimetro]);
	secuencia_veh(playerid);
	characterSave(playerid);
	accountSave(playerid);
	SetPlayerName(playerid, username[playerid]);
	return 1;
}

stock IlegalCharacterName(str[])
{
	static const IlegalC[] = {
		'0','1','2','3','4',
		'5','6','7','8','9',
		'[',']','$','(',')',
		'.', '-'
	};
	Loop(i, strlen(str),0) {
		Loop(c, sizeof IlegalC, 0) {
		    if(str[i] == IlegalC[c]) return true;
		}
	}
	return false;
}

funcion EditarAccesorio(playerid,ida)
{
	new ObjetTitleName[128], NombreAcc[32];
	for(new i; i < sizeof(Accesorios); i++)
	{
		if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][ida][aModelo])
		{
			format(NombreAcc, sizeof(NombreAcc), "%s", Accesorios[i][NombreAccesorio]);
		}
	}
	format(ObjetTitleName, sizeof(ObjetTitleName), "{D6E1EB}Opciones - Accesorio: {F5FF00}%s", NombreAcc);
	new Str[300];
	format(Str,sizeof(Str),"{ffffff}Dar accesorio\nTirar accesorio\nEdición personalizada\nEditar parte {00c200}(%s){ffffff}\nOcultar/Mostrar\nEliminar accesorio",ParteAccesorios[InfoAccesorio[playerid][ida][aParte]]);
	ExPlayerDialog(playerid,D_ACCESORIOS2,DIALOG_STYLE_LIST,ObjetTitleName,Str,"Aceptar","Cancelar");
	return 1;
}

public OnPlayerEditAttachedObject(playerid, EDIT_RESPONSE:response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
	    switch(EditandoObjetoJ[playerid])
	    {
	    	case 1: // /toys
			{
		    	if (RanuraSeleccionada[playerid] != -1)
		    	{
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = fOffsetX;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = fOffsetY;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = fOffsetZ;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = fRotX;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = fRotY;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = fRotZ;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = fScaleX;
					if(fScaleX < 0.1) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 0.1;
					else if(fScaleX > 2.0) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 2.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = fScaleY;
					if(fScaleY < 0.1) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 0.1;
					else if(fScaleY > 2.0) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 2.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = fScaleZ;
					if(fScaleZ < 0.1) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 0.1;
					else if(fScaleZ > 2.0) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 2.0;

					RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);

					ColocarObject(playerid, RanuraSeleccionada[playerid], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ]);

					Mensaje_(playerid, 0x90C3D4FF, "Edición del accesorio terminada.");
					RanuraSeleccionada[playerid] = -1;
					EditandoObjetoJ[playerid] = 0;
					return 1;
				} else _Expulsar(playerid, 0, "Informe de este error a bish0p - OnPlayerEditAttachedObject.");
			}
			case 2: // /espalda
			{
			    if (user[playerid][jEspalda] != 0)
			    {
					InfoAccesorio[playerid][7][aPosicionX] = fOffsetX;
					InfoAccesorio[playerid][7][aPosicionY] = fOffsetY;
					InfoAccesorio[playerid][7][aPosicionZ] = fOffsetZ;
					InfoAccesorio[playerid][7][aRotacionX] = fRotX;
					InfoAccesorio[playerid][7][aRotacionY] = fRotY;
					InfoAccesorio[playerid][7][aRotacionZ] = fRotZ;

					RemovePlayerAttachedObject(playerid, 9);

					ColocarObject(playerid, 9, modelid, InfoAccesorio[playerid][7][aParte],
					fOffsetX, fOffsetY, fOffsetZ,
					fRotX, fRotY, fRotZ,
					1.000000, 1.000000, 1.000000);

					EditandoObjetoJ[playerid] = 0;
					Mensaje_(playerid, 0x90C3D4FF, "Posiciones guardadas, si deseas editar otra vez escribe /arma ajustar.");

					return 1;
				}
				else
				{
					EditandoObjetoJ[playerid] = 0;
					Mensaje_(playerid, 0x90C3D4FF, "No tienes nada colgado, la edición se cancelo.");
				    return 1;
				}
			}
		}
	}
	return 1;
}

Menu_Tuneo(playerid)
{
	new Str2[256], Str_[3000], i_ = 0;
	for (new i = 0; i < 11; i++) { if (pieza_tune[playerid][i] > 0) { i_++; } }
	Formato(Str2, "Piezas actuales ({33CCFF}%d{ffffff})\n\
	Acabar tuneo ({00c200}$%d{ffffff})\n\
	Capo\n\
	Techo\n\
	Tubos de escape\n\
	Parachoques delantero\n\
	Parachoques trasero\n\
	Protector delantero\n\
	Protector trasero\n\
	Aleron\n\
	Faros\n\
	Ruedas\n\
	Suspensión hidraulica\n\
	{b00000}Salir tuneo", i_, pago_tune[playerid]);
	strcat(Str_,Str2);
	ExPlayerDialog(playerid, D_Tmecanico1, DIALOG_STYLE_LIST, "{D6E1EB}Tunning", Str_, "Seleccionar", "Ver Piezas");
	return 1;
}

test_rol(playerid)
{
	_Pregunta(playerid, 1, 0);
	return 1;
}

ver_personajes(playerid)
{
	new
		d_dialogo[300],
		d_indice[3000]
	;

	//  personaje 1
	if (strcmp(user[playerid][jCuenta_1], "user_none", true) == 0)
	{
		strcat(d_indice, "{CCCCCC}Ranura disponible\n");
	}
	else
	{
		format(d_dialogo, sizeof(d_dialogo), "{90C3D4}%s\n", user[playerid][jCuenta_1]);
		strcat(d_indice, d_dialogo);
	}
	//  personaje 2
	if (strcmp(user[playerid][jCuenta_2], "user_none", true) == 0)
	{
		strcat(d_indice, "{CCCCCC}Ranura disponible\n");
	}
	else
	{
		format(d_dialogo, sizeof(d_dialogo), "{90C3D4}%s\n", user[playerid][jCuenta_2]);
		strcat(d_indice, d_dialogo);
	}
	//  personaje 3
	if (strcmp(user[playerid][jCuenta_3], "user_none", true) == 0)
	{
		strcat(d_indice, "{CCCCCC}Ranura disponible\n");
	}
	else
	{
		format(d_dialogo, sizeof(d_dialogo), "{90C3D4}%s\n", user[playerid][jCuenta_3]);
		strcat(d_indice, d_dialogo);
	}

	ExPlayerDialog(playerid, D_personajes, DIALOG_STYLE_LIST, "Tus personajes", d_indice, ">>", "Salir");

	return 1;
}

IsValidRoleplayName(const name[])
{
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

stock color_objeto(j, id = 0)
{
	new texto[10] = "{b0b0b0}";
	if (InfoAccesorio[j][id][aColocado] == 0) texto = "{D22821}";
	if (InfoAccesorio[j][id][aColocado] == 1) texto = "{3F8AD6}";
	return texto;
}

funcion _Pregunta(playerid, pregunta, error)
{
	new InfoDlg[300];
	if(error == 1) TestErrores[playerid] -= 1;
	switch (pregunta)
	{
		case 1:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Para poder charlar libremente con otro usuario de manera OOC.\n", sizeof(d_Testing));
			strcat(d_Testing, "Para aclarar situaciones de rol y el entorno.\n", sizeof(d_Testing));
			strcat(d_Testing, "Para mostrar las acciones que realiza mi personaje.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST0, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿Cuál es la utilización correcta del /do?", d_Testing, ">>", "");
		}
		case 2:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Para indicar o realizar acciones cortas.\n", sizeof(d_Testing));
			strcat(d_Testing, "Para narrar una situación de rol.\n", sizeof(d_Testing));
			strcat(d_Testing, "Para aclarar el entorno que nos rodea.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST1, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿Para qué se utiliza el /ame?", d_Testing, ">>", "");
		}
		case 3:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Preguntar por la calle a pandilleros.\n", sizeof(d_Testing));
			strcat(d_Testing, "Rebúscarmelas de manera IC con contactos que posea mi personaje.\n", sizeof(d_Testing));
			strcat(d_Testing, "Creo un anuncio camuflado donde indique estoy interesado en comprar armamento.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST2, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> Deseo comprar un arma de manera ilegal, ¿qué tengo que hacer?", d_Testing, ">>", "");
		}
		case 4:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Realizar un reporte al administrador que me bloqueó.\n", sizeof(d_Testing));
			strcat(d_Testing, "Realizar la apelación correspondiente en foro.\n", sizeof(d_Testing));
			strcat(d_Testing, "Hablar con un administrador por TS3.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST3, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> Me han bloqueado por nula interpretación, ¿qué debo hacer?", d_Testing, ">>", "");
		}
		case 5:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Utilizo /reportar y tomo fotos de lo sucedido, luego reporto en foro.\n", sizeof(d_Testing));
			strcat(d_Testing, "Informo a un administrador por mensaje privado.\n", sizeof(d_Testing));
			strcat(d_Testing, "Le escribo al usuario por privado que está cometiendo múltiples faltas y que será sancionado.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST4, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> Un usuario comete múltiples faltas de rol, ¿qué hago?", d_Testing, ">>", "");
		}
		case 6:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Le doy el número y continuamos el rol de manera IC.\n", sizeof(d_Testing));
			strcat(d_Testing, "Utilizo como excusa que se lo mencioné antes y se lo doy por /MP.\n", sizeof(d_Testing));
			strcat(d_Testing, "Le informo que por pasarle el número podríamos ser sancionados ambos por MG.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST5, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> Un usuario me pide mi número telefónico por mensajería privada.", d_Testing, ">>", "");
		}
		case 7:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Tanto legales como ilegales son correctos, siempre y cuando camufle los ilegales.\n", sizeof(d_Testing));
			strcat(d_Testing, "Sólo de tipo legal, como compra y venta.\n", sizeof(d_Testing));
			strcat(d_Testing, "Sólo ilegales, el sistema de anuncios se basa en lo que es la 'Deep web'.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST6, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿Qué tipos de anuncios están permitidos?", d_Testing, ">>", "");
		}
		case 8:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "CarKill, es decir, atropellar continuamente con un vehículo.\n", sizeof(d_Testing));
			strcat(d_Testing, "La muerte parcial de mi PJ.\n", sizeof(d_Testing));
			strcat(d_Testing, "La muerte total de mi PJ.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST7, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿Qué significa CK?", d_Testing, ">>", "");
		}
		case 9:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Sólo puedo enviar emoticonos vía WhatsApp y SMS.\n", sizeof(d_Testing));
			strcat(d_Testing, "Puedo utilizarlos como me de la gana.\n", sizeof(d_Testing));
			strcat(d_Testing, "Sólo puedo utilizarlos cuando esté de manera 'off rol'.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST8, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿En qué casos puedo utilizar emoticonos en el chat IC?", d_Testing, ">>", "");
		}
		case 10:
		{
			new d_Testing[2500];
			strcat(d_Testing, "Respuestas\n", sizeof(d_Testing));
			strcat(d_Testing, "Sí, puedo rolear conseguir distintos tipos de droga roleando un contacto IC.\n", sizeof(d_Testing));
			strcat(d_Testing, "Sí, puedo rolear robar a un NPC y un operador creará el objeto.\n", sizeof(d_Testing));
			strcat(d_Testing, "No, todo rol para conseguir algo debe ser con otro personaje.", sizeof(d_Testing));
			ExPlayerDialog(playerid, D_TEST9, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}> ¿Puedo rolear con un NPC para conseguir algún beneficio IC?", d_Testing, ">>", "");
		}
		case 11:
		{
			if(TestErrores[playerid] == 10)
			{
				ExPlayerDialog(playerid, D_FIN_REG, DIALOG_STYLE_MSGBOX, "Certificación", "Felicidades obtuviste 10 / 10\n\n¡Ahora puedes crear tus personajes!\n", ">>", "");
				SetPVarInt(playerid, "pasadotest", 2);
			}
			else
			{
				format(InfoDlg, sizeof(InfoDlg), "Calificación: %d / 10.\n\nIngresa a (invite.gg/bullworthrp)\npara una ayuda o intenta de nuevo.\n", TestErrores[playerid]);
				ExPlayerDialog(playerid, D_FIN_REG, DIALOG_STYLE_MSGBOX, "Certificación", InfoDlg, ">>", "");
				TestErrores[playerid] = 10;
				SetPVarInt(playerid, "pasadotest", 1);
			}
		}
	}
	return 1;
}

funcion _Expulsar(jugador, tipo, const mensaje[])
{
	new InfoMjs[150];
	switch (tipo)
	{
		case 0: //dialogo
		{
			format(InfoMjs, sizeof(InfoMjs), "{ffffff}Usted ha sido expulsado del servidor\n\n{ADC3E7}Razón:{ffffff}\n %s.", mensaje);
			ExPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{B00000}SERVER:", InfoMjs, "Aceptar", "");
			Expulsar(jugador, 1);
		}
		case 1: //chat
		{
			format(InfoMjs, sizeof(InfoMjs), "SERVER{ffffff}: Usted ha sido expulsado del servidor, {ADC3E7}Razón:{ffffff} %s.", mensaje);
			SendClientMessage(jugador, 0xB00000FF, InfoMjs);
			Expulsar(jugador, 1);
		}
	}
	return 1;
}

stock _MarcarPos(playerid, Float: x, Float: y, Float: z, const mensaje[], tip = 1)
{
	set_checkpoint(playerid, x, y, z, 1.5);
	Mensaje_(playerid, 0xb0b0b0ff, mensaje);
	SetPVarInt(playerid, "EnCheckPoint", tip);
	TogglePlayerAllDynamicCPs(playerid, false);
	return 1;
}

stock _Gastar(playerid, nid, pagar, objeto, cantidad)
{
	new string[128];
	if(ComprobarDineroJ(playerid) < pagar) { _Mensaje(playerid, 0, "0", "Usted no posee suficiente dinero."); return 1; }
	if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "0", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
	if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = cantidad;}
	else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = cantidad;}
	Compra(playerid, pagar);
	if (i_Negocio[nid][nComprado] != 0)
	{
		i_Negocio[nid][nDinero] += pagar;
		i_Negocio[nid][nProductos]--;
	}
	format(string, sizeof(string), "Compraste %s.", InfoObjeto[objeto][NombreObjeto]);
	_Mensaje(playerid, 4, "33CCFF", string);
	return 1;
}

stock _Pagar(playerid, nid, pagar)
{
	Compra(playerid, pagar);
	if (i_Negocio[nid][nComprado] != 0)
	{
		i_Negocio[nid][nDinero] += pagar;
		i_Negocio[nid][nProductos]--;
	}
    return 1;
}

stock Expulsar(jugador, seg = 0)
{
	if(!seg) return Kick(jugador);
	else if(seg) SetTimerEx("Desconectar", seg * 1000, false, "i", jugador);
	return 1;
}
funcion Desconectar(jugador) return Kick(jugador);

funcion _boombox(playerid, const music[])
{
	if(i_boox[playerid][BB_obj])
	{
		foreach(new i: Player)
		{
			if(IsPlayerInDynamicArea(i, i_boox[playerid][BB_area]))
			{
				PlayStream(i, music, i_boox[playerid][BB_x], i_boox[playerid][BB_y], i_boox[playerid][BB_z], 30.0, 1);
			}
		}
		SetPVarString(playerid, "BBStation", music);
	}
	return 1;
}

funcion _stereo(playerid, const music[])
{
	if(GetPVarType(playerid, "AreaVehPos"))
	{
		foreach(new i: Player)
		{
			if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
			{
				ReproducirMVeh(i, music, GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ"), 50.0, 1);
			}
		}
		SetPVarString(playerid, "AreaVehAud", music);
	}
	return 1;
}

funcion _estereo(playerid, const music[], id)
{
	foreach(new i: Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	{
		escuchandop[i] = 1;
		estacionp[i] = EscucharMusica(i, music);
	}
	estacionveh[GetPlayerVehicleID(playerid)] = id;
	return 1;
}


funcion _MusicTlf(playerid, const music[], const titulo[])
{
	StopAudioStreamForPlayer(playerid);
	EscucharMusica(playerid, music);
	_Mensaje(playerid, 4, "ADC3E7", titulo);
	MusicaEsc[playerid] = 1;
	return 1;
}
/*
funcion _Agenda(playerid)
{
	new dialog[1024], string[256];
	if(user[playerid][jContacto][0] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #1{FFFFFF} | %s [%d]", user[playerid][jContactoN1], user[playerid][jContacto][0]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #1{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][1] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #2{FFFFFF} | %s [%d]", user[playerid][jContactoN2], user[playerid][jContacto][1]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #2{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][2] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #3{FFFFFF} | %s [%d]", user[playerid][jContactoN3], user[playerid][jContacto][2]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #3{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][3] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #4{FFFFFF} | %s [%d]", user[playerid][jContactoN4], user[playerid][jContacto][3]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #4{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][4] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #5{FFFFFF} | %s [%d]", user[playerid][jContactoN5], user[playerid][jContacto][4]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #5{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][5] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #6{FFFFFF} | %s [%d]", user[playerid][jContactoN6], user[playerid][jContacto][5]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #6{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][6] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #7{FFFFFF} | %s [%d]", user[playerid][jContactoN7], user[playerid][jContacto][6]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #7{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][7] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #8{FFFFFF} | %s [%d]", user[playerid][jContactoN8], user[playerid][jContacto][7]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #8{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][8] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #9{FFFFFF} | %s [%d]", user[playerid][jContactoN9], user[playerid][jContacto][8]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #9{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][9] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #10{FFFFFF} | %s [%d]", user[playerid][jContactoN10], user[playerid][jContacto][9]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #10{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][10] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #11{FFFFFF} | %s [%d]", user[playerid][jContactoN11], user[playerid][jContacto][10]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #11{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][11] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #12{FFFFFF} | %s [%d]", user[playerid][jContactoN12], user[playerid][jContacto][11]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #12{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][12] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #13{FFFFFF} | %s [%d]", user[playerid][jContactoN13], user[playerid][jContacto][12]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #13{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][13] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #14{FFFFFF} | %s [%d]", user[playerid][jContactoN14], user[playerid][jContacto][13]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #14{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][14] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #15{FFFFFF} | %s [%d]", user[playerid][jContactoN15], user[playerid][jContacto][14]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #15{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][15] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #16{FFFFFF} | %s [%d]", user[playerid][jContactoN16], user[playerid][jContacto][15]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #16{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][16] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #17{FFFFFF} | %s [%d]", user[playerid][jContactoN17], user[playerid][jContacto][16]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #17{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][17] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #18{FFFFFF} | %s [%d]", user[playerid][jContactoN18], user[playerid][jContacto][17]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #18{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][18] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #19{FFFFFF} | %s [%d]", user[playerid][jContactoN19], user[playerid][jContacto][18]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #19{FFFFFF} | Vacío");
	strcat(dialog, string);
	if(user[playerid][jContacto][19] != 0) format(string, sizeof(string), "\n{b0b0b0}Contacto #20{FFFFFF} | %s [%d]", user[playerid][jContactoN20], user[playerid][jContacto][19]);
	else format(string, sizeof(string), "\n{b0b0b0}Contacto #20{FFFFFF} | Vacío");
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_AGENDA, DIALOG_STYLE_LIST, "{D6E1EB}Agenda", dialog, "Seleccionar", "Inicio");
	return 1;
}
*/
PrecioEmpeno(idobject)
{
	switch(idobject)
	{
		case 30: return 1600;
		case 115..123: return 16;
		case 21: return 1900;
		case 72: return 600;
		case 82: return 50;
		case 81: return 600;
		case 38: return 17;
	}
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(CurrentDialog[playerid] == -1)
	{
		// dialogo inválido
		return 1;
	}
	CurrentDialog[playerid] = -1;
	new idcar = GetPlayerVehicleID(playerid), string[256];
	if (dialogid == D_TAXI)
	{
		if(response)
		{
			if(!IsPlayerConnected(EnTaxi[playerid]))
			{
				PasajeroTaxi[EnTaxi[playerid]] = -1;
				EnTaxi[playerid] = -1;
				_Mensaje(playerid, 0, "0", "El conductor se ha desconectado.");
				return 1;
			}
			if(user[EnTaxi[playerid]][jContrato] == -1)
			{
			    PasajeroTaxi[EnTaxi[playerid]] = -1;
				EnTaxi[playerid] = -1;
				_Mensaje(playerid, 0, "0", "El conductor fue despedido.");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(EnTaxi[playerid])){
			    PasajeroTaxi[EnTaxi[playerid]] = -1;
				EnTaxi[playerid] = -1;
				_Mensaje(playerid, 0, "0", "El conductor ya no está en el vehículo.");
				return 1;
			}
			new vehicleid = GetPlayerVehicleID(EnTaxi[playerid]);
			new v = veh_Empresa(user[EnTaxi[playerid]][jContrato], vehicleid);
			if(v == -1)
			{
			    PasajeroTaxi[EnTaxi[playerid]] = -1;
				EnTaxi[playerid] = -1;
				_Mensaje(playerid, 0, "0", "El conductor ya no está en el vehículo.");
				return 1;
			}
			new slotcoche;
			if(IsSeatAvailable(vehicleid, 2)) slotcoche = 2;
			if(IsSeatAvailable(vehicleid, 3)) slotcoche = 3;
			if(slotcoche == 0)
			{
			    PasajeroTaxi[EnTaxi[playerid]] = -1;
				EnTaxi[playerid] = -1;
				_Mensaje(playerid, 0, "0", "No hay ningún asiento libre.");
				return 1;
			}
			PutPlayerInVehicle(playerid, vehicleid, slotcoche);
			new mierda[144];
			format(mierda, sizeof(mierda), "* %s ha entrado al taxi como pasajero.", nombre_pj(playerid));
			_Mensaje(EnTaxi[playerid], 4, "A7CE00", mierda);
			Taximetro[playerid] = 0;
		}
		else
		{
		    PasajeroTaxi[EnTaxi[playerid]] = -1;
			EnTaxi[playerid] = -1;
			_Mensaje(playerid, 1, "0", "Rechazaste el servicio de transporte.");
			return 1;
		}
	}
	if (dialogid == D_informes)
	{
	    if (!response) return 1;
	    
	    switch (listitem)
	    {
	        case 0: cmd_centralita(playerid);
	        case 1: cmd_heridos(playerid);
	        case 2: cmd_robos(playerid);
	    }
		return 1;
	}
	if (dialogid == D_Historial)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el historial de delitos."); return 1; }
		new ID = listitem,StrPVar[40];
		Formato(StrPVar,"ant_id%d", ID);
		new i = GetPVarInt(playerid,StrPVar),
			playerid2 = GetPVarInt(playerid, "juegador_his");

		if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

		if (i == -1)
		{
			new tMensaje[129];
			format(string, sizeof(string), "CENTRAL: %s limpio el nivel de búsqueda (%d) de %s", nombre_pj(playerid, 0), user[playerid2][jEstrellas], nombre_pj(playerid2, 0));
			format(tMensaje, sizeof(tMensaje), "Registros: %s limpio el nivel de búsqueda (%d) de %s", nombre_pj(playerid), user[playerid2][jEstrellas], nombre_pj(playerid2));
			Log("Registros/Antecedentes.log", tMensaje);
			_MensajeRfac(1, C_COLORRADIO, string);
			user[playerid2][jEstrellas] = 0;
			return 1;
		}
		else
		{
			new tMensaje[129];
			format(string, sizeof(string), "CENTRAL: %s limpio el antecedente (%s) a %s", nombre_pj(playerid, 0), p_delito[playerid2][i], nombre_pj(playerid2, 0));
			format(tMensaje, sizeof(tMensaje), "Registros: %s quitó un antecedente a %s (%s).", nombre_pj(playerid), nombre_pj(playerid2), p_delito[playerid2][i]);
			Log("Registros/Antecedentes.log", tMensaje);
			_MensajeRfac(1, C_COLORRADIO, string);
			alm(p_delito[playerid2][i], "Ninguno");
			user[playerid2][jDelito][i] = 0;
			return 1;
		}
	}
	if (dialogid == D_Buscados)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste los informes de busquedas."); return 1; }
		new ID = listitem,StrPVar[40];
		Formato(StrPVar,"buscado_xd%d",ID);
		new i = GetPVarInt(playerid,StrPVar);
		new
		_dialog1[3000],
		_dialog2[256];

		#define LENGHTx (60)

		if(strlen(i_Buscados[i][b_string]) > LENGHTx)
		{
			new firstString[LENGHTx], secondString[LENGHTx];

			strmid(firstString, i_Buscados[i][b_string], 0, LENGHTx);
			strmid(secondString, i_Buscados[i][b_string], LENGHTx - 1, LENGHTx * 2);

			format(firstString, LENGHTx, "%s...", firstString);
			format(secondString, LENGHTx, "\n...%s", secondString);

			strcat(_dialog1, firstString);
			strcat(_dialog1, secondString);
		}
		else strcat(_dialog1, i_Buscados[i][b_string]);
		format(_dialog2, sizeof(_dialog2), "\n\n{ffffff}%s\nEscrito por {CB2700}%s", i_Buscados[i][b_fecha], i_Buscados[i][b_creador]); strcat(_dialog1, _dialog2);

		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}[HISTORIAL]: Buscados.", _dialog1, "CERRAR", "");
	}
	if (dialogid == D_Centralita)
	{
		if(!response) return cmd_informes(playerid);
		new ID = listitem,StrPVar[40];
		Formato(StrPVar,"Centra_Puto%d",ID);
		new i = GetPVarInt(playerid,StrPVar);
        new _dialog1[3000],
			_dialog2[300],
			_dialog3[128],
			a_tipo[4],
			a_atendido[50];

		if(info_c[i][aTipo] == 1) a_tipo = "PD";
		else if(info_c[i][aTipo] == 2) a_tipo = "ED";

		if(info_c[i][aAtendido] == 0) a_atendido = "{C20000}No atendido";
		else if(info_c[i][aAtendido] == 1) a_atendido = "{009100}Atendido";

		format(_dialog2, sizeof(_dialog2), "{00a2ff}* Nombre del ciudadano:{DDCC72} %s\n", info_c[i][aNombre]); strcat(_dialog1, _dialog2);
		format(_dialog2, sizeof(_dialog2), "{00a2ff}* Teléfono:{DDCC72} %d\n", info_c[i][aTelefono]); strcat(_dialog1, _dialog2);
		format(_dialog2, sizeof(_dialog2), "{00a2ff}* Tipo de emergencia:{DDCC72} %s\n", a_tipo); strcat(_dialog1, _dialog2);
		format(_dialog2, sizeof(_dialog2), "{00a2ff}* Localización:{DDCC72} %s\n", info_c[i][aLugar]); strcat(_dialog1, _dialog2);
		new stringx[128], mensaje[256];
		alm(mensaje, info_c[i][aHechos]);
        if(strlen(mensaje) > 65)
		{
			new string2[128];
			format(string2,256,"{DDCC72}... %s\n",mensaje[70]);
			strdel(mensaje,65,strlen(mensaje));
			format(stringx, sizeof(stringx), "{00a2ff}* Situación:{DDCC72} %s\n", mensaje);
            strcat(_dialog1, stringx);
            strcat(_dialog1, string2);
		}
		else if(strlen(mensaje) <= 65)
		{
			format(stringx, sizeof(stringx), "{00a2ff}* Situación:{DDCC72} %s\n", mensaje);
            strcat(_dialog1, stringx);
		}
		format(_dialog2, sizeof(_dialog2), "{00a2ff}* Último rastreo de la llamada:{DDCC72} %s\n", info_c[i][aZona]); strcat(_dialog1, _dialog2);
		format(_dialog3, sizeof(_dialog3), "{00a2ff}Centralita:{DDCC72} %d | %s", i, a_atendido);
		if(info_c[i][aAtendido] == 0) ExPlayerDialog(playerid,D_Centralita2, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "ATENDER", "SALIR");
		else ExPlayerDialog(playerid,D_Centralita2, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "BORRAR", "SALIR");
		SetPVarInt(playerid, "en_centralita", 0);
		SetPVarInt(playerid, "centra_id", i);
		return 1;
	}
	if (dialogid == D_Centralita2)
	{
	    if(response)
	    {
			new x = GetPVarInt(playerid, "centra_id");
			if(info_c[x][aAtendido] == 0)
			{
		        if (GetPVarInt(playerid, "en_centralita") == 0)
				{
					ExPlayerDialog(playerid, D_Centralita2, DIALOG_STYLE_INPUT, "{D6E1EB}[CENTRALITA]: Registros", "{00a2ff}Ingresar Callsign:", "Código 2", "Código 3");
					SetPVarInt(playerid, "en_centralita", 1);
					return 1;
				}
				else
				{
					if (x != 0)
					{
						new info[128];
						switch (user[playerid][jMiembro])
						{
							case 1:
							{
								format(info, sizeof(info), "** [LSPD | ID: %d]: %s atiende 911, %s en código dos.", playerid, inputtext, info_c[x][aZona]);
								_MensajeRfac(1, 0xff6347ff, info);
							}
							case 5:
							{
								format(info, sizeof(info), "** [ID: %d | RADIO] %s atiende 911, %s en código dos.", playerid, inputtext, info_c[x][aZona]);
								_MensajeRfac(5, C_COLORRADIO, info);
							}
						}
						info_c[x][aAtendido] = 1;
						CentrTimer[x] = SetTimerEx("delete_centra", 60000*20, false, "i", x);
						DeletePVar(playerid, "centra_id");
						DeletePVar(playerid, "en_centralita");
					}
					return 1;
				}
			}
			else
			{
			    Mensaje_(playerid, 0xb0b0b0ff, "Borraste con éxito la llamada seleccionada.");
			    info_c[x][aID] = 0;
				info_c[x][aTipo] = 0;
				info_c[x][aAtendido] = 0;
				KillTimer(CentrTimer[x]);
				DeletePVar(playerid, "centra_id");
				DeletePVar(playerid, "en_centralita");
			}
		}
		else
		{
			new x = GetPVarInt(playerid, "centra_id");
		    if(info_c[x][aAtendido] == 0)
			{
			    if (GetPVarInt(playerid, "en_centralita") == 0)
				{
					Mensaje_(playerid, 0xb0b0b0ff, "Saliste del registro de centralita.");
					DeletePVar(playerid, "centra_id");
					DeletePVar(playerid, "en_centralita");
				}
				else
				{
					if (x != 0)
					{
						new info[128];
						switch (user[playerid][jMiembro])
						{
							case 1:
							{
								format(info, sizeof(info), "** [LSPD | ID: %d] %s atiende 911, %s en código tres.", playerid, inputtext, info_c[x][aZona]);
								_MensajeRfac(1, 0xff6347ff, info);
							}
							case 5:
							{
								format(info, sizeof(info), "** [ID: %d | RADIO] %s atiende 911, %s en código tres.", playerid, inputtext, info_c[x][aZona]);
								_MensajeRfac(5, C_COLORRADIO, info);
							}
						}
						info_c[x][aAtendido] = 1;
						CentrTimer[x] = SetTimerEx("delete_centra", 60000*20, false, "i", x);
					    DeletePVar(playerid, "centra_id");
						DeletePVar(playerid, "en_centralita");
					}
					return 1;
				}
			}
			else
			{
				Mensaje_(playerid, 0xb0b0b0ff, "Saliste del registro de centralita.");
				DeletePVar(playerid, "centra_id");
				DeletePVar(playerid, "en_centralita");
			}
		}
	}
	if (dialogid == D_Repartos)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste la lista de repartos."); return 1; }
		new ID = listitem,StrPVar[40];
		Formato(StrPVar,"GPS_Puto_%d",ID);
		new i = GetPVarInt(playerid,StrPVar);
		r_negocio[playerid] = i;
		if(i_Negocio[i][EnPedido] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Pedido en espera, intenta más tarde o intenta con otro.");

		TogglePlayerAllDynamicCPs(playerid, false);
		new cajas = random(3);
		switch(cajas)
		{
			case 0: set_checkpoint(playerid, -114.8255, -330.7507, 0.9912, 12);
			case 1: set_checkpoint(playerid, -183.9354, -277.5449, 1.0257, 12);
			case 2: set_checkpoint(playerid, 65.1676, -273.5888, 1.1238, 12);
		}
		SetPVarInt(playerid, "EnCheckPoint", 3);
		_Mensaje(playerid, 4, "A7CE00", "Busca la mercancía que debes llevar al negocio, se marcó en el radar la ubicación.");
		_Mensaje(playerid, 4, "A7CE00", "Recuerda ir en un vehículo con espacio, ten cuidado con chocarlo podrían despedirte.");
		i_Negocio[i][EnPedido] = 1;
		return 1;
	}
	if(dialogid == D_VehEmpresa)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cancelaste la compra de vehículos para tu empresa."); return 1; }
		new modelo, precio, e_id = user[playerid][jEmpresaKey];
		if (i_Empresa[e_id][eTipo] == 1)
		{
			switch(listitem)
			{
				case 0: if(RevisarDinero(playerid, 9500)) { modelo = 422; precio = 9500; }
				case 1: if(RevisarDinero(playerid, 11300)) { modelo = 428; precio = 11300; }
				case 2: if(RevisarDinero(playerid, 8200)) { modelo = 440; precio = 8200; }
				case 3: if(RevisarDinero(playerid, 8700)) { modelo = 468; precio = 8700; }
				case 4: if(RevisarDinero(playerid, 18000)) { modelo = 482; precio = 18000; }
				case 5: if(RevisarDinero(playerid, 22400)) { modelo = 498; precio = 22400; }
				case 6: if(RevisarDinero(playerid, 16700)) { modelo = 499; precio = 16700; }
				case 7: if(RevisarDinero(playerid, 20000)) { modelo = 525; precio = 20000; }
			}
		}
		else if (i_Empresa[e_id][eTipo] == 2)
		{
			switch(listitem)
			{
				case 0: if(RevisarDinero(playerid, 18500)) { modelo = 552; precio = 18500; }
				case 1: if(RevisarDinero(playerid, 20000)) { modelo = 525; precio = 20000; }
				case 2: if(RevisarDinero(playerid, 8700)) { modelo = 468; precio = 8700; }
				case 3: if(RevisarDinero(playerid, 18000)) { modelo = 426; precio = 18000; }
			}
		}
 		else if (i_Empresa[e_id][eTipo] == 3)
		{
			switch(listitem)
			{
				case 0: if(RevisarDinero(playerid, 17000)) { modelo = 438; precio = 17000; }
				case 1: if(RevisarDinero(playerid, 20000)) { modelo = 420; precio = 20000; }
				case 2: if(RevisarDinero(playerid, 58600)) { modelo = 437; precio = 58600; }
				case 3: if(RevisarDinero(playerid, 12000)) { modelo = 589; precio = 12000; }
			}
		}

		new Float: X, Float: Y, Float: Z, Float: Angle;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);
		for (new veh = 0; veh < 10; veh++)
		{
			if (!InfoVehEmp[user[playerid][jEmpresaKey]][veh][vPrecio])
			{
				DarDineroGC(playerid, -precio);
				d_estado += precio;
				crear_VehEmpresa(playerid, user[playerid][jEmpresaKey], veh, modelo, X, Y+3, Z, Angle, 1, 1, precio);
            	veh = 10;
            	return 1;
			}
		}
		_Mensaje(playerid, 4, "b0b0b0", "No fue posible adquirir el vehículo, ya tienes 10 en la empresa.");
	}
	if(dialogid == DIALOGO_EMPRESA)
	{
	    if(!response) return 1;
		new putamierda[35], putamierdita[22], nombre[25], horasjugadas, andaconectado;
		format(putamierdita, sizeof(putamierdita), "miembroinfo%d", listitem);
		GetPVarString(playerid, putamierdita, putamierda, 35);
		sscanf(putamierda, "s[25]d", nombre, horasjugadas);
		sscanf(nombre, "u", andaconectado);
		if (IsPlayerConnected(andaconectado))
		{
			ExPlayerDialog(playerid, DIALOGO_EMPRESA2, DIALOG_STYLE_LIST, nombre, "Expulsar\nTransferir", "Aceptar", "Salir");
		}
		else
		{
			ExPlayerDialog(playerid, DIALOGO_EMPRESA2, DIALOG_STYLE_LIST, nombre, "Expulsar", "Aceptar", "Salir");
		}
		SetPVarString(playerid,"nombredelemprendedor" , nombre);
		SetPVarInt(playerid,"iddelemprendedor", listitem);
	}

    if(dialogid == DIALOGO_EMPRESA2)
    {
        if(!response) return 1;
        switch(listitem)
        {
            case 0:
            {
                new putamierda[128], nombre[128], andaconectado, siono, linea;
                format(putamierda, sizeof(putamierda), "Empresas/iEmpresa_%d.pro", user[playerid][jEmpresaKey]);
               	GetPVarString(playerid, "nombredelemprendedor", nombre, 25);
				new File:llavesita = fopen(putamierda ,io_read);
				if(llavesita)
				{
					while(fread(llavesita, string))
					{
						linea++;
						if(strfind(string, nombre, true) != -1)
						{
							siono = linea;
							break;
						}
					}
					if(siono != -1) fdeleteline(putamierda, siono);
				}
				fclose(llavesita);
                i_Empresa[user[playerid][jEmpresaKey]][eMiembros]--;
                Mensaje_(playerid, -1, "Usuario removido de la empresa.");
                sscanf(nombre, "u", andaconectado);
                save_Empresa(user[playerid][jEmpresaKey]);
                if (IsPlayerConnected(andaconectado))
                {

					format(string, sizeof(string), "* %s [%d] fue expulsado de la empresa.", nombre, andaconectado);
					_Mensaje(playerid, 4, "33CCFF", string);
					user[andaconectado][jContrato] = -1;
					user[playerid][jHorasE] = 0;
                    return 1;
                }
                else
                {
					yield 1;
                    if(!characterCheck(nombre)) return _Mensaje(playerid, 0, "0", "No se encontró archivo del jugador.");
					mysql_tquery_s(mainDatabase, str_format("UPDATE characters SET Contrato = -1, HorasE = 0 WHERE Nombre = '%s'", nombre));
					format(string, sizeof(string), "* %s fue expulsado de la empresa.", nombre);
					_Mensaje(playerid, 4, "33CCFF", string);
                    return 1;
                }
            }
            case 1:
            {
				new nombre[25], andaconectado;
				GetPVarString(playerid, "nombredelemprendedor", nombre, 25);
				sscanf(nombre, "u", andaconectado);
				if(IsPlayerConnected(andaconectado))
				{
					SetPVarInt(playerid, "rdinero", andaconectado);
					ExPlayerDialog(playerid, D_BANCOT2, DIALOG_STYLE_INPUT, "{D6E1EB}Transferir [2]", "{FFFFFF}Ingrese la cantidad de dinero a transferir.", "Transferir", "Cancelar");
				}
				else _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
            }
        }
    }
	if(dialogid == D_Empeno2)
	{
	    if(!response) return 1;
	    if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0) return _Mensaje(playerid, 0, "0", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	    if(user[playerid][jEmpeno][listitem] != 0)
	    {
	        if(ComprobarDineroJ(playerid) >= PrecioEmpeno(user[playerid][jEmpeno][listitem]))
	        {
	            DarDineroGC(playerid, -PrecioEmpeno(user[playerid][jEmpeno][listitem]));
	            if(user[playerid][jm_Derecha] == 0)
	            {
              		user[playerid][jm_Derecha] = user[playerid][jEmpeno][listitem];
              		user[playerid][jm_DerechaCant] = 1;
              		PonerObjeto(playerid, 1, user[playerid][jm_Derecha]);
	            }
	            else
	            {
              		user[playerid][jm_Izquierda] = user[playerid][jEmpeno][listitem];
              		user[playerid][jm_IzquierdaCant] = 1;
              		PonerObjeto(playerid, 2, user[playerid][jm_Derecha]);
	            }
	            new pro[144];
	            format(pro, sizeof(pro), "Rick dice: aquí está tu %s.", InfoObjeto[user[playerid][jEmpeno][listitem]][NombreObjeto]);
	            Mensaje_(playerid, -1, pro);
                user[playerid][jEmpeno][listitem] = 0;
                user[playerid][jEmpeno2][listitem] = 0;
                update_manos(playerid);
	        }
	    }
	}

	if(dialogid == D_Empeno)
	{
	    if(!response) return 1;
	    new obj, price, time;
	    switch(listitem)
	    {
		    case 0:
		    {
		        new pro[500], pro2[60];
		        format(pro, sizeof(pro), "Objeto\tPrecio\n");
				if(user[playerid][jEmpeno][0] != 0) format(pro2, sizeof(pro2), "%s\t%d$\n", InfoObjeto[user[playerid][jEmpeno][0]][NombreObjeto], PrecioEmpeno(user[playerid][jEmpeno][0]));
				else format(pro2, sizeof(pro2), "Nada\t0$\n");
				strcat(pro, pro2);
				if(user[playerid][jEmpeno][1] != 0) format(pro2, sizeof(pro2), "%s\t%d$\n", InfoObjeto[user[playerid][jEmpeno][1]][NombreObjeto], PrecioEmpeno(user[playerid][jEmpeno][1]));
				else format(pro2, sizeof(pro2), "Nada\t0$\n");
				strcat(pro, pro2);
				if(user[playerid][jEmpeno][2] != 0) format(pro2, sizeof(pro2), "%s\t%d$\n", InfoObjeto[user[playerid][jEmpeno][2]][NombreObjeto], PrecioEmpeno(user[playerid][jEmpeno][2]));
				else format(pro2, sizeof(pro2), "Nada\t0$\n");
				strcat(pro, pro2);
				if(user[playerid][jEmpeno][3] != 0) format(pro2, sizeof(pro2), "%s\t%d$\n", InfoObjeto[user[playerid][jEmpeno][3]][NombreObjeto], PrecioEmpeno(user[playerid][jEmpeno][3]));
				else format(pro2, sizeof(pro2), "Nada\t0$\n");
				strcat(pro, pro2);
				if(user[playerid][jEmpeno][4] != 0) format(pro2, sizeof(pro2), "%s\t%d$", InfoObjeto[user[playerid][jEmpeno][4]][NombreObjeto], PrecioEmpeno(user[playerid][jEmpeno][4]));
				else format(pro2, sizeof(pro2), "Nada\t0$");
				strcat(pro, pro2);
				ExPlayerDialog(playerid, D_Empeno2, DIALOG_STYLE_TABLIST_HEADERS, "Desempeñar", pro,
				"Aceptar", "Cancelar");
				return 1;
		    }

		    case 1:
		    {
				obj = 30;
				time = 20;
				price = 1000;
		    }
		    case 2:
		    {
		        obj = 1919;
		        price = 8;
				time = 2;
		    }
		    case 3:
		    {
		        obj = 82;
		        price = 35;
		        time = 3;
		    }
		    case 4:
		    {
		        price = 450;
		        obj = 81;
		        time = 16;
		    }
		    case 5:
		    {
		        obj = 38;
		        price = 10;
		        time = 3;
		    }
	    }
		new x = -1;
		for(new a = 0; a < 5; a++)
		{
			if(user[playerid][jEmpeno][a] == 0) x = a;
		}
		if(x == -1) return _Mensaje(playerid, 0, "0", "ERROR: Sólo puedes empeñar 5 objetos.");
	    if(obj == 1919)
	    {
	        switch(user[playerid][jm_Derecha])
	        {
	            case 115..123:
	            {
	                user[playerid][jEmpeno][x] = user[playerid][jm_Derecha];
	                user[playerid][jEmpeno2][x] = time;
	                user[playerid][jm_Derecha] = 0;
	                user[playerid][jm_DerechaCant] = 0;
	                DarDineroGC(playerid, 8);
	                Mensaje_(playerid, -1, "Rick dice: Tienes 2 horas para pagar o el teléfono será mío.");
	                return 1;
	            }
	        }
	        switch(user[playerid][jm_Izquierda])
	        {
	            case 115..123:
	            {
	                user[playerid][jEmpeno][x] = user[playerid][jm_Izquierda];
	                user[playerid][jEmpeno2][x] = time;
	                user[playerid][jm_Izquierda] = 0;
	                user[playerid][jm_IzquierdaCant] = 0;
	                DarDineroGC(playerid, 8);
	                Mensaje_(playerid, -1, "Rick dice: Tienes 2 horas para pagar o el teléfono será mío.");
	                return 1;
	            }
	        }
	    }
	    if(user[playerid][jm_Derecha] == obj || user[playerid][jm_Izquierda] == obj)
	    {
	        new pro3[144];
	        if(obj == 72)
	        {
				if(user[playerid][jm_Derecha] == obj)
				{
				    if(user[playerid][jm_DerechaCant] < 50) return _Mensaje(playerid, 0, "0", "Este chaleco está muy dañado.");
				}
				else
				{
				    if(user[playerid][jm_IzquierdaCant] < 50) return _Mensaje(playerid, 0, "0", "Este chaleco está muy dañado.");
				}
	        }
	        if(user[playerid][jm_Derecha] == obj)
	        {
	            user[playerid][jm_Derecha] = 0;
	            user[playerid][jm_DerechaCant] = 0;
	        }
	        else
	        {
	            user[playerid][jm_Izquierda] = 0;
	            user[playerid][jm_IzquierdaCant] = 0;
	        }
	        format(pro3, sizeof(pro3), "Rick dice: tienes %d horas para pagar o el/la %s será mío/mía.", time, InfoObjeto[obj][NombreObjeto]);
	        Mensaje_(playerid, -1, pro3);
	        DarDineroGC(playerid, price);
         	user[playerid][jEmpeno][x] = obj;
         	user[playerid][jEmpeno2][x] = time;
         	ResetPlayerWeapons(playerid);
	        update_manos(playerid);
	        return 1;
	    }
	}
	switch (dialogid)
	{
		case d_codes:
		{
			if (!response) return SendClientMessage(playerid, -1, "Has cerrado el diálogo de recuperación.");

			if(check_code(inputtext))
			{
				new
					p_username[50 + MAX_PLAYER_NAME]
				;
				format(p_username, sizeof(p_username), data_codes, inputtext);
				INI_ParseFile(p_username, "Code_data", .bExtra = true, .extra = playerid);
				
				user[playerid][jNivel] = code_nivel[playerid];
				user[playerid][j_Horas] = code_horas[playerid];
				DarDineroGC(playerid, code_dinero[playerid]);
				SetPlayerScore(playerid, code_nivel[playerid]);

				format(string, sizeof(string), "Recuperación de nivel %d, %d horas de juego y $%d de dinero.", code_nivel[playerid], code_horas[playerid], code_dinero[playerid]);
				SendClientMessage(playerid, 0x90C3D4FF, string);
				SendClientMessage(playerid, 0xccccccff, "Código ingresado fue eliminado, ya no tendrá más uso.");
				c_codes--;
				save_stuff();

				//eliminación
				new elban[128];
				format(elban, 128, "Codes/%s.rp", inputtext);
				fremove(elban);

				format(string, sizeof(string), "Registros: %s (%s) utilizó: %s por nivel:%d-horas:%d-dinero:%d$.", nombre_pj(playerid), username[playerid], inputtext, code_nivel[playerid], code_horas[playerid], code_dinero[playerid]);
				Log("Registros/Codes.log", string);

                code_nivel[playerid] = 0;
                code_horas[playerid] = 0;
                code_dinero[playerid] = 0;
				characterSave(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, 0xb00000ff, "ERROR; Ese código de recuperación no existe o ya ha sido usado.");
				return 1;
			}
		}
		case D_INGRESO:
		{
			if (!response) return _Expulsar(playerid, 1, "Ingreso falso");
			yield 1;
			new check = await bcrypt_averify(playerid, inputtext, user[playerid][jClave]);
			if(check){
        		LoggedIn[playerid] = 1;
        		ver_personajes(playerid);
			}
			else
			{
				if (_Logeo[playerid] == 3)
				{
					_Expulsar(playerid, 1, "Ingreso falso");
					return 1;
				}
				new cuenta2[200];
				format(cuenta2, sizeof(cuenta2), "%s, la contraseña escrita no es válida\nPor favor intente de nuevo.\n\nIntroduzca su contraseña:", username[playerid]);
				ExPlayerDialog(playerid, D_INGRESO, DIALOG_STYLE_PASSWORD, "Iniciar Sesión", cuenta2, "Ingresar", "Salir");
				_Logeo[playerid] += 1;
			}				
		}

		case D_REGISTRO:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar registro");
			new cuenta2[200];
			if (strlen(inputtext) < 5)
			{
				format(cuenta2, sizeof(cuenta2), "%s, la contraseña es inferior a 4 carácteres\nPor favor intente con una más larga.\n\nIntroduzca una contraseña:", username[playerid]);
				ExPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", cuenta2, "Registrar", "Salir");
				return 1;
			}
			if(strlen(inputtext) > 18)
			{	
				format(cuenta2, sizeof(cuenta2), "%s, la contraseña sobrepasa los 18 carácteres\nPor favor intente con una más corta.\n\nIntroduzca una contraseña:", username[playerid]);
				ExPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", cuenta2, "Registrar", "Salir");
				return 1;
			}
			yield 1;
			await_str(user[playerid][jClave]) bcrypt_ahash(playerid, inputtext);
			if(strlen(user[playerid][jClave])){
				new check = await bcrypt_averify(playerid, inputtext, user[playerid][jClave]);
				if(!check){
					format(cuenta2, sizeof(cuenta2), "Bienvenido %s\n\nPor favor introduzca una contraseña:", username[playerid]);
					ExPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", cuenta2, "Registrar", "Salir");
					return 1;
				}
				StopAudioStreamForPlayer(playerid);
				ExPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "Correo electrónico:",
				"Escribe tu correo electrónico\n\nFormato: email@dominio.com\n", "Continuar", "Salir");
			}
			return 1;
		}

		case D_EMAIL:
		{
		    if(GetPVarInt(playerid, "en_correo") == 1)
		    {
		        if (!response)
		        {
		        	DeletePVar(playerid, "en_correo");
					return ExPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "Correo electrónico:", "Escribe tu correo electrónico\n\nFormato: email@dominio.com\n", "Continuar", "Salir");
				}
		        DeletePVar(playerid, "en_correo");
		        if (ActTest != 0) test_rol(playerid);
		        else //test desactivado
		        {
					alm(user[playerid][jCuenta_1], "user_none");
					alm(user[playerid][jCuenta_2], "user_none");
					alm(user[playerid][jCuenta_3], "user_none");
					new year, month, day, code_1[128];
					getdate(year, month, day);
					format(code_1, sizeof(code_1), "%02d de %s del %02d", day, GetMonth(month), year);
					alm(user[playerid][pfechaUreg], code_1);
					c_cuentas++;
					save_stuff();
					accountORMInit(playerid);
					yield 1;
					new err = await orm_async_insert(accountORM[playerid]);
					if(err == ERROR_OK)
						ver_personajes(playerid);
					else{
						SendClientMessage(playerid, C_ROJO2, "Ocurrió un error al crear tu cuenta, contacta con administración.");
						wait_ms(1000);
						Kick(playerid);
					}
		        }
				return 1;
			}
			else
			{
				if (!response) return _Expulsar(playerid, 1, "Cancelar registro");
				if (!strlen(inputtext)) return ExPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "Correo electrónico:", "Escríbelo con un '@'\n\nFormato: email@dominio.com\n", "Continuar", "Salir");

				if (strfind(inputtext, "@", true) == -1)
				{
					ExPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "Correo electrónico:", "Escríbelo con un '@'\n\nFormato: email@dominio.com\n", "Continuar", "Salir");
					return 1;
				}
				else
				{
					alm(user[playerid][jEmail], inputtext);

					format(string, sizeof(string),
					"Correo electrónico: %s\n\nSi el correo electrónico es correcto, pulse continuar.",
					user[playerid][jEmail]);
					ExPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_MSGBOX, "Correo electrónico:", string, "Continuar", "Atrás");
					SetPVarInt(playerid, "en_correo", 1);
					return 1;
				}
			}
		}

		case D_FIN_REG:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar registro");
			if(GetPVarInt(playerid, "pasadotest") == 1){
					test_rol(playerid);
			}
			else if(GetPVarInt(playerid, "pasadotest") == 2)
		    {
				alm(user[playerid][jCuenta_1], "user_none");
				alm(user[playerid][jCuenta_2], "user_none");
				alm(user[playerid][jCuenta_3], "user_none");
				new year, month, day, code_1[128];
				getdate(year, month, day);
				format(code_1, sizeof(code_1), "%02d de %s del %02d", day, GetMonth(month), year);
				alm(user[playerid][pfechaUreg], code_1);
				alm(user[playerid][jNombre], username[playerid]);
				c_cuentas++;
				save_stuff();
				accountORMInit(playerid);
				yield 1;
				new err = await orm_async_insert(accountORM[playerid]);
				if(err == ERROR_OK)
					ver_personajes(playerid);
				else{
					SendClientMessage(playerid, C_ROJO2, "Ocurrió un error al crear tu cuenta, contacta con administración.");
					wait_ms(1000);
					Kick(playerid);
					orm_destroy(accountORM[playerid]);
				}
		    }
			else Kick(playerid);
			return 1;
		}
		case D_fianza:
		{
			if (!response) return SendClientMessage(playerid, 0xccccccff, "Cancelaste el pago de la fianza, puedes intentarlo nuevamente con /fianza.");
			if (user[playerid][jFianza] == 0) return _Mensaje(playerid, 4, "b0b0b0", "En tu condena no hay fianza, espera el tiempo de condena.");
			if (user[playerid][jBanco] > user[playerid][jFianza])
			{
				format(string, sizeof(string), "* Pagaste la fianza de $%d, en unos momentos serás libre.", user[playerid][jFianza]);
				_Mensaje(playerid, 4, "33CCFF", string);
				user[playerid][jBanco] -= user[playerid][jFianza];
				d_estado += user[playerid][jFianza];
				user[playerid][jTiempoCarcel] = 1;
				user[playerid][jtiempito] = 0;
				user[playerid][jFianza] = 0;
				return 1;
			} else _Mensaje(playerid, 4, "b0b0b0", "No tienes el dinero sufiente en el banco para la fianza.");
		}
		case D_personajes:
		{
			if (!response) return _Expulsar(playerid, 1, "Pulsaste salir");

			switch (listitem)
			{
				//  personaje 1
				case 0:
				{
					if (strcmp(user[playerid][jCuenta_1], "user_none", true) == 0)
					{
						ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Introduce el nombre de tu personaje:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido (Mario_Godoy).", "Crear", "Atrás");
						SetPVarInt(playerid, "crear_pj", 1);
					}
					else
					{
						ExPlayerDialog(playerid, D_personajes2, DIALOG_STYLE_LIST, "Opciones disponibles", "{cccccc} Ingresar\n{cccccc} Eliminar personaje", ">>", "<<");
						SetPVarInt(playerid, "crear_pj", 1);
					}
				}
				//  personaje 2
				case 1:
				{
					if (strcmp(user[playerid][jCuenta_2], "user_none", true) == 0)
					{
						ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Introduce el nombre de tu personaje:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido (Mario_Godoy).", "Crear", "Atrás");
						SetPVarInt(playerid, "crear_pj", 2);
					}
					else
					{
						ExPlayerDialog(playerid, D_personajes2, DIALOG_STYLE_LIST, "Opciones disponibles", "{cccccc} Ingresar\n{cccccc} Eliminar personaje", ">>", "<<");
						SetPVarInt(playerid, "crear_pj", 2);
					}
				}
				//  personaje 3
				case 2:
				{
					if (strcmp(user[playerid][jCuenta_3], "user_none", true) == 0)
					{
						ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Introduce el nombre de tu personaje:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido (Mario_Godoy).", "Crear", "Atrás");
						SetPVarInt(playerid, "crear_pj", 3);
					}
					else
					{
						ExPlayerDialog(playerid, D_personajes2, DIALOG_STYLE_LIST, "Opciones disponibles", "{cccccc} Ingresar\n{cccccc} Eliminar personaje", ">>", "<<");
						SetPVarInt(playerid, "crear_pj", 3);
					}
				}
			}
		}

		case D_personajes2:
		{
			if (!response) return ver_personajes(playerid);

			new personaje = GetPVarInt(playerid, "crear_pj");

			new playername[50 + MAX_PLAYER_NAME];

			switch (personaje)
			{
				case 1: alm(playername, user[playerid][jCuenta_1]);
				case 2: alm(playername, user[playerid][jCuenta_2]);
				case 3: alm(playername, user[playerid][jCuenta_3]);
			}

			switch (listitem)
			{
				//  ingresar
				case 0:
				{
				    detener_playsound(playerid);
					JugadorEnSeccion {playerid} = 1;
					SetPVarInt(playerid, "crear_pj", personaje);
					new query[96];
					mysql_format(mainDatabase, query, sizeof(query), "SELECT * FROM characters WHERE NombrePJ = '%e' LIMIT 1", playername);
					yield 1;
					await mysql_aquery(mainDatabase, query);
					charORMInit(playerid);
					if(cache_num_rows())
						orm_apply_cache(charORM[playerid], 0);
					else{
						ver_personajes(playerid);
						return 1;
					}
					if (user[playerid][jRegistrado] == 0) return SpawnPlayer(playerid),_OnPlayerSpawn(playerid);

					SetPlayerName(playerid, playername);

					cargar_pj(playerid);

					return 1;
				}
				//  eliminar pj
				case 1:
				{
				    ExPlayerDialog(playerid, D_personajes3, DIALOG_STYLE_MSGBOX, "Eliminación de personaje", "{F0F0F0}¿Estás seguro que quieres eliminar este personaje?", "Sí", "<<");
				}
   			}
		}
		case D_personajes3:
		{
			if (!response)
			{
				SendClientMessage(playerid, 0xccccccff, "Cancelaste la eliminación de este personaje.");
				ver_personajes(playerid);
				return 1;
			}
			
			/*new personaje = GetPVarInt(playerid, "crear_pj");

			new playername[50 + MAX_PLAYER_NAME];

			switch (personaje)
			{
				case 1: alm(playername, user[playerid][jCuenta_1]);
				case 2: alm(playername, user[playerid][jCuenta_2]);
				case 3: alm(playername, user[playerid][jCuenta_3]);
			}

			tipo_carga[playerid] = 2;
			new p_cuenta[128];
			format(p_cuenta, sizeof(p_cuenta), DATOS_Personajes, playername);
			INI_ParseFile(p_cuenta, "C_data", .bExtra = true, .extra = playerid);
			if (user[playerid][jTiempoCarcel] != 0)
			{
				SetPVarInt(playerid, "Money", 0);
				ReiniciarDinero(playerid);
				user_clean(playerid);
			    _Mensaje(playerid, 0, "0", "Este personaje posee sanción in game, culmine el tiempo primero.");
				ver_personajes(playerid);
				return 1;
			}
			if (user[playerid][jBaneado] == 10 || user[playerid][jBaneado] == 20)
			{
				SetPVarInt(playerid, "Money", 0);
				ReiniciarDinero(playerid);
				user_clean(playerid);
			    _Mensaje(playerid, 0, "0", "Este personaje está bloqueado, solicita apelación en foro.");
				ver_personajes(playerid);
				return 1;
			}
			//eliminación
			for(new i = 0; i < 6; i++)
			{
				new veh = user[playerid][jLlaveCoche][i];
				if(veh != 0)
				{
					VehiculoBorrar(veh-1000);
				}
			}
			if(user[playerid][jCasaKey] != -1)
			{
				vender_casa(user[playerid][jCasaKey]);
			}
			if(user[playerid][jCasaKey2] != -1)
			{
				vender_casa(user[playerid][jCasaKey2]);
			}
			if(user[playerid][jNegocioKey] != -1)
			{
				vender_neg(user[playerid][jNegocioKey]);
			}
			if(user[playerid][jNegocioKey2] != -1)
			{
				vender_neg(user[playerid][jNegocioKey2]);
			}
			if(user[playerid][jEmpresaKey] != -1)
			{
				format(string, sizeof(string), "[SISTEMA] %s (%s) borró su personaje con empresakey: %d.", username[playerid], playername, user[playerid][jEmpresaKey]);
				Log("Registros/E_Novendidas.log", string);
			}
			if(user[playerid][jAlmacen] != -1)
			{
				format(string, sizeof(string), "[SISTEMA] %s (%s) borró su personaje con almacen: %d.", username[playerid], playername, user[playerid][jAlmacen]);
				Log("Registros/A_Novendidas.log", string);
			}
			//eliminación
			new elban[128];
			format(elban, 128, "Personajes/%s.rp", playername);
			fremove(elban);

			switch (personaje)
			{
				case 1: alm(user[playerid][jCuenta_1], "user_none");
				case 2: alm(user[playerid][jCuenta_2], "user_none");
				case 3: alm(user[playerid][jCuenta_3], "user_none");
			}

			new data[60];
			format(data, sizeof data, DATOS_CUENTAS, username[playerid]);
			new INI: File = INI_Open(data);

			INI_WriteString(File, "Nombre", username[playerid]);
			INI_WriteString(File, "Cuenta_1", user[playerid][jCuenta_1]);
			INI_WriteString(File, "Cuenta_2", user[playerid][jCuenta_2]);
			INI_WriteString(File, "Cuenta_3", user[playerid][jCuenta_3]);
			INI_Close(File);

			format(string, sizeof(string), "[Atención]{FFFFFF} %s(%d) ha borrado su personaje (%s).", username[playerid], playerid, playername);
			MensajeAdmin(string);

			format(string, sizeof(string), "[SISTEMA] %s ha seleccionado borrar su personaje (%s).", username[playerid], playername);
			Log("Registros/BorrarPJ.log", string);

			SetPVarInt(playerid, "Money", 0);
			ReiniciarDinero(playerid);
			user_clean(playerid);
			ver_personajes(playerid);
			c_personajes--;
			save_stuff();*/
			return 1;
		}
		case crear_personaje:
		{
			if (!response) return ver_personajes(playerid);

			new personaje = GetPVarInt(playerid, "crear_pj");

			if (GetPVarInt(playerid, "d_configs") == 1)
			{
				if (!response) return _Expulsar(playerid, 1, "Cancelaste la configuración");
				detener_playsound(playerid);
				DeletePVar(playerid, "d_configs");
				JugadorEnSeccion {playerid} = 1;

				SpawnPlayer(playerid),_OnPlayerSpawn(playerid);

				new playername[50 + MAX_PLAYER_NAME];

				switch (personaje)
				{
					case 1: alm(playername, user[playerid][jCuenta_1]);
					case 2: alm(playername, user[playerid][jCuenta_2]);
					case 3: alm(playername, user[playerid][jCuenta_3]);
				}
				accountSave(playerid);
				c_personajes++;
				save_stuff();
				return 1;
			}

			if (personaje != 0)
			{
				if (isnull(inputtext) || strlen(inputtext) > 20) return ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Introduce el nombre de tu personaje abajo:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido\ny no exceder los 20 caracteres.", "Crear", "Atrás");

				if (!IsValidRoleplayName(inputtext)) return ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Error: Usaste un nombre incorrecto.\n\nIntroduce el nombre de tu personaje abajo:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido.", "Crear", "Atrás");
				yield 1;
				if (!characterCheck(inputtext))
				{
					switch (personaje)
					{
					    case 1: alm(user[playerid][jCuenta_1], inputtext);
					    case 2: alm(user[playerid][jCuenta_2], inputtext);
					    case 3: alm(user[playerid][jCuenta_3], inputtext);
					}
					format(string, sizeof(string), "Creaste con éxito el personaje\n - %s\n\nContinua para la configuración del mismo.", inputtext);
					ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_MSGBOX, "Crear personaje", string, ">>", "");

					SetPVarInt(playerid, "d_configs", 1);
				}
				else
				{
					ExPlayerDialog(playerid, crear_personaje, DIALOG_STYLE_INPUT, "Crear personaje", "Error: Nombre en uso.\n\nIntroduce el nombre de tu personaje abajo:\n\nImportante: El nombre debe ser en el formato Nombre_Apellido.", "Crear", "Atrás");
				}
			}
			else
			{
			     _Expulsar(playerid, 1, "Error de personaje, contacte a bish0p");
			}
		}
		case D_Anuncios:
		{
		    if (!response) return 1;
		    
		    new
				ID = listitem,
				StrPVar[40]
			;
			Formato(StrPVar,"es_anuncie%d",ID);
			new
				i = GetPVarInt(playerid,StrPVar),
				_dialog1[3000],
				_dialog2[300]
			;

			format(_dialog2, sizeof(_dialog2), "{00D900}* ANUNCIO %d *\n\n", i*6+44); strcat(_dialog1, _dialog2);
			format(_dialog2, sizeof(_dialog2), "{DDCC72}Teléfono:{cccccc} %d.\n", ad_info[i][num_ad]); strcat(_dialog1, _dialog2);

			new stringx[128], mensaje[256];
			alm(mensaje, ad_info[i][texto_ad]);
	        if(strlen(mensaje) > 65)
			{
				new string2[128];
				format(string2,256,"{cccccc}... %s\n",mensaje[70]);
				strdel(mensaje,65,strlen(mensaje));
				format(stringx, sizeof(stringx), "{DDCC72}Mensaje:{cccccc} %s\n", mensaje);
	            strcat(_dialog1, stringx);
	            strcat(_dialog1, string2);
			}
			else if(strlen(mensaje) <= 65)
			{
				format(stringx, sizeof(stringx), "{DDCC72}Mensaje:{cccccc} %s\n", mensaje);
	            strcat(_dialog1, stringx);
			}
			format(_dialog2, sizeof(_dialog2), "{DDCC72}Publicado: {cccccc}hace %s.\n", Segundos_tiempo(ad_info[i][tiempo_ad])); strcat(_dialog1, _dialog2);

			if (user[playerid][jAdmin])
			{
				format(_dialog2, sizeof(_dialog2), "{DDCC72}Enviado por: {cccccc}%s.\n", ad_info[i][por_ad]); strcat(_dialog1, _dialog2);
			}
			ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "Anuncios", _dialog1, "Ok", "");
			SetPVarInt(playerid, "es_anuncie", -1);

		    return 1;
		}
		case D_AvisoMuerto:
		{
			if (response)
			{
				new
					Float: KcyoX,
					Float: KcyoY,
					Float: KcyoZ,
					location[MAX_ZONE_NAME]
				;
				GetPlayerPos(playerid, KcyoX, KcyoY, KcyoZ);
				Get2DZone(location, MAX_ZONE_NAME, KcyoX, KcyoY, KcyoZ);
				format(string, sizeof(string), "CENTRAL: Persona gravemente herida en %s. (/heridos)",location);
				_MensajeRfac(1, C_COLORRADIO, string);
				_MensajeRfac(5, C_COLORRADIO, string);
				ProxDetector(25.0, playerid, "[NPC] Alguien por allí llamó a los departamentos de emergencias al ver la situación.", 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA);
			}
			else
			{
				_Mensaje(playerid, 0, "0", "Decidiste no reportar el incidente.");
			}
		}
		case D_SEXO:
		{
			if (response)
			{
				user[playerid][jSexo] = 1;
				ExPlayerDialog(playerid, D_EDAD, DIALOG_STYLE_INPUT, "Edad:", "¿Qué edad tendra su personaje?", "Aceptar", "Atrás");
			}
			else
			{
				user[playerid][jSexo] = 2;
				ExPlayerDialog(playerid, D_EDAD, DIALOG_STYLE_INPUT, "Edad:", "¿Qué edad tendra su personaje?", "Aceptar", "Atrás");
			}
		}

		case D_EDAD:
		{
			if (!response) return ExPlayerDialog(playerid, D_SEXO, DIALOG_STYLE_MSGBOX, "Sexo:", "¿Cuál es el sexo de su personaje?", "Hombre", "Mujer");
			if (strval(inputtext) < 15 || strval(inputtext) > 85) return ExPlayerDialog(playerid, D_EDAD, DIALOG_STYLE_INPUT, "Edad:", "Mínima edad 15 - máxima 85:", "Aceptar", "Atrás");

			new
			    text_s[300],
				personaje = GetPVarInt(playerid, "crear_pj")
			;

			user[playerid][jEdad] = strval(inputtext);
			user[playerid][jCiudad] = 1;

			switch (personaje)
			{
			    case 1: format(text_s, sizeof(text_s), "- Nombre y apellido: %s\n- Edad: %d\n- Sexo: %s\n- Origen: Los Santos\n\nSi existen errores, pulse reiniciar", user[playerid][jCuenta_1], user[playerid][jEdad], user[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));
			    case 2: format(text_s, sizeof(text_s), "- Nombre y apellido: %s\n- Edad: %d\n- Sexo: %s\n- Origen: Los Santos\n\nSi existen errores, pulse reiniciar", user[playerid][jCuenta_2], user[playerid][jEdad], user[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));
			    case 3: format(text_s, sizeof(text_s), "- Nombre y apellido: %s\n- Edad: %d\n- Sexo: %s\n- Origen: Los Santos\n\nSi existen errores, pulse reiniciar", user[playerid][jCuenta_3], user[playerid][jEdad], user[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));

			}

			ExPlayerDialog(playerid, D_fin_regpj, DIALOG_STYLE_MSGBOX, "Confirmación:", text_s, ">>", "Reiniciar");

			return 1;
		}

		case D_fin_regpj:
		{
			if (!response) return ExPlayerDialog(playerid, D_SEXO, DIALOG_STYLE_MSGBOX, "Sexo:", "¿Cuál es el sexo de su personaje?", "Hombre", "Mujer");

			new personaje = GetPVarInt(playerid, "crear_pj");

			ResetPlayerMoney(playerid);
			CurrentMoney[playerid] = GetPVarInt(playerid, "Money");
			user[playerid][State] = 3;

			switch (personaje)
			{
			    case 1:{
					SetPlayerName(playerid, user[playerid][jCuenta_1]);
					alm(user[playerid][jNombrePJ], user[playerid][jCuenta_1]);
				}
			    case 2:{
					SetPlayerName(playerid, user[playerid][jCuenta_2]);
					alm(user[playerid][jNombrePJ], user[playerid][jCuenta_2]);
				}
			    case 3:{
					SetPlayerName(playerid, user[playerid][jCuenta_3]);
					alm(user[playerid][jNombrePJ], user[playerid][jCuenta_3]);
				}
			}
			new id = 1;
			user[playerid][jFuerza] = 50;
			user[playerid][jm_Derecha] = 80;
			user[playerid][jm_DerechaCant] = 1;
			PonerObjeto(playerid, 1, 80);
			user[playerid][jNivel] = 0, SetPlayerScore(playerid, 0);
			DarDineroGC(playerid, 500);
			set_pos(playerid, point_spawn[id][x_spawn], point_spawn[id][y_spawn], point_spawn[id][z_spawn], point_spawn[id][angle_spawn], 0, 0);
			user[playerid][j_uOOC] = 0;
			user[playerid][j_uSAN] = 0;
			registrando[playerid] = 1;
			user[playerid][jRegistrado] = 1;
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			if(user[playerid][jSexo] == 1) Skin_(playerid, 155);
			else if(user[playerid][jSexo] == 2) Skin_(playerid, 93);
			
			new
				year,
				month,
				day,
				hour,
				minute,
				second,
				code_1[128]
			;
			getdate(year, month, day);
			gettime(hour, minute, second);
			user[playerid][jMeses] = month, user[playerid][jDias] = day, user[playerid][jAnos] = year, user[playerid][jHoras] = hour, user[playerid][jMinutos] = minute;

			format(code_1, sizeof(code_1), "%02d de %s del %02d", day, GetMonth(month), year);
			user[playerid][pfechareg] = code_1;
			user[playerid][charOwner] = user[playerid][jSQLID];
			yield 1;

			charORMInit(playerid);
			new err = await orm_async_insert(charORM[playerid]);
			if(err != ERROR_OK){
				SendClientMessage(playerid, C_ROJO2, "Ocurrió un error al crear tu cuenta, contacta con administración.");
				wait_ms(1000);
				Kick(playerid);
				format(code_1, sizeof(code_1), "Ocurrió un error al crear el personaje %s del usuario %s (SQLID %d)", user[playerid][jNombrePJ], username[playerid], user[playerid][jSQLID]);
				return 1;
			}
			format(code_1, sizeof(code_1), "Se creo el personaje %s (SQLID %d) del usuario %s (SQLID %d)", user[playerid][jNombrePJ], user[playerid][charSQLID], username[playerid], user[playerid][jSQLID]);
			serverLogRegister(code_1, "account");
			accountSave(playerid);
			cmd_climpiar(playerid);
			format(string, sizeof(string), "Bienvenido %s, acabas de iniciar en %s.", nombre_pj(playerid), point_spawn[id][name_spawn]); Mensaje_(playerid, 0x7593F5FF, string);
			Mensaje_(playerid, 0x7593F5FF, "Utiliza /lugares para ayudarte a ubicar los puntos más importantes de Los Santos.");
			Mensaje_(playerid, 0x7593F5FF, "Comandos utiles: /climpiar, /toghud, /hud, /panel, /ayuda, en caso de alguna inquietud, escribe /duda.");
			OnPlayerChangeHud(playerid);
			SetPlayerColor(playerid, C_PLAYERBLANCO);
			return 1;
		}

		case D_TEST0:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 2, 1);
				case 1: _Pregunta(playerid, 2, 0);
				case 2: _Pregunta(playerid, 2, 1);
			}
		}
		case D_TEST1:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 3, 0);
				case 1: _Pregunta(playerid, 3, 1);
				case 2: _Pregunta(playerid, 3, 1);
			}
		}
		case D_TEST2:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 4, 1);
				case 1: _Pregunta(playerid, 4, 0);
				case 2: _Pregunta(playerid, 4, 1);
			}
		}
		case D_TEST3:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 5, 1);
				case 1: _Pregunta(playerid, 5, 0);
				case 2: _Pregunta(playerid, 5, 1);
			}
		}
		case D_TEST4:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 6, 0);
				case 1: _Pregunta(playerid, 6, 1);
				case 2: _Pregunta(playerid, 6, 1);
			}
		}
		case D_TEST5:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 7, 1);
				case 1: _Pregunta(playerid, 7, 1);
				case 2: _Pregunta(playerid, 7, 0);
			}
		}
		case D_TEST6:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 8, 1);
				case 1: _Pregunta(playerid, 8, 0);
				case 2: _Pregunta(playerid, 8, 1);
			}
		}
		case D_TEST7:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 9, 1);
				case 1: _Pregunta(playerid, 9, 1);
				case 2: _Pregunta(playerid, 9, 0);
			}
		}
		case D_TEST8:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 10, 0);
				case 1: _Pregunta(playerid, 10, 1);
				case 2: _Pregunta(playerid, 10, 1);
			}
		}
		case D_TEST9:
		{
			if (!response) return _Expulsar(playerid, 1, "Cancelar test de rol");
			switch(listitem)
			{
				case 0: _Pregunta(playerid, 11, 1);
				case 1: _Pregunta(playerid, 11, 1);
				case 2: _Pregunta(playerid, 11, 0);
			}
		}
		case DialogLicense:
		{
			TogglePlayerControllable(playerid, true);
			//user[playerid][pFreezed] = 0;
			SetCameraBehindPlayer(playerid);

			if (!response) return 1;

			new itemid = user[playerid][Type] - 1;

			static const licensesPrice[3] = {800, 1900, 3000};

			if (ComprobarDineroJ(playerid) < licensesPrice[itemid])
			{
				format(string, sizeof(string), "No tienes suficiente dinero ($%d)", licensesPrice[itemid]);
				_Mensaje(playerid, 4, "b0b0b0", string);
				return 1;
			}

			DarDineroGC(playerid, -licensesPrice[itemid]);
			d_estado += licensesPrice[itemid];

			user[playerid][Started] = true;
			user[playerid][Checkpoint] = 1;
			Mensaje_(playerid, 0xA9C4E4FF, "Comienza tu examen, sigue los diversos puntos de control.");

			new cpID = user[playerid][Checkpoint];

			switch(user[playerid][Type])
			{
				case EXAM_TYPE_VEHICLES:
				{
					user[playerid][Vehicle] = CreateVehicle(405, VehiclesCheckpoints[0][0], VehiclesCheckpoints[0][1], VehiclesCheckpoints[0][2], 0.0, -1, -1, -1, 0);
					SetPlayerRaceCheckpoint(playerid, 0, VehiclesCheckpoints[cpID][0], VehiclesCheckpoints[cpID][1], VehiclesCheckpoints[cpID][2], VehiclesCheckpoints[2][0], VehiclesCheckpoints[2][1], VehiclesCheckpoints[2][2], 3.0);
				}
				case EXAM_TYPE_BOATS:
				{
					user[playerid][Vehicle] = CreateVehicle(472, BoatCheckpoints[0][0], BoatCheckpoints[0][1], BoatCheckpoints[0][2], -160, -1, -1, -1, 0);
					SetPlayerRaceCheckpoint(playerid, 0, BoatCheckpoints[cpID][0], BoatCheckpoints[cpID][1], BoatCheckpoints[cpID][2], BoatCheckpoints[2][0], BoatCheckpoints[2][1], BoatCheckpoints[2][2], 3.0);
				}
				case EXAM_TYPE_PLANES:
				{
					user[playerid][Vehicle] = CreateVehicle(593, PlaneCheckpoints[0][0], PlaneCheckpoints[0][1], PlaneCheckpoints[0][2], 90, -1, -1, -1, 0);
					SetPlayerRaceCheckpoint(playerid, 3, PlaneCheckpoints[cpID][0], PlaneCheckpoints[cpID][1], PlaneCheckpoints[cpID][2], PlaneCheckpoints[2][0], PlaneCheckpoints[2][1], PlaneCheckpoints[2][2], 3.0);
				}
				default: return 1;
			}

			new vehicleid = user[playerid][Vehicle];

			SetVehicleParamsCarWindows(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON);
			SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
			PutPlayerInVehicle(playerid, vehicleid, 0);

			veh_gasolina[vehicleid] = 200;
			SetExVehicleHealth(vehicleid, 1000.0);

			user[playerid][Checkpoint]++;

			SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
			accion_rol(playerid, 0, "enciende el motor del vehículo.");
			//Iter_Add(Vehicles, vehicleid);
		}
		case D_Cuotas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new neg = user[playerid][jNegocioKey];
						if(user[playerid][jNegocioKey] == -1) return _Mensaje(playerid, 0, "0", "ERROR: Usted no posee un negocio en ésta ranura.");
						if(i_Negocio[neg][nCuotas] == 0) return _Mensaje(playerid, 0, "0", "Usted no posee ninguna cuota.");
						if(RevisarDinero(playerid, i_Negocio[neg][nCuotas]))
						{
							format(string, sizeof(string), "Pagaste $%d, tu negocio está libre de cuotas!", i_Negocio[neg][nCuotas]);
							_Mensaje(playerid, 4, "33CCFF", string);
							DarDineroGC(playerid, -i_Negocio[neg][nCuotas]);
							d_estado += i_Negocio[neg][nCuotas];
							i_Negocio[neg][nCuotas] = 0;
							i_Negocio[neg][nSeguro] = 1;
							save_Negocio(neg);
							return 1;
						}
					}
					case 1:
					{
						new neg2 = user[playerid][jNegocioKey2];
						if(user[playerid][jNegocioKey2] == -1) return _Mensaje(playerid, 0, "0", "ERROR: Usted no posee un negocio en ésta ranura (2).");
						if(i_Negocio[neg2][nCuotas] == 0) return _Mensaje(playerid, 0, "0", "Usted no posee ninguna cuota.");
						if(RevisarDinero(playerid, i_Negocio[neg2][nCuotas]))
						{
							format(string, sizeof(string), "Pagaste $%d, tu negocio está libre de cuotas!", i_Negocio[neg2][nCuotas]);
							_Mensaje(playerid, 4, "33CCFF", string);
							DarDineroGC(playerid, -i_Negocio[neg2][nCuotas]);
							d_estado += i_Negocio[neg2][nCuotas];
							i_Negocio[neg2][nCuotas] = 0;
							i_Negocio[neg2][nSeguro] = 1;
							save_Negocio(neg2);
							return 1;
						}
					}
				}
			}
		}
		case D_CUENTA:
			if(response) switch(listitem)
			{
				case 0: _panelJ(playerid, playerid);
				case 1: _panelC(playerid, playerid);
				case 2: _panelN(playerid, playerid);
				case 3: cmd_coches(playerid);
				case 4: cmd_coches2(playerid);
                case 5: cmd_panel(playerid);
            }
		case D_CUENTA3:
		{
			if(response)
			{
				if(!strcmp(user[playerid][jClave], inputtext))
				{
					ExPlayerDialog(playerid, D_CUENTA6, DIALOG_STYLE_PASSWORD, "{D6E1EB}Nueva contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya la habrá cambiado.", "Cambiar", "Atrás");
				}
				else
				{
					ExPlayerDialog(playerid, D_CUENTA3, DIALOG_STYLE_PASSWORD, "{D6E1EB}Confirmación", "{F0F0F0}Ingrese su contraseña actual", "Confirmar", "Volver");
					_Mensaje(playerid, 0, "0", "La contraseña actual no coincide con la que ingresó, intentelo de nuevo.");
				}
			}
			else cmd_panel(playerid);
		}
		case D_CUENTA4:
		{
			if(!response) { user[playerid][jSexo] = 2; }
			else { user[playerid][jSexo] = 1; }
			new MsgDialogSexo[150],sexo[18];
			switch(user[playerid][jSexo])
			{
				case 1: sexo = "hombre";
				case 2: sexo = "mujer";
			}
			format(MsgDialogSexo, sizeof(MsgDialogSexo), "Nuevo sexo de su personaje es: %s.", sexo);
			_Mensaje(playerid, 2, "0", MsgDialogSexo);
			cmd_panel(playerid);
			characterSave(playerid);
			return 1;
		}
		case D_CUENTA5:
		{
			if(response == 1)
			{
				if(strval(inputtext) >= 15 && strval(inputtext) <= 85)
				{
					user[playerid][jEdad] = strval(inputtext);
					new MsgDialogEdad[150];
					format(MsgDialogEdad, sizeof(MsgDialogEdad), "Nueva edad de su personaje: %i.", user[playerid][jEdad]);
					_Mensaje(playerid, 2, "0", MsgDialogEdad);
					cmd_panel(playerid);
					characterSave(playerid);
				}
				else
				{
					_Mensaje(playerid, 5, "0", "La edad tiene que estar comprendida entre 15 y 85 años.");
					ExPlayerDialog(playerid, D_CUENTA5, DIALOG_STYLE_INPUT, "{D6E1EB}Edad", "{F0F0F0}Reintente ingresar una edad válida para su personaje", "Cambiar", "Volver");
				}
			} else cmd_panel(playerid);
		}
		case D_CUENTA6:
		{
			if(strlen(inputtext) >= 18) { _Mensaje(playerid, 0, "0", "ERROR: No puedes cambiar una contraseña a más de 18 carácteres."); return 1; }
			else
			{
				if(strlen(inputtext) >= 1)
				{
					if(!response)
					{
						_Mensaje(playerid, 1, "0", "No has cambiado tu contraseña.");
					}
					else
					{
						yield 1;
						await_str(user[playerid][jClave]) bcrypt_ahash(playerid, inputtext);
						format(string, sizeof(string), "Cambiaste tu contraseña satisfactoriamente. Cual es: {90C3D4}%s", inputtext);
						_Mensaje(playerid, 1, "0", string);
						accountSave(playerid);

						cmd_panel(playerid);
					}
				} else _Mensaje(playerid, 1, "0", "No has cambiado tu contraseña.");
			}
		}
		case D_Caja:
		{
		    if(!response) return 1;
		    new i = listitem;
		    if (i >= 0 && i <= 9)
		    {
		        S_caja(playerid, i);
			}
			else if (i == 10) return 1;
			else if (i == 11) G_caja(playerid);
		}
		case D_INVENTARIO:
		{
		    if(!response) return 1;
			new i = listitem;
			if(i >= 0 && i <= 9) { S_Bol(playerid, i); }
			else if(i == 10) return 1;
			else if(i == 11) G_Bol(playerid, 1);
			else if(i == 12) G_Bol(playerid, 2);
			else if(i == 13) cmd_arma(playerid, "tomar");
		}
		case D_CINTURON:
		{
		    if(!response) return 1;
			new i = listitem;
			if(i >= 0 && i <= 7) { S_Cinturon(playerid, i); }
			else if(i == 8) return 1;
			else if(i == 9) G_Cinturon(playerid, 1);
			else if(i == 10) G_Cinturon(playerid, 2);
			else if(i == 11) C_Mano(playerid);
		}
		case D_TELEFONO:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú telefónico.");
			switch(listitem)
			{
				case 0:
				{
					if (!user[playerid][j_uTelefono]) { user[playerid][j_uTelefono] = 1, Mensaje_(playerid, -1, "Teléfono {ff0000}apagado{ffffff}, no recibirás llamadas ni mensajes.");
					} else user[playerid][j_uTelefono] = 0, Mensaje_(playerid, -1, "Teléfono {00c200}encendido{ffffff}, ahora podrás recibir llamadas y mensajes.");
					cmd_telefono(playerid, "\1");
				}
				case 1: ExPlayerDialog(playerid, D_TELEFONO2, DIALOG_STYLE_LIST, "{D6E1EB}Llamadas", "Llamar\nRegistros\n- {537CDB}Consultar saldo", "Seleccionar", "Inicio");
				//case 2: _Agenda(playerid);
				case 2: ExPlayerDialog(playerid, D_TELEFONO4, DIALOG_STYLE_LIST, "{D6E1EB}Mensajes", "Enviar mensaje\nBuzón de mensajes", "Seleccionar", "Inicio");
				case 3: cmd_musica(playerid);
				case 4: cmd_transferir(playerid, "\1");
				case 5: cmd_veranuncios(playerid);
			}
		}
		case D_TELEFONO2:
		{
			if (!response) return cmd_telefono(playerid, "\1");
			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_TELEFONO3, DIALOG_STYLE_INPUT, "{D6E1EB}Llamar", "Introduce el numero:", "Llamar", "Inicio");
				case 1:
				{
					new dialog[1024];
					for(new x = 0; x < 20; x++)
					{
				    	strcat(dialog, llamada_registro[playerid][x]);
    				}
    				ExPlayerDialog(playerid, D_TELEFONO9, DIALOG_STYLE_LIST, "{D6E1EB}Registros", dialog, "Seleccionar", "Inicio");
					return 1;
				}
				case 2: cmd_saldo(playerid);
			}
		}
		case D_TELEFONO9:
		{
			if (!response) { DeletePVar(playerid, "confirmar_rl"); return cmd_telefono(playerid, "\1"); }
			if (GetPVarInt(playerid, "confirmar_rl") == 0)
			{
				if (llamada_2registro[playerid][listitem] == 0) return _Mensaje(playerid, 0, "0", "Ese registro está vacío.");
				SetPVarInt(playerid, "listem_rl", listitem);
				SetPVarInt(playerid, "confirmar_rl", 1);
				format(string, sizeof(string), "%s\n   {60cd00}-{ffffff} ¿Deseas borrar el registro?\n", llamada_registro[playerid][listitem]);
				ExPlayerDialog(playerid, D_TELEFONO9, DIALOG_STYLE_MSGBOX, "{D6E1EB}Registros", string, "Aceptar", "Inicio");
			}
			else
			{
				new x_id = GetPVarInt(playerid, "listem_rl");
				Mensaje_(playerid, 0xb0b0b0ff, "Registro eliminado.");
				alm(llamada_registro[playerid][x_id], "-\n");
				llamada_2registro[playerid][x_id] = 0;
				DeletePVar(playerid, "confirmar_rl");
				DeletePVar(playerid, "listem_rl");
				cmd_telefono(playerid, "\1");
			}
			return 1;
		}
		case D_TELEFONO3:
		{
			if (!response) return cmd_telefono(playerid, "\1");
			if (isnull(inputtext) || !IsNumeric(inputtext)) return ExPlayerDialog(playerid, D_TELEFONO3, DIALOG_STYLE_INPUT, "{D6E1EB}Llamar", "Introduce el numero:", "Llamar", "Inicio");
			format(string, 16, "%d", strval(inputtext));
			cmd_llamar(playerid, string);
			return 1;
		}
		case D_TELEFONO4:
		{
			if (!response) return cmd_telefono(playerid, "\1");
			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_TELEFONO5, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el numero:", "Siguiente", "Inicio");
				case 1: _Mensaje(playerid, 5, "0", "en construcción.");
			}
		}
		case D_TELEFONO5:
		{
			if (!response) return cmd_telefono(playerid, "\1");
			if (isnull(inputtext) || !IsNumeric(inputtext)) return ExPlayerDialog(playerid, D_TELEFONO5, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el numero:", "Siguiente", "Inicio");
			format(string, 16, "%d", strval(inputtext));
			NumeroMensaje[playerid] = strval(inputtext);
			ExPlayerDialog(playerid, D_TELEFONO6, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el texto que vas a enviar:", "Enviar", "Inicio");
			return 1;
		}
		case D_TELEFONO6:
		{
			if (!response) return cmd_telefono(playerid, "\1");
			if (isnull(inputtext)) return ExPlayerDialog(playerid, D_TELEFONO6, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el texto que vas a enviar:", "Enviar", "Inicio");
			new phonenumb = NumeroMensaje[playerid], text[256];
			alm(text, inputtext);
			if (user[playerid][jSaldo] < 2) return _Mensaje(playerid, 0, "0", "No posees saldo suficiente para enviar un mensaje.");
			foreach(new i: Player)
			{
	        	if (user[i][jTelefono] == phonenumb && phonenumb != 0)
				{
	            	new playerid2 = i;
	            	if (IsPlayerConnected(playerid2))
					{
						new contacto = -1;
						for (new e = 0; e < 20; e++)
						{
							if(user[playerid2][jContacto][e] == user[playerid][jTelefono]) contacto = e;
						}
	                    if (user[playerid2][j_uTelefono] > 0) return _Mensaje(playerid, 0, "0", "El teléfono seleccionado se encuentra apagado.");
						if (contacto == -1)
						{
							format(string, sizeof(string), "[SMS: %d]: %s", user[playerid][jTelefono], text);
							_Mensaje(playerid2, 4, "FFEA5F", string);
						}
						else
						{
							format(string, sizeof(string), "[SMS: %s]: %s", verificar_c(playerid2, contacto), text);
							_Mensaje(playerid2, 4, "FFEA5F", string);
						}
	                    format(string, sizeof(string), "SMS al %d: %s", phonenumb, text);
                   		_Mensaje(playerid, 4, "b0b0b0", string);
						PlayerAudio(playerid, 1053, 10.0);
						PlayerAudio(playerid2, 20804, 10.0);
						textgame_player(playerid, "~r~$-1~w~ Saldo", 5000, 1);
	                    user[playerid][jSaldo] -= 1;
	        			NumeroMensaje[playerid] = -1;
	                    return 1;
	                }
	            }
        	}
    		_Mensaje(playerid, 0, "0", "El número que ha marcado no existe o no está disponible.");
 		}
		case D_TELEFONO7:
		{
			if (!response) { _Mensaje(playerid, 4, "E0ECED", "Saliste del menú de música."); return cmd_telefono(playerid, "\1"); }

			switch (listitem)
			{
				case 0:
				{
					StopAudioStreamForPlayer(playerid);
					_Mensaje(playerid, 4, "E0ECED", "Paraste la música.");
					MusicaEsc[playerid] = 0;
				}
				case 1: _MusicTlf(playerid, "http://54house.stream-balancer.de:80", "Escuchando: 54 House");
				case 2: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147", "Escuchando: Top Latino");
				case 3: _MusicTlf(playerid, "http://148.251.91.15:7004", "Escuchando: Dubbase.FM");
				case 4: _MusicTlf(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u", "Escuchando: Reggae Hits");
				case 5: _MusicTlf(playerid, "http://216.230.231.122:8000/MP3128", "Escuchando: MBradio.FM");
				case 6: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145", "Escuchando: Classical Weta 90.9FM");
				case 7: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858", "Escuchando: LOVE TIMES");
				case 8: _MusicTlf(playerid, "http://173.244.215.163:8380", "Escuchando: Soft Rock Cafe");
				case 9: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421", "Escuchando: HardRadio.com");
				case 10: _MusicTlf(playerid, "http://64.202.98.133:2010", "Escuchando: Aural Moon");
				case 11: _MusicTlf(playerid, "http://50.117.115.211:80", "Escuchando: Idobi Radio");
				case 12: _MusicTlf(playerid, "http://108.61.30.179:4010", "Escuchando: www.Hot108.com");
				case 13: _MusicTlf(playerid, "http://50.7.64.226:80/frisky_mp3_hi", "Escuchando: Sensacion Peru");
				case 14: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543", "Escuchando: DEEGAY RADIO");
				case 15: _MusicTlf(playerid, "http://62.210.209.179:8030/stream", "Escuchando: PaganMetalRadio");
				case 16: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323", "Escuchando: PulsRadio TRANCE");
				case 17: _MusicTlf(playerid, "http://somafm.com/tags.pls", "Escuchando: The Trip");
				case 18: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187", "Parazitii Club");
				case 19: _MusicTlf(playerid, "http://s3.voscast.com:8002/;.m3u", "Escuchando: Amor latino");
				case 20: _MusicTlf(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u", "Hotmixradio");
				case 21: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562", "RadioHot69");
				case 22: _MusicTlf(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel", "Radio Hunter");
				case 23: _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126", "92.5 The River");
				case 24: ExPlayerDialog(playerid, D_TELEFONO8, DIALOG_STYLE_INPUT, "Url - Internet", "Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "<<");
			}
		}
		case D_TELEFONO8:
		{
			if(!response) cmd_telefono(playerid, "\1");

			if(isnull(inputtext)) return _Mensaje(playerid, 0, "0", "No has introducido ningún URL.");
			if(strlen(inputtext))
			{
				if(user[playerid][j_uAudio] == 1) return Mensaje_(playerid, -1, "Posees los audios desactivados, activa desde /panel.");
				_MusicTlf(playerid, inputtext, "Url - Internet");
			}
		}
		case D_AYUDA:
		{
			if(response) Menu_ayuda(playerid, 0);
			else _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de ayuda.");
		}
		case D_AYUDA2:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: Menu_ayuda(playerid, 1);
				case 1: Menu_ayuda(playerid, 2);
				case 2: Menu_ayuda(playerid, 3);
				case 3: Menu_ayuda(playerid, 4);
				case 4: Menu_ayuda(playerid, 5);
				case 5: Menu_ayuda(playerid, 6);
				case 6: Menu_ayuda(playerid, 7);
				case 7: Menu_ayuda(playerid, 8);
				case 8: Menu_ayuda(playerid, 9);
				case 9: Menu_ayuda(playerid, 10);
				case 10: Menu_ayuda(playerid, 11);
			}
		}
		case D_BANCO:
		{
			if (response)
			{
				if (listitem == 0)//abrir cuenta
				{
					if (user[playerid][jDebito] != -1) return _Mensaje(playerid, 5, "0", "Ya posees una tarjeta de débito.");
					new clave = Random(1000, 9999);
					user[playerid][jDebito] = clave;
					format(string, sizeof(string), "Felicidades! has registrado una cuenta bancaria cuya clave es %d.", clave);
					_Mensaje(playerid, 1, "0", string);
					return 1;
				}
				else if (listitem == 1)//tarjeta
				{
					if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "0", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if (user[playerid][jm_Derecha] == 0)
					{
						user[playerid][jm_Derecha] = 84;
						user[playerid][jm_DerechaCant] = 1;
						PonerObjeto(playerid, 1, 84);
					}
					else if (user[playerid][jm_Derecha] != 0)
					{
						user[playerid][jm_Izquierda] = 84;
						user[playerid][jm_IzquierdaCant] = 1;
						PonerObjeto(playerid, 2, 84);
					}
					DarDineroGC(playerid, -15);
					d_estado += 15;
					_Mensaje(playerid, 1, "0", "Adquiriste una tarjeta de débito, registra una cuenta bancaria si no lo has hecho.");
					return 1;
				}
				else if (listitem == 2) ExPlayerDialog(playerid, D_BANCOR, DIALOG_STYLE_INPUT, "{D6E1EB}Retirar", "{FFFFFF}Ingrese la cantidad de dinero a retirar.", "Retirar", "Cancelar");
				else if (listitem == 3) ExPlayerDialog(playerid, D_BANCOD, DIALOG_STYLE_INPUT, "{D6E1EB}Depositar", "{FFFFFF}Ingrese la cantidad de dinero a depositar.", "Depositar", "Cancelar");
				else if (listitem == 4)
				{
					if(user[playerid][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes transferir con menos de dos horas de juego.");
					if(user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
					ExPlayerDialog(playerid, D_BANCOT, DIALOG_STYLE_INPUT, "Transferencia", "Ingrese la ID del jugador", "Siguiente", "Cancelar");
				}
				else if (listitem == 5)
				{
				    if (p_bank[playerid][1] != -1)
					{
						new coordsstring2[300];
						format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Dinero de %s ({00c200}%d{D6E1EB})", nombre_pj(p_bank[playerid][1]), user[p_bank[playerid][1]][jBanco]);
						ExPlayerDialog(playerid, d_permisosbank, DIALOG_STYLE_INPUT, coordsstring2, "{FFFFFF}Escribe la cantidad de dinero que deseas depositar o retirar\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Depositar", "Retirar");
					}
				}
			}
			return 1;
		}

		case d_permisosbank:
		{
			if (response) //depositar
			{
				new amount = strval(inputtext), cid = p_bank[playerid][1];
				if (cid == -1) return 1;
				if(!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
				if(amount < 1) return _Mensaje(playerid, 0, "22", "No puedes depositar menos de un dolar.");
				if(ComprobarDineroJ(playerid) >= amount)
				{
					user[cid][jBanco] += amount;
					DarDineroGC(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en la cuenta de %s.", amount, nombre_pj(cid));
					_Mensaje(playerid, 4, "33CCFF", string);
					format(string, sizeof(string), "[SMS: BANK-LS]: %s ha depositado %d$ en tu cuenta bancaria.", nombre_pj(playerid), amount);
					SendClientMessage(cid, 0xFFEA5FFF, string);
					format(string, sizeof(string), "Registros: %s deposito $%d en la cuenta de %s.", nombre_pj(playerid), amount, nombre_pj(cid));
					Log("Registros/permisosbank.log", string);
				} else return _Mensaje(playerid, 0, "45", "No tienes suficiente dinero para depositar.");
            }
			else // retirar
			{
				new amount = strval(inputtext), cid = p_bank[playerid][1];
				if (cid == -1) return 1;
				if(!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
				if(amount < 1) return _Mensaje(playerid, 0, "24", "No puedes retirar menos de un dolar.");
				if(user[cid][jBanco] >= amount)
				{
					user[cid][jBanco] -= amount;
					DarDineroGC(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de la cuenta de %s.", amount, nombre_pj(cid));
					_Mensaje(playerid, 4, "33CCFF", string);

					format(string, sizeof(string), "[SMS: BANK-LS]: %s ha retirado %d$ de tu cuenta bancaria.", nombre_pj(playerid), amount);
					SendClientMessage(cid, 0xFFEA5FFF, string);
					save_Casa(cid);
					format(string, sizeof(string), "Registros: %s retiró $%d de la cuenta de %s.", nombre_pj(playerid), amount, nombre_pj(cid));
					Log("Registros/permisosbank.log", string);
				} else return _Mensaje(playerid, 0, "44", "No hay suficiente dinero en la cuenta bancaria para retirar.");
			}
		}
		case D_BANCOR:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			new money = strval(inputtext);
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "71", "La cantidad tiene que ser números.");
			if (money > user[playerid][jBanco] || money < 1) return _Mensaje(playerid, 0, "72", "Cantidad de dinero incorrecta.");
			if (money < 0) return _Mensaje(playerid, 0, "73", "ERROR: No puedes retirar menos de 0.");
			Ganancia(playerid, money);
			user[playerid][jBanco] -= money;
			format(string, sizeof(string), "Retiraste de tu cuenta $%d, total de dinero $%d.", money, user[playerid][jBanco]);
			_Mensaje(playerid, 4, "FAE800", string);
			format(string, sizeof(string), "Registros: %s retiro $%d.", nombre_pj(playerid), money);
			Log("Registros/RetirarBanco.log", string);
			return 1;
		}
		case D_BANCOD:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			new money = strval(inputtext);
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "71", "La cantidad tiene que ser números.");
			if (money > ComprobarDineroJ(playerid) || money < 1) return _Mensaje(playerid, 0, "72", "Cantidad de dinero incorrecta.");
			if (money < 0) return _Mensaje(playerid, 0, "73", "ERROR: No puedes depositar menos de 0.");
			Compra(playerid, money);
			user[playerid][jBanco] += money;
			format(string, sizeof(string), "Depositaste a tu cuenta $%d, total de dinero $%d.", money, user[playerid][jBanco]);
			_Mensaje(playerid, 4, "D7D7D4", string);
			format(string, sizeof(string), "Registros: %s depósito $%d.", nombre_pj(playerid), money);
			Log("Registros/DepositarBanco.log", string);
			return 1;
		}
		case D_BANCOT:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			new idjugador = strval(inputtext);
			if (playerid == idjugador) return _Mensaje(playerid, 0, "74", "ERROR: No puedes transferirte dinero a ti mismo.");
			if (!IsPlayerConnected(idjugador)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
			SetPVarInt(playerid, "rdinero", idjugador);
			ExPlayerDialog(playerid, D_BANCOT2, DIALOG_STYLE_INPUT, "Transferencia", "Ingrese la cantidad de dinero a transferir.", "Transferir", "Cancelar");
			return 1;
		}
		case D_BANCOT2:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			new playerid2 = GetPVarInt(playerid, "rdinero"), money = strval(inputtext);
			if (money > user[playerid][jBanco]) return _Mensaje(playerid, 0, "77", "Cantidad incorrecta.");
			if (money < 999) return _Mensaje(playerid, 0, "78", "ERROR: No puedes transferir menos de 1000$.");
			DeletePVar(playerid, "rdinero");
			user[playerid][jBanco] -= money;
			user[playerid2][jBanco] += money;
			format(string, sizeof(string), "Enviaste la cantidad de $%d a %s.", money, nombre_pj(playerid2, 0));
			_Mensaje(playerid, 4, "FAE800", string);
			format(string, sizeof(string), "Recibiste la cantidad de $%d por %s", money, nombre_pj(playerid));
			_Mensaje(playerid2, 4, "D7D7D4", string);
			if(!strcmp(user[playerid][jIP], user[playerid2][jIP], false) && user[playerid][jMulticuenta] == 0 && user[playerid2][jMulticuenta] == 0)
			{
				new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
				format(stringlog, sizeof(stringlog), "[Atención]{FFFFFF} %s hizo una transferencia de $%d a %s, posibles multicuentas [IP: %s]", nombre_pj(playerid), money, nombre_pj(playerid2), ipc);
				MensajeAdmin(stringlog);
				format(stringlog, sizeof(stringlog), "Registros: %s transfiere $%d a %s. [IP: %s]", nombre_pj(playerid), money, nombre_pj(playerid2), ipc);
				Log("Registros/multicuentas.log", stringlog);
			}
			else
			{
				format(string, sizeof(string), "[Atención]{FFFFFF} %s hizo una transferencia de $%d a %s", nombre_pj(playerid), money, nombre_pj(playerid2));
				MensajeAdmin(string);
				format(string, sizeof(string), "Registros: %s transfiere $%d a %s.", nombre_pj(playerid), money, nombre_pj(playerid2));
				Log("Registros/TransferirBanco.log", string);
			}
			return 1;
		}
		case D_gArmario:
			if(response) switch(listitem)
			{
				case 0:
				{
					new g_id = DentroGarage[playerid];
					if (DentroGarage[playerid] == -1) return Mensaje_(playerid, -1, "ERROR");
					if (en_pos(playerid, 3.0, i_Garaje[g_id][gArmarioPos][0], i_Garaje[g_id][gArmarioPos][1], i_Garaje[g_id][gArmarioPos][2]))
					{
						ver_gArmario(playerid, g_id);
					} else return _Mensaje(playerid, 0, "0", "No estás en el armario o no lo has configurado.");
				}
				case 1:
				{
				    new g_id = DentroGarage[playerid];
					if (DentroGarage[playerid] == -1) return Mensaje_(playerid, -1, "ERROR");
					GetPlayerPos(playerid, i_Garaje[g_id][gArmarioPos][0], i_Garaje[g_id][gArmarioPos][1], i_Garaje[g_id][gArmarioPos][2]);
					_Mensaje(playerid, 4, "33CCFF", "Configuraste la posición del armario. Recuerda donde está.");
					save_Casa(user[playerid][jCasaKey]);
				}
				case 2: cmd_muebles(playerid);
			}
		case D_gArmario2:
		{
			if(!response) return 1;
			new i = listitem, g_id = DentroGarage[playerid];
			if(i >= 0 && i <= 14)
			{
				S_gArmario(playerid, g_id, i);
				save_Garaje(g_id);
			}
			else if(i == 15) return 1;
			else if(i == 16)
			{
				G_gArmario(playerid, g_id, 1);
				save_Garaje(g_id);
			}
			else if(i == 17)
			{
				G_gArmario(playerid, g_id, 2);
				save_Garaje(g_id);
			}
		}
		case D_Carmario:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: cmd_set_player_1999(playerid);
				case 1: ver_Armario(playerid, DentroCasa[playerid]);
			}
		}
		case d_Almacen:
		{
			if(!response) return 1;
			new i = listitem, id = DentroAlmacen[playerid];
			if(i == 0)
			{
				g_Almacen(playerid, id+1, 1);
			}
			else if(i == 1)
			{
				g_Almacen(playerid, id+1, 2);
			}
			else if(i == 2) return 1;
			else if(i >= 3 && i <= 70)
			{
				s_Almacen(playerid, id+1, i-3);
			}
		}
		case d_alquiler:
		{
			if(!response) return 1;
			new i = listitem, cid = DentroCasa[playerid];
			if(i >= 0 && i <= 6)
			{
				alqS_Armario(playerid, cid, i);
			}
			else if(i == 7) return 1;
			else if(i == 8)
			{
				alqG_Armario(playerid, cid, 1);
			}
			else if(i == 9)
			{
				alqG_Armario(playerid, cid, 2);
			}
		}
		case D_Carmario2:
		{
			if(!response) return 1;
			new i = listitem, cid = DentroCasa[playerid];
			if(i >= 0 && i <= 14)
			{
				S_Armario(playerid, cid, i);
				save_Casa(cid);
			}
			else if(i == 15) return 1;
			else if(i == 16)
			{
				G_Armario(playerid, cid, 1);
				save_Casa(cid);
			}
			else if(i == 17)
			{
				G_Armario(playerid, cid, 2);
				save_Casa(cid);
			}
		}
		case D_PDarmario:
		{
			if(!response) return 1;
			new i = listitem;
			if(i >= 0 && i <= 14)
			{
				S_Armario(playerid, EnCasaID[playerid], i);
				save_Casa(EnCasaID[playerid]);
			}
			else if(i == 16) return 1;
		}
		case D_PDgarmario:
		{
			if(!response) return 1;
			new i = listitem;
			if(i >= 0 && i <= 14)
			{
				S_gArmario(playerid, EnGarajeID[playerid], i);
				save_Casa(EnGarajeID[playerid]);
			}
			else if(i == 16) return 1;
		}
		case D_ArmarioN:
		{
			if(!response) return 1;
			new i = listitem, nid = DentroNegocio[playerid];
			if(i >= 0 && i <= 9)
			{
				S_nArmario(playerid, nid, i);
				save_Negocio(nid);
			}
			else if(i == 10) return 1;
			else if(i == 11)
			{
				G_nArmario(playerid, nid, 1);
				save_Negocio(nid);
			}
			else if(i == 12)
			{
				G_nArmario(playerid, nid, 2);
				save_Negocio(nid);
			}
		}
		case D_Farmario:
		{
			if(!response) return 1;
			new i = listitem;
			if(i >= 0 && i <= 11)
			{
				S_fArmario(playerid, user[playerid][jMiembroFam], i);
				ActualizarFamilia(user[playerid][jMiembroFam]);
			}
			else if(i == 12) return 1;
			else if(i == 13)
			{
				G_fArmario(playerid, user[playerid][jMiembroFam], 1);
				ActualizarFamilia(user[playerid][jMiembroFam]);
			}
			else if(i == 14)
			{
				G_fArmario(playerid, user[playerid][jMiembroFam], 2);
				ActualizarFamilia(user[playerid][jMiembroFam]);
			}
		}
		case D_cmdPanel2:
		{
			if(GetPVarInt(playerid, "change_pj") == 1)
			{
				if (!response)
				{
				    DeletePVar(playerid, "change_pj");
					SendClientMessage(playerid, 0xccccccff, "Cancelaste el cambio de personaje.");
					return 1;
				}
				user[playerid][jInterior] = GetPlayerInterior(playerid);
				user[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
				GetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
				characterSave(playerid);
				SetPVarInt(playerid, "Money", 0);
				ReiniciarDinero(playerid);
				format(string, sizeof(string), "[Atención]{FFFFFF} %s(%d) ha seleccionado cambiar personaje.", nombre_pj(playerid), playerid);
				MensajeAdmin(string);
				format(string, sizeof(string), "[SISTEMA] %s ha seleccionado cambiar personaje (/panel).", nombre_pj(playerid));
				ProxDetector(20.0, playerid, string, 0xFFDB42FF, 0xFFDB42FF, 0xFFDB42FF, 0xFFDB42FF, 0xFFDB42FF);
				_cIniciales(playerid, 2);
				format(string, sizeof(string), "Conectando_%d", playerid);
				SetPlayerName(playerid, string);
				SetPlayerScore(playerid, -1);
				cmd_climpiar(playerid);

				new query[96];
				mysql_format(mainDatabase, query, sizeof(query), "SELECT * FROM accounts WHERE SQLID = %d LIMIT 1", user[playerid][jSQLID]);
				user_clean(playerid);
				orm_destroy(accountORM[playerid]);
				yield 1;
				await mysql_aquery(mainDatabase, query);
				if(cache_num_rows())
					orm_apply_cache(accountORM[playerid], 0);
				else Kick(playerid);
				ver_personajes(playerid);
				time_change[playerid] = gettime();
				return 1;
			}
		}
		case D_cmdPanel:
		{
			if (!response) return SendClientMessage(playerid, 0xccccccff, "Cerraste el menú de configuración.");
			switch(listitem)
			{
				case 0: cmd_togmovil(playerid), cmd_panel(playerid);
				case 1: cmd_togmanos(playerid), cmd_panel(playerid);
				case 2: cmd_togmp(playerid), cmd_panel(playerid);
				case 3: cmd_togradio(playerid), cmd_panel(playerid);
				case 4: cmd_togmusic(playerid), cmd_panel(playerid);
				case 5: cmd_togsan(playerid), cmd_panel(playerid);
				case 6: cmd_togooc(playerid), cmd_panel(playerid);
				case 7: cmd_textdraw(playerid), cmd_panel(playerid);
				case 8:
				{
					if (!user[playerid][jPremium]) return _Mensaje(playerid, 0, "207", "No eres usuario premium."), cmd_panel(playerid);
					ExPlayerDialog(playerid, D_CUENTA5, DIALOG_STYLE_INPUT, "{D6E1EB}Edad", "{F0F0F0}Seleccione una nueva edad para su personaje", "Cambiar", "Volver");
				}
				case 9: ExPlayerDialog(playerid, D_CUENTA4, DIALOG_STYLE_MSGBOX, "{D6E1EB}Sexo", "{F0F0F0}¿Qué sexo desea para su personaje ahora?", "Hombre", "Mujer");
				case 10: cmd_panel(playerid);
				case 11: ExPlayerDialog(playerid, D_CUENTA3, DIALOG_STYLE_PASSWORD, "{D6E1EB}Confirmación", "{F0F0F0}Ingrese su contraseña actual\n", "Confirmar", "Volver");
				case 12:
				{
					if(!CheckTimer(360, time_change[playerid]))
					{
						SetPVarInt(playerid, "change_pj", 1);
						ExPlayerDialog(playerid, D_cmdPanel2, DIALOG_STYLE_MSGBOX, "{D6E1EB}Cambiar personaje", "{F0F0F0}¿Estás seguro que quieres cambiar de personaje?", "Sí", "<<");
					}
					else
					{
						format(string, 144, "Faltan %d segundos para poder cambiar de personaje.", CheckTimer(360, time_change[playerid]));
						Mensaje_(playerid, 0xccccccff, string);
					}
				}
			}
		}
		case D_TRABAJOS:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el gps de trabajos.");
			switch(listitem)
			{
				case 0: _MarcarPos(playerid, 2468.5474, -2116.8491, 13.4846, "El trabajo de carguero fue marcado en el radar.");
				case 1: _MarcarPos(playerid, 2080.4480,-2355.2971,13.5469, "El trabajo de carpintero fue marcado en el radar.");
				case 2: _MarcarPos(playerid, 8571.8350, 14494.7344, 5.7692, "El trabajo de pescador fue marcado en el radar.");
				case 3: _MarcarPos(playerid, -566.1776, -1496.1948, 9.4454, "El trabajo de leñador fue marcado en el radar.");
				case 4: _MarcarPos(playerid, -383.0549, -1438.9514, 26.3276, "El trabajo de granjero fue marcado en el radar.");
			}
		}
		case D_Heridos:
		{
			if(!response) return cmd_informes(playerid);
			new ID = listitem,StrPVar[40];
			Formato(StrPVar,"enfermo_%d",ID);
			new i = GetPVarInt(playerid,StrPVar);
			
			if (IsPlayerInAnyVehicle(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p, vehicleid))
					{
						new Float: xp, Float: yp, Float: zp;
						GetPlayerPos(i, xp, yp, zp);
						_MarcarPos(p, xp, yp, zp, "La persona selecciona ha sido marcada en tu radar.");
					}
				}
			}
			else
			{
				new Float: xp, Float: yp, Float: zp;
				GetPlayerPos(i, xp, yp, zp);
				_MarcarPos(playerid, xp, yp, zp, "La persona selecciona ha sido marcada en tu radar.");
			}
			return 1;
		}
		case D_robos:
		{
			if(!response) return cmd_informes(playerid);
			new ID = listitem,StrPVar[40];
			Formato(StrPVar,"enfermo2_%d",ID);
			new i = GetPVarInt(playerid,StrPVar);
			i_Negocio[i][_robado] = 0;
			format(string, sizeof(string), "CENTRAL: %s atendió al llamado del negocio %s.", nombre_pj(playerid, 0), i_Negocio[i][nNombre]);
			_MensajeRfac(1, C_COLORRADIO, string);

			if (IsPlayerInAnyVehicle(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p, vehicleid))
					{
						_MarcarPos(p, i_Negocio[i][nExteriorX],i_Negocio[i][nExteriorY],i_Negocio[i][nExteriorZ], "El negocio fue marcado en tu radar.");
					}
				}
			}
			else
			{
				_MarcarPos(playerid, i_Negocio[i][nExteriorX],i_Negocio[i][nExteriorY],i_Negocio[i][nExteriorZ], "El negocio fue marcado en tu radar.");
			}
			return 1;
		}
		case D_GPS:
		{
			if(response) switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_LUGARES, DIALOG_STYLE_LIST, "{D6E1EB}Locales", "{FFFFFF}24/7\nLocal de ropa\nRestaurante\nCluckin Bell\nPizzeria\nBurger Shot\nAmmu-Nation\nPeluquería\nSex Shop\nGasolinera\nTienda electrónica\nBar\nFerreteria\nAlhambra\nStrip club\nClub private\nTienda de empeño\nJoyería & relojes\nCafeterías", "Seleccionar", "Cancelar");
				case 1: cmd_trabajos(playerid);
				case 2: cmd_facciones(playerid);
				case 3: ExPlayerDialog(playerid, D_LUGARES_3, DIALOG_STYLE_LIST, "{D6E1EB}Concesionarias", " Motos\n Clase M\n Clase A\n Camionetas\n- Aviones y Helicópteros\n Clase B\n- Vehículos usados\n- Barcos y botes", "Seleccionar", "<<");
			}
		}
		case D_PuntosP:
		{
			if(response) switch(listitem)
			{
				case 0: _MarcarPos(playerid, 8470.9131, 14471.0557, 4.3955, "El punto de pesca fue marcado en el radar.");
				case 1: _MarcarPos(playerid, 8470.8008, 14507.8643, 4.4209, "El punto de pesca fue marcado en el radar.");
				case 2: _MarcarPos(playerid, 8465.4512, 14491.3350, 4.5447, "El punto de pesca fue marcado en el radar.");
				case 3: _MarcarPos(playerid, 8482.2891, 14495.5928, 4.6008, "El punto de pesca fue marcado en el radar.");
			}
		}
		case D_PUERTO:
			if(response) switch(listitem)
			{
				case 0:
				{
					if(ComprobarDineroJ(playerid) < 10) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 133;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 15;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 15;}
					Compra(playerid, 10);
					d_estado += 10;
					_Mensaje(playerid, 5, "0", "Compraste una lata de carnadas de 15 unidades.");
					return 1;
				}
				case 1:
				{
					if(ComprobarDineroJ(playerid) < 25) { _Mensaje(playerid, 0, "32", "No tienes suficiente dinero."); return 1; }
					new objeto = 85;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
					Compra(playerid, 25);
					d_estado += 25;
					_Mensaje(playerid, 5, "0", "Compraste una caña de pescar.");
					return 1;
				}
				case 2:
				{
					if (user[playerid][jPescados] > 10)
					{
						format(string, sizeof(string), "* Vendiste %d peces y sumaste $%i a tu bolsillo.", user[playerid][jPescados], user[playerid][jPescados]);
						_Mensaje(playerid, 4, "33CCFF", string);
						d_estado -= user[playerid][jPescados];
						DarDineroGC(playerid, user[playerid][jPescados]);
						user[playerid][jPescados] = 0;
						return 1;
					} else return _Mensaje(playerid, 0, "0", "ERROR: Mínimo a vender son diez peces.");
				}
			}
		case D_LUGARES:
		{
			if(response)
			{
				new Str[256],Str_[3000],i_;
				SetPVarInt(playerid,"GPS_TipoNEG",listitem+1);
				new TIPO = GetPVarInt(playerid,"GPS_TipoNEG");
				for (new i = 0; i < MAX_NEGOCIOS; i++)
				{
					if(i_Negocio[i][nTipo] == TIPO)
					{
						new Float:Distancia = (GetPlayerDistanceFromPoint(playerid, i_Negocio[i][nExteriorX], i_Negocio[i][nExteriorY], i_Negocio[i][nExteriorZ]) * 0.01);
						Formato(Str,"{ffffff}» %s / {b0b0b0}Distancia: %0.2f Km\n",i_Negocio[i][nNombre], Distancia);
						strcat(Str_,Str);
						Formato(Str,"GPS_Neg_%d",i_);
						SetPVarInt(playerid,Str,i);
						i_++;
					}
				}
				ExPlayerDialog(playerid,D_LUGARES_5,DIALOG_STYLE_LIST,"{D6E1EB}Locales",Str_,"Seleccionar","Cancelar");
			}
		}
		case D_LUGARES_2:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste la lista de centrales.");

			switch (listitem)
			{
				case 0: _MarcarPos(playerid, 646.9473, -1354.0492, 13.5527, "El centro de noticias fue marcado en el radar.");
				case 1: _MarcarPos(playerid, 1570.8665, -1337.1328, 16.4943, "El ayuntamiento fue marcado en el radar.");
				case 2: _MarcarPos(playerid, 1178.7737, -1323.2551, 14.1366, "El departamento de emergencias fue marcado en el radar.");
				case 3: _MarcarPos(playerid, 1206.1028, -1746.7626, 13.5928, "El departamento de la policía fue marcado en el radar.");
				case 4: _MarcarPos(playerid, 165.6302, 2013.1539, 19.0385, "La prisión federal fue marcada en el radar.");
			}
		}
		case D_LUGARES_3:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste la lista de concesionarias.");

			if (listitem == 0)		_MarcarPos(playerid,	8727.8135,14170.5762,6.5043,		"Concesionaria de Motos fue marcada en el radar.");
			else if(listitem == 1)	_MarcarPos(playerid, 	8683.3047,14367.3936,6.6591,		"Concesionaria de Clase M fue marcada en el radar.");
			else if(listitem == 2)	_MarcarPos(playerid, 	555.2177, -1438.9354, 15.7073,		"Concesionaria de Clase A fue marcada en el radar.");
			else if(listitem == 3)	_MarcarPos(playerid, 	942.8696, -1418.1125, 13.5469,		"Concesionaria de Camionetas fue marcada en el radar.");
			else if(listitem == 4)	_MarcarPos(playerid,	2006.0568, -2271.4482, 13.5344,		"Concesionaria de Aviones fue marcada en el radar.");
			else if(listitem == 5)	_MarcarPos(playerid,	2770.6709, -1628.4618, 12.1775,		"Concesionaria de Clase B fue marcada en el radar.");
			else if(listitem == 6)	_MarcarPos(playerid,	-63.0295, -1121.5996, 1.1733,		"Concesionaria de 'Coches usados' fue marcada en el radar.");
			else if(listitem == 7)	_MarcarPos(playerid,	354.5555, -2055.0317, 7.8399,		"Concesionaria de Barcos fue marcada en el radar.");
		}
		case D_LUGARES_4:
		{
			if(response) switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_LUGARES, DIALOG_STYLE_LIST, "{D6E1EB}Locales", "{FFFFFF}24/7\nLocal de ropa\nRestaurante\nCluckin Bell\nPizzeria\nBurger Shot\nAmmu-Nation\nPeluquería\nSex Shop\nGasolinera\nTienda electrónica\nBar\nFerreteria\nAlhambra\nStrip club\nClub private\nTienda de empeño\nJoyería & relojes\nCafeterías", "Seleccionar", "Cancelar");
				case 1: cmd_trabajos(playerid);
				case 2: _MarcarPos(playerid, -489.9008, -555.7960, 25.5029, "El deposito de embargos fue marcado en el radar.");
				case 3: _MarcarPos(playerid, 1570.8665, -1337.1328, 16.4943, "El ayuntamiento fue marcado en el radar.");
				case 4: _MarcarPos(playerid, 1328.1382, -1271.2844, 13.5600, "El banco de market fue marcado en el radar.");
				case 5: _MarcarPos(playerid, LicensesPoint[0][licenseX], LicensesPoint[0][licenseY], LicensesPoint[0][licenseZ], "El centro de licencias de conducción fue marcado en el radar.");
				case 6: _MarcarPos(playerid, LicensesPoint[1][licenseX], LicensesPoint[1][licenseY], LicensesPoint[1][licenseZ], "El centro de licencias de navegación fue marcado en el radar.");
				case 7: _MarcarPos(playerid, LicensesPoint[1][licenseX], LicensesPoint[2][licenseY], LicensesPoint[2][licenseZ], "El centro de licencias de vuelo fue marcado en el radar.");
			}
		}
		case D_LUGARES_5:
		{
			if(!response) return 1;
			new ID = listitem,StrPVar[40];
			Formato(StrPVar,"GPS_Neg_%d",ID);
			new i = GetPVarInt(playerid,StrPVar);
			set_checkpoint(playerid, i_Negocio[i][nExteriorX],i_Negocio[i][nExteriorY],i_Negocio[i][nExteriorZ], 3);
			SetPVarInt(playerid, "EnCheckPoint", 1);
			return 1;
		}
		case D_AGENDA:
		{
			if(!response) return cmd_telefono(playerid, "\1");
			new i = listitem;
			if(i >= 0 && i <= 19) { RanuraSeleccionadaA[playerid] = i; ExPlayerDialog(playerid, D_AGENDA2, DIALOG_STYLE_LIST, "{D6E1EB}Opciones:", "{00CDFF}Agregar contacto\n{CA3022}Eliminar contacto\n{00c200}Llamar contacto\n{00a2ff}Enviar mensaje\n{90C3D4}Compartir ubicación", ">>", "<<"); }
		}
		case D_AGENDA2:
		{
			if(!response) return cmd_telefono(playerid, "\1");

			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_AGENDA3, DIALOG_STYLE_INPUT, "{D6E1EB}Número", "{FFFFFF}> Escribe el número de teléfono", "Aceptar", "Inicio");
				case 1:
				{
					if(user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == 0) return _Mensaje(playerid, 0, "430", "No hay ningún contacto en esa ranura.");
					if(RanuraSeleccionadaA[playerid] == 0) alm(user[playerid][jContactoN1], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 1) alm(user[playerid][jContactoN2], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 2) alm(user[playerid][jContactoN3], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 3) alm(user[playerid][jContactoN4], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 4) alm(user[playerid][jContactoN5], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 5) alm(user[playerid][jContactoN6], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 6) alm(user[playerid][jContactoN7], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 7) alm(user[playerid][jContactoN8], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 8) alm(user[playerid][jContactoN9], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 9) alm(user[playerid][jContactoN10], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 10) alm(user[playerid][jContactoN11], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 11) alm(user[playerid][jContactoN12], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 12) alm(user[playerid][jContactoN13], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 13) alm(user[playerid][jContactoN14], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 14) alm(user[playerid][jContactoN15], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 15) alm(user[playerid][jContactoN16], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 16) alm(user[playerid][jContactoN17], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 17) alm(user[playerid][jContactoN18], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 18) alm(user[playerid][jContactoN19], "Vacío");
					else if(RanuraSeleccionadaA[playerid] == 19) alm(user[playerid][jContactoN20], "Vacío");

					user[playerid][jContacto][RanuraSeleccionadaA[playerid]] = 0;
					_Mensaje(playerid, 4, "ADC3E7", "Contacto eliminado de la agenda.");
					RanuraSeleccionadaA[playerid] = -1;
					// _Agenda(playerid);
				}
				case 2:
				{
					if (user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == 0) return _Mensaje(playerid, 0, "430", "No hay ningún contacto en esa ranura.");
					if (user[playerid][jSaldo] < 3) return _Mensaje(playerid, 0, "0", "No posees saldo suficiente para realizar esta llama.");
					if (user[playerid][j_uTelefono] > 0) return _Mensaje(playerid, 5, "0", "Tu teléfono se encuentra apagado, escribe /togmovil para encenderlo.");
					if (EnLlamada[playerid] != 0){_Mensaje(playerid, 0, "0", "ERROR: Te encuentras en una llamada."); return 1;}
					if (user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == user[playerid][jTelefono]){_Mensaje(playerid, 0, "281", "No te puedes llamar a tí mismo."); return 1;}

					LlamarTelefono(playerid, user[playerid][jContacto][RanuraSeleccionadaA[playerid]]);
					registrar_l(playerid, 2, user[playerid][jContacto][RanuraSeleccionadaA[playerid]]);
					RanuraSeleccionadaA[playerid] = -1;
					random_movil[playerid] = 0;
					
				}
				case 3:
				{
					if (user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == 0) return _Mensaje(playerid, 0, "430", "No hay ningún contacto en esa ranura.");
					if (user[playerid][jSaldo] < 2) return _Mensaje(playerid, 0, "40", "No posees saldo suficiente para enviar un mensaje.");
					if (user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == user[playerid][jTelefono]){_Mensaje(playerid, 0, "281", "No te puedes enviar un mensaje a tí mismo."); return 1;}

					NumeroMensaje[playerid] = user[playerid][jContacto][RanuraSeleccionadaA[playerid]];
					ExPlayerDialog(playerid, D_TELEFONO6, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el texto que vas a enviar:", "Enviar", "Inicio");
				}
				case 4:
				{
					if (user[playerid][jContacto][RanuraSeleccionadaA[playerid]] == 0) return _Mensaje(playerid, 0, "430", "No hay ningún contacto en esa ranura.");
					if (user[playerid][jSaldo] < 3) return _Mensaje(playerid, 0, "0", "No posees saldo suficiente.");
					if (GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return _Mensaje(playerid, 0, "0", "Sólo puedes compartir tu ubicación en exteriores.");
					if(!CheckTimer(300, wsp_time[playerid]))
					{
						foreach(new i: Player)
						{
							if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
							{
								if(user[i][jTelefono] == user[playerid][jContacto][RanuraSeleccionadaA[playerid]])
								{
									Formato(string, "[WhatsApp] %s quiere compartir su ubicación contigo, utiliza /aceptar.", nombre_pj(playerid, 0));
									SendClientMessage(i, 0x00AA00FF, string);
									RanuraSeleccionadaA[playerid] = -1;
									wsp_u[i] = playerid;
									return 1;
								}
							}
						}
						RanuraSeleccionadaA[playerid] = -1;
						_Mensaje(playerid, 0, "0", "Ese contacto no se encuentra disponible (Desconectado o no existente).");
					}
					else
					{
						format(string, 144, "Faltan %d segundos para que puedas usar esta función.", CheckTimer(300, wsp_time[playerid]));
						Mensaje_(playerid, 0xb0b0b0ff, string);
					}
				}
			}
		}

		case D_AGENDA3:
		{
			if(!response) return cmd_telefono(playerid, "\1");
			new amount = strval(inputtext);
			if(!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			if(amount > 999999 || amount < 1000) return _Mensaje(playerid, 0, "430", "ERROR: El número no puede ser mayor a 999999 o menor a 1000.");
			if(user[playerid][jContacto][RanuraSeleccionadaA[playerid]] != 0) return _Mensaje(playerid, 0, "430", "ERROR: La ranura se encuentra en uso.");

			user[playerid][jContacto][RanuraSeleccionadaA[playerid]] = amount;
			ExPlayerDialog(playerid, D_AGENDA4, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre", "{FFFFFF}> Escribe el nombre del contacto", "Aceptar", "Inicio");
			return 1;
		}
		case D_AGENDA4:
		{
			if(!response) return cmd_telefono(playerid, "\1");
			if (!strlen(inputtext)) return 1;
			if (strlen(inputtext) > 20 || strlen(inputtext) < 0) { _Mensaje(playerid, 0, "106", "ERROR: Sólo puedes escribir menos de 20 carácteres."); return 1; }
			if(RanuraSeleccionadaA[playerid] == 0) alm(user[playerid][jContactoN1], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 1) alm(user[playerid][jContactoN2], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 2) alm(user[playerid][jContactoN3], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 3) alm(user[playerid][jContactoN4], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 4) alm(user[playerid][jContactoN5], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 5) alm(user[playerid][jContactoN6], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 6) alm(user[playerid][jContactoN7], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 7) alm(user[playerid][jContactoN8], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 8) alm(user[playerid][jContactoN9], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 9) alm(user[playerid][jContactoN10], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 10) alm(user[playerid][jContactoN11], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 11) alm(user[playerid][jContactoN12], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 12) alm(user[playerid][jContactoN13], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 13) alm(user[playerid][jContactoN14], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 14) alm(user[playerid][jContactoN15], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 15) alm(user[playerid][jContactoN16], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 16) alm(user[playerid][jContactoN17], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 17) alm(user[playerid][jContactoN18], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 18) alm(user[playerid][jContactoN19], inputtext);
			else if(RanuraSeleccionadaA[playerid] == 19) alm(user[playerid][jContactoN20], inputtext);
			_Mensaje(playerid, 4, "ADC3E7", "Nuevo contacto agregado a tu agenda telefónica.");
			RanuraSeleccionadaA[playerid] = -1;
			// _Agenda(playerid);
			return 1;
		}
		case D_SALDO:
		{
			new amount = strval(inputtext);
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if(amount < 1) { _Mensaje(playerid, 0, "22", "No puedes recargar menos de un dolar."); return 1; }
			if(ComprobarDineroJ(playerid) >= amount)
			{
				i_Negocio[nid][nDinero] += amount;
				user[playerid][jSaldo] += amount;
				DarDineroGC(playerid, -amount);
				format(string, sizeof(string), "Recargaste $%d, ahora tienes $%d de saldo en tu teléfono.", amount, user[playerid][jSaldo]);
				_Mensaje(playerid, 5, "0", string);
			} else _Mensaje(playerid, 0, "0", "Usted no posee suficiente dinero.");
		}
		case D_vehPatente:
		{
			if (!response) return cmd_ayuntamiento(playerid);
			for (new i = 0; i < 6; i++)
			{
				if (listitem == i)
				{
					new veh = user[playerid][jLlaveCoche][i];
					if (veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 1, "0", "Ranura vacía.");

					ExPlayerDialog(playerid, D_vehPatente2, DIALOG_STYLE_MSGBOX, "Patente vehicular", "¿Estás seguro que quieres el cambio de patente", "Sí", "<<");

					SetPVarInt(playerid, "op_coches", veh-1000+1);
					SetPVarInt(playerid, "op_coches2", i);
					return 1;
				}
			}
		}
		case D_vehPatente2:
		{
			if(!response) return cmd_ayuntamiento(playerid);
			if(GetPVarInt(playerid, "op_coches") == 0) return cmd_ayuntamiento(playerid);

			new veh = GetPVarInt(playerid, "op_coches")-1;
			DeletePVar(playerid, "op_coches");
			if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "Imposible realizar acciones en un vehículo que no existe.");

			i_Vehiculo[veh][vPatente] = veh-Random(-400000, 999999); //
			DarDineroGC(playerid, -50);
			format(string, sizeof(string), "Has cambiado correctamente la patente del %s.", nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400]);
			SendClientMessage(playerid, 0x33CCFFFF, string);
			vehicleSave(veh);
			return 1;
		}
		case D_AYUNTAMIENTO:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if (user[playerid][jDocumento] != 0) return _Mensaje(playerid, 0, "1", "Usted ya posee un documento.");
					new documento = Random(100000, 499999);
					user[playerid][jDocumento] = documento;
					format(string, sizeof(string), "Obtuviste un documento el cual te identifica como ciudadano, número %d.", documento);
					_Mensaje(playerid, 2, "0", string);
					DarDineroGC(playerid, -10);
					d_estado += 10;
					return 1;
				}
				else if(listitem == 1)
				{
					new dialog[1024], multad, stext[62];
					if (user[playerid][jLicencias][1] == 0) return _Mensaje(playerid, 0, "1", "Una licencia de conducir válida es necesaria para liberar su vehículo del depósito municipal.");
					for(new i = 0; i < 6; i++)
					{
						new veh = user[playerid][jLlaveCoche][i];
						if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
						else
						{
							switch(i_Vehiculo[veh-1000][vSpawned])
							{
								case 0: stext = "{ff0000}Guardado{ffffff}";
								case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
							}
							if(i_Vehiculo[veh-1000][vEnDeposito] == 1) { format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado $%d", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext, i_Vehiculo[veh-1000][vMulta] + (user[playerid][jNivel]+1 * 3)); ++multad; }
							else if(i_Vehiculo[veh-1000][vMulta]) { format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - Multa: {00c200}%d", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext, i_Vehiculo[veh-1000][vMulta]); ++multad; }
							else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400]);
						}
						strcat(dialog, string);
					}
					if (multad)
					{
						ExPlayerDialog(playerid, D_MULTA, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, "Seleccionar", "Cancelar");
					} else _Mensaje(playerid, 0, "1", "No tienes multas para pagar o vehículos embargados.");
				}
				else if(listitem == 2)
				{
					new casai, negi, vehi = 0, neg = user[playerid][jNegocioKey], casa = user[playerid][jCasaKey];
					if(user[playerid][jCasaKey] != -1)
					{
						if (i_Casa[casa][cEspacio] == 1) casai += 30;
						else if (i_Casa[casa][cEspacio] == 2) casai += 50;
						else if (i_Casa[casa][cEspacio] == 3) casai += 80;
						else if (i_Casa[casa][cEspacio] == 4) casai += 105;
					} else casai = 0;
					if(neg != -1)
					{
						if (i_Negocio[neg][nTipo] == 1) negi += 20;
						else if (i_Negocio[neg][nTipo] == 2) negi += 20;
						else if (i_Negocio[neg][nTipo] == 3) negi += 30;
						else if (i_Negocio[neg][nTipo] == 4) negi += 20;
						else if (i_Negocio[neg][nTipo] == 5) negi += 20;
						else if (i_Negocio[neg][nTipo] == 6) negi += 20;
						else if (i_Negocio[neg][nTipo] == 7) negi += 50;
						else if (i_Negocio[neg][nTipo] == 8) negi += 50;
						else if (i_Negocio[neg][nTipo] == 9) negi += 30;
						else if (i_Negocio[neg][nTipo] == 10) negi += 12;
						else if (i_Negocio[neg][nTipo] == 11) negi += 50;
						else if (i_Negocio[neg][nTipo] == 12) negi += 50;
						else if (i_Negocio[neg][nTipo] == 13) negi += 20;
						else if (i_Negocio[neg][nTipo] == 14) negi += 60;
						else if (i_Negocio[neg][nTipo] == 15) negi += 40;
						else if (i_Negocio[neg][nTipo] == 16) negi += 50;
						else if (i_Negocio[neg][nTipo] == 17) negi += 40;
						else if (i_Negocio[neg][nTipo] == 18) negi += 50;
						else if (i_Negocio[neg][nTipo] == 19) negi += 20;
					} else negi = 0;
					if(user[playerid][jLlaveCoche][0] != 0) { vehi += 28; }
					if(user[playerid][jLlaveCoche][1] != 0) { vehi += 28; }
					if(user[playerid][jLlaveCoche][2] != 0) { vehi += 28; }
					if(user[playerid][jLlaveCoche][3] != 0) { vehi += 28; }
					if(user[playerid][jLlaveCoche][4] != 0) { vehi += 28; }
					if(user[playerid][jLlaveCoche][5] != 0) { vehi += 28; }
					new coordsstring[300], DialogStatus[3000];
					format(coordsstring, sizeof(coordsstring), "\n{ffffff}{D6E1EB} Viviendas:\n{ff0000}%d${ffffff} - pago de agua/luz\n\n", casai);
					strcat(DialogStatus, coordsstring);
					format(coordsstring, sizeof(coordsstring), "{ffffff}{D6E1EB} Locales:\n{ff0000}%d${ffffff} - pago de agua/luz\n\n", negi);
					strcat(DialogStatus, coordsstring);
					format(coordsstring, sizeof(coordsstring), "{ffffff}{D6E1EB} Vehículos:\n{ff0000}%d${ffffff} - impuestos\n\n", vehi);
					strcat(DialogStatus, coordsstring);
					new coordsstring2[300];
					format(coordsstring2, sizeof(coordsstring2), "{b0b0b0}Impuestos de %s", nombre_pj(playerid));
					ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, coordsstring2, DialogStatus, "Cerrar", "");
				}
				else if(listitem == 3)
				{
					new neg = user[playerid][jNegocioKey], neg2 = user[playerid][jNegocioKey2], dialog[1024], stext[128];
					if(neg != -1)
					{
						if(i_Negocio[neg][nCuotas] == 0) format(stext, sizeof(stext), "\n{ffffff}#1 - %s - {ADC3E7}Libre de cuotas{ffffff}", i_Negocio[neg][nNombre]);
						else format(stext, sizeof(stext), "\n{ffffff}#1 - %s - {BA1E00}Cuota:{ffffff} $%d", i_Negocio[neg][nNombre], i_Negocio[neg][nCuotas]);
					} else format(stext, sizeof(stext), "\n{b0b0b0}#1 Ranura vacía");
					strcat(dialog, stext);
					if(neg2 != -1)
					{
						if(i_Negocio[neg2][nCuotas] == 0) format(stext, sizeof(stext), "\n{ffffff}#2 - %s - {ADC3E7}Libre de cuotas{ffffff}", i_Negocio[neg2][nNombre]);
						else format(stext, sizeof(stext), "\n{ffffff}#2 - %s - {BA1E00}Cuota:{ffffff} $%d", i_Negocio[neg2][nNombre], i_Negocio[neg2][nCuotas]);
						strcat(dialog, stext);
					}
					ExPlayerDialog(playerid, D_Cuotas, DIALOG_STYLE_LIST, "{D6E1EB}Cuotas de negocios", dialog, "Seleccionar", "Cancelar");
					return 1;
				}
				else if(listitem == 4)
				{
					new dialog[1024], existe = 0, stext[62];
					for(new i = 0; i < 6; i++)
					{
						new veh = user[playerid][jLlaveCoche][i];
						if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
						else
						{
						    existe++;
							switch(i_Vehiculo[veh-1000][vSpawned])
							{
								case 0: stext = "{ff0000}Guardado{ffffff}";
								case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
							}
							if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
							else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
						}
						strcat(dialog, string);
					}
					if (existe)
					{
						ExPlayerDialog(playerid, D_vehPatente, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, ">>", "<<");
					} else _Mensaje(playerid, 0, "1", "No tienes ningún vehículo.");
				}
			}
		}
		case D_BOOMBOX:
		{
			if(!response) return _Mensaje(playerid, 1, "0", "Cancelaste la selección de emisoras.");
			switch(listitem)
			{
				case 0:
				{
					if(i_boox[playerid][BB_area])
					{
						foreach(new i: Player)
						{
							if(IsPlayerInDynamicArea(i, i_boox[playerid][BB_area])) { StopStream(i); }
						}
						DeletePVar(playerid, "BBStation");
					}
					_Mensaje(playerid, 1, "0", "Apagaste tu equipo sonido.");
				}
				case 1:
				{
					new StationsDialog[2500];
					strcat(StationsDialog, "Número\tNombre\tGénero\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}1\t{FFFFFF}54 House\t{00A2FF}Electro\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}2\t{FFFFFF}Top Latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}3\t{FFFFFF}Dubbase.FM\t{00A2FF}Dubstep\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}4\t{FFFFFF}Reggae Hits\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}5\t{FFFFFF}MBradio.FM\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}6\t{FFFFFF}Classical Weta 90.9FM\t{00A2FF}Classic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}7\t{FFFFFF}LOVE TIMES\t{00A2FF}Classic romantic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}8\t{FFFFFF}Soft Rock Cafe\t{00A2FF}Heavy Metal\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}9\t{FFFFFF}HardRadio.com\t{00A2FF}Rock\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}10\t{FFFFFF}Aural Moon\t{00A2FF}Punk\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}11\t{FFFFFF}Idobi Radio\t{00A2FF}Electronic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}12\t{FFFFFF}www.Hot108.com\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}13\t{FFFFFF}Sensacion Peru\t{00A2FF}Pop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}14\t{FFFFFF}DEEGAY RADIO\t{00A2FF}Dance Pop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}15\t{FFFFFF}PaganMetalRadio\t{00A2FF}Extreme Metal\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}16\t{FFFFFF}PulsRadio TRANCE\t{00A2FF}Eletronic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}17\t{FFFFFF}The Trip\t{00A2FF}Music Usa\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}18\t{FFFFFF}Parazitii Club\t{00A2FF}Gangsta Rap\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}19\t{FFFFFF}Amor latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}20\t{FFFFFF}Hotmixradio\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}21\t{FFFFFF}RadioHot69\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}22\t{FFFFFF}Radio Hunter\t{00A2FF}Electrónica\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}23\t{FFFFFF}92.5 The River\t{00A2FF}Alternative", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_BOOMBOX1, DIALOG_STYLE_TABLIST_HEADERS, "{00C200}Radios", StationsDialog, "Continuar", "<<");
				}
				case 2: ExPlayerDialog(playerid, D_BOOMBOX2, DIALOG_STYLE_INPUT, "Url - Internet", "Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "<<");
			}
		}
		case D_BOOMBOX1:
		{
			if(!response) cmd_encender(playerid);

			if(listitem == 0) _boombox(playerid, "http://54house.stream-balancer.de:80");
			else if(listitem == 1) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147");
			else if(listitem == 2) _boombox(playerid, "http://148.251.91.15:7004");
			else if(listitem == 3) _boombox(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u");
			else if(listitem == 4) _boombox(playerid, "http://216.230.231.122:8000/MP3128");
			else if(listitem == 5) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145");
			else if(listitem == 6) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858");
			else if(listitem == 7) _boombox(playerid, "http://173.244.215.163:8380");
			else if(listitem == 8) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421");
			else if(listitem == 9) _boombox(playerid, "http://64.202.98.133:2010");
			else if(listitem == 10) _boombox(playerid, "http://50.117.115.211:80");
			else if(listitem == 11) _boombox(playerid, "http://108.61.30.179:4010");
			else if(listitem == 12) _boombox(playerid, "http://50.7.64.226:80/frisky_mp3_hi");
			else if(listitem == 13) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543");
			else if(listitem == 14) _boombox(playerid, "http://62.210.209.179:8030/stream");
			else if(listitem == 15) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323");
			else if(listitem == 16) _boombox(playerid, "http://somafm.com/tags.pls");
			else if(listitem == 17) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187");
			else if(listitem == 18) _boombox(playerid, "http://s3.voscast.com:8002/;.m3u");
			else if(listitem == 19) _boombox(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u");
			else if(listitem == 20) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562");
			else if(listitem == 21) _boombox(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel");
			else if(listitem == 22) _boombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126");
		}
		case D_BOOMBOX2:
		{
			if(!response) cmd_encender(playerid);

			if(isnull(inputtext)) { return _Mensaje(playerid, 0, "0", "No has introducido ningún URL."); }
			if(strlen(inputtext)) { _boombox(playerid, inputtext); }
		}
		case D_Mnegro:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(ComprobarDineroJ(playerid) < 45) return _Mensaje(playerid, 0, "102", "No puedes pagar $35 dólares.");
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, 1); user[playerid][jm_Derecha] = 1, user[playerid][jm_DerechaCant] = 1;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, 1); user[playerid][jm_Izquierda] = 1, user[playerid][jm_IzquierdaCant] = 1;}
					Compra(playerid, 45);
					_Mensaje(playerid, 5, "0", "Compraste un puño americano.");
					return 1;
				}
				else if(listitem == 1)
				{
					if(ComprobarDineroJ(playerid) < 560) return _Mensaje(playerid, 0, "102", "No puedes pagar $500 dólares.");
					if(user[playerid][jMascara] == 1) return _Mensaje(playerid, 0, "229", "Ya posees una mascara.");
					Compra(playerid, 560);
					_Mensaje(playerid, 5, "0", "Compraste una Máscara, comandos: /mascara.");
					user[playerid][jMascara] = 1;
					return 1;
				}
				else if(listitem == 2)
				{
				    new uso = 1;
					if (Es_job(playerid, 5)) uso = 3;
					if(ComprobarDineroJ(playerid) < 500) return _Mensaje(playerid, 0, "102", "No puedes pagar $500 dólares.");
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, 134); user[playerid][jm_Derecha] = 134, user[playerid][jm_DerechaCant] = uso;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, 134); user[playerid][jm_Izquierda] = 134, user[playerid][jm_IzquierdaCant] = uso;}
					Compra(playerid, 500);
					_Mensaje(playerid, 5, "0", "Compraste unas ganzúas, comandos: /puente.");
					return 1;
				}
				else if(listitem == 3)
				{
					if(ComprobarDineroJ(playerid) < 60) return _Mensaje(playerid, 0, "102", "No puedes pagar $60 dólares.");
					if(user[playerid][jNivel] < 2) return _Mensaje(playerid, 0, "87", "Debes ser mayor a nivel de 3.");
					_Mensaje(playerid, 5, "0", "Compraste un kit de secuestro, comandos: /atar - /vendar.");
					VendasYSoga[playerid] = 1;
					Compra(playerid, 8);
					return 1;
				}
				else if(listitem == 4)
				{
					if(ComprobarDineroJ(playerid) < 2000) return _Mensaje(playerid, 0, "102", "No puedes pagar $2,000 dólares.");
					if(user[playerid][jf_Dni] > 0) return _Mensaje(playerid, 0, "89", "No puedes comprar otro documento falso, usa /tirardni.");
					ExPlayerDialog(playerid, D_Cdnifalso, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificación 1", "Escribe el 'Nombre Apellido' que tendrá el documento:", "Siguiente", "Cancelar");
				}/*
				else if(listitem == 5)
				{
					if(!_Telefono(playerid)){_Mensaje(playerid, 0, "9","ERROR: No posees ningún teléfono en ninguna mano."); return 1;}
					if (_Telefono2(playerid, 1)) { user[playerid][jm_DerechaCant] = 0; user[playerid][jm_Derecha] = 0; }
					else if (_Telefono2(playerid, 2)) { user[playerid][jm_IzquierdaCant] = 0;user[playerid][jm_Izquierda] = 0; }
					DarDineroGC(playerid, 400);
					_Mensaje(playerid, 5, "0", "Vendiste el teléfono robado por 400$.");
					return 1;
				}*/
				else if(listitem == 5)
				{
					new TextAcc[512];
					for(new x; x < MAX_uACCESORIOS; x++)
					{
						new NombreAcc[128];
						format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
						for(new i; i < sizeof(Accesorios); i++)
						{
							if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
							{
								format(NombreAcc, sizeof(NombreAcc), "%s%s:{ffffff} %d$", color_objeto(playerid, x), Accesorios[i][NombreAccesorio], (Accesorios[i][PrecioAccesorio]*85)/100);
							}
						}
						format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
					}
					ExPlayerDialog(playerid, D_vToys, DIALOG_STYLE_LIST, "{537CDB}Vender accesorio", TextAcc, "Seleccionar", "Cancelar");
				}
			}
		}
		case D_vToys:
		{
		    if (!response) return Mensaje_(playerid, 0xb0b0b0ff, "Cancelaste la venta de accesorios.");
		    if(InfoAccesorio[playerid][listitem][aModelo] == 0) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes nada en esa ranura.");
			new x = listitem, precio = 0, id_acc = -1;

			for(new i; i < sizeof(Accesorios); i++)
			{
				if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
				{
					precio = (Accesorios[i][PrecioAccesorio]*85)/100;
					id_acc = i;
				}
			}
			InfoAccesorio[playerid][x][aModelo] = 0;
			InfoAccesorio[playerid][x][aParte] = 0;
			InfoAccesorio[playerid][x][aPosicionX] = 0.0;
			InfoAccesorio[playerid][x][aPosicionY] = 0.0;
			InfoAccesorio[playerid][x][aPosicionZ] = 0.0;
			InfoAccesorio[playerid][x][aRotacionX] = 0.0;
			InfoAccesorio[playerid][x][aRotacionY] = 0.0;
			InfoAccesorio[playerid][x][aRotacionZ] = 0.0;
			InfoAccesorio[playerid][x][aEscalaZ] = 0.0;
			InfoAccesorio[playerid][x][aEscalaY] = 0.0;
			InfoAccesorio[playerid][x][aEscalaX] = 0.0;
			InfoAccesorio[playerid][x][aColocado] = 0;
			DarDineroGC(playerid, precio);
			format(string, sizeof(string), "Vendiste el accesorio %s por %d$.", Accesorios[id_acc][PrecioAccesorio], precio);
			_Mensaje(playerid, 4, "537CDB", string);
			return 1;
		}
		case D_Cdnifalso:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			if(strlen(inputtext) < 1 || strlen(inputtext) > 18 || strfind(inputtext, "_", true) != -1)
			{
				ExPlayerDialog(playerid, D_Cdnifalso, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificación 1", "Escribe el 'Nombre Apellido', ejemplo: Jorge Mendoza:", "Siguiente", "Cancelar");
			}
			else
			{
				ExPlayerDialog(playerid, D_Cdnifalso2, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificación 2", "Ingresa la edad falsa del documento:", "Siguiente", "Cancelar");
				alm(user[playerid][jf_Nombre], inputtext);
			}
		}
		case D_Cdnifalso2:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			new edad = strval(inputtext);
			user[playerid][jf_Edad] = edad;
			format(string, sizeof(string), "¿Estás seguro que quieres usar el nombre de\n\t%s, edad: %d en tu DNI falso? Precio: 2.000$", user[playerid][jf_Nombre], edad);
			ExPlayerDialog(playerid, D_Cdnifalso3, DIALOG_STYLE_MSGBOX, "{D6E1EB}Falsificación 3", string, "Aceptar", "Cancelar");
			return 1;
		}
		case D_Cdnifalso3:
		{
			if (!response) return _Mensaje(playerid, 4, "D7D7D4", "Cancelaste la operación.");
			new dni = 555 + random(91017);
			user[playerid][jf_Dni] = dni;
			_Mensaje(playerid, 5, "0", "Adquiriste un documento falso, para usarlo (/dnifalso).");
			DarDineroGC(playerid, -2000);
		}
		case D_Iempresa:
		{
			if(response)
			{
				if (i_Empresa[NumeroEmpresa[playerid]][eMiembros] >= MAX_MEMBERS)
				{
					_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", "Rechazaron la solicitud de empleo, razón: ya tienes 20 empleados.");
					_Mensaje(playerid, 4, "b0b0b0", "Rechazaste el contrato de la empresa, razón: no hay cupos.");
					NumeroEmpresa[playerid] = -1;
					TomandoTrabajo[playerid] = -1;
					return 1;
				}
				format(string, sizeof(string), "¡Felicidades! Ahora trabajas en {b0b0b0}%s{FFFFFF}, aceptaste el contrato!", i_Empresa[NumeroEmpresa[playerid]][eNombre]);
				_Mensaje(playerid, 4, "ffffff", string);
				format(string, sizeof(string), "* %s aceptó el contrato.", nombre_pj(playerid));
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", string);
				format(string, sizeof(string), "Registros: %s acepto el trabajo en %s (%d).", nombre_pj(playerid), i_Empresa[NumeroEmpresa[playerid]][eNombre],NumeroEmpresa[playerid]);
				Log("Registros/i_Empresas.log", string);
				user[playerid][jContrato] = NumeroEmpresa[playerid];
				i_Empresa[NumeroEmpresa[playerid]][eMiembros] ++;
				save_Empresa(NumeroEmpresa[playerid]);
				NumeroEmpresa[playerid] = -1;
				TomandoTrabajo[playerid] = -1;
				new cosapro[70];
				format(cosapro, sizeof(cosapro), "Empresas/iEmpresa_%d.pro",  user[playerid][jContrato]);
				format(string, sizeof(string), "%s 0\r\n", nombre_pj(playerid));
				new File: archivo = fopen(cosapro, io_append);
				fwrite(archivo, string);
				fclose(archivo);
			}
			else
			{
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", "Rechazaron la solicitud de empleo.");
				_Mensaje(playerid, 4, "b0b0b0", "Rechazaste el contrato de la empresa.");
				NumeroEmpresa[playerid] = -1;
				TomandoTrabajo[playerid] = -1;
			}
		}
		case D_Ifamilia:
		{
			if(response)
			{
				format(string, sizeof(string), "¡Felicidades! Ahora formas parte de {b0b0b0}%s{FFFFFF}, aceptaste la invitación!", i_Familia[NumeroFamilia[playerid]][fNombre]);
				_Mensaje(playerid, 4, "FFFFFF", string);
				format(string, sizeof(string), "* %s aceptó la invitación.", nombre_pj(playerid));
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", string);
				format(string, sizeof(string), "Registros: %s acepto unirse a %s id familia %d.", nombre_pj(playerid), i_Familia[NumeroFamilia[playerid]][fNombre], NumeroFamilia[playerid]);
				Log("Registros/invite_fam.log", string);
				user[playerid][jMiembroFam] = NumeroFamilia[playerid];
				user[playerid][jRangoFam] = 1;
				i_Familia[NumeroFamilia[playerid]][fMiembros] ++;
				ActualizarFamilia(NumeroFamilia[playerid]);
				NumeroFamilia[playerid] = 0;
				TomandoTrabajo[playerid] = -1;
			}
			else
			{
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", "Rechazaron tu petición de ingreso.");
				_Mensaje(playerid, 4, "b0b0b0", "Rechazaste el ingreso a la familia.");
				NumeroFamilia[playerid] = 0;
				TomandoTrabajo[playerid] = -1;
			}
		}
		case D_Ifaccion:
		{
			if(response)
			{
				format(string, sizeof(string), "¡Felicidades! Ahora eres miembro de {b0b0b0}%s{FFFFFF}.", NombreFaccion[playerid]);
				_Mensaje(playerid, 4, "ffffff", string);
				format(string, sizeof(string), "* %s aceptó el ingreso.", nombre_pj(playerid));
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", string);
				format(string, sizeof(string), "Registros: %s ingreso a %s (%s).", nombre_pj(TomandoTrabajo[playerid]), nombre_pj(playerid), NombreFaccion[playerid]);
				Log("Registros/invite_fac.log", string);
				max_miembros[NumeroFaccion[playerid]]++;
				save_stuff();

				if (NumeroFaccion[playerid] == 2) sadocs++;
				if (NumeroFaccion[playerid] == 5) members_fd++;
				user[playerid][jMiembro] = NumeroFaccion[playerid];
				user[playerid][jRango] = 0;

				NombreFaccion[playerid] = "N-F";
				NumeroFaccion[playerid] = 0;
				TomandoTrabajo[playerid] = -1;
			}
			else
			{
				_Mensaje(TomandoTrabajo[playerid], 4, "b0b0b0", "Rechazaron tu petición de ingreso.");
				_Mensaje(playerid, 4, "b0b0b0", "Rechazaste el ingreso a la facción.");
				NombreFaccion[playerid] = "N-F";
				NumeroFaccion[playerid] = 0;
				TomandoTrabajo[playerid] = -1;
			}
		}
		case D_PDmecanico:
		{
			if(!response) return 1;
			
			PlayerAudio(playerid, 1133, 12.0);

			switch(listitem)
			{
				case 0:
				{
					SetExVehicleHealth(idcar, 1000);
					textgame_player(playerid, "~g~Motor nuevo", 3000, 3);
				}
				case 1:
				{
					new Float: cvida;
					GetVehicleHealth(idcar, cvida);
					new panels, doors, lights, tires, tires2;
					GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
					RepairExVehicle(idcar);
					SetExVehicleHealth(idcar, cvida);
					GetVehicleDamageStatus(idcar, panels, doors, lights, tires2);
					if(tires != 0)
					{
						tires = encode_tires(1, 1, 1, 1);
						UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
					}
					textgame_player(playerid, "~g~Carroceria nueva", 3000, 3);
				}
				case 2:
				{
					new panels, doors, lights, tires;
					GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
					tires = encode_tires(0, 0, 0, 0);
					UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
					textgame_player(playerid, "~g~Ruedas nuevas", 3000, 3);
				}
				case 3:
				{
				    new
				        platenew = Random(4000, 9999)
					;
					textgame_player(playerid, "~g~change plate", 3000, 3);
					DarMatricula(idcar, platenew);
					SetVehicleToRespawn(idcar);
				}
			}
		}
		case D_Tmecanico0:
			{
				if(response)
				{
					Menu_Tuneo(playerid);
				}
				else
				{
					Menu_Tuneo(playerid);
				}
			}
		case D_Tmecanico1:
			{
				new tune, iVeh = GetPlayerVehicleID(playerid);
				if(response)
				{
					switch(listitem)
					{
					    case 0:
					    {
							new Str[256], Str2[256], Str_[3000], i_ = 0;
							for (new i = 0; i < 11; i++)
							{
								if (pieza_tune[playerid][i] > 0)
								{
									Formato(Str, "{ffffff}%s ($%d)\n", GetComponentName(pieza_tune[playerid][i]), GetComponentPrice(pieza_tune[playerid][i]));
									strcat(Str_, Str);
									Formato(Str, "tuneo%d", i_);
									SetPVarInt(playerid, Str, i);
									i_++;
								}
							}
							Formato(Str2, "{D6E1EB}Piezas actuales (Total: $%d)\n", pago_tune[playerid]);
							if (i_ == 0) ExPlayerDialog(playerid, D_Tmecanico0, DIALOG_STYLE_MSGBOX, "{D6E1EB}Piezas actuales", "No has colocado ningún componente aún.", "Volver", "");
							else ExPlayerDialog(playerid, D_Tmecanico3, DIALOG_STYLE_LIST, Str2, Str_, "Retirar", "Volver");
					    }
					    case 1:
					    {
							new Str[256], Str_[3000], i_ = 0;
             				strcat(Str_, "\n{ffffff}Piezas:\n");
							for (new i = 0; i < 11; i++)
							{
								if (pieza_tune[playerid][i] > 0)
								{
									Formato(Str, "{ffffff}%s ($%d)\n", GetComponentName(pieza_tune[playerid][i]), GetComponentPrice(pieza_tune[playerid][i]));
									strcat(Str_, Str);
									i_++;
								}
							}
							Formato(Str, "\n{ffffff}Total: {00c200}$%d\n", pago_tune[playerid]);
							strcat(Str_, Str);
							if (i_ == 0) ExPlayerDialog(playerid, D_Tmecanico0, DIALOG_STYLE_MSGBOX, "{D6E1EB}Finalizar tuneo", "No has colocado ningún componente aún.", "Volver", "");
							else ExPlayerDialog(playerid, D_Tmecanico4, DIALOG_STYLE_MSGBOX, "{D6E1EB}Finalizar tuneo", Str_, "Instalar", "Volver");
					    }
						case 2: SetPVarInt(playerid,"tuneando", 0), tune = 1, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 3: SetPVarInt(playerid,"tuneando", 1), tune = 2, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 4: SetPVarInt(playerid,"tuneando", 2), tune = 6, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 5: SetPVarInt(playerid,"tuneando", 3), tune = 10, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 6: SetPVarInt(playerid,"tuneando", 4), tune = 11, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 7: SetPVarInt(playerid,"tuneando", 5), tune = 12, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 8: SetPVarInt(playerid,"tuneando", 6), tune = 13, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 9: SetPVarInt(playerid,"tuneando", 7), tune = 0, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 10: SetPVarInt(playerid,"tuneando", 8), tune = 4, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 11: SetPVarInt(playerid,"tuneando", 9), tune = 7, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 12: SetPVarInt(playerid,"tuneando", 10), tune = 9, MenuComponentes(playerid, GetVehicleModel(iVeh), ((tune == -1) ? (false) : (true)), tune);
						case 13:
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							_Mensaje(playerid, 4, "b0b0b0", "Cancelaste el menú de tuneo.");
							_Mensaje(id_tune[playerid], 4, "b0b0b0", "El sujeto cancelo la operación.");
							id_tune[playerid] = -1;
							e_tune[playerid] = -1;
							veh_tune[playerid] = 0;
							pago_tune[playerid] = 0;
							VehSeguro[vehicleid] = 0;
							for(new x = 0; x < 11; x++) { RemoveVehicleComponent(vehicleid, pieza_tune[playerid][x]); pieza_tune[playerid][x] = 0; }
							for (new vid = 0; vid < MAX_VEHICULOS; vid++) { if(i_Vehiculo[vid][vID] == vehicleid) { ActualizarMods(i_Vehiculo[vid][vID]); } }
						    return 1;
						}
					}
				}
				else
				{
					_Mensaje(playerid, 5, "0", "Cuando termines de ver las piezas escribe /tuneo.");
				}
			}
		case D_Tmecanico2:
		{
			if(response)
			{
				new viejo = pieza_tune[playerid][GetPVarInt(playerid,"tuneando")], componentid = TipoTunning[playerid][listitem], vehicleid = GetPlayerVehicleID(playerid);
				if (pieza_tune[playerid][GetPVarInt(playerid,"tuneando")] == 0)
				{
					pago_tune[playerid] += GetComponentPrice(componentid);
				}
				else
				{
					pago_tune[playerid] -= GetComponentPrice(viejo);
					pago_tune[playerid] += GetComponentPrice(componentid);
				}
				pieza_tune[playerid][GetPVarInt(playerid,"tuneando")] = componentid;
				AddVehicleComponent(vehicleid, componentid);
				format(string, sizeof(string), "Componente %s colocado con éxito.", GetComponentName(componentid));
				_Mensaje(playerid, 4, "33CCFF", string);
				Menu_Tuneo(playerid);
			}
			else
			{
				Menu_Tuneo(playerid);
			}
		}
		case D_Tmecanico3:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new ID = listitem, StrPVar[40];
				Formato(StrPVar,"tuneo%d",ID);
				new e = GetPVarInt(playerid,StrPVar);
				Menu_Tuneo(playerid);
				format(string, sizeof(string), "Componente %s retirado con éxito.", GetComponentName(pieza_tune[playerid][e]));
				_Mensaje(playerid, 4, "b00000", string);
				pago_tune[playerid] -= GetComponentPrice(pieza_tune[playerid][e]);
				RemoveVehicleComponent(vehicleid, pieza_tune[playerid][e]);
				pieza_tune[playerid][e] = 0;
				return 1;
			}
			else
			{
				Menu_Tuneo(playerid);
			}
		}
		case D_Tmecanico4:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid), i_ = 0;
				if(pago_tune[playerid] == 0)
				{
    				_Mensaje(id_tune[playerid], 4, "b0b0b0", "No coloco ningún componente a su vehículo.");
					_Mensaje(playerid, 4, "b0b0b0", "Cancelaste la selección de componentes.");
					for(new x = 0; x < 11; x++) { pieza_tune[playerid][x] = 0; }
					id_tune[playerid] = -1;
					e_tune[playerid] = -1;
					veh_tune[playerid] = 0;
					pago_tune[playerid] = 0;
					VehSeguro[vehicleid] = 0;
					return 1;
				}
				if(ComprobarDineroJ(playerid) < pago_tune[playerid])
				{
					_Mensaje(playerid, 0, "0", "Usted no posee suficiente dinero.");
					_Mensaje(id_tune[playerid], 1, "0", "El sujeto no tiene dinero para pagar, se cancelo todo.");
					id_tune[playerid] = -1;
					e_tune[playerid] = -1;
					veh_tune[playerid] = 0;
					pago_tune[playerid] = 0;
					VehSeguro[vehicleid] = 0;
					for(new x = 0; x < 11; x++) { RemoveVehicleComponent(vehicleid, pieza_tune[playerid][x]); pieza_tune[playerid][x] = 0; }
					for (new vid = 0; vid < MAX_VEHICULOS; vid++) { if(i_Vehiculo[vid][vID] == vehicleid) { ActualizarMods(i_Vehiculo[vid][vID]); } }
					return 1;
				}
				for (new i = 0; i < 11; i++)
				{
					if (pieza_tune[playerid][i] > 0)
					{
						AddVehicleComponent(vehicleid, pieza_tune[playerid][i]);
						i_++;
		 			}
		 		}
				format(string, sizeof(string), "Pagaste la factura del tuneo ($%d), en concepto de %d piezas.", pago_tune[playerid], i_);
				if(i_ != 0) _Mensaje(playerid, 5, "0", string);
				ActualizarMods(vehicleid);
				i_Empresa[e_tune[playerid]][eDinero] += floatround(pago_tune[playerid]*0.7);
				DarDineroGC(id_tune[playerid], floatround(pago_tune[playerid]*0.3));
				DarDineroGC(playerid, -pago_tune[playerid]);
				id_tune[playerid] = -1;
				e_tune[playerid] = -1;
				veh_tune[playerid] = 0;
				pago_tune[playerid] = 0;
				VehSeguro[vehicleid] = 0;
				ActualizarMods(vehicleid);
				return 1;
			}
			else
			{
				Menu_Tuneo(playerid);
			}
		}

		case D_VEH2MENU:
		{
			if (!response) return _Mensaje(playerid, 1, "0", "Cerraste el menú de vehículos.");
			for (new i = 0; i < 6; i++)
			{
				if (listitem == i)
				{
					new veh = es_patente(user[playerid][j2Vehiculos][i]);
					if (veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 1, "0", "Ranura vacía.");

					new text_s[256], dialog[1024];
					if(i_Vehiculo[veh-1000][vSpawned] == 0) format(text_s, sizeof(text_s), "{00BE00}Sacar vehículo\n");
					else format(text_s, sizeof(text_s), "{ff0000}Guardar vehículo\n");
					strcat(dialog, text_s);

					format(text_s, sizeof(text_s),
					"Ubicación\n\
					Información\n\
					Tirar llave");

					strcat(dialog, text_s);
					ExPlayerDialog(playerid, D_op2Veh_1, DIALOG_STYLE_LIST, "{D6E1EB}Opciones:", dialog, "Seleccionar", "Volver");

					SetPVarInt(playerid, "op_2coches", veh-1000);
					return 1;
				}
			}
		}

		case D_op2Veh_1:
		{
			if(!response) return cmd_coches2(playerid);
			if(GetPVarInt(playerid, "op_2coches") == 0) return cmd_coches2(playerid);

			new veh = GetPVarInt(playerid, "op_2coches");
			DeletePVar(playerid, "op_2coches");
			switch(listitem)
			{
				case 0: //spawn-unspawn
				{
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh][vSpawned] == 0)
					{
						if(veh_spawn[playerid] >= 2) return _Mensaje(playerid, 0, "0", "ERROR: Sólo puedes sacar dos vehículos, guarda uno para sacar otro.");
						VehiculoSacar(veh,playerid);
						Mensaje_(playerid, 0xADC3E7FF, "Vehículo spawneado correctamente, se encuentra en su última posición.");
						veh_spawn[playerid]++;
						return 1;
					}
					else if(i_Vehiculo[veh][vSpawned] == 1)
					{
						new Float: vx, Float: vy, Float: vz;
						GetVehiclePos(i_Vehiculo[veh][vID], vx, vy, vz);
						if(!en_pos(playerid,10,vx, vy, vz)) return _Mensaje(playerid, 0, "0", "ERROR: Debes estar cerca del vehículo, por lo menos unos 10 metros.");
						if(IsVehicleBusy(i_Vehiculo[veh][vID])) return _Mensaje(playerid, 0, "0", "ERROR: El vehículo posee jugadores dentro de el, no puede ser guardado.");
						VehiculoGuardar(veh, playerid);
						Mensaje_(playerid, 0xADC3E7FF, "El vehículo seleccionado fue guardado correctamente.");
						if(veh_spawn[playerid] >= 1) veh_spawn[playerid]--;
						return 1;
					}
				}
				case 1: //ubicación
				{
				    new Float: carPos[3], zone[MAX_ZONE_NAME];
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "0", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh][vEnDeposito] == 1) return _Mensaje(playerid, 0, "0", "No puedes localizar un vehículo confiscado.");
					if(i_Vehiculo[veh][vSpawned] == 0) return _Mensaje(playerid, 0, "0", "No puedes localizar vehículos guardados.");

					GetVehiclePos(i_Vehiculo[veh][vID], carPos[0], carPos[1], carPos[2]);
					GetCar3DZone(i_Vehiculo[veh][vID], zone, sizeof(zone));
					format(string, sizeof(string), "Vehículo localizado en %s.", zone);
					_Mensaje(playerid, 2, "0", string);
					set_checkpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					SetPVarInt(playerid, "EnCheckPoint", 1);
					vehicleSave(veh);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 2: //información
				{
					new _dialog1[3000], _dialog2[300], _dialog3[300];

					strcat(_dialog1, "{ffffff}Información del vehículo:\n\n");

					if (i_Vehiculo[veh][vID] != 0)
					{
						format(_dialog2, sizeof(_dialog2),
						"{ffffff}Matricula: {b0b0b0}LS-%d\n{ffffff}Precio actual: {00c200}$%d\n{ffffff}Multa a pagar: {b0b0b0}$%d\n{ffffff}Propietario: {b0b0b0}%s\n\n",
						i_Vehiculo[veh][vLlave],
						i_Vehiculo[veh][vPrecio]/2,
						i_Vehiculo[veh][vMulta],
						i_Vehiculo[veh][vDueno]);
						strcat(_dialog1, _dialog2);

						new vehicleid = i_Vehiculo[veh][vID];
						new engine, lights, alarm, doors, bonnet, boot, objective, enginestatus[50], lightstatus[50];
						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "657", "Este vehiculo no necesita gasolina.");
						if (engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "{f90000}Apagado{ffffff}");
						else format(enginestatus, sizeof(enginestatus), "{00c200}Encendido{ffffff}");
						if (lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "{f90000}OFF{ffffff}");
						else format(lightstatus, sizeof(lightstatus), "{00c200}ON{ffffff}");

						format(_dialog2, sizeof(_dialog2), "{ffffff}Motor: %s\nLuces: %s\nGasolina: {b0b0b0}%d litros\n", enginestatus, lightstatus, veh_gasolina[vehicleid]);
						strcat(_dialog1, _dialog2);
					}
					else
					{
						format(_dialog2, sizeof(_dialog2),
						"{ffffff}Matricula: {b0b0b0}LS-%d\n{ffffff}Precio actual: {00c200}$%d\n{ffffff}Multa a pagar: {b0b0b0}$%d\n{ffffff}Propietario: {b0b0b0}%s\n{ffffff}Gasolina: {b0b0b0}%d litros\n\n",
						i_Vehiculo[veh][vLlave],
						i_Vehiculo[veh][vPrecio]/2,
						i_Vehiculo[veh][vMulta],
						i_Vehiculo[veh][vDueno],
						i_Vehiculo[veh][vGasolina]);
						strcat(_dialog1, _dialog2);
					}
					format(_dialog3, sizeof(_dialog3), "{b0b0b0}Modelo: %s		", nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400]);
			        ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Cerrar", "");
				}
				case 3: //tirar llave
				{
					for(new x = 0; x < 6; x++)
					{
						if(i_Vehiculo[veh][vPatente] == user[playerid][j2Vehiculos][x])
						{
							format(string, sizeof(string), "Has tirado las llaves LS-%d (%s).", veh+1000, nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400]);
							_Mensaje(playerid, 2, "0", string);
							user[playerid][j2Vehiculos][x] = 0;
							user[playerid][j2Vehixculos][x] = 0;
							return 1;
						}
					}
					Mensaje_(playerid, -1, "ERROR; Avise al programador de este mensaje.");
				}
			}
		}

		case D_VEHMENU:
		{
			if (!response) return _Mensaje(playerid, 1, "0", "Cerraste el menú de vehículos.");
			for (new i = 0; i < 6; i++)
			{
				if (listitem == i)
				{
					new veh = user[playerid][jLlaveCoche][i];
					if (veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 1, "0", "Ranura vacía.");

					new text_s[256], dialog[1024];
					if(i_Vehiculo[veh-1000][vSpawned] == 0) format(text_s, sizeof(text_s), "{00BE00}Sacar vehículo\n");
					else format(text_s, sizeof(text_s), "{ff0000}Guardar vehículo\n");
					strcat(dialog, text_s);

					format(text_s, sizeof(text_s),
					"Ubicación\n\
					Dar llaves\n\
					Información\n\
					Eliminar vehículo\n\
					{90C3D4}Desbug vehículo");

					strcat(dialog, text_s);
					ExPlayerDialog(playerid, D_opVeh_1, DIALOG_STYLE_LIST, "{D6E1EB}Opciones:", dialog, "Seleccionar", "Volver");

					SetPVarInt(playerid, "op_coches", veh-1000+1);
					SetPVarInt(playerid, "op_coches2", i);
					return 1;
				}
			}
		}
		case D_opVeh_1:
		{
			if(!response) return cmd_coches(playerid);
			if(GetPVarInt(playerid, "op_coches") == 0) return cmd_coches(playerid);

			new veh = GetPVarInt(playerid, "op_coches")-1;
			DeletePVar(playerid, "op_coches");
			switch(listitem)
			{
				case 0: //spawn-unspawn
				{
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh][vSpawned] == 0)
					{
						new spawnr = 0;
						for(new x = 0; x < 6; x++)
						{
							new veh2 = user[playerid][jLlaveCoche][x];
							if(veh2 != 0) if(i_Vehiculo[veh2-1000][vSpawned] == 1) spawnr++;
						}
						if(spawnr >= 3) return _Mensaje(playerid, 0, "0", "ERROR: Sólo puedes tener tres vehículos fuera, guarda uno para sacar otro.");
						VehiculoSacar(veh,playerid);
						Mensaje_(playerid, 0xADC3E7FF, "Vehículo spawneado correctamente, se encuentra en su última posición.");
						return 1;
					}
					else if(i_Vehiculo[veh][vSpawned] == 1)
					{
						new Float: vx, Float: vy, Float: vz;
						GetVehiclePos(i_Vehiculo[veh][vID], vx, vy, vz);
						if(!en_pos(playerid,10,vx, vy, vz)) return _Mensaje(playerid, 0, "0", "ERROR: Debes estar cerca del vehículo, por lo menos unos 10 metros.");
						if(IsVehicleBusy(i_Vehiculo[veh][vID])) return _Mensaje(playerid, 0, "0", "ERROR: El vehículo posee jugadores dentro de el, no puede ser guardado.");
						VehiculoGuardar(veh, playerid);
						Mensaje_(playerid, 0xADC3E7FF, "El vehículo seleccionado fue guardado correctamente.");
						return 1;
					}
				}
				case 1: //ubicación
				{
				    new Float: carPos[3], zone[MAX_ZONE_NAME];
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "0", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh][vEnDeposito] == 1) return _Mensaje(playerid, 0, "0", "No puedes localizar un vehículo confiscado.");
					if(i_Vehiculo[veh][vSpawned] == 0) return _Mensaje(playerid, 0, "0", "No puedes localizar vehículos guardados.");

					GetVehiclePos(i_Vehiculo[veh][vID], carPos[0], carPos[1], carPos[2]);
					GetCar3DZone(i_Vehiculo[veh][vID], zone, sizeof(zone));
					format(string, sizeof(string), "Vehículo localizado en %s.", zone);
					_Mensaje(playerid, 2, "0", string);
					set_checkpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					SetPVarInt(playerid, "EnCheckPoint", 1);
					vehicleSave(veh);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 2: //dar llaves
				{
					ExPlayerDialog(playerid, D_opVeh_2, DIALOG_STYLE_INPUT, "Dar llaves", "Ingrese la ID del jugador", "Siguiente", "Inicio");
				}
				case 3: //información
				{
					new _dialog1[3000], _dialog2[300], _dialog3[300];

					strcat(_dialog1, "{ffffff}Información del vehículo:\n\n");

					if (i_Vehiculo[veh][vID] != 0)
					{
						format(_dialog2, sizeof(_dialog2),
						"{ffffff}Matricula: {b0b0b0}LS-%d\n{ffffff}Precio actual: {00c200}$%d\n{ffffff}Multa a pagar: {b0b0b0}$%d\n{ffffff}Propietario: {b0b0b0}%s\n\n",
						i_Vehiculo[veh][vLlave],
						i_Vehiculo[veh][vPrecio]/2,
						i_Vehiculo[veh][vMulta],
						i_Vehiculo[veh][vDueno]);
						strcat(_dialog1, _dialog2);

						new vehicleid = i_Vehiculo[veh][vID];
						new engine, lights, alarm, doors, bonnet, boot, objective, enginestatus[50], lightstatus[50];
						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "657", "Este vehiculo no necesita gasolina.");
						if (engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "{f90000}Apagado{ffffff}");
						else format(enginestatus, sizeof(enginestatus), "{00c200}Encendido{ffffff}");
						if (lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "{f90000}OFF{ffffff}");
						else format(lightstatus, sizeof(lightstatus), "{00c200}ON{ffffff}");

						format(_dialog2, sizeof(_dialog2), "{ffffff}Motor: %s\nLuces: %s\nGasolina: {b0b0b0}%d litros\n", enginestatus, lightstatus, veh_gasolina[vehicleid]);
						strcat(_dialog1, _dialog2);
					}
					else
					{
						format(_dialog2, sizeof(_dialog2),
						"{ffffff}Matricula: {b0b0b0}LS-%d\n{ffffff}Precio actual: {00c200}$%d\n{ffffff}Multa a pagar: {b0b0b0}$%d\n{ffffff}Propietario: {b0b0b0}%s\n{ffffff}Gasolina: {b0b0b0}%d litros\n\n",
						i_Vehiculo[veh][vLlave],
						i_Vehiculo[veh][vPrecio]/2,
						i_Vehiculo[veh][vMulta],
						i_Vehiculo[veh][vDueno],
						i_Vehiculo[veh][vGasolina]);
						strcat(_dialog1, _dialog2);
					}
					format(_dialog3, sizeof(_dialog3), "{b0b0b0}Modelo: %s		", nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400]);
			        ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Cerrar", "");
				}
				case 4: //eliminar vehículo
				{
				    format(string, sizeof(string),
					"{ffffff}¿Estás seguro que quieres eliminar este vehículo?\n\
					{ffffff}     Modelo: %s - Matricula: {f00000}LS-%d\n", nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400], i_Vehiculo[veh][vLlave]);
					ExPlayerDialog(playerid, D_opVeh_3, DIALOG_STYLE_MSGBOX, "{D6E1EB}Eliminación del vehículo", string, "Eliminar", "Inicio");
				}
				case 5: //desbug vehículo
				{
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "0", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh][vEnDeposito] == 1) return _Mensaje(playerid, 0, "0", "No puedes desbugear un vehículo confiscado.");
					if(i_Vehiculo[veh][vSpawned] == 0) return _Mensaje(playerid, 0, "0", "No puedes desbugear vehículos guardados.");
					format(string, sizeof(string),
					"El vehículo será movido a tu dimensión e interior actual (VW: %d - INT: %d)\n\
					Si estás seguro del Modelo: %s - Matricula: LS-%d, pulse Continuar.\n", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400], i_Vehiculo[veh][vLlave]);
					ExPlayerDialog(playerid, D_opVeh_4, DIALOG_STYLE_MSGBOX, "{D6E1EB}Desbug vehículo", string, "Continuar", "Inicio");
				}
			}
		}
		case D_opVeh_2:
		{
			if (!response) return cmd_coches(playerid);
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			new idjugador = strval(inputtext);
			if (playerid == idjugador) return _Mensaje(playerid, 0, "74", "ERROR: No puedes darte las llaves a ti mismo.");
			if (!IsPlayerConnected(idjugador)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
			new tieneslotlibre = -1, vid = user[playerid][jLlaveCoche][GetPVarInt(playerid, "op_coches2")];
			for(new x=0; x<6; x++)
			{
				if(user[idjugador][j2Vehiculos][x] == 0)
				{
					tieneslotlibre = x;
					break;
				}
			}
			if(tieneslotlibre == -1){_Mensaje(playerid, 0, "133", "Ese jugador tiene todas las llaves de vehículos prestados ocupados."); return 1;}
			for(new x=0; x<6; x++) if(i_Vehiculo[vid-1000][vPatente] == user[idjugador][j2Vehiculos][x])return _Mensaje(playerid, 0, "133", "Ese jugador ya tiene una llave prestada de ese vehículo.");
			PrestadorCoche[idjugador] = playerid;
			LlavePrestada[idjugador] = i_Vehiculo[vid-1000][vPatente];
			format(string, sizeof(string), "* Has ofrecido la llave de tu vehículo LS-%d a %s. Espera una respuesta.", vid, nombre_pj(idjugador, 0));
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "* %s te ha ofrecido la llave de su vehículo LS-%d. Escribe /aceptar para aceptarla.", nombre_pj(playerid, 0), vid);
			_Mensaje(idjugador, 4, "33CCFF", string);
			DeletePVar(playerid, "op_coches2");
			SetPVarInt(idjugador, "num_veh", vid);
			return 1;
		}
		case D_opVeh_3:
		{
			if (!response) return cmd_coches(playerid);
			new id = GetPVarInt(playerid, "op_coches2");

			VehiculoBorrar(user[playerid][jLlaveCoche][id]-1000);
			_Mensaje(playerid, 2, "0", "Vehículo borrado con éxito.");
			user[playerid][jLlaveCoche][id] = 0;
			characterSave(playerid);
			DeletePVar(playerid, "op_coches2");
			return 1;
		}
		case D_opVeh_4:
		{
			if (!response) return cmd_coches(playerid);
			new id = GetPVarInt(playerid, "op_coches2");
			new vid = user[playerid][jLlaveCoche][id]-1000;
			i_Vehiculo[vid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
			i_Vehiculo[vid][vInterior] = GetPlayerInterior(playerid);

          	SetVehicleVirtualWorld(i_Vehiculo[vid][vID], i_Vehiculo[vid][vVirtualWorld]);
           	LinkVehicleToInterior(i_Vehiculo[vid][vID], i_Vehiculo[vid][vInterior]);
           	
			format(string, sizeof(string), "* Desbug vehículo dimensión %d e interior %d con éxito.", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			_Mensaje(playerid, 2, "0", string);
			vehicleSave(vid, 0);
			return 1;
		}
		case D_MusiCar:
		{
			if(!response) return _Mensaje(playerid, 0, "0", "Cerraste el menú de la radio.");
			switch(listitem)
			{
				case 0:
				{
					if(GetPVarType(playerid, "AreaVehMus"))
					{
						foreach(new i: Player)
						{
							if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
							{
								PararMVeh(i);
							}
						}
						DeletePVar(playerid, "AreaVehMus");
					}
					_Mensaje(playerid, 1, "0", "Apagaste el stereo.");
					DeletePVar(playerid, "AreaVehPos");
				}
				case 1:
				{
					new StationsDialog[2500];
					strcat(StationsDialog, "Número\tNombre\tGénero\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}1\t{FFFFFF}54 House\t{00A2FF}Electro\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}2\t{FFFFFF}Top Latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}3\t{FFFFFF}Dubbase.FM\t{00A2FF}Dubstep\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}4\t{FFFFFF}Reggae Hits\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}5\t{FFFFFF}MBradio.FM\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}6\t{FFFFFF}Classical Weta 90.9FM\t{00A2FF}Classic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}7\t{FFFFFF}LOVE TIMES\t{00A2FF}Classic romantic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}8\t{FFFFFF}Soft Rock Cafe\t{00A2FF}Heavy Metal\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}9\t{FFFFFF}HardRadio.com\t{00A2FF}Rock\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}10\t{FFFFFF}Aural Moon\t{00A2FF}Punk\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}11\t{FFFFFF}Idobi Radio\t{00A2FF}Electronic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}12\t{FFFFFF}www.Hot108.com\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}13\t{FFFFFF}Sensacion Peru\t{00A2FF}Pop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}14\t{FFFFFF}DEEGAY RADIO\t{00A2FF}Dance Pop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}15\t{FFFFFF}PaganMetalRadio\t{00A2FF}Extreme Metal\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}16\t{FFFFFF}PulsRadio TRANCE\t{00A2FF}Electronic\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}17\t{FFFFFF}The Trip\t{00A2FF}Music Usa\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}18\t{FFFFFF}Parazitii Club\t{00A2FF}Gangsta Rap\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}19\t{FFFFFF}Amor latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}20\t{FFFFFF}Hotmixradio\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}21\t{FFFFFF}RadioHot69\t{00A2FF}Variado\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}22\t{FFFFFF}Radio Hunter\t{00A2FF}Electrónica\n", sizeof(StationsDialog));
					strcat(StationsDialog, "{00C200}23\t{FFFFFF}92.5 The River\t{00A2FF}Alternative", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_MusiCar3, DIALOG_STYLE_TABLIST_HEADERS, "{00C200}Radios", StationsDialog, "Seleccionar", "Cancelar");
				}
				case 2: ExPlayerDialog(playerid, D_MusiCar2, DIALOG_STYLE_INPUT, "Url - Internet", "Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "Cancelar");
			}
			return 1;
		}
		case D_MusiCar2:
		{
			if(response)
			{
				if(isnull(inputtext)) return _Mensaje(playerid, 0, "0", "No has introducido ningún URL.");
				if(strlen(inputtext))
				{
					_stereo(playerid, inputtext);
				}
			} else return 1;
		}
		case D_MusiCar3:
		{
			if(!response) return _Mensaje(playerid, 0, "0", "Cancelaste la selección.");
			switch(listitem)
			{
				case 0: _stereo(playerid, "http://54house.stream-balancer.de:80");
				case 1: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147");
				case 2: _stereo(playerid, "http://148.251.91.15:7004");
				case 3: _stereo(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u");
				case 4: _stereo(playerid, "http://216.230.231.122:8000/MP3128");
				case 5: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145");
				case 6: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858");
				case 7: _stereo(playerid, "http://173.244.215.163:8380");
				case 8: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421");
				case 9: _stereo(playerid, "http://64.202.98.133:2010");
				case 10: _stereo(playerid, "http://50.117.115.211:80");
				case 11: _stereo(playerid, "http://108.61.30.179:4010");
				case 12: _stereo(playerid, "http://50.7.64.226:80/frisky_mp3_hi");
				case 13: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543");
				case 14: _stereo(playerid, "http://62.210.209.179:8030/stream");
				case 15: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323");
				case 16: _stereo(playerid, "http://somafm.com/tags.pls");
				case 17: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187");
				case 18: _stereo(playerid, "http://s3.voscast.com:8002/;.m3u");
				case 19: _stereo(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u");
				case 20: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562");
				case 21: _stereo(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel");
				case 22: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126");
			}
			return 1;
		}
		case D_Ilista:
		{
			if(response)
			{
				if(DestroyFire(sel_incendio[playerid][listitem]))
				{
					ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Incendios - Información", "{00C200}Incendio eliminado correctamente.", "Aceptar", "");
				}
				else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Incendios - Información", "{F50000}Este incendio ya fue eliminado!", "Aceptar", "");
			}
		}
		case D_Ibuscar:
		{
			if(response)
			{
				new i = sel_incendio[playerid][listitem];
				if(Incendios[i][pIDI] == 0) return _Mensaje(playerid, 1, "0", "El incendio ya fue destruido.");
				SetPVarInt(playerid, "EnCheckPoint", 1);
				if(Incendios[i][pType] == 0) set_checkpoint(playerid, i_Casa[Incendios[i][pIDI]][cExteriorX], i_Casa[Incendios[i][pIDI]][cExteriorY], i_Casa[Incendios[i][pIDI]][cExteriorZ], 2);
				else set_checkpoint(playerid, i_Negocio[Incendios[i][pIDI]][nExteriorX], i_Negocio[Incendios[i][pIDI]][nExteriorY], i_Negocio[Incendios[i][pIDI]][nExteriorZ], 2);
				_Mensaje(playerid, 2, "0", "El incendio fue marcado en el mapa.");
			}
		}
		case D_ACCESORIOS:
		{
			if(!response) return 0;
			if(InfoAccesorio[playerid][listitem][aModelo] == 0)
			{
				ExPlayerDialog(playerid, D_ACCESORIOS5, DIALOG_STYLE_MSGBOX, "{D6E1EB}Error", "Ranura vacía.", "Volver", "Cerrar");
			}
			else
			{
				EditarAccesorio(playerid,listitem);
				RanuraSeleccionada[playerid] = listitem;
			}
		}
		case D_ACCESORIOS5:
		{
			if(!response) return 0;
			new TextAcc[512];
			for(new x; x < MAX_uACCESORIOS; x++)
			{
				new NombreAcc[128];
				format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
				for(new i; i < sizeof(Accesorios); i++)
				{
					if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
					{
						format(NombreAcc, sizeof(NombreAcc), "%s%s", color_objeto(playerid, x), Accesorios[i][NombreAccesorio]);
					}
				}
				format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
			}
			ExPlayerDialog(playerid, D_ACCESORIOS, DIALOG_STYLE_LIST, "{D6E1EB}Accesorios", TextAcc, "Seleccionar", "Cancelar");
		}
		case D_ACCESORIOS2:
			if(response) switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_ACCESORIOS4, DIALOG_STYLE_INPUT, "{D6E1EB}Dar accesorio", "{FFFFFF}Por favor ingrese la {00C200}ID del jugador", "Siguiente", "Cancelar");
				case 1: //tirar accesorio
				{
					if (RanuraSeleccionada[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No has seleccionado algún accesorio.");
					new Float: X, Float: Y, Float: Z;
					GetPlayerPos(playerid, X, Y, Z);
					new World = GetPlayerVirtualWorld(playerid), Interior = GetPlayerInterior(playerid);
					TirarAcc(InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo], X, Y - 0.3, Z, World, Interior, playerid);
					new NombreAcc[32];
					for(new ir; ir < sizeof(Accesorios); ir++)
					{
						if(Accesorios[ir][ModeloAccesorio] == InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo])
						{
							format(NombreAcc, sizeof(NombreAcc), "%s", Accesorios[ir][NombreAccesorio]);
						}
					}
					new MsgCheckMe[MAX_TEXT_CHAT];
					format(MsgCheckMe, sizeof(MsgCheckMe), "tira al suelo un accesorio %s.", NombreAcc);
					accion_rol(playerid, 0, MsgCheckMe);
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 0;
					if(IsPlayerAttachedObjectSlotUsed(playerid, RanuraSeleccionada[playerid])) RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);
					format(string, sizeof(string), "Tiraste el accesorio {00c200}%s #%d{ffffff}.", NombreAcc, RanuraSeleccionada[playerid]);
					_Mensaje(playerid, 4, "ffffff", string);
					RanuraSeleccionada[playerid] = -1;
					return 1;
				}
				case 2: //editar accesorio
				{
					if (RanuraSeleccionada[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No has seleccionado algún accesorio.");
					ColocarObject(playerid, RanuraSeleccionada[playerid], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX],
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY], InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ]);
					EditAttachedObject(playerid, RanuraSeleccionada[playerid]);
					EditandoObjetoJ[playerid] = 1;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 1;
					Mensaje_(playerid, -1, "Mantén presionado {90C3D4}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
				}
				case 3: ExPlayerDialog(playerid, D_ACCESORIOS3, DIALOG_STYLE_LIST, "{D6E1EB}Hueso", "Espina\nCabeza\nBrazo Izq\nBrazo Der\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAntebrazo Izq\nAntebrazo Der\nClavicula Izq\nClavicula Der\nCuello\nMandíbula", "Elegir", "Salir");
				case 4: //poner - quitar accesorio
				{
					if (RanuraSeleccionada[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No has seleccionado algún accesorio.");
					if(IsPlayerAttachedObjectSlotUsed(playerid, RanuraSeleccionada[playerid]))
					{
						_Mensaje(playerid, 4, "F8D48C", "Retiraste correctamente el accesorio.");
						RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 0;
						RanuraSeleccionada[playerid] = -1;
						return 1;
					}
					else
					{
						ColocarObject(playerid, RanuraSeleccionada[playerid],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY],
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ]);
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 1;
						_Mensaje(playerid, 4, "F8D48C", "Colocaste correctamente el accesorio.");
						RanuraSeleccionada[playerid] = -1;
						return 1;
					}
				}
				case 5: //borrar accesorio
				{
					if (RanuraSeleccionada[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No has seleccionado algún accesorio.");
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 0;
					if(IsPlayerAttachedObjectSlotUsed(playerid, RanuraSeleccionada[playerid])) RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);
					format(string, sizeof(string), "Eliminaste el accesorio de la Ranura %d.", RanuraSeleccionada[playerid]);
					RanuraSeleccionada[playerid] = -1;
					_Mensaje(playerid, 4, "b0b0b0", string);
					return 1;
				}
            }
		case D_ACCESORIOS3:
				if(response) InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = listitem + 1;
		case D_ACCESORIOS4:
		{
			if (!response) return 0;
			if (!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			new idjugador = strval(inputtext);
			if (playerid == idjugador) return _Mensaje(playerid, 0, "74", "No puedes cederte el accesorio a ti mismo.");
			if (!IsPlayerConnected(idjugador)) return _Mensaje(playerid, 0, "75", "El jugador seleccionado no se encuentra conectado.");
			if (!CercaDelWeon(8.0, playerid, idjugador)) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
			if (Spectando[idjugador] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
			for (new ida; ida < MAX_uACCESORIOS; ida++)
			{
				if (InfoAccesorio[idjugador][ida][aModelo] == 0)
				{
					new NombreAcc[32];
					for(new ir; ir < sizeof(Accesorios); ir++)
					{
						if(Accesorios[ir][ModeloAccesorio] == InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo])
						{
							format(NombreAcc, sizeof(NombreAcc), "%s", Accesorios[ir][NombreAccesorio]);
						}
					}
					new MsgCheckMe[MAX_TEXT_CHAT];
					format(MsgCheckMe, sizeof(MsgCheckMe), "cede a %s un accesorio %s.", nombre_pj(idjugador, 0), NombreAcc);
					accion_rol(playerid, 0, MsgCheckMe);
					InfoAccesorio[idjugador][ida][aModelo] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo];
					InfoAccesorio[idjugador][ida][aParte] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte];
					InfoAccesorio[idjugador][ida][aPosicionX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX];
					InfoAccesorio[idjugador][ida][aPosicionY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY];
					InfoAccesorio[idjugador][ida][aPosicionZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ];
					InfoAccesorio[idjugador][ida][aRotacionX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX];
					InfoAccesorio[idjugador][ida][aRotacionY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY];
					InfoAccesorio[idjugador][ida][aRotacionZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ];
					InfoAccesorio[idjugador][ida][aEscalaZ] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ];
					InfoAccesorio[idjugador][ida][aEscalaY] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY];
					InfoAccesorio[idjugador][ida][aEscalaX] = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX];
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 0.0;
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aColocado] = 0;
					if(IsPlayerAttachedObjectSlotUsed(playerid, RanuraSeleccionada[playerid])) RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);
					RanuraSeleccionada[playerid] = -1;
					RanuraSeleccionada[idjugador] = -1;
					return 1;
				}
			}
		}
		case D_Toys:
		{
			if(!response) return Mensaje_(playerid, 0xb0b0b0ff, "Cancelaste la compra de accesorios.");
			if(InfoAccesorio[playerid][listitem][aModelo] != 0) return _Mensaje(playerid, 0, "39", "Ya tienes en uso esa ranura.");
			RanuraSeleccionada[playerid] = listitem;
			menu_selection(playerid, AccesoriosN, "Accesorios");
		}
		case D_COMPRARTOYVIP:
		{
			if(response)
			{
				if(user[playerid][jPremium] < 1) return _Mensaje(playerid, 0, "40", "No tienes acceso a este privilegio.");
				new TextAcc[512];
				for(new x; x < MAX_uACCESORIOS; x++)
				{
					new NombreAcc[128];
					format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
					for(new i; i < sizeof(Accesorios); i++)
					{
						if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
						{
							format(NombreAcc, sizeof(NombreAcc), "%s%s", color_objeto(playerid, x), Accesorios[i][NombreAccesorio]);
						}
					}
					format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
				}
				ExPlayerDialog(playerid, D_COMPRARTOYVIP2, DIALOG_STYLE_LIST, "{D6E1EB}Accesorios", TextAcc, "Seleccionar", "Cancelar");
			}
		}
		case D_COMPRARTOYVIP2:
			if(response)
			{
				if(user[playerid][jPremium] < 1) return _Mensaje(playerid, 0, "40", "No tienes acceso a este privilegio.");
				RanuraSeleccionada[playerid] = listitem;
				menu_selection(playerid, AccesoriosVIP, "Accesorios vip's");
			} else return 1;
		case D_COMPRARTOYPD:
		{
			if(response)
			{
				new TextAcc[512];
				for(new x; x < MAX_uACCESORIOS; x++)
				{
					new NombreAcc[128];
					format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
					for(new i; i < sizeof(Accesorios); i++)
					{
						if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
						{
							format(NombreAcc, sizeof(NombreAcc), "%s%s", color_objeto(playerid, x), Accesorios[i][NombreAccesorio]);
						}
					}
					format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
				}
				ExPlayerDialog(playerid, D_COMPRARTOYPD2, DIALOG_STYLE_LIST, "{D6E1EB}Accesorios", TextAcc, "Seleccionar", "Cancelar");
			}
		}
		case D_COMPRARTOYPD2:
		{
			if(response)
			{
				if(InfoAccesorio[playerid][listitem][aModelo] != 0) return _Mensaje(playerid, 0, "39", "Ya tienes algo en esa ranura.");
				RanuraSeleccionada[playerid] = listitem;
				new stringg[700];
				for(new x; x < sizeof(AccesoriosPD); x++)
				{
					format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, AccesoriosPD[x][NombreAccesorio], AccesoriosPD[x][PrecioAccesorio]);
				}
				ExPlayerDialog(playerid, D_COMPRARTOYPD3, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona un accesorio", stringg, "Comprar", "Cancelar");
			}
		}
		case D_COMPRARTOYPD3:
		{
			if(response)
			{
				if(ComprobarDineroJ(playerid) < AccesoriosPD[listitem][PrecioAccesorio])
				{
					_Mensaje(playerid, 0, "41", "Usted no posee suficiente dinero.");

				}
				else
				{
					DarDineroGC(playerid, -AccesoriosPD[listitem][PrecioAccesorio]);
					InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo] = AccesoriosPD[listitem][ModeloAccesorio];
					d_estado += AccesoriosPD[listitem][PrecioAccesorio];
					new modelid = InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aModelo];
					if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 2;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.9;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.35;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else if(modelid >= 18891 && modelid <= 18910)
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 2;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.15;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 180.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else if(modelid >= 18926 && modelid <= 18935)
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 2;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else if(modelid >= 18911 && modelid <= 18920)
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 2;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.035;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 180.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 90.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else if(modelid == 19078 || modelid == 19078)
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 16;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 180.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 180.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 6;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}
					else
					{
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aParte] = 2;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionX] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aPosicionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionX] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionY] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aRotacionZ] = 0.0;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaX] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaY] = 1;
						InfoAccesorio[playerid][RanuraSeleccionada[playerid]][aEscalaZ] = 1;
					}

					format(string, sizeof(string), "Compraste el accesorio %s por %d$.", AccesoriosPD[listitem][NombreAccesorio], AccesoriosPD[listitem][PrecioAccesorio]);
					Mensaje_(playerid, 0xA7CE00FF, string);
					_Mensaje(playerid, 4, "b0b0b0", "Escribe /accesorios para editarlo.");
				}
			}
		}
		case D_QUITARTUNNING:
			if(response)
			{
				new count = GetPVarInt(playerid, "modCount");
				for(new v = 0; v < MAX_VEHICULOS; v++) if(IsPlayerInVehicle(playerid, i_Vehiculo[v][vID])) for(new i = 0; i < count; i++) if(listitem == i) {
					new vid = i_Vehiculo[v][vLlave]-1000, vehiculo = i_Vehiculo[v][vID];
					format(string, sizeof(string), "partList%i", i);
					new partID = GetPVarInt(playerid, string);
					if(partID == 999) {
						for(new f = 0; f < MAX_MODVEHICULOS; f++) {
							RemoveVehicleComponent(vehiculo, GetVehicleComponentInSlot(vehiculo, f));
							i_Vehiculo[vid][vModificaciones][f] = 0;
							vehicleSave(vid);
						}
						return _Mensaje(playerid, 2, "0", "Se eliminaron todas las modificaciones de tu vehículo");
					}
					RemoveVehicleComponent(vehiculo, partID);
					i_Vehiculo[vid][vModificaciones][GetVehicleComponentType(partID)] = 0;
					vehicleSave(vid);
					return _Mensaje(playerid, 2, "0", "Ha sido eliminada la modificación seleccionada.");
				}
			}
		case D_ESTEREO:
		{
			if(!response) return _Mensaje(playerid, 0, "0", "Cancelaste la selección de emisoras.");
			switch(listitem)
			{
				case 0:
				{
					foreach(new i: Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(i))
					{
						StopAudioStreamForPlayer(i);
						estacionp[i] = 0;
						estacionveh[GetPlayerVehicleID(i)] = 0;
						alm(veh_music[GetPlayerVehicleID(playerid)], "nadauwu");
					}
				}
				case 1: _estereo(playerid, "http://54house.stream-balancer.de:80", 1);
				case 2: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147", 2);
				case 3: _estereo(playerid, "http://148.251.91.15:7004", 3);
				case 4: _estereo(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u", 4);
				case 5: _estereo(playerid, "http://216.230.231.122:8000/MP3128", 5);
				case 6: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145", 6);
				case 7: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858", 7);
				case 8: _estereo(playerid, "http://173.244.215.163:8380", 8);
				case 9: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421", 9);
				case 10: _estereo(playerid, "http://64.202.98.133:2010", 10);
				case 11: _estereo(playerid, "http://50.117.115.211:80", 11);
				case 12: _estereo(playerid, "http://108.61.30.179:4010", 12);
				case 13: _estereo(playerid, "http://50.7.64.226:80/frisky_mp3_hi", 13);
				case 14: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543", 14);
				case 15: _estereo(playerid, "http://62.210.209.179:8030/stream", 15);
				case 16: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323", 16);
				case 17: _estereo(playerid, "http://somafm.com/tags.pls", 17);
				case 18: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187", 18);
				case 19: _estereo(playerid, "http://s3.voscast.com:8002/;.m3u", 19);
				case 20: _estereo(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u", 20);
				case 21: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562", 21);
				case 22: _estereo(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel", 22);
				case 23: _estereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126", 23);
				case 24: ExPlayerDialog(playerid, D_ESTEREO2, DIALOG_STYLE_INPUT, "Url - Internet", "Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "Atrás");
			}
		}

		case D_ESTEREO2:
		{
			if(!response) return cmd_estereo(playerid);

			if(isnull(inputtext)) return _Mensaje(playerid, 0, "0", "No has introducido ningún URL.");
			if(strlen(inputtext))
			{
				_estereo(playerid, inputtext, 24);
				alm(veh_music[GetPlayerVehicleID(playerid)], inputtext);
			}
		}
		case D_CASIVIPSKIN:
		{
			if(response)
			{
				new skinid = strval(inputtext);
				if(!SeleccionSkin(skinid)) return _Mensaje(playerid, 0, "124", "ERROR: Selección de skin del 1 al 311.");
				user[playerid][jRopa] = skinid;
				SetPlayerSkin(playerid, user[playerid][jRopa]);
			}
		}
		case D_vip_locker:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú del casillero premium.");
			switch(listitem)
			{
				case 0:
				{
					if (color_general != 1) return _Mensaje(playerid, 0, "0", "color_TAB disabled");
					if (user[playerid][jColorP] == 0)
					{
						_Mensaje(playerid, 4, "C93CCE", "Activaste el color VIP en tu nombre!");
						user[playerid][jColorP] = 1;
					}
					else
					{
						_Mensaje(playerid, 4, "C93CCE", "Desactivaste el color VIP en tu nombre!");
						user[playerid][jColorP] = 0;
					}
				}
				case 1:
				{
					if(user[playerid][jSexo] == 1) menu_selection(playerid, SkinsHombre, "Ropa de hombre");
					else if(user[playerid][jSexo] == 2) menu_selection(playerid, SkinsMujer, "Ropa de mujer");
				}
				case 2:
				{
					new Float: health;
					GetPlayerHealth(playerid, health);
					new hpint = floatround(health, floatround_round);
					if(hpint >= 100) return _Mensaje(playerid, 0, "100", "ERROR: Ya posees la barra de vida al máximo.");
					Sangre_(playerid, 100);
					_Mensaje(playerid, 2, "0", "Restauraste tu vida al 100 por ciento.");
					_Limuerte(playerid);
					return 1;
				}
				case 3: ExPlayerDialog(playerid, D_VIPTRABAJO, DIALOG_STYLE_LIST, "{D6E1EB}VIP: Trabajos", "Carguero\nCarpintero\nPescador\nLeñador\nGranjero", "Seleccionar", "Cancelar");
				case 4:
				{
					if (user[playerid][jTiempos][5] != 0) return decir_eltiempo(playerid, 5);
					if (user[playerid][jPremium] == 2) user[playerid][jTiempos][5] = 480;
					else user[playerid][jTiempos][5] = 1440;
					DarDineroGC(playerid, 2000);
					user[playerid][jExperiencia] += 3;
					_Mensaje(playerid, 5, "0", "Felicidades recibiste: 2,000$ más tres puntos de experiencia.");
					return 1;
				}
			}
		}
		case D_VIPTRABAJO:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste la selección de trabajo.");
			switch(listitem)
			{
				case 0: SetPVarInt(playerid, "Trabajo_S", 1);
				case 1: SetPVarInt(playerid, "Trabajo_S", 10);
				case 2: SetPVarInt(playerid, "Trabajo_S", 3);
				case 3: SetPVarInt(playerid, "Trabajo_S", 4);
				case 4: SetPVarInt(playerid, "Trabajo_S", 6);
			}
			ExPlayerDialog(playerid, D_VIPTRABAJO2, DIALOG_STYLE_LIST, "{D6E1EB}VIP: Trabajos", "Ranura 1\nRanura 2\nRanura 3", "Seleccionar", "Cancelar");
		}
		case D_VIPTRABAJO2:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste la selección de trabajo.");
			switch(listitem)
			{
				case 0:
				{
					user[playerid][jTrabajo1] = GetPVarInt(playerid, "Trabajo_S");
					_Mensaje(playerid, 2, "0", "Cambiaste tu primer trabajo!");
				}
				case 1:
				{
					user[playerid][jTrabajo2] = GetPVarInt(playerid, "Trabajo_S");
					_Mensaje(playerid, 2, "0", "Cambiaste tu segundo trabajo!");
				}
				case 2:
				{
					user[playerid][jTrabajo3] = GetPVarInt(playerid, "Trabajo_S");
					_Mensaje(playerid, 2, "0", "Cambiaste tu tercer trabajo!");
				}
			}
		}
		case D_Ascensor:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú del elevador.");
			switch (listitem)
			{
				case 0: set_pos(playerid, 287.8700,-1609.0222,17.9553,171.0360,0,0), textgame_player(playerid, "~w~estacionamiento", 3000, 1); // estacionamiento
				case 1: set_pos(playerid, 287.4495,-1612.5898,32.9868,172.8926,0,0), textgame_player(playerid, "~w~planta baja", 3000, 1); // > piso baja
				case 2: set_pos(playerid, 287.3116,-1612.7666,47.0014,169.4459,0,0), textgame_player(playerid, "~w~piso 1", 3000, 1); // > 1
				case 3: set_pos(playerid, 287.3116,-1612.7666,51.5025,169.4459,0,0), textgame_player(playerid, "~w~piso 2", 3000, 1); // > 2
				case 4: set_pos(playerid, 287.3116,-1612.7666,56.0036,169.4459,0,0), textgame_player(playerid, "~w~piso 3", 3000, 1); // > 3
				case 5: set_pos(playerid, 287.3116,-1612.7666,60.5047,169.4459,0,0), textgame_player(playerid, "~w~piso 4", 3000, 1); // > 4
				case 6: set_pos(playerid, 287.3116,-1612.7666,65.0058,169.4459,0,0), textgame_player(playerid, "~w~piso 5", 3000, 1); // > 5
				case 7: set_pos(playerid, 287.3116,-1612.7666,69.5069,169.4459,0,0), textgame_player(playerid, "~w~piso 6", 3000, 1); // > 6
				case 8: set_pos(playerid, 287.2756,-1612.8395,73.9923,169.4459,0,0), textgame_player(playerid, "~w~piso 7", 3000, 1); // > 7
				case 9: set_pos(playerid, 287.2756,-1612.8395,78.4934,169.4459,0,0), textgame_player(playerid, "~w~piso 8", 3000, 1); // > 8
				case 10: set_pos(playerid, 287.2756,-1612.8395,82.9945,169.4459,0,0), textgame_player(playerid, "~w~piso 9", 3000, 1); // > 9
				case 11: set_pos(playerid, 287.2756,-1612.8395,87.4956,169.4459,0,0), textgame_player(playerid, "~w~piso 10", 3000, 1); // > 10
				case 12: set_pos(playerid, 287.2756,-1612.8395,91.9967,169.4459,0,0), textgame_player(playerid, "~w~piso 11", 3000, 1); // > 11
				case 13: set_pos(playerid, 287.2756,-1612.8395,96.4978,169.4459,0,0), textgame_player(playerid, "~w~piso 12", 3000, 1); // > 12
			}
		}
		case D_MULTA:
		{
			if(response)
			{
				if(user[playerid][jEstrellas] != 0)
				{
					format(string, sizeof(string), "CENTRAL: El sospechoso %s intenta pagar los cargos de un vehículo | Nivel de búsqueda: %i.", nombre_pj(playerid, 0), user[playerid][jEstrellas]);
					_MensajeRfac(1, C_COLORRADIO, string);
					return _Mensaje(playerid, 2, "0", "Los oficiales fueron comunicados al intentar pagar multas estando en ByC.");
				}
				for(new i = 0; i < 6; i++)
				{
					if(listitem == i)
					{
						new veh = user[playerid][jLlaveCoche][i];
						if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "Imposible realizar acciones en un vehículo que no existe.");
						new vid = veh-1000;
						if(i_Vehiculo[vid][vEnDeposito])
						{
							new multa = i_Vehiculo[vid][vMulta] + (user[playerid][jNivel]+1 * 3);
							if(ComprobarDineroJ(playerid) < multa) { return _Mensaje(playerid, 0, "689", "Usted no posee suficiente dinero."); }
							format(string, sizeof(string), "* Pagaste la multa para liberar tu %s por $%i.", nombre_vehiculo[i_Vehiculo[vid][vModelo] - 400], multa);
							_Mensaje(playerid, 4, "33CCFF", string);
							_Mensaje(playerid, 5, "0", "Tu vehículo se encuentra en el depósito, puedes abrir la reja escribiendo /deposito.");
							DarDineroGC(playerid, -multa);
							d_estado += multa;
							i_Vehiculo[vid][vEnDeposito] = 0;
							i_Vehiculo[vid][vMulta] = 0;
							vehicleSave(vid);
						}
						else if(i_Vehiculo[vid][vMulta])
						{
							if(ComprobarDineroJ(playerid) < i_Vehiculo[vid][vMulta]) { return _Mensaje(playerid, 0, "689", "Usted no posee suficiente dinero."); }
							DarDineroGC(playerid, -i_Vehiculo[vid][vMulta]);
							d_estado += i_Vehiculo[vid][vMulta];
							format(string, sizeof(string), "* Pagaste la multa de $%d de tu %s.", i_Vehiculo[vid][vMulta], nombre_vehiculo[i_Vehiculo[vid][vModelo] - 400]);
							_Mensaje(playerid, 4, "33CCFF", string);
							i_Vehiculo[vid][vMulta] = 0;
							vehicleSave(vid);
						} else _Mensaje(playerid, 0, "689", "El vehículo seleccionado se encuentra limpio.");
						return 1;
					}
				}
			}
		}
		case D_CAMELLO:
			if (response)
			{
				new
					location[MAX_ZONE_NAME],
					precio = 0,
					drogita[50];
				if(i_Familia[user[playerid][jMiembroFam]][fTipo] == 2) //mafia
				{
					switch(listitem)
					{
						case 0: precio = 6250, drogita = "Fardo de Cocaína";
						case 1: precio = 3125, drogita = "Fardo de Crack";
						case 2: precio = 2500, drogita = "Fardo de LSD";
						case 3: precio = 5000, drogita = "Fardo de Éxtasis";
						case 4: precio = 4375, drogita = "Fardo de Heroína";
						case 5: precio = 6875, drogita = "Fardo de PCP";
						case 6: precio = 6250, drogita = "Fardo de Ketamina";
						case 7: precio = 3750, drogita = "Fardo de Marihuana";
						case 8: precio = 4250, drogita = "Fardo de Hachis";
						case 9: precio = 500, drogita = "Paquete de Esteroides";
					}
				}
				else //general
				{
					switch(listitem)
					{
						case 0: precio = 1250, drogita = "Ziploc de cocaína";
						case 1: precio = 625, drogita = "Paquete de Crack";
						case 2: precio = 500, drogita = "Paquete de LSD";
						case 3: precio = 1000, drogita = "Paquete de Éxtasis";
						case 4: precio = 875, drogita = "Paquete de Heroína";
						case 5: precio = 1375, drogita = "Paquete de PCP";
						case 6: precio = 1250, drogita = "Paquete de Ketamina";
						case 7: precio = 750, drogita = "Paquete de Marihuana";
						case 8: precio = 850, drogita = "Paquete de Hachis";
					}
				}
				if (RevisarDinero(playerid, precio))
				{
					new rand = random(sizeof(d_trafico)), Float: _x, Float: _y, Float: _z, number;
					_x = d_trafico[rand][0];
					_y = d_trafico[rand][1];
					_z = d_trafico[rand][2];
					number = floatround(d_trafico[rand][3]);

					Get2DZone(location, MAX_ZONE_NAME, _x, _y, _z);

					format(string, sizeof(string), "[SMS: %d]: Necesito que vengas por el %s en %s.", number, drogita, location);
					_Mensaje(playerid, 4, "FFEA5F", string);

					p_drogas[playerid] = listitem ; //id droga / -1 invalido

					TogglePlayerAllDynamicCPs(playerid, false);
					set_checkpoint(playerid, _x, _y, _z, 2);
				}
			}
		case D_CAMELLO2:
			if (response)
			{
				new location[MAX_ZONE_NAME];
				if(i_Familia[user[playerid][jMiembroFam]][fTipo] == 2)
				{
				    switch(listitem)
				    {
						case 0: //molotov
						{
							if (!user[playerid][jPuntosRol][0]) return _Mensaje(playerid, 0, "9", "Debes tener al menos un punto de rol positivo.");
							if (RevisarDinero(playerid, 1200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 2442.9165, -1980.9652, 13.5448);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por la molotov en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 22;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 2442.9165, -1980.9652, 13.5448, 2);
							}
						}
						case 1: //colts
						{
							if (RevisarDinero(playerid, 2000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 81.3671, -162.7582, 2.5793);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por la caja de colts en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 2;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 81.3671, -162.7582, 2.5793, 2);
							}
						}
						case 2: //eagles
						{
							if (RevisarDinero(playerid, 8000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 730.1278, 296.5151, 20.2267);
								format(string, sizeof(string), "[SMS: 0067083]: Necesito que vengas por la caja de eagles en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 3;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 730.1278, 296.5151, 20.2267, 2);
							}
						}
						case 3: //tecs
						{
							if (RevisarDinero(playerid, 7000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 993.9947, -1263.2609, 15.0218);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por la caja de tecs en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 4;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 993.9947, -1263.2609, 15.0218, 2);
							}
						}
						case 4: //uzis
						{
							if (RevisarDinero(playerid, 7200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1680.5959, -2082.4014, 13.5660);
								format(string, sizeof(string), "[SMS: 0047001]: Necesito que vengas por la caja de uzis en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 5;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1680.5959, -2082.4014, 13.5660, 2);
							}
						}
						case 5: //escopetas
						{
							if (RevisarDinero(playerid, 18000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 284.2628, -1530.8906, 24.5884);
								format(string, sizeof(string), "[SMS: 5049927]: Necesito que vengas por la caja de shotguns en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 6;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 284.2628, -1530.8906, 24.5884, 2);
							}
						}
						case 6: //cargadores de colts
						{
							if (RevisarDinero(playerid, 800))
							{
								Get2DZone(location, MAX_ZONE_NAME, 81.3671, -162.7582, 2.5793);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por los cargadores de colts en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 7;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 81.3671, -162.7582, 2.5793, 2);
							}
						}
						case 7: //cargadores de eagles
						{
							if (RevisarDinero(playerid, 1200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 730.1278, 296.5151, 20.2267);
								format(string, sizeof(string), "[SMS: 0067083]: Necesito que vengas por los cargadores de eagles en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 8;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 730.1278, 296.5151, 20.2267, 2);
							}
						}
						case 8: //cargadores de tecs
						{
							if (RevisarDinero(playerid, 1000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 993.9947, -1263.2609, 15.0218);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por los cargadores de tecs en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 9;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 993.9947, -1263.2609, 15.0218, 2);
							}
						}
						case 9: //cargadores de uzis
						{
							if (RevisarDinero(playerid, 1050))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1680.5959, -2082.4014, 13.5660);
								format(string, sizeof(string), "[SMS: 0047001]: Necesito que vengas  por los cargadores de uzis en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 10;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1680.5959, -2082.4014, 13.5660, 2);
							}
						}
						case 10: //cargadores de escopetas
						{
							if (RevisarDinero(playerid, 1700))
							{
								Get2DZone(location, MAX_ZONE_NAME, 284.2628, -1530.8906, 24.5884);
								format(string, sizeof(string), "[SMS: 5049927]: Necesito que vengas por los cargadores de shotguns en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 11;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 284.2628, -1530.8906, 24.5884, 2);
							}
						}
						case 11: //colts+cargas
						{
							if (RevisarDinero(playerid, 2500))
							{
								Get2DZone(location, MAX_ZONE_NAME, 81.3671, -162.7582, 2.5793);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por las cajas en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 12;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 81.3671, -162.7582, 2.5793, 2);
							}
						}
						case 12: //tecs+cargas
						{
							if (RevisarDinero(playerid, 7200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 993.9947, -1263.2609, 15.0218);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por las cajas en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 13;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 993.9947, -1263.2609, 15.0218, 2);
							}
						}
						case 13: //ak
						{
							if (RevisarDinero(playerid, 28800))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1902.9418,178.8859,37.1332);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por las cajas en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 14;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1902.9418,178.8859,37.1332, 2);
							}
						}
						case 14: //cargas ak
						{
							if (RevisarDinero(playerid, 6400))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1902.9418,178.8859,37.1332);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por las cajas en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 15;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1902.9418,178.8859,37.1332, 2);
							}
						}
					}
				}
				else //resto de facciones
				{
				    switch(listitem)
				    {
						case 0: //colts
						{
							if (RevisarDinero(playerid, 2000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 81.3671, -162.7582, 2.5793);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por la caja de colts en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 2;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 81.3671, -162.7582, 2.5793, 2);
							}
						}
						case 1: //tecs
						{
							if (RevisarDinero(playerid, 7000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 993.9947, -1263.2609, 15.0218);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por la caja de tecs en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 4;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 993.9947, -1263.2609, 15.0218, 2);
							}
						}
						case 2: //uzis
						{
							if (RevisarDinero(playerid, 7200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1680.5959, -2082.4014, 13.5660);
								format(string, sizeof(string), "[SMS: 0047001]: Necesito que vengas por la caja de uzis en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 5;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1680.5959, -2082.4014, 13.5660, 2);
							}
						}
						case 3: //eagles
						{
							if (RevisarDinero(playerid, 8000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 730.1278, 296.5151, 20.2267);
								format(string, sizeof(string), "[SMS: 0067083]: Necesito que vengas por la caja de eagles en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 3;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 730.1278, 296.5151, 20.2267, 2);
							}
						}
						case 4: //cargadores de colts
						{
							if (RevisarDinero(playerid, 800))
							{
								Get2DZone(location, MAX_ZONE_NAME, 81.3671, -162.7582, 2.5793);
								format(string, sizeof(string), "[SMS: 0057081]: Necesito que vengas por los cargadores de colts en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 7;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 81.3671, -162.7582, 2.5793, 2);
							}
						}
						case 5: //cargadores de tecs
						{
							if (RevisarDinero(playerid, 1000))
							{
								Get2DZone(location, MAX_ZONE_NAME, 993.9947, -1263.2609, 15.0218);
								format(string, sizeof(string), "[SMS: 0017281]: Necesito que vengas por los cargadores de tecs en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 9;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 993.9947, -1263.2609, 15.0218, 2);
							}
						}
						case 6: //cargadores de uzis
						{
							if (RevisarDinero(playerid, 1050))
							{
								Get2DZone(location, MAX_ZONE_NAME, 1680.5959, -2082.4014, 13.5660);
								format(string, sizeof(string), "[SMS: 0047001]: Necesito que vengas  por los cargadores de uzis en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 10;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 1680.5959, -2082.4014, 13.5660, 2);
							}
						}
						case 7: //cargadores de eagles
						{
							if (RevisarDinero(playerid, 1200))
							{
								Get2DZone(location, MAX_ZONE_NAME, 730.1278, 296.5151, 20.2267);
								format(string, sizeof(string), "[SMS: 0067083]: Necesito que vengas por los cargadores de eagles en %s.", location);
								_Mensaje(playerid, 4, "FFEA5F", string);
								p_armas[playerid] = 8;
								TogglePlayerAllDynamicCPs(playerid, false);
								set_checkpoint(playerid, 730.1278, 296.5151, 20.2267, 2);
							}
						}
					}
				}
			}
		case D_Praticar:
		{
			if (response) switch (listitem)
			{
				case 0:
				{
				    if (user[playerid][jPelea] == 6) return _Mensaje(playerid, 0, "0", "Ya posees este estilo de pelea.");
					if(RevisarDinero(playerid, 40))
					{
						Compra(playerid, 40);
						d_estado += 40;
						user[playerid][jPelea] = 6;
						SetPlayerFightingStyle(playerid, user[playerid][jPelea]);
						_Mensaje(playerid, 5, "0", "Felicidades! Has aprendido Kung Fu.");
						ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.0, 0, 0, 1, 0, 0, 1);
					}
				}
				case 1:
				{
				    if (user[playerid][jPelea] == 5) return _Mensaje(playerid, 0, "0", "Ya posees este estilo de pelea.");
					if(RevisarDinero(playerid, 30))
					{
						Compra(playerid, 30);
						d_estado += 30;
						user[playerid][jPelea] = 5;
						SetPlayerFightingStyle(playerid, user[playerid][jPelea]);
						_Mensaje(playerid, 5, "0", "Felicidades! Has aprendido a Boxear.");
						ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.0, 0, 0, 1, 0, 0, 1);
					}
				}
				case 2:
				{
				    if (user[playerid][jPelea] == 4) return _Mensaje(playerid, 0, "0", "Ya posees este estilo de pelea.");
					user[playerid][jPelea] = 4;
					SetPlayerFightingStyle(playerid, user[playerid][jPelea]);
					_Mensaje(playerid, 5, "0", "Has cambiado tu estilo de pelea a Normal.");
					return 1;
				}
			}
		}
		case D_Graffiti:
		{
		    if(!response) return Mensaje_(playerid, -1, "Cerraste el menú de graffiti.");
			switch (listitem)
			{
				case 0:
				{
					//colocar models de graffitis en un ratico
					Mensaje_(playerid, 0xb0b0b0ff, "Función desactivada temporalmente.");
					cmd_graffiti(playerid);
				}
				case 1:
				{
					new DialogStatus[500];
					strcat(DialogStatus, "{90C3D4}INFORMACIÓN:\n");
					strcat(DialogStatus, "{FFFFFF}-		Usamos una plantilla especial BBcode para el formato de mensajes usando un sistema (c).\n");
					strcat(DialogStatus, "{FFFFFF}			(n) Para una nueva línea.\n");
					strcat(DialogStatus, "{FFFFFF}			Colores: (a): Azul, (b): Blanco, (am): Amarillo, (v): Verde\n");
					strcat(DialogStatus, "{FFFFFF}			(ne): Negro, (na): Naranja, (r): Rojo, (ce): Celeste\n");
					strcat(DialogStatus, "{FFFFFF}			[USO] Esto hará que (v){00c200}palabra{ffffff}(b) sea verde y el resto blanco.\n");
					strcat(DialogStatus, "{FFFFFF}-		Trate de que su texto no sea tan largo.\n");
					strcat(DialogStatus, "{FFFFFF}El máximo es de 60 caracteres.");
					ExPlayerDialog(playerid, D_tGraffiti, DIALOG_STYLE_INPUT, "{D6E1EB}Escribe lo que quieras", DialogStatus, "Siguiente", "<<");
				}
				case 2:
				{
					ExPlayerDialog(playerid, D_fGraffiti, DIALOG_STYLE_LIST, "{D6E1EB}Elija una fuente", "Comic Sans\nDiploma\nArial\nLevi Brush\nStreet soul", "Seleccionar", "<<");
				}
				case 3:
				{
					if (trazo_graffiti[playerid])
					{
					    trazo_graffiti[playerid] = 0;
						SendClientMessage(playerid, -1, "Trazo desactivado.");
						cmd_graffiti(playerid);
					}
					else
					{
					    trazo_graffiti[playerid] = 1;
						SendClientMessage(playerid, -1, "Trazo activado.");
						cmd_graffiti(playerid);
					}
				}
			}
		}
		case D_tGraffiti:
		{
			if(!response) return cmd_graffiti(playerid);
			if(strlen(inputtext) > 60 || strlen(inputtext) < 2)
				return cmd_graffiti(playerid);

			SetPVarInt(playerid, "letra_i", 10);
			SetPVarInt(playerid, "letra_s", 10);

			SetPVarString(playerid, "graffs_texto", inputtext);

			new
				text[63];
			format(text, sizeof text, "%s", inputtext);
			SendClientMessage(playerid, -1, text);
			cmd_graffiti(playerid);
			return 1;
		}
		case D_fGraffiti:
		{
		    if(!response) return cmd_graffiti(playerid);
		    new fuente[32];
			switch (listitem)
			{
		        case 0: fuente = "Comic Sans";
		        case 1: fuente = "Diploma";
		        case 2: fuente = "Arial";
		        case 3: fuente = "Levi Brush";
		        case 4: fuente = "Street soul";
		    }
		    SetPVarInt(playerid, "graffs_fuente", listitem+1);
			cmd_graffiti(playerid);
			new
				text[63];
			format(text, sizeof text, "Fuente: {90C3D4}%s{ffffff}.", fuente);
			SendClientMessage(playerid, -1, text);
			return 1;
		}
		case D_vehGranjero:
		{
			if (!response) return 1;

			new id = listitem;
			new vw_veh = GetVehicleVirtualWorld(Granjero_Veh[id]);
			new
			    Float: x,
			    Float: y,
			    Float: z,
			    Float: r
			;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, r);

			switch (vw_veh)
			{
				case 0: return SendClientMessage(playerid, 0xccccccff, "Ese vehículo ya se encuentra en uso.");
				default:
				{
					SetVehicleVirtualWorld(Granjero_Veh[id], 0);
					LinkVehicleToInterior(Granjero_Veh[id], 0);
					SetVehiclePos(Granjero_Veh[id], x, y, z);
					SetVehicleZAngle(Granjero_Veh[id], r);

					format(string, sizeof(string), "Has spawneado el tractor %d.", Granjero_Veh[id]);
					SendClientMessage(playerid, 0x007b1dff, string);

					PutPlayerInVehicle(playerid, Granjero_Veh[id], 0);

					enter_vehicle[playerid] = Granjero_Veh[id];
					return 1;
				}
			}

			return 1;
		}
		case D_vehPescador:
		{
			if (!response) return 1;

			new id = listitem;
			new vw_veh = GetVehicleVirtualWorld(Pescador_Veh[id]);

			switch (vw_veh)
			{
				case 0: return SendClientMessage(playerid, 0xccccccff, "Ese bote ya se encuentra en uso.");
				default:
				{
					SetVehicleVirtualWorld(Pescador_Veh[id], 0);
					LinkVehicleToInterior(Pescador_Veh[id], 0);

					format(string, sizeof(string), "Has spawneado el Reefer %d.", Pescador_Veh[id]);
					SendClientMessage(playerid, 0x007b1dff, string);

					PutPlayerInVehicle(playerid, Pescador_Veh[id], 0);

					enter_vehicle[playerid] = Pescador_Veh[id];
					used_vehicle[playerid] = Pescador_Veh[id];
					return 1;
				}
			}

			return 1;
		}

		case teleport_staff:
		{
			if (!response) return 1;

			new
				id = listitem + 1,
				playerid2 = GetPVarInt(playerid, "playerid2")
			;

			if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

			if (GetPlayerState(playerid2) == 2)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid2), point_spawn[id][x_spawn], point_spawn[id][y_spawn], point_spawn[id][z_spawn]);
				SetVehicleZAngle(GetPlayerVehicleID(playerid2), point_spawn[id][angle_spawn]);
				format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a %s (vehículo).", nombre_pj(playerid), nombre_pj(playerid2), point_spawn[id][name_spawn]);
				MensajeAdmin(string);
			}
			else
			{
				SetCameraBehindPlayer(playerid2);
				SetPlayerPos(playerid2, point_spawn[id][x_spawn], point_spawn[id][y_spawn], point_spawn[id][z_spawn]);
				SetPlayerFacingAngle(playerid2, point_spawn[id][angle_spawn]);
				format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a %s.", nombre_pj(playerid), nombre_pj(playerid2), point_spawn[id][name_spawn]);
				MensajeAdmin(string);
			}

			SetPlayerInterior(playerid2, 0);
			user[playerid2][jInterior] = 0;
			SetPlayerVirtualWorld(playerid2, 0);
			user[playerid2][jVirtualWorld] = 0;
			TogglePlayerControllable(playerid2, true);
			textgame_player(playerid2, point_spawn[id][name_spawn], 3000, 1);

			return 1;
		}
		case teleport_pf:
		{
			if (!response) return 1;

			new
				id = listitem + 1,
				playerid2 = GetPVarInt(playerid, "playerid2")
			;

			if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

			if (GetPlayerState(playerid2) == 2)
			{
				if (point_pf[id][int_id] == 0)
				{
					SetVehiclePos(GetPlayerVehicleID(playerid2), point_pf[id][x_spawn], point_pf[id][y_spawn], point_pf[id][z_spawn]);
					SetVehicleZAngle(GetPlayerVehicleID(playerid2), point_pf[id][angle_spawn]);
					format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a %s (vehículo).", nombre_pj(playerid), nombre_pj(playerid2), point_pf[id][name_spawn]);
					MensajeAdmin(string);
				}
				else
				{
					SetCameraBehindPlayer(playerid2);
					SetPlayerPos(playerid2, point_pf[id][x_spawn], point_pf[id][y_spawn], point_pf[id][z_spawn]);
					SetPlayerFacingAngle(playerid2, point_pf[id][angle_spawn]);
					format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a %s.", nombre_pj(playerid), nombre_pj(playerid2), point_pf[id][name_spawn]);
					MensajeAdmin(string);
				}
			}
			else
			{
				SetCameraBehindPlayer(playerid2);
				SetPlayerPos(playerid2, point_pf[id][x_spawn], point_pf[id][y_spawn], point_pf[id][z_spawn]);
				SetPlayerFacingAngle(playerid2, point_pf[id][angle_spawn]);
				format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a %s.", nombre_pj(playerid), nombre_pj(playerid2), point_pf[id][name_spawn]);
				MensajeAdmin(string);
			}

			SetPlayerInterior(playerid2, point_pf[id][int_id]);
			user[playerid2][jInterior] = point_pf[id][int_id];
			SetPlayerVirtualWorld(playerid2, 0);
			user[playerid2][jVirtualWorld] = 0;
			TogglePlayerControllable(playerid2, true);
			textgame_player(playerid2, point_pf[id][name_spawn], 3000, 1);

			return 1;
		}
		case D_graffitis:
		{
			if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú."); return 1; }
			if (GetPVarInt(playerid, "z_graffs") == 1)
			{
				new ID = listitem, StrPVar[40];
				Formato(StrPVar, "e_graffiti%d", ID);
				new i = GetPVarInt(playerid, StrPVar);
				if (user[playerid][jAdmin] < 1) return ExPlayerDialog(playerid, D_graffitis, DIALOG_STYLE_LIST, "Graffitis", "Ir", ">>", "<<");
				else ExPlayerDialog(playerid, D_graffitis, DIALOG_STYLE_LIST, "Graffitis", "Ir\nEditar coordenadas\nLimpiar\nBorrar coordenadas", ">>", "<<");
				SetPVarInt(playerid, "z_graffs", 2);
				SetPVarInt(playerid, "grafs", i);
				return 1;
			}
			else if (GetPVarInt(playerid, "z_graffs") == 2)
			{
			    new i = GetPVarInt(playerid, "grafs");
				switch(listitem)
				{
					case 0: // ir
					{
						SetPlayerPos(playerid, i_graffito[i][gr_PosX], i_graffito[i][gr_PosY], i_graffito[i][gr_PosZ]);
						SetPlayerVirtualWorld(playerid, 0), user[playerid][jVirtualWorld] = 0;
						SetPlayerInterior(playerid, 0), user[playerid][jInterior] = 0;
					}
					case 1: // editar
					{
						EditDynamicObject(playerid, g_GraffitiObject[i]);
						user[playerid][pEditingMode] = 13;
					}
					case 2: // limpiar
					{
						alm(i_graffito[i][gr_mensaje], "sin_editar_graffs");
						i_graffito[i][gr_tiempohacer] = 0;
						DestroyDynamicObject(g_GraffitiObject[i]);
						g_GraffitiObject[i] = CreateDynamicObject(18666, i_graffito[i][gr_PosX], i_graffito[i][gr_PosY], i_graffito[i][gr_PosZ], i_graffito[i][gr_RotX], i_graffito[i][gr_RotY], i_graffito[i][gr_RotZ], -1, 0, -1, 6000.0);
					}
					case 3: // borrar
					{
						i_graffito[i][gr_PosX] = 0.0;
						i_graffito[i][gr_PosY] = 0.0;
						i_graffito[i][gr_PosZ] = 0.0;
						i_graffito[i][gr_RotX] = 0.0;
						i_graffito[i][gr_RotY] = 0.0;
						i_graffito[i][gr_RotZ] = 0.0;
						i_graffito[i][gr_tiempohacer] = 0;
						DestroyDynamicObject(g_GraffitiObject[i]);
						new elban[128];
						format(elban, 128, DATOS_GRAFFITIS, i);
						fremove(elban);
					}
				}
				return 1;
			}
		}
		case D_MENUGUANTERA:
		{
			if(!response) return 1;
			new i = listitem;
			if(i == 6) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 5) S_Guantera(playerid, VehGuanteraPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 7) G_Guantera(playerid, VehGuanteraPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 8) G_Guantera(playerid, VehGuanteraPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETERO:
		{
			if(!response) return 1;
			new i = listitem, vip = user[playerid][jPremium];
			if(i == 12+vip) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 11+vip) S_Maletero(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 13+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 14+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETERO2:
		{
			if(!response) return 1;
			new i = listitem, vip = user[playerid][jPremium];
			if(i == 7+vip) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 6+vip) S_Maletero(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 8+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 9+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETERO3:
		{
			if(!response) return 1;
			new i = listitem, vip = user[playerid][jPremium];
			if(i == 2+vip) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 1+vip) S_Maletero(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 3+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 4+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETERO4:
		{
			if(!response) return 1;
			new i = listitem, vip = user[playerid][jPremium];
			if(i == 9+vip) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 8+vip) S_Maletero(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 10+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 11+vip) G_Maletero(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETERO5:
		{
			if(!response) return 1;
			new i = listitem;
			if(i == 15) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 14) S_Maletero(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 16) G_Maletero(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 17) G_Maletero(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_MENUMALETEROF:
		{
			if(!response) return 1;
			new i = listitem;
			if(i == 12) return 1; //Selecciona la barra separadora
			if(i >= 0 && i <= 11) S_MaleteroF(playerid, VehMaleteroPlayer[playerid], i); //Selecciona un bolsillo
			if(i == 13) G_MaleteroF(playerid, VehMaleteroPlayer[playerid], 1); //Selecciona mano derecha
			if(i == 14) G_MaleteroF(playerid, VehMaleteroPlayer[playerid], 2); //Selecciona mano izquierda
		}
		case D_cToys:
		{
			if(!response) return Mensaje_(playerid, -1, "Cancelaste la compra.");
			new modelid = GetPVarInt(playerid, "c_accesorio"), id_acc = -1, nid = IDNegocio[playerid];

			for(new i; i < sizeof(Accesorios); i++)
			{
				if(Accesorios[i][ModeloAccesorio] == modelid)
				{
				    id_acc = i;
				}
			}
			if (ComprobarDineroJ(playerid) < Accesorios[id_acc][PrecioAccesorio]) return _Mensaje(playerid, 0, "32", "No tienes suficiente dinero.");

			new x = RanuraSeleccionada[playerid];

			InfoAccesorio[playerid][x][aParte] = 2;
			InfoAccesorio[playerid][x][aModelo] = modelid;
			InfoAccesorio[playerid][x][aPosicionX] = 0.0000;
			InfoAccesorio[playerid][x][aPosicionY] = 0.0000;
			InfoAccesorio[playerid][x][aPosicionZ] = 0.0000;
			InfoAccesorio[playerid][x][aRotacionX] = 0.0000;
			InfoAccesorio[playerid][x][aRotacionY] = 0.0000;
			InfoAccesorio[playerid][x][aRotacionZ] = 0.0000;
			InfoAccesorio[playerid][x][aEscalaX] = 1;
			InfoAccesorio[playerid][x][aEscalaY] = 1;
			InfoAccesorio[playerid][x][aEscalaZ] = 1;

			format(string, sizeof(string), "Compraste el accesorio %s por %d$.", Accesorios[id_acc][NombreAccesorio], Accesorios[id_acc][PrecioAccesorio]);
			Mensaje_(playerid, 0xA7CE00FF, string);
			_Mensaje(playerid, 4, "b0b0b0", "Escribe /accesorios para editarlo.");
			DarDineroGC(playerid, -Accesorios[id_acc][PrecioAccesorio]);
			if (i_Negocio[nid][nComprado] != 0)
			{
				i_Negocio[nid][nDinero] += Accesorios[id_acc][PrecioAccesorio];
				i_Negocio[nid][nProductos]--;
			}
			IDNegocio[playerid] = -1;
			return 1;
		}
		case D_cJoyeria:
		{
			if(!response) return Mensaje_(playerid, -1, "Cancelaste la compra.");
			new modelid = GetPVarInt(playerid, "c_joyeria"), id_acc = -1, nid = IDNegocio[playerid];
			for(new i; i < sizeof(Accesorios); i++)
			{
				if(Accesorios[i][ModeloAccesorio] == modelid)
				{
				    id_acc = i;
				}
			}
			if(ComprobarDineroJ(playerid) < Accesorios[id_acc][PrecioAccesorio]) { _Mensaje(playerid, 0, "32", "No tienes suficiente dinero."); return 1; }
			for(new x = 0; x < MAX_uACCESORIOS; x++)
			{
				if(InfoAccesorio[playerid][x][aModelo] == 0)
				{
					InfoAccesorio[playerid][x][aModelo] = modelid;
					InfoAccesorio[playerid][x][aRotacionX] = 0.0000;
					InfoAccesorio[playerid][x][aRotacionY] = 0.0000;
					InfoAccesorio[playerid][x][aRotacionZ] = 0.0000;
					InfoAccesorio[playerid][x][aEscalaX] = 1;
					InfoAccesorio[playerid][x][aEscalaY] = 1;
					InfoAccesorio[playerid][x][aEscalaZ] = 1;
					if(modelid == 18641) //linterna
					{
						InfoAccesorio[playerid][x][aParte] = 5;
						InfoAccesorio[playerid][x][aPosicionX] = 0.087999;
						InfoAccesorio[playerid][x][aPosicionY] = 0.036000;
						InfoAccesorio[playerid][x][aPosicionZ] = -0.047999;
				    }
					else if(modelid == 19942) //radio portatil
					{
						InfoAccesorio[playerid][x][aParte] = 6;
						InfoAccesorio[playerid][x][aPosicionX] = 0.038999;
						InfoAccesorio[playerid][x][aPosicionY] = 0.062000;
						InfoAccesorio[playerid][x][aPosicionZ] = 0.002999;
				    }
					else //relojes
					{
						InfoAccesorio[playerid][x][aParte] = 6;
						InfoAccesorio[playerid][x][aPosicionX] = -0.036999;
						InfoAccesorio[playerid][x][aPosicionY] = -0.001999;
						InfoAccesorio[playerid][x][aPosicionZ] = -0.011999;
						InfoAccesorio[playerid][x][aRotacionX] = -25.600017;
						InfoAccesorio[playerid][x][aRotacionY] = -102.300033;
						InfoAccesorio[playerid][x][aRotacionZ] = 164.999969;
				    }
					if (modelid == 18641) format(string, sizeof(string), "Compraste una %s por %d$.", Accesorios[id_acc][NombreAccesorio], Accesorios[id_acc][PrecioAccesorio]);
					else format(string, sizeof(string), "Compraste un %s por %d$.", Accesorios[id_acc][NombreAccesorio], Accesorios[id_acc][PrecioAccesorio]);
					Mensaje_(playerid, 0xA7CE00FF, string);
					DarDineroGC(playerid, -Accesorios[id_acc][PrecioAccesorio]);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += Accesorios[id_acc][PrecioAccesorio];
						i_Negocio[nid][nProductos]--;
					}
					IDNegocio[playerid] = -1;
					return 1;
				}
			}
			_Mensaje(playerid, 0, "0", "No tienes ranuras donde guardar el accesorio.");
		}
		case D_cPeluqueria:
		{
			if(!response) return Mensaje_(playerid, -1, "Cancelaste la compra.");
			new modelid = GetPVarInt(playerid, "c_peluqueria"), id_acc = -1, nid = IDNegocio[playerid];
			for(new i; i < sizeof(Accesorios); i++)
			{
				if(Accesorios[i][ModeloAccesorio] == modelid)
				{
				    id_acc = i;
				}
			}
			for(new x = 0; x < MAX_uACCESORIOS; x++)
			{
				if(InfoAccesorio[playerid][x][aModelo] == 0)
				{
					InfoAccesorio[playerid][x][aModelo] = modelid;
					InfoAccesorio[playerid][x][aParte] = 2;
					if(modelid == 19350 || modelid == 19351)
					{
						format(string, sizeof(string), "Compraste un %s por %d$.", Accesorios[id_acc][NombreAccesorio], Accesorios[id_acc][PrecioAccesorio]);
						InfoAccesorio[playerid][x][aPosicionX] = 0.037999;
						InfoAccesorio[playerid][x][aPosicionY] = 0.090000;
					}
					else
					{
						format(string, sizeof(string), "Compraste una %s por %d$.", Accesorios[id_acc][NombreAccesorio], Accesorios[id_acc][PrecioAccesorio]);
						InfoAccesorio[playerid][x][aPosicionX] = 0.116000;
						InfoAccesorio[playerid][x][aPosicionY] = 0.0000;
					}
					InfoAccesorio[playerid][x][aPosicionZ] = 0.0000;
					InfoAccesorio[playerid][x][aRotacionX] = 0.0000;
					InfoAccesorio[playerid][x][aRotacionY] = 0.0000;
					InfoAccesorio[playerid][x][aRotacionZ] = 0.0000;
					InfoAccesorio[playerid][x][aEscalaX] = 1;
					InfoAccesorio[playerid][x][aEscalaY] = 1;
					InfoAccesorio[playerid][x][aEscalaZ] = 1;
					Mensaje_(playerid, 0xA7CE00FF, string);
					DarDineroGC(playerid, -Accesorios[id_acc][PrecioAccesorio]);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += Accesorios[id_acc][PrecioAccesorio];
						i_Negocio[nid][nProductos]--;
					}
					IDNegocio[playerid] = -1;
					return 1;
				}
			}
			_Mensaje(playerid, 0, "0", "No tienes ranuras donde guardar el accesorio.");
		}
		case D_Cvehiculo:
		{
			if(response)
			{
				ExPlayerDialog(playerid, D_Cvehiculo2, DIALOG_STYLE_MSGBOX, "{537CDB}Pago:{ffffff} Efectivo", "{ffffff}Si no está seguro, pulse {b00000}cancelar", "Comprar", "Cancelar");
				SetPVarInt(playerid, "e_debito", 2);
			}
			else
			{
				if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
				if (user[playerid][jm_Derecha] != 84 && user[playerid][jm_Izquierda] != 84){ _Mensaje(playerid, 0, "9", "Necesitas tener tu tarjeta de débito en la mano."); return 1;}

				ExPlayerDialog(playerid, D_Cvehiculo2, DIALOG_STYLE_MSGBOX, "{537CDB}Pago:{ffffff} T. Débito", "{ffffff}Si no está seguro, pulse {b00000}cancelar", "Comprar", "Cancelar");
				SetPVarInt(playerid, "e_debito", 1);
			}
			return 1;
		}

		case D_Cvehiculo2:
		{
			if(!response)
			{
			    compra_Veh[playerid] = -1;
				DeletePVar(playerid, "e_debito");
				_Mensaje(playerid, 4, "b0b0b0", "Cancelaste la compra del vehículo.");
				return 1;
			}
			if (compra_Veh[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de compras.");
			new d = compra_Veh[playerid];
			//if (i_Conce[d][eDisponibles] == 0) return _Mensaje(playerid, 4, "b0b0b0", "No hay más vehículos de este modelo.");
			new max_vehs = CVehiculos(playerid);
			if (user[playerid][jPremium] == 0 && max_vehs >= 3)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "b0b0b0", "Sólo puedes tener 3 vehículos.");
				return 1;
			}
			if(user[playerid][jPremium] == 1 && max_vehs >= 4)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "b0b0b0", "Sólo puedes tener 4 vehículos.");
				return 1;
			}
			new costo = i_Conce[d][ePrecioVeh], originac = i_Conce[d][ePrecioVeh];
			//pago:
			new efectivo = GetPVarInt(playerid, "e_debito");
			if (efectivo == 1)
			{
				if (user[playerid][jBanco] < costo)
				{
					compra_Veh[playerid] = -1;
					DeletePVar(playerid, "e_debito");
					_Mensaje(playerid, 4, "b0b0b0", "No posees suficiente dinero en el banco.");
					return 1;
				}
				user[playerid][jBanco] -= costo;
			}
			else if (efectivo == 2)
			{
				if (ComprobarDineroJ(playerid) < costo)
				{
					compra_Veh[playerid] = -1;
					DeletePVar(playerid, "e_debito");
					_Mensaje(playerid, 4, "b0b0b0", "No posees suficiente efectivo.");
					return 1;
				}
				DarDineroGC(playerid, -costo);
			}
			new tipo = i_Conce[d][eTipo], Float: xv, Float: yv, Float: zv, Float: av;
			if (tipo == 1) 		{ xv=8723.2256; 	yv=14175.8623; 		zv=6.5893; 	av=85.7963;	} //	*   Motos
			else if (tipo == 2) { xv=8676.1807; 	yv=14368.3086; 		zv=6.4438; 	av=172.5439;	} //	*   Clase M
			else if (tipo == 3) { xv=543.4288; 		yv=-1473.1075; 		zv=14.9586; 	av=3.2952;		} //	*	Clase A
			else if (tipo == 4) { xv=956.9787;		yv=-1424.0587; 		zv=13.8954; 	av=358.5271; 	} //	*	Camionetas
			else if (tipo == 5) { xv=1885.031616; 	yv=-2445.458251;	zv=13.808096; 	av=-221.160003;	} //    *   Aviones
			else if (tipo == 6) { xv=2772.8364; 	yv=-1623.2506; 		zv=11.2779; 	av=357.9885;	} //    *   Las payasadas
			else if (tipo == 7) { xv=420.2361;		yv=-2078.2463; 		zv=4.1218;	 	av=0.0000;		} //    *   Barcos

			d_estado += costo; // Da dinero al estado
			new color = random(120);
			new Coche = CrearCoche(playerid, i_Conce[d][eModeloVeh], xv, yv, zv, av, color, color, originac);
			//i_Conce[d][eDisponibles]--;
			_Mensaje(playerid, 4, "33CCFF", "¡Felicitaciones! Compraste un vehículo nuevo.");
			_Mensaje(playerid, 4, "33CCFF", "Recuerda /estacionar el vehículo, para más comandos /ayuda vehiculos.");
			SetVehicleMatricula(Coche);
			compra_Veh[playerid] = -1;
			DeletePVar(playerid, "e_debito");
			return 1;
		}
		case D_Uvehiculo1:
		{
			if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de compras."); return 1; }
			new ID = listitem,StrPVar[40];
			Formato(StrPVar,"GPS_vehC_%d",ID);
			new i = GetPVarInt(playerid,StrPVar);
			compra_Veh[playerid] = i;
			format(string, sizeof(string),
			"{ffffff}¿Estás seguro que quieres comprar este vehículo?\n\n\
			{ffffff}     Modelo: %s - Precio: {1CB54C}$%d\n", nombre_vehiculo[i_Usado[i][uModeloVeh] - 400], i_Usado[i][uPrecioVeh]);
			ExPlayerDialog(playerid, D_Uvehiculo2, DIALOG_STYLE_MSGBOX, "{D6E1EB}Adquirir vehículo", string, "Comprar", "Cancelar");
			return 1;
		}
		case D_Uvehiculo2:
		{
			if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de compras."); compra_Veh[playerid] = -1; return 1; }
			if (compra_Veh[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de compras.");
			new d = compra_Veh[playerid];

			new max_vehs = CVehiculos(playerid);
			if(user[playerid][jPremium] == 0 && max_vehs >= 3)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "b0b0b0", "Sólo puedes tener 3 vehículos.");
				return 1;
			}
			if(user[playerid][jPremium] == 1 && max_vehs >= 4)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "b0b0b0", "Sólo puedes tener 4 vehículos.");
				return 1;
			}
			new costo = i_Usado[d][uPrecioVeh];
			if (ComprobarDineroJ(playerid) < costo)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "b0b0b0", "No tienes dinero para comprar ese vehículo.");
				return 1;
			}
			DarDineroGC(playerid, -costo);
			d_estado += costo; // Da dinero al estado
			new Coche = CrearUCoche(playerid, i_Usado[d][uModeloVeh], -58.5424, -1133.4740, 0.6809, 68.1600, i_Usado[d][uColor_1], i_Usado[d][uColor_2], costo * 2, d);
			bV_usado(d);
			_Mensaje(playerid, 4, "33CCFF", "¡Felicitaciones! Compraste un vehículo usado.");
			_Mensaje(playerid, 4, "33CCFF", "Recuerda /estacionar el vehículo, para más comandos /ayuda vehiculos.");
			SetVehicleMatricula(Coche);
			compra_Veh[playerid] = -1;
			coches_usados-=1;
			return 1;
		}
		case D_Computador0:
		{
			if(!response) return _ordenador(playerid);
			_ordenador(playerid);
		}
		case D_Computador4:
		{
			if (!response)
			{
				_ordenador(playerid);
			}
			else
			{
				if (!IsNumeric(inputtext)) return ExPlayerDialog(playerid, D_Computador3, DIALOG_STYLE_INPUT, "{D6E1EB}Localización de vivienda		", "Introduzca el número de llave de la propiedad:\n\n{ff0000} ID de llave inválida (coloco palabras)", "Buscar", "Cancelar");
				new casa = strval(inputtext);
				if (casa != -1)
				{
					for(new c_id = 0; c_id < MAX_CASAS; c_id++)
					{
						if(c_id == casa)
						{
						    if (i_Casa[c_id][c_VW] == 0)
						    {
								new zona[MAX_ZONE_NAME];
								Get2DZone(zona, MAX_ZONE_NAME, i_Casa[c_id][cExteriorX], i_Casa[c_id][cExteriorY], i_Casa[c_id][cExteriorZ]);
								format(string, sizeof(string), "Vivienda n°%d, fue localizada en %s.", casa, zona);
								Mensaje_(playerid, -1, string);
								SetPVarInt(playerid, "EnCheckPoint", 5);
								set_checkpoint(playerid, i_Casa[c_id][cExteriorX], i_Casa[c_id][cExteriorY], i_Casa[c_id][cExteriorZ], 1.5);
								TogglePlayerAllDynamicCPs(playerid, false);
								return 1;
							}
							else
							{
							    ExPlayerDialog(playerid, D_Computador4, DIALOG_STYLE_INPUT, "{D6E1EB}Localización de vivienda		", "Introduzca el número de llave de la propiedad:\n\n{ff0000} ID de llave inválida (casa en otra dimensión)", "Buscar", "Cancelar");
							    return 1;
							}
						}
					}
					ExPlayerDialog(playerid, D_Computador4, DIALOG_STYLE_INPUT, "{D6E1EB}Localización de vivienda		", "Introduzca el número de llave de la propiedad:\n\n{ff0000} ID de llave inválida (casa no existente)", "Buscar", "Cancelar");
				}
			}
		}

		case D_Computador1:
		{
			if(!response) return _Mensaje(playerid, 5, "0", " Saliste del ordenador policial.");
			PlayerPlaySound(playerid, 40405, 0, 0, 0);
			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_Computador2, DIALOG_STYLE_INPUT, "{D6E1EB}Búsqueda de información		", "Introduzca el Nombre ó ID de la persona:", "Buscar", "Cancelar");
				case 1: cmd_buscados(playerid, "ver");
				case 2: ExPlayerDialog(playerid, D_Computador3, DIALOG_STYLE_INPUT, "{D6E1EB}Información de vehículo		", "Introduzca el número de matrícula del vehículo (sin el LS-):", "Buscar", "Cancelar");
				case 3: cmd_centralita(playerid);
				case 4:
				{
					new _dialog1[3000], _dialog2[300], so_s = 0;
					strcat(_dialog1, "{ffffff}Listado:\n\n");
					foreach(new _i: Player) if (user[_i][jEstrellas] != 0)
					{
						format(_dialog2, sizeof(_dialog2), "{ffffff}Nombre completo: %s | Nivel de búsqueda: %d\n", nombre_pj(_i, 0), user[_i][jEstrellas]);
						strcat(_dialog1, _dialog2);
						++so_s;
					}
					if (so_s != 0) ExPlayerDialog(playerid, D_Computador0, DIALOG_STYLE_MSGBOX, "{b0b0b0}Sospechosos		", _dialog1, "Cerrar", "");
					else ExPlayerDialog(playerid, D_Computador0, DIALOG_STYLE_MSGBOX, "{b0b0b0}Sospechosos		", "No se encuentran sospechosos en este momento", "Cerrar", "");
				}
				case 5: ExPlayerDialog(playerid, D_Computador4, DIALOG_STYLE_INPUT, "{D6E1EB}Localización de vivienda		", "Introduzca el número de llave de la propiedad:", "Buscar", "Cancelar");
				case 6:
				{
					if (SolicitaRefuerzos[playerid] == 0)
					{
						new Float: px, Float: py, Float: pz;
						GetPlayerPos(playerid, px, py, pz);
						SolicitaRefuerzos[playerid] = 1;
						format(string, sizeof(string), "CENTRAL: A todas las unidades, el oficial (%s) requiere apoyo en su posición.", nombre_pj(playerid, 0));
						_MensajeRfac(1, C_COLORRADIO, string);
						foreach(new i: Player)
						{
							if (IsPlayerConnected(i))
							{
								if (Es_Faccion(i, 1) && EnServicioPD[i] == 1)
								{
									SetPVarInt(i, "EnCheckPoint", 5);
									SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
		   						}
							}
						}
					}
					else
					{
						SolicitaRefuerzos[playerid] = 0;
						_MensajeRfac(1, C_COLORRADIO, "CENTRAL: A todas las unidades que están de apoyo, se ha cancelado el pedido.");
						foreach(new i: Player)
						{
							if (IsPlayerConnected(i))
							{
								if (Es_Faccion(i, 1) && EnServicioPD[i] == 1)
								{
									DisablePlayerCheckpoint(i);
									DeletePVar(i, "EnCheckPoint");
									SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
								}
							}
						}
					}
				}
			}
		}
		case D_Computador2:
		{
			if(!response) return _ordenador(playerid);
			if(!strlen(inputtext)) return ExPlayerDialog(playerid, D_Computador2, DIALOG_STYLE_INPUT, "{D6E1EB}Búsqueda de información		", "Introduzca el Nombre ó ID de la persona:\n\n{ff0000} Nombre inválido (no ingreso nada)", "Buscar", "Cancelar");
			new idjugador = -1;
			if(IsNumeric(inputtext))
			{
			    new id;
				sscanf(inputtext, "d", id);

				if(!IsPlayerConnected(id)) return ExPlayerDialog(playerid, D_Computador2, DIALOG_STYLE_INPUT, "{D6E1EB}Búsqueda de información		", "Introduzca el Nombre ó ID de la persona:\n\n{ff0000} Nombre inválido (user desconectado)", "Buscar", "Cancelar");
				if(user[id][jNivel] == -1) return ExPlayerDialog(playerid, D_Computador2, DIALOG_STYLE_INPUT, "{D6E1EB}Búsqueda de información		", "Introduzca el Nombre ó ID de la persona:\n\n{ff0000} Nombre inválido (user desconectado)", "Buscar", "Cancelar");
				idjugador = id;
			}
			else
			{
				if(strlen(inputtext) < 3 || strlen(inputtext) > MAX_PLAYER_NAME)return
					_Mensaje(playerid, 0, "0", "ERROR: El nombre debe estar entre 3 a 24 caracteres."), _ordenador(playerid);

				new count;
			    foreach(new i: Player) if(strfind(ReturnName(i), inputtext, true) != -1)
				{
					if(user[i][jNivel] != -1)
					{
						idjugador = i;
						count++;
						break;
					}
				}
				if(!count)return
					ExPlayerDialog(playerid, D_Computador2, DIALOG_STYLE_INPUT, "{D6E1EB}Búsqueda de información		", "Introduzca el Nombre ó ID de la persona:\n\n{ff0000} Nombre inválido (user desconectado)", "Buscar", "Cancelar");
			}

			new info_lic[4][20];
			new _dialog1[3000], _dialog2[300], _dialog3[300];

			if (user[idjugador][jLicencias][0] == 1) info_lic[0] = "Adquirida"; //arma
			else info_lic[0] = "Ausente";
			if (user[idjugador][jLicencias][1] == 1) info_lic[1] = "Adquirida"; //conducir
			else info_lic[1] = "Ausente";
			if (user[idjugador][jLicencias][4] == 1) info_lic[2] = "Adquirida"; //vuelo
			else info_lic[2] = "Ausente";
			if (user[idjugador][jLicencias][5] == 1) info_lic[3] = "Adquirida"; //navegación
			else info_lic[3] = "Ausente";

			strcat(_dialog1, "RESULTADOS DE BÚSQUEDA:\n\n");
			//----------&&
			format(_dialog2, sizeof(_dialog2),
			"Nombre completo: %s\nTeléfono: %d\nDocumento: %d\nLicencia de conducir: %s\n",
			nombre_pj(idjugador, 0), user[idjugador][jTelefono], user[idjugador][jDocumento], info_lic[1]);
			strcat(_dialog1, _dialog2);
			//----------&&
			format(_dialog2, sizeof(_dialog2),
			"Licencia de vuelo: %s\nLicencia de bote: %s\nLicencia de armas: %s\nPuntos de licencia: %d\nNr. Arrestos: %d\n\n",
			info_lic[2], info_lic[3], info_lic[0], user[idjugador][jPuntosLic], user[idjugador][jArrestos]);
			strcat(_dialog1, _dialog2);
			//----------&&
			strcat(_dialog1, "PROPIEDADES\n");
			if(user[idjugador][jCasaKey] != -1)
			{
				new c_id = user[idjugador][jCasaKey];
				Get2DZone(_dialog2, MAX_ZONE_NAME, i_Casa[c_id][cExteriorX], i_Casa[c_id][cExteriorY], i_Casa[c_id][cExteriorZ]);
				format(_dialog2, sizeof(_dialog2), "Casa 1: %s - %d\n", _dialog2, c_id);
				strcat(_dialog1, _dialog2);
			}
			if(user[idjugador][jCasaKey2] != -1)
			{
				new c_id = user[idjugador][jCasaKey2];
				Get2DZone(_dialog2, MAX_ZONE_NAME, i_Casa[c_id][cExteriorX], i_Casa[c_id][cExteriorY], i_Casa[c_id][cExteriorZ]);
				format(_dialog2, sizeof(_dialog2),"Casa 2: %s - %d\n", _dialog2, c_id);
				strcat(_dialog1, _dialog2);
			}
			if(user[idjugador][jNegocioKey] != -1)
			{
				new n_id = user[idjugador][jNegocioKey];
				Get2DZone(_dialog2, MAX_ZONE_NAME, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ]);
				format(_dialog2, sizeof(_dialog2),"Negocio: %s - %d\n", _dialog2, n_id);
				strcat(_dialog1, _dialog2);
			}
			//----------&&
			strcat(_dialog1, "\nPrevia(s) razon(es) de arresto:\n\n");
			if (user[idjugador][jDelito][0] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][0]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][1] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][1]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][2] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][2]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][3] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][3]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][4] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][4]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][5] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][5]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][6] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][6]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][7] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][7]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][8] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][8]), strcat(_dialog1, _dialog2);
			if (user[idjugador][jDelito][9] != 0) format(_dialog2, sizeof(_dialog2), "* %s\n", p_delito[idjugador][9]), strcat(_dialog1, _dialog2);

			format(_dialog3, sizeof(_dialog3), "{b0b0b0}Información de %s		", nombre_pj(idjugador, 0));
			ExPlayerDialog(playerid, D_Computador0, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Cerrar", "");
			return 1;
		}
		case D_Computador3:
		{
			if (!response) return _ordenador(playerid);
			if (!IsNumeric(inputtext)) return ExPlayerDialog(playerid, D_Computador3, DIALOG_STYLE_INPUT, "{D6E1EB}Información de vehículo		", "Introduzca el número de matrícula del vehículo:\n\n{ff0000} Matrícula inválida (coloco palabras)", "Buscar", "Cancelar");
			new vehicleid = strval(inputtext);
			for(new veh = 0; veh < MAX_VEHICULOS; veh++)
			{
				if(i_Vehiculo[veh][vLlave] == vehicleid)
				{
					new
					_dialog1[3000],
					_dialog2[300],
					_dialog3[300],
					Float: posx,
					Float: posy,
					Float: posz,
					zona[MAX_ZONE_NAME];

					if (i_Vehiculo[veh][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[veh][vID], posx, posy, posz);
					else { posx=i_Vehiculo[veh][vPosicionX]; posy=i_Vehiculo[veh][vPosicionY]; posz=i_Vehiculo[veh][vPosicionZ]; }

					Get2DZone(zona, MAX_ZONE_NAME, posx, posy, posz);

					format(_dialog2, sizeof(_dialog2),
					"RESULTADOS DE BÚSQUEDA:\n\nModelo: %s\nPropetario: %s\nMulta: %d\nÚltima vez visto en: %s\n\n",
					nombre_vehiculo[i_Vehiculo[veh][vModelo] - 400],
					i_Vehiculo[veh][vDueno],
					i_Vehiculo[veh][vMulta],
					zona);
					strcat(_dialog1, _dialog2);

					format(_dialog3, sizeof(_dialog3), "{b0b0b0}Matrícula LS-%d		", vehicleid);
					ExPlayerDialog(playerid, D_Computador5, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Atrás", "Cerrar");
					SetPVarInt(playerid, "or_coches", veh);
					return 1;
				}
			}
			ExPlayerDialog(playerid, D_Computador3, DIALOG_STYLE_INPUT, "{D6E1EB}Información de vehículo", "Introduzca el número de matrícula del vehículo:\n\n{ff0000} Matrícula inválida (vehículo sin dueño)", "Buscar", "Cancelar");
		}
		case D_Computador5:
		{
			if (!response) return _ordenador(playerid);

			if(GetPVarInt(playerid, "or_coches") == 0) return _ordenador(playerid);
			_ordenador(playerid);
			/*new veh = GetPVarInt(playerid, "or_coches");
			DeletePVar(playerid, "or_coches");
			new Float: carPos[3], zone[MAX_ZONE_NAME];
			if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "0", "Imposible realizar acciones en un vehículo que no existe.");
			if(i_Vehiculo[veh][vEnDeposito] == 1) return _Mensaje(playerid, 0, "0", "No puedes localizar un vehículo confiscado.");
			if(i_Vehiculo[veh][vSpawned] == 0) return _Mensaje(playerid, 0, "0", "No puedes localizar vehículos guardados.");

			GetVehiclePos(i_Vehiculo[veh][vID], carPos[0], carPos[1], carPos[2]);
			GetCar3DZone(i_Vehiculo[veh][vID], zone, sizeof(zone));
			format(string, sizeof(string), "Vehículo n°%d, fue localizado en %s.", i_Vehiculo[veh][vID], zone);
			Mensaje_(playerid, -1, string);
			set_checkpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
			SetPVarInt(playerid, "EnCheckPoint", 1);
			vehicleSave(veh);
			TogglePlayerAllDynamicCPs(playerid, false);*/
			return 1;
		}
		case D_ELEGIRROPA:
		{
			if(!response) return 1;
			change_skin_ex(playerid, GetPVarInt(playerid, "ROPA_SELECCIONADA"), listitem);
		}
		case D_EDITARROPA:
		{
			if(!response) return 1;
			if(user[playerid][jRopaArmario][listitem] == 0) return _Mensaje(playerid, 0, "59", "No tienes nada en esa ranura.");
			SetPVarInt(playerid, "ROPA_EDITAR", listitem);
			ExPlayerDialog(playerid, D_EDITARROPA2, DIALOG_STYLE_LIST, "{D6E1EB}Selección de vestuario", " Colocar ropa\n Eliminar ropa", ">>", "<<");
		}
		case D_EDITARROPA2:
		{
			if(!response) return cmd_set_player_1999(playerid);
			new R = GetPVarInt(playerid, "ROPA_EDITAR");
			if(listitem == 0)
			{
				change_skin_ex(playerid, user[playerid][jRopaArmario][R], R);
			}
			else if(listitem == 1)
			{
				user[playerid][jRopaArmario][R] = 0;
				SendClientMessage(playerid, 0xccccccff, "Borra la ranura de ropa seleccionada.");
				switch(user[playerid][jSexo])
				{
					case 1: Skin_(playerid, 252);
					case 2: Skin_(playerid, 140);
				}
			}
		}
		case D_Comprar_Muebles:
		{
			if(!response) return cmd_muebles(playerid);
			new pagina = -1;

			if (listitem == 0) pagina = 0;
			else if (listitem == 1) pagina = 3;
			else if (listitem == 2) pagina = 6;
			else if (listitem == 3) pagina = 7;
			else if (listitem == 4) pagina = 10;
			else if (listitem == 5) pagina = 15;
			else if (listitem == 6) pagina = 12;
			else if (listitem == 7) pagina = 17;
			else if (listitem == 8) pagina = 22;
			else if (listitem == 9) pagina = 24;
			else if (listitem == 10) pagina = 27;
			else if (listitem == 11) pagina = 29;

			if(pagina != -1) menu_selection(playerid, ob_muebles, "Muebles", pagina);
			return 1;
		}
		case D_Comprar_Muebles2:
		{
			new id_le = 0, le_id = -1;

			if(DentroCasa[playerid] != -1) { id_le = 1; le_id = DentroCasa[playerid]; }
			if(DentroNegocio[playerid] != -1) { id_le = 2; le_id = DentroNegocio[playerid]; }
			if(DentroGarage[playerid] != -1) { id_le = 3; le_id = DentroGarage[playerid]; }
			if(DentroEmpresa[playerid] != -1) { id_le = 4; le_id = DentroEmpresa[playerid]; }

			if(response)
			{
				new modelid = MuebleActual[playerid];
				new text_[240], OBJ_INDEX;
				buscar_modelo_obj(modelid, OBJ_INDEX);
				new precio = objetos_interior[OBJ_INDEX][1];

				if(RevisarDinero(playerid, precio))
				{
					adquirir_mueble(playerid, id_le, modelid, precio, le_id);
					format(text_, sizeof(text_), "{FFFFFF}Modelo: %d\nPrecio: %d\nNombre: %s\n\n{60CD00}-{FFFFFF} ¿Deseas comprar el mismo mueble?", modelid, precio, objetos_interior[OBJ_INDEX][2]);
					ExPlayerDialog(playerid, D_Comprar_Muebles2, DIALOG_STYLE_MSGBOX, "{D6E1EB}Adquirir mueble", text_, "Comprar", "Inicio");
					MuebleActual[playerid] = modelid;
				}
				else
				{
					MuebleActual[playerid] = 0;
					_Mensaje(playerid, 0, "0", "Usted no posee suficiente dinero.");
					return 1;
				}
			}
			else
			{
				MuebleActual[playerid] = 0;
				switch(id_le)
				{
				    case 1: user_Mueble(playerid, 2);
				    case 2: user_Mueble(playerid, 1);
				    case 3: user_Mueble(playerid, 3);
				    case 4: user_Mueble(playerid, 4);
				}
				return 1;
			}
		}
		case DIALOG_EDIT_BONE:
		{
			if (response)
			{
				InfoAccesorio[playerid][7][aParte] = listitem + 1;
				SendClientMessage(playerid, -1, "Has cambiado con éxito el hueso de tu arma.");
				if (user[playerid][jEspalda] != 0)
				{
					RemovePlayerAttachedObject(playerid, 9);
					PonerObjeto(playerid, 3, user[playerid][jEspalda]);
				}
			}
   			return 1;
		}
		case D_Cacheo:
		{
			new playerid2 = GetPVarInt(playerid, "en_cacheo");
			if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador que te revisaba se desconecto.");

			if (response)
		    {
				R_Inventario(playerid2, playerid);
				new accion_me[MAX_TEXT_CHAT];
				format(accion_me, sizeof(accion_me), "revisa a %s para encontrar algo.", nombre_pj(playerid, 0));
				cmd_me(playerid2, accion_me);
		    }
		    else
		    {
				new accion_me[MAX_TEXT_CHAT];
				format(accion_me, sizeof(accion_me), "No te dejaste revisar por %s.", nombre_pj(playerid2, 0));
		        Mensaje_(playerid, 0xFF6347AA, accion_me);
				format(accion_me, sizeof(accion_me), "%s no se dejo revisar los bolsillos.", nombre_pj(playerid, 0));
				Mensaje_(playerid2, 0xFF6347AA, accion_me);
		    }
		}
		case D_TIENDA247:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_SALDO, DIALOG_STYLE_INPUT, "{D6E1EB}Monto de saldo", "{FFFFFF}Por favor, escribe la cantidad de saldo que desea recargar a tu teléfono.\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Aceptar", "");
				case 1:
				{
					if(ComprobarDineroJ(playerid) < 500) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new movil24[10]; movil24[0] = 18865; movil24[1] = 18866; movil24[2] = 18867; movil24[3] = 18868;
					movil24[4] = 18869; movil24[5] = 18870; movil24[6] = 18871; movil24[7] = 18872; movil24[8] = 18873; movil24[9] = 18874;
					menu_selectionEx(playerid, movil24, 10, "Modelos", D_MODELOS);
				}
				case 2:
				{
					if(ComprobarDineroJ(playerid) < 2) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					ExPlayerDialog(playerid, D_nrLOTERIA, DIALOG_STYLE_INPUT, "{D6E1EB}Loteria Nacional", "Inserta un número entre 1 y 120. Éxitos!", "Comprar", "Cancelar");
					_Pagar(playerid, nid, 2);
				}
				case 3:
				{
					if(ComprobarDineroJ(playerid) < 6) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 88;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 5;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 5;}
					_Mensaje(playerid, 5, "0", "Compraste una caja de cigarro, comandos: /fumar");
					_Pagar(playerid, nid, 6);
				}
				case 4:
				{
					if(ComprobarDineroJ(playerid) < 12) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 149;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 8;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 8;}
					_Mensaje(playerid, 5, "0", "Compraste un paquete de puros, comandos: /fumar");
					_Pagar(playerid, nid, 12);
				}
				case 5:
				{
					if(ComprobarDineroJ(playerid) < 12) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 38;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){
						PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 30;
						if (InfoObjeto[objeto][IDArma] > 0)
						{ 
							_GiveWeapon(playerid, InfoObjeto[objeto][IDArma], 30);
						} 
					}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 30;}
					_Mensaje(playerid, 5, "0", "Compraste una cámara.");
					if(user[playerid][jPremium] == 0) _Pagar(playerid, nid, 12);
					else _Pagar(playerid, nid, 10), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $12, a ti te costó $10.");
				}
				case 6:
				{
					if(ComprobarDineroJ(playerid) < 8) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 87;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 20;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 20;}
					_Mensaje(playerid, 5, "0", "Compraste un encendedor.");
					_Pagar(playerid, nid, 8);
				}
				case 7:
				{
					if(ComprobarDineroJ(playerid) < 4) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 93;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
					_Pagar(playerid, nid, 4);
				}
				case 8:
				{
					if(ComprobarDineroJ(playerid) < 1) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 95;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
					_Pagar(playerid, nid, 1);
				}
				case 9:
				{
					if(ComprobarDineroJ(playerid) < 2) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 90;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 3;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 3;}
					_Pagar(playerid, nid, 2);
				}
				case 10:
				{
					if(ComprobarDineroJ(playerid) < 2) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 91;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 3;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 3;}
					_Pagar(playerid, nid, 2);
				}
				case 11:
				{
					if(ComprobarDineroJ(playerid) < 2) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 92;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 3;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 3;}
					_Pagar(playerid, nid, 2);
				}
				case 12:
				{
					if(ComprobarDineroJ(playerid) < 3) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 83;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 3;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 3;}
					_Pagar(playerid, nid, 3);
				}
				case 13:
				{
					if(ComprobarDineroJ(playerid) < 3) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 125;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 2;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 2;}
					_Pagar(playerid, nid, 3);
				}
				case 14:
				{
					if(ComprobarDineroJ(playerid) < 315) { _Mensaje(playerid, 0, "32", "Usted no posee suficiente dinero."); return 1; }
					new objeto = 155;
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
					if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 3;}
					else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 3;}
					_Pagar(playerid, nid, 315);
				}
				case 15: _Gastar(playerid, nid, 54, 136, 6); //- Sixpack cerveza
			}
		}
		case D_nrLOTERIA:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste la compra de lotería.");
			new lenght = strlen(inputtext);
			if (lenght > 0 && lenght < 4)
			{
				user[playerid][jLoteria] = strval(inputtext);
				format(string, sizeof string, "Compraste la boleta número %d, éxitos.", user[playerid][jLoteria]);
				_Mensaje(playerid, 5, "0", string);
			}
		}
		case D_ROPA:
		{
			if (response) //skins
			{
				if(user[playerid][jSexo] == 1) menu_selection(playerid, SkinsHombre, "Ropa de hombre");
				else if(user[playerid][jSexo] == 2) menu_selection(playerid, SkinsMujer, "Ropa de mujer");
			}
			else //toys
			{
			    new TextAcc[512];
				for(new x; x < MAX_uACCESORIOS; x++)
				{
					new NombreAcc[128];
					format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
					for(new i; i < sizeof(Accesorios); i++)
					{
						if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
						{
							format(NombreAcc, sizeof(NombreAcc), "%s%s", color_objeto(playerid, x), Accesorios[i][NombreAccesorio]);
						}
					}
					format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
				}
				ExPlayerDialog(playerid, D_Toys, DIALOG_STYLE_LIST, "{D6E1EB}Accesorios", TextAcc, "Seleccionar", "Cancelar");
			}
		}
		case D_RESTAURANTES:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 8, 96, 5); //- Botella de cerveza
				case 1: _Gastar(playerid, nid, 3, 97, 2); //- Copa de vino
				case 2: _Gastar(playerid, nid, 4, 98, 1); //- Vaso de whisky
				case 3: _Gastar(playerid, nid, 5, 99, 1); //- Vaso de ron
				case 4: _Gastar(playerid, nid, 12, 160, 5); //pierna de pavo
				case 5: _Gastar(playerid, nid, 7, 158, 3); //pescado frito
				case 6: _Gastar(playerid, nid, 2, 101, 2); //- Burrito
				case 7: _Gastar(playerid, nid, 4, 102, 2); //- Pizza jamón y queso
				case 8: _Gastar(playerid, nid, 3, 156, 3); //- taco
			}
		}
		case D_Cafeteria:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 4, 101, 3); //burrito
				case 1: _Gastar(playerid, nid, 3, 156, 3); //taco
				case 2: _Gastar(playerid, nid, 7, 157, 4); //hot dog
				case 3: _Gastar(playerid, nid, 1, 95, 4); //agua
				case 4: _Gastar(playerid, nid, 4, 159, 5); //café
				case 5: _Gastar(playerid, nid, 3, 94, 3); //pepsi
				case 6: _Gastar(playerid, nid, 3, 93, 3); //sprunk
			}
		}
		case D_CLUCKINBELL:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 4, 101, 3); //burrito
				case 1: _Gastar(playerid, nid, 10, 160, 5); //Pierna de pavo
				case 2: _Gastar(playerid, nid, 3, 93, 4); //sprunk
				case 3: _Gastar(playerid, nid, 1, 95, 3); //agua
				case 4: _Gastar(playerid, nid, 2, 159, 4); //café
			}
		}
		case D_BURGERSHOT:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 6, 100, 5); //Hamburguesa
				case 1: _Gastar(playerid, nid, 4, 94, 4); //pepsi
				case 3: _Gastar(playerid, nid, 1, 95, 4); //agua
				case 4: _Gastar(playerid, nid, 2, 159, 4); //café
			}
		}
		case D_PIZZASTACK:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 9, 102, 5); //Pizza
				case 1: _Gastar(playerid, nid, 4, 101, 3); //burrito
				case 2: _Gastar(playerid, nid, 3, 94, 4); //pepsi
				case 3: _Gastar(playerid, nid, 3, 93, 4); //sprunk
				case 4: _Gastar(playerid, nid, 1, 95, 5); //agua
			}
		}
		case D_NEG_CLUBS:
		{
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 2, 95, 2); //- Agua
				case 1: _Gastar(playerid, nid, 15, 97, 2); //- Copa de vino
				case 2: _Gastar(playerid, nid, 20, 98, 1); //- Vaso de whisky
				case 3: _Gastar(playerid, nid, 14, 99, 1); //- Vaso de ron
				case 4: _Gastar(playerid, nid, 8, 96, 5); //- Cerveza
				case 5: _Gastar(playerid, nid, 58, 136, 6); //- Sixpack cerveza
				case 6: _Gastar(playerid, nid, 100, 104, 10); //- Botella de whisky
				case 7: _Gastar(playerid, nid, 20, 88, 8); //- Cigarros
				case 8: _Gastar(playerid, nid, 10, 87, 20); //- Encendedor
				case 9: _Gastar(playerid, nid, 6, 101, 1); //- Burrito
				case 10: _Gastar(playerid, nid, 85, 105, 10); //- Botella de vino
				case 11: _Gastar(playerid, nid, 81, 103, 10); //- Botella de ron
			}
		}
		case D_SEXSHOP:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			switch(listitem)
			{
				case 0: if(RevisarDinero(playerid, 15)) ExPlayerDialog(playerid, D_SEXSHOP3, DIALOG_STYLE_LIST, "{D6E1EB}Ropa sexual de mujer", "{ffffff}Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4\nRopa de Sexo 5\nRopa de Sexo 6\nRopa de Sexo 7\nRopa de Sexo 8", "Seleccionar", "Cancelar");
				case 1: if(RevisarDinero(playerid, 15)) ExPlayerDialog(playerid, D_SEXSHOP2, DIALOG_STYLE_LIST, "{D6E1EB}Ropa sexual de hombre", "{ffffff}Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4", "Seleccionar", "Cancelar");
				case 2: if(RevisarDinero(playerid, 15)) ExPlayerDialog(playerid, D_SEXSHOP4, DIALOG_STYLE_LIST, "{D6E1EB}Juguetes sexuales", "{ffffff}Dildo Doble punta\nDildo pequeño\nDildo vibrador\nDildo vibrador pequeño", "Seleccionar", "Cancelar");
			}
		}
		case D_SEXSHOP2:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0: ElegirRopa(playerid, 18);
				case 1: ElegirRopa(playerid, 97);
				case 2: ElegirRopa(playerid, 154);
				case 3: ElegirRopa(playerid, 252);
			}
			_Mensaje(playerid, 5, "0", "Compraste un traje de sexo masculino.");
			if(user[playerid][jPremium] == 0) _Pagar(playerid, nid, 15);
			else _Pagar(playerid, nid, 12), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $15, a ti te costó $12.");
		}
		case D_SEXSHOP3:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0: ElegirRopa(playerid, 63);
				case 1: ElegirRopa(playerid, 75);
				case 2: ElegirRopa(playerid, 85);
				case 3: ElegirRopa(playerid, 87);
				case 4: ElegirRopa(playerid, 152);
				case 5: ElegirRopa(playerid, 178);
				case 6: ElegirRopa(playerid, 256);
				case 7: ElegirRopa(playerid, 257);
			}
			_Mensaje(playerid, 5, "0", "Compraste un traje de sexo femenino.");
			if(user[playerid][jPremium] == 0) _Pagar(playerid, nid, 15);
			else _Pagar(playerid, nid, 12), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $15, a ti te costó $12.");
		}
		case D_SEXSHOP4:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0: _Gastar(playerid, nid, 10, 10, 1); //- dildo
				case 1: _Gastar(playerid, nid, 8, 11, 1); //- dildo
				case 2: _Gastar(playerid, nid, 12, 12, 1); //- dildo
				case 3: _Gastar(playerid, nid, 8, 13, 1); //- dildo
			}
		}
		case D_GASOLINERA:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_SALDO, DIALOG_STYLE_INPUT, "{D6E1EB}Monto de saldo", "{FFFFFF}Por favor, escribe la cantidad de saldo que desea recargar a tu teléfono.\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Aceptar", "");
				case 1: _Gastar(playerid, nid, 150, 89, 1); //- bidón de gasolina
				case 2: _Gastar(playerid, nid, 2, 91, 1); //- -
				case 3: _Gastar(playerid, nid, 2, 93, 1); //- -
				case 4: _Gastar(playerid, nid, 3, 88, 5); //- -
				case 5: _Gastar(playerid, nid, 8, 87, 20); //- -
				case 6:
				{
				    if(user[playerid][ObjetosRep] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ya tienes unas piezas de recambio.");
					if(RevisarDinero(playerid, 50))
					{
						_Mensaje(playerid, 4, "33CCFF", "Compraste unas piezas de recambio, comandos: /repararveh.");
						Compra(playerid, 50);
						if (i_Negocio[nid][nComprado] != 0)
						{
							i_Negocio[nid][nDinero] += 50;
							i_Negocio[nid][nProductos]--;
						}
						user[playerid][ObjetosRep] = 1;
						return 1;
					}
				}
				case 7: _Gastar(playerid, nid, 68, 136, 6); //- Sixpack cerveza
			}
		}
		case D_equipo_ED:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste el menú.");
			switch(listitem)
			{
				case 0:
				{
					new obj = 37;
					if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if (user[playerid][jm_Derecha] == 0)
					{
						user[playerid][jm_Derecha] = obj;
						user[playerid][jm_DerechaCant] = capacidad_objecto(obj);
						PonerObjeto(playerid, 1, obj);
						_GiveWeapon(playerid, InfoObjeto[obj][IDArma], capacidad_objecto(obj));
					}
					else if (user[playerid][jm_Derecha] != 0)
					{
						user[playerid][jm_Izquierda] = obj;
						user[playerid][jm_IzquierdaCant] = capacidad_objecto(obj);
						PonerObjeto(playerid, 2, obj);
					}
					accion_rol(playerid, 0, "toma un extintor del armario.");
					return 1;
				}
				case 1:
				{
					new
						UniformesFD[20]
					;
					UniformesFD[0] = 275; UniformesFD[1] = 276; UniformesFD[2] = 274; UniformesFD[3] = 277; UniformesFD[4] = 279;
					UniformesFD[5] = 278; UniformesFD[6] = 70; UniformesFD[7] = 71; UniformesFD[8] = 309; UniformesFD[9] = 61;
					UniformesFD[10] = 308;
					menu_selectionEx(playerid, UniformesFD, 20, "Uniformes", D_UNIFORMESFD);
				}
				case 2:
				{
				    _Limuerte(playerid);
					Sangre_(playerid, 100);
				}
				case 3:
				{
					if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if(user[playerid][jm_Derecha] == 0)
					{
						user[playerid][jm_Derecha] = 130;
						user[playerid][jm_DerechaCant] = 1;
						PonerObjeto(playerid, 1, 130);
					}
					else
					{
						user[playerid][jm_Izquierda] = 130;
						user[playerid][jm_IzquierdaCant] = 1;
						PonerObjeto(playerid, 2, 130);
					}
				}
				case 4: cmd_set_player_1999(playerid);
			}
		}
		case D_equipo_noticias:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste el menú.");
			switch(listitem)
			{
				case 0:
				{
					if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if (user[playerid][jm_Derecha] == 0)
					{
						user[playerid][jm_Derecha] = 38;
						user[playerid][jm_DerechaCant] = 100;
						PonerObjeto(playerid, 1, 38);
						_GiveWeapon(playerid, InfoObjeto[38][IDArma], 100);
						return 1;
					}
					else if (user[playerid][jm_Derecha] != 0)
					{
						user[playerid][jm_Izquierda] = 38;
						user[playerid][jm_IzquierdaCant] = 100;
						PonerObjeto(playerid, 2, 38);
						return 1;
					}
				}
				case 1:
				{
				    _Limuerte(playerid);
					Sangre_(playerid, 100);
				}
				case 2:
				{
					new UniformesSAN[7]; UniformesSAN[0] = 189; UniformesSAN[1] = 40; UniformesSAN[2] = 217;
					UniformesSAN[3] = 211; UniformesSAN[4] = 223; UniformesSAN[5] = 171; UniformesSAN[6] = 290;
					menu_selectionEx(playerid, UniformesSAN, 7, "Uniformes", D_UNIFORMESnoticias);
				}
				case 3: cmd_set_player_1999(playerid);
			}
		}
        case D_equipoSADOC:
		{
			if(response)
			{
			    switch(listitem)
				{
					case 0: //servicio
					{
						if(EnServicioPD[playerid] == 0)
						{
							accion_rol(playerid, 0, "coge su placa y se coloca un chaleco anti balas.");
							Chaleco_(playerid, 75.0);
							Sangre_(playerid, 100);
							EnServicioPD[playerid] = 1;
							_Limuerte(playerid);
						}
						else if(EnServicioPD[playerid] == 1)
						{
							if(user[playerid][jSkin] != 0) { Skin_(playerid, user[playerid][jSkin]); user[playerid][jSkin] = 0; }
							accion_rol(playerid, 0, "deja todas sus cosas en el casillero.");
							user[playerid][jm_Derecha] = 0;
							user[playerid][jm_DerechaCant] = 0;
							user[playerid][jm_Izquierda] = 0;
							user[playerid][jm_IzquierdaCant] = 0;
							RemovePlayerAttachedObject(playerid, 7);
							RemovePlayerAttachedObject(playerid, 8);
							ResetPlayerWeapons(playerid);
							Chaleco_(playerid, 0.0);
							EnServicioPD[playerid] = 0;
						}
					}
					case 1:
				    {
						if (user[playerid][jRango] < 5) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 5.");
						new cadena[500];
						strcat(cadena, "Nightstick\n");
						strcat(cadena, "Gas Pimienta\n");
						strcat(cadena, "Táser\n");
						strcat(cadena, "Esposas\n");
						strcat(cadena, "Botiquin\n");
						strcat(cadena, "Escopeta no-letal\n");
						ExPlayerDialog(playerid, D_equipoSADOC2, 2, "Armería", cadena, "Seleccionar", "Cancelar");
					}
					case 2: //uniformes
					{
						new UniformesPD[20];
						UniformesPD[0] = 71; UniformesPD[1] = 141; UniformesPD[2] = 280; UniformesPD[3] = 266; UniformesPD[4] = 281;
						UniformesPD[5] = 265; UniformesPD[6] = 267; UniformesPD[7] = 284; UniformesPD[8] = 285; UniformesPD[9] = 282;
						UniformesPD[10] = 283; UniformesPD[11] = 288; UniformesPD[12] = 300; UniformesPD[13] = 301; UniformesPD[14] = 302;
						UniformesPD[15] = 306; UniformesPD[16] = 307; UniformesPD[17] = 309; UniformesPD[18] = 310; UniformesPD[19] = 311;
						menu_selectionEx(playerid, UniformesPD, 20, "Uniformes", D_UNIFORMESPD);
					}
					case 3: cmd_set_player_1999(playerid);
					case 4: ExPlayerDialog(playerid, D_COMPRARTOYPD, DIALOG_STYLE_MSGBOX, "{D6E1EB}Accessorios", "Bienvenido al casillero de accesorios", "Continuar", "Cancelar");
				}
			}
		}
		case D_equipoSADOC2:
		{
			if(!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste el menú de armería.");
			new obj;
			switch(listitem)
			{
			    case 0: obj = 3;
			    case 1: obj = 36;
			    case 2: obj = 40;
			    case 3: obj = 73;
			    case 4: obj = 130;
			    case 5: obj = 135;
			}
			if(obj == 3 || obj == 38 || obj == 19 || obj == 21 || obj == 109)//si ya tiene un objeto así
			{
				for(new x = 0; x < 10; x++)
				{
					if(user[playerid][jBolsillo][x] == obj)
					{
						_Mensaje(playerid, 0, "9", "Solo puedes llevar un arma de ese tipo.");
						return 1;
					}
				}
			}
			if(obj == 22 || obj == 26 || obj == 28 || obj == 30 || obj == 31 || obj == 109)//si posee arma grande
			{
				if(user[playerid][jm_Derecha] == obj || user[playerid][jm_Izquierda] == obj || user[playerid][jEspalda])
				{
					_Mensaje(playerid, 0, "9", "Ya portas un arma grande de este tipo.");
					return 1;
				}
			}
			if(obj == 22 || obj == 26 || obj == 28 || obj == 30 || obj == 31 || obj == 109)//cede arma grande
			{
				if(user[playerid][jEspalda] == 0)
				{
					user[playerid][jEspalda] = obj;
					user[playerid][jEspaldaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 3, obj);
					return 1;
				}
				else if(user[playerid][jm_Derecha] == 0)
				{
					user[playerid][jm_Derecha] = obj;
					user[playerid][jm_DerechaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 1, obj);
					return 1;
				}
				else if(user[playerid][jm_Izquierda] == 0)
				{
					user[playerid][jm_Izquierda] = obj;
					user[playerid][jm_IzquierdaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 2, obj);
					return 1;
				}
			}
			else
			{
				for(new x = 0; x < 10; x++)
				{
					if(user[playerid][jBolsillo][x] == 0)
					{
						user[playerid][jBolsillo][x] = obj;
						user[playerid][jBolsilloCant][x] = capacidad_objecto(obj);
						format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
						ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
						return 1;
					}
				}
			}
		}
        case D_equipoPDySD:
		{
			if(response)
			{
				if(listitem == 0) //servicio
				{
					if(EnServicioPD[playerid] == 0)
					{
						accion_rol(playerid, 0, "coge su placa y se coloca un chaleco anti balas.");
						Chaleco_(playerid, 120.0);
						Sangre_(playerid, 100);
						EnServicioPD[playerid] = 1;
						_Limuerte(playerid);
					}
					else if(EnServicioPD[playerid] == 1)
					{
						cmd_set_player_1999(playerid);
						accion_rol(playerid, 0, "deja todas sus cosas en el casillero.");
						user[playerid][jm_Derecha] = 0;
						user[playerid][jm_DerechaCant] = 0;
						user[playerid][jm_Izquierda] = 0;
						user[playerid][jm_IzquierdaCant] = 0;
						RemovePlayerAttachedObject(playerid, 7);
						RemovePlayerAttachedObject(playerid, 8);
						ResetPlayerWeapons(playerid);
						Chaleco_(playerid, 0.0);
						EnServicioPD[playerid] = 0;
					}
				}
				else if(listitem == 1) //armería
				{
				   	new cadena[500];
					strcat(cadena, "Chaleco Antibalas\n"); //Lista 1
					strcat(cadena, "Nightstick\n");
					strcat(cadena, "Gas Pimienta\n");
					strcat(cadena, "Táser\n");
					strcat(cadena, "Pistola 45. Colt\n");
					strcat(cadena, "Cargador 45. Colt\n");
					strcat(cadena, "Pistola Desert Eagle\n");
					strcat(cadena, "Cargador Desert Eagle\n");
					strcat(cadena, "Escopeta\n");
					strcat(cadena, "Cartuchos Escopeta\n");
					strcat(cadena, "Subfusil MP5K\n");
					strcat(cadena, "Cargador MP5K\n");
					strcat(cadena, "Rifle M4\n");
					strcat(cadena, "Cargador  M4A1\n");
					strcat(cadena, "Granada de Humo\n");
					strcat(cadena, "Esposas\n");
					strcat(cadena, "Franco tirador\n");
					strcat(cadena, "Cargador de rifle\n");
					strcat(cadena, "Optiwand\n");
					strcat(cadena, "Alcoholimetro\n");
					strcat(cadena, "Botiquin\n");
					strcat(cadena, "Escopeta No-letal\n");
					strcat(cadena, "Cámara de velocidad\n");
					if(Es_Faccion(playerid, 1)) ExPlayerDialog(playerid, D_equipoPDySD2, 2, "Armería", cadena, "Seleccionar", "Cancelar");
				}
				else if(listitem == 2) //uniformes
				{
					new UniformesPD[38];
					UniformesPD[0] = 71; UniformesPD[1] = 141; UniformesPD[2] = 280; UniformesPD[3] = 266; UniformesPD[4] = 281;
					UniformesPD[5] = 265; UniformesPD[6] = 267; UniformesPD[7] = 284; UniformesPD[8] = 285; UniformesPD[9] = 282;
					UniformesPD[10] = 283; UniformesPD[11] = 288; UniformesPD[12] = 300; UniformesPD[13] = 301; UniformesPD[14] = 302;
					UniformesPD[15] = 306; UniformesPD[16] = 307; UniformesPD[17] = 309; UniformesPD[18] = 310; UniformesPD[19] = 311;
					menu_selectionEx(playerid, UniformesPD, 38, "Uniformes", D_UNIFORMESPD);
				}
				else if(listitem == 3) //accesorios
				{
					ExPlayerDialog(playerid, D_COMPRARTOYPD, DIALOG_STYLE_MSGBOX, "{D6E1EB}Accessorios", "Bienvenido al casillero de accesorios", "Continuar", "Cancelar");
				}
				else if(listitem == 4) //encubierto
				{
					ExPlayerDialog(playerid, D_equipoPDySD3, DIALOG_STYLE_INPUT, "{D6E1EB}Menú de ropa","Introduce el ID de ropa a colocar.", "Siguiente", "Cancelar");
				}
			}
		}
		case D_equipoPDySD3:
		{
			if(response)
			{
				new skinid = strval(inputtext);
				if(!SeleccionSkin(skinid)) return _Mensaje(playerid, 0, "124", "ERROR: Selección de skin del 1 al 311.");
				user[playerid][jSkin] = user[playerid][jRopa];
				user[playerid][jRopa] = skinid;
				SetPlayerSkin(playerid, user[playerid][jRopa]);
			}
		}
		case D_equipoPDySD2:
		{
			if(!response) { return 1; }
			new obj, price;
			switch(listitem)
			{
				case 0: //chaleco antibalas
				{
					accion_rol(playerid, 0, "coge un chaleco antibalas.");
					Chaleco_(playerid, 120.0);
					return 1;
				}
				case 1: obj = 3, price = 50;
				case 2: obj = 36, price = 45;
				case 3: obj = 40, price = 220;
				case 4:
				{
					if (user[playerid][jRango] < 4) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 4.");
					obj = 19, price = 250;
				}
				case 5:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 41;
				}
				case 6:
				{
					if (user[playerid][jRango] < 4) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 4.");
					obj = 21, price = 1200;
				}
				case 7:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 42;
				}
				case 8:
				{
					if (user[playerid][jRango] < 4) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 4.");
					obj = 22, price = 3500;
				}
				case 9:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 49;
				}
				case 10:
				{
					if (user[playerid][jRango] < 7) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 6.");
					obj = 26, price = 5500;
				}
				case 11:
				{
					if (user[playerid][jRango] < 5) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 6.");
					obj = 44;
				}
				case 12:
				{
					if (user[playerid][jRango] < 7) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 7.");
					obj = 28, price = 11000;
				}
				case 13:
				{
					if (user[playerid][jRango] < 7) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 7.");
					obj = 47;
				}
				case 14: obj = 17, price = 70;
				case 15: obj = 73;
				case 16:
				{
					if (user[playerid][jRango] < 7) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 7.");
					obj = 31, price = 15000;
				}
				case 17:
				{
					if (user[playerid][jRango] < 7) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 7.");
					obj = 48;
				}
				case 18:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 109, price = 2000;
				}
				case 19: obj = 129, price = 150;
				case 20: obj = 130;
				case 21:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 135, price = 2900;
				}
				case 22:
				{
					if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 2.");
					obj = 137, price = 450;
				}
			}
			if(d_estado < 120000) //si el estado está por debajo de 120mil, no permitirá acceso a armas.
			{
				_Mensaje(playerid, 5, "0", "El estado no tiene fondos suficientes para pagarte el armamento.");
				return 1;
			}
			if(obj == 3 || obj == 38 || obj == 19 || obj == 21 || obj == 109) //si ya tiene un objeto así
			{
				for(new x = 0; x < 10; x++)
				{
					if(user[playerid][jBolsillo][x] == obj)
					{
						_Mensaje(playerid, 0, "9", "Solo puedes llevar un arma de ese tipo.");
						return 1;
					}
				}
			}
			if(obj == 22 || obj == 26 || obj == 28 || obj == 30 || obj == 31 || obj == 109) //si posee arma grande
			{
				if(user[playerid][jm_Derecha] == obj || user[playerid][jm_Izquierda] == obj || user[playerid][jEspalda])
				{
					_Mensaje(playerid, 0, "9", "Ya portas un arma grande de este tipo.");
					return 1;
				}
			}
			if(obj == 22 || obj == 26 || obj == 28 || obj == 30 || obj == 31 || obj == 109) //cede arma grande
			{
				if(user[playerid][jEspalda] == 0)
				{
					user[playerid][jEspalda] = obj;
					user[playerid][jEspaldaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 3, obj);
					d_estado -= price;
					return 1;
				}
				else if(user[playerid][jm_Derecha] == 0)
				{
					user[playerid][jm_Derecha] = obj;
					user[playerid][jm_DerechaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 1, obj);
					d_estado -= price;
					return 1;
				}
				else if(user[playerid][jm_Izquierda] == 0)
				{
					user[playerid][jm_Izquierda] = obj;
					user[playerid][jm_IzquierdaCant] = capacidad_objecto(obj);
					format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					PonerObjeto(playerid, 2, obj);
					d_estado -= price;
					return 1;
				}
			}
			else
			{
				for(new x = 0; x < 10; x++)
				{
					if(user[playerid][jBolsillo][x] == 0)
					{
						user[playerid][jBolsillo][x] = obj;
						user[playerid][jBolsilloCant][x] = capacidad_objecto(obj);
						format(string, sizeof(string), "%s coge %s de la armería.", nombre_pj(playerid, 0), InfoObjeto[obj][NombreObjeto]);
						ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
						return 1;
					}
				}
			}
		}
		case D_AMMUNATION:
        {
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300, obj, dinero;
			switch(listitem)
			{	
				case 0: { if(RevisarDinero(playerid, 1870)) { dinero = 1870; obj = 19; } } //- 45. Colt
				case 1: { if(RevisarDinero(playerid, 4500)) { dinero = 4500; obj = 30; } } //- Rifle
				case 2: { if(RevisarDinero(playerid, 1500)) { dinero = 1500; obj = 72; } } //- Chaleco
				case 3: ExPlayerDialog(playerid, D_AMMUNATION2, DIALOG_STYLE_LIST, "Cartuchos/Cargadores", "{FFFFFF}Cargador 45. Colt - ($5)\nCargador Desert Eagle - ($7)\nCargador UZI - ($5)\nCargador MP5K - ($10)\nCargador TEC-9 - ($5)\nCargador AK47 - ($15)\nCargador M4 - ($14)\nCargador rifle - ($20)\nCartuchos de Escopeta - ($25)", "Comprar", "Cancelar");
			}
			if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas..");
			if (obj == 30 || obj == 19)
			{
				if (user[playerid][jTiempos][8] != 0) return decir_eltiempo(playerid, 8);
			}
			if (user[playerid][jm_Derecha] == 0)
			{
				user[playerid][jm_Derecha] = obj;
				user[playerid][jm_DerechaCant] = capacidad_objecto(obj);
				PonerObjeto(playerid, 1, obj);
				if (InfoObjeto[obj][IDArma] > 0) { _GiveWeapon(playerid, InfoObjeto[obj][IDArma], capacidad_objecto(obj)); }
				Compra(playerid, dinero);
				if (i_Negocio[nid][nComprado] != 0)
				{
					i_Negocio[nid][nDinero] += dinero;
					i_Negocio[nid][nProductos]--;
				}
				if(obj == 19) user[playerid][jTiempos][8] = 300;
				else if(obj == 30) user[playerid][jTiempos][8] = 420;
				return 1;
			}
			else if (user[playerid][jm_Derecha] != 0)
			{
				user[playerid][jm_Izquierda] = obj;
				user[playerid][jm_IzquierdaCant] = capacidad_objecto(obj);
				PonerObjeto(playerid, 2, obj);
				Compra(playerid, dinero);
				if (i_Negocio[nid][nComprado] != 0)
				{
					i_Negocio[nid][nDinero] += dinero;
					i_Negocio[nid][nProductos]--;
				}
				if(obj == 19) user[playerid][jTiempos][8] = 300;
				else if(obj == 30) user[playerid][jTiempos][8] = 420;
				return 1;
			}
		}
		case D_AMMUNATION2:
        {
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300, obj, dinero;
			switch(listitem)
			{
				case 0: { if(RevisarDinero(playerid, 5)) { dinero = 5; obj = 41; } } //- Cargador 45. Colt
				case 1: { if(RevisarDinero(playerid, 7)) { dinero = 7; obj = 42; } } //- Cargador Desert Eagle
				case 2: { if(RevisarDinero(playerid, 5)) { dinero = 5; obj = 43; } } //- Cargador UZI
				case 3: { if(RevisarDinero(playerid, 10)) { dinero = 10; obj = 44; } } //- Cargador MP5K
				case 4: { if(RevisarDinero(playerid, 5)) { dinero = 5; obj = 45; } } //- Cargador TEC-9
				case 5: { if(RevisarDinero(playerid, 15)) { dinero = 15; obj = 46; } } //- Cargador AK47
				case 6: { if(RevisarDinero(playerid, 14)) { dinero = 14; obj = 47; } } //- Cargador M4
				case 7: { if(RevisarDinero(playerid, 20)) { dinero = 20; obj = 48; } } //- Cargador rifle
				case 8: { if(RevisarDinero(playerid, 25)) { dinero = 25; obj = 49; } } //- Cartuchos de Escopeta
			}
			if (user[playerid][jTiempos][19] != 0)  return decir_eltiempo(playerid, 19);
			if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas..");
			if (user[playerid][jm_Derecha] == 0)
			{
				user[playerid][jm_Derecha] = obj;
				user[playerid][jm_DerechaCant] = capacidad_objecto(obj);
				PonerObjeto(playerid, 1, obj);
				user[playerid][jTiempos][19] = 60;
				if(user[playerid][jPremium] == 0)
				{
					Compra(playerid, dinero);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += dinero;
						i_Negocio[nid][nProductos]--;
					}
				}
				else
				{
					Compra(playerid, (dinero*75)/100);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += (dinero*75)/100;
						i_Negocio[nid][nProductos]--;
					}
					format(string, sizeof(string), "Descuento premium! precio original $%d, a ti te costó $%d.", dinero, (dinero*75)/100);
					_Mensaje(playerid, 4, "C93CCE", string);
				}
				return 1;
			}
			else if (user[playerid][jm_Derecha] != 0)
			{
				user[playerid][jm_Izquierda] = obj;
				user[playerid][jm_IzquierdaCant] = capacidad_objecto(obj);
				PonerObjeto(playerid, 2, obj);
				user[playerid][jTiempos][19] = 60;
				if(user[playerid][jPremium] == 0)
				{
					Compra(playerid, dinero);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += dinero;
						i_Negocio[nid][nProductos]--;
					}
				}
				else
				{
					Compra(playerid, (dinero*75)/100);
					if (i_Negocio[nid][nComprado] != 0)
					{
						i_Negocio[nid][nDinero] += (dinero*75)/100;
						i_Negocio[nid][nProductos]--;
					}
					format(string, sizeof(string), "Descuento premium! precio original $%d, a ti te costó $%d.", dinero, (dinero*75)/100);
					_Mensaje(playerid, 4, "C93CCE", string);
				}
				return 1;
			}
		}
		case D_ELECTRONICA:
        {
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0:
				{
					if(RevisarDinero(playerid, 500))
					{
						new objeto = 80;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						_Mensaje(playerid, 5, "0", "Compraste un teléfono, comandos: /telefono");
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 500);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 500;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 380);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 380;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $500, a ti te costó $380.");
						}
						return 1;
					}
				}
				case 1:
				{
					if(RevisarDinero(playerid, 12))
					{
						new objeto = 38;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){
							PonerObjeto(playerid, 1, objeto);
							user[playerid][jm_Derecha] = objeto;
							user[playerid][jm_DerechaCant] = 30;
							if (InfoObjeto[objeto][IDArma] > 0)
							{
								_GiveWeapon(playerid, InfoObjeto[objeto][IDArma], 30);
							}
						}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 30;}
						_Mensaje(playerid, 5, "0", "Compraste una cámara.");
						if (user[playerid][jPremium] == 0)
						{
							Compra(playerid, 12);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 12;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 10);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 12;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $12, a ti te costó $10.");
						}
						return 1;
					}
				}
				case 2:
				{
					if(RevisarDinero(playerid, 40))
					{
						_Mensaje(playerid, 5, "0", "Compraste un equipo sonido, comandos: /equiposonido /encender /requiposonido.");
						user[playerid][jBoombox] = 1;
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 40);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 40;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 37);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 37;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $40, a ti te costó $37.");
						}
						return 1;
					}
				}
				case 3:
				{
					if(RevisarDinero(playerid, 80))
					{
						new dialog[1024], stext[62];
						for(new i = 0; i < 6; i++)
						{
							new veh = user[playerid][jLlaveCoche][i];
							if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
							else {
								switch(i_Vehiculo[veh-1000][vSpawned])
								{
									case 0: stext = "{ff0000}Guardado{ffffff}";
									case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
								}
								if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
								else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
							}
							strcat(dialog, string);
						}
						ExPlayerDialog(playerid, D_COMPRAELCVEH, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, "Seleccionar", "Cancelar");
					}
				}
				case 4:
				{
					if (user[playerid][jNivel] < 2) return _Mensaje(playerid, 0, "87", "Debes ser mínimo nivel 2, para utilizar el radio portable.");
					if (RevisarDinero(playerid, 50))
					{
						new objeto = 82;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						_Mensaje(playerid, 5, "0", "Compraste un radio portable, comandos: /togradio /frecuencia /pr.");
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 50);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 50;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 40);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 40;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $50, a ti te costó $40.");
						}
						return 1;
					}
				}
			}
		}
		case D_FERRETERIA:
        {
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el menú de compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			switch(listitem)
			{
				case 0:
				{
					if(RevisarDinero(playerid, 150))
					{
						new objeto = 89;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						_Mensaje(playerid, 5, "0", "Compraste un bidón de gasolina, comandos: /llenarveh");
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 150);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 150;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 80);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 80;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $150, a ti te costó $80.");
						}
					}
				}
				case 1: //destornillador
				{
					if(RevisarDinero(playerid, 2))
					{
						new objeto = 86;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 2);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 2;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 1);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 1;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $2, a ti te costó $1.");
						}
					}
				}
				case 2: //palanca
				{
					if(RevisarDinero(playerid, 30))
					{
						new objeto = 128;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						Compra(playerid, 30);
						if (i_Negocio[nid][nComprado] != 0)
						{
							i_Negocio[nid][nDinero] += 3;
							i_Negocio[nid][nProductos]--;
						}
						return 1;
					}
				}
				case 3: //pala
				{
					if(RevisarDinero(playerid, 5))
					{
						new objeto = 6;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						Compra(playerid, 5);
						if (i_Negocio[nid][nComprado] != 0)
						{
							i_Negocio[nid][nDinero] += 5;
							i_Negocio[nid][nProductos]--;
						}
						return 1;
					}
				}
				case 4: //spray (no arma)
				{
					new faccion = user[playerid][jMiembroFam];
					if (faccion == 0 && user[playerid][jGraffito] != 1) return _Mensaje(playerid, 0, "180", "No perteneces a una facción.");
					if (i_Familia[faccion][fTipo] != 1 && user[playerid][jGraffito] != 1) return _Mensaje(playerid, 0, "180", "No perteneces a una pandilla.");
					if(RevisarDinero(playerid, 8))
					{
						new objeto = 36;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){
							PonerObjeto(playerid, 1, objeto);
							user[playerid][jm_Derecha] = objeto; 
							user[playerid][jm_DerechaCant] = 200;
							if (InfoObjeto[objeto][IDArma] > 0)
							{ 
								_GiveWeapon(playerid, InfoObjeto[objeto][IDArma], 200);
							} 
						}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 200;}
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 8);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 8;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 6);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 6;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $8, a ti te costó $6.");
						}
					}
				}
				case 5:
				{
					if(RevisarDinero(playerid, 250))
					{
						new objeto = 50;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 250);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 250;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 200);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 200;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $250, a ti te costó $200.");
						}
					}
				}
				/*case 7:
				{
					if(RevisarDinero(playerid, 75))
					{
						new objeto = 5;
						if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}
						if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;
						if (InfoObjeto[objeto][IDArma] > 0) { _GiveWeapon(playerid, InfoObjeto[objeto][IDArma], 1); } }
						else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
						if(user[playerid][jPremium] == 0)
						{
							Compra(playerid, 75);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 75;
								i_Negocio[nid][nProductos]--;
							}
						}
						else
						{
							Compra(playerid, 50);
							if (i_Negocio[nid][nComprado] != 0)
							{
								i_Negocio[nid][nDinero] += 50;
								i_Negocio[nid][nProductos]--;
							}
							_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $75, a ti te costó $50.");
						}
					}
				}*/
				case 6: //change cerradura 1
				{
				    new casa = user[playerid][jCasaKey];
				    if (casa == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 1.");
					if (RevisarDinero(playerid, 10))
					{
						Compra(playerid, 10);
						_Mensaje(playerid, 5, "0", "Cambiaste la cerradura de tu casa por 10$.");
						i_Casa[casa][c_patente] = casa+Random(-400000, 999999); //
						save_Casa(casa);
					}
				}
				case 7: //change cerradura 1
				{
				    new casa = user[playerid][jCasaKey2];
				    if (casa == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 2.");
					if (RevisarDinero(playerid, 10))
					{
						Compra(playerid, 10);
						_Mensaje(playerid, 5, "0", "Cambiaste la cerradura de tu casa (2) por 10$.");
						i_Casa[casa][c_patente] = casa+Random(-400000, 999999); //
						save_Casa(casa);
					}
				}
				case 8: //changen cerradura 1
				{
				    new negocio = user[playerid][jNegocioKey];
				    if (negocio == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "2", "No tienes un negocio en la ranura 1.");
					if (RevisarDinero(playerid, 30))
					{
						Compra(playerid, 30);
						_Mensaje(playerid, 5, "0", "Cambiaste la cerradura de tu negocio por 30$.");
						i_Negocio[negocio][n_patente] = negocio+Random(-400000, 999999); //
						save_Negocio(negocio);
					}
				}
				case 9: //changen cerradura 1
				{
				    new negocio = user[playerid][jNegocioKey2];
				    if (negocio == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "2", "No tienes un negocio en la ranura 2.");
					if (RevisarDinero(playerid, 30))
					{
						Compra(playerid, 30);
						_Mensaje(playerid, 5, "0", "Cambiaste la cerradura de tu negocio (2) por 30$.");
						i_Negocio[negocio][n_patente] = negocio+Random(-400000, 999999); //
						save_Negocio(negocio);
					}
				}
				case 10: //changee cerradura 1
				{
				    new emp = user[playerid][jEmpresaKey];
				    if (emp == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "2", "No tienes una empresa.");
					if (RevisarDinero(playerid, 50))
					{
						Compra(playerid, 50);
						_Mensaje(playerid, 5, "0", "Cambiaste la cerradura de tu empresa por 50$.");
						i_Empresa[emp][e_patente] = emp+Random(-400000, 999999); //
						save_Empresa(emp);
					}
				}
			}
		}
		case D_COMPRAELCVEH:
		{
			if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cancelaste la compra.");
			new nid = GetPlayerVirtualWorld(playerid) - 300;
			for(new i = 0; i < 6; i++)
			{
				if(listitem == i)
				{
					new veh = user[playerid][jLlaveCoche][i];
					if(veh == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "Imposible realizar acciones en un vehículo que no existe.");
					if(i_Vehiculo[veh-1000][vEnDeposito] == 1) return _Mensaje(playerid, 0, "67", "ERROR: No puedes comprar un seguro a un vehículo confiscado.");
					if(EnMotos_Bicis(i_Vehiculo[veh-1000][vID])) return _Mensaje(playerid, 0, "411", "ERROR: No puedes instalar un stereo en ese tipo de vehículo.");
					if(i_Vehiculo[veh-1000][vStereo] == 1) return _Mensaje(playerid, 0, "31", "El stereo ya se encuentra instalado en ese vehiculo.");
					_Mensaje(playerid, 5, "0", "Compraste un stereo, comandos: /stereo /estacion /apagarstereo");
					i_Vehiculo[veh-1000][vStereo] = 1;
					vehicleSave(veh-1000);
					if(user[playerid][jPremium] == 0)
					{
						DarDineroGC(playerid, -100);
						if (i_Negocio[nid][nComprado] != 0)
						{
							i_Negocio[nid][nDinero] += 100;
							i_Negocio[nid][nProductos]--;
						}
					}
					else
					{
						DarDineroGC(playerid, -75);
						if (i_Negocio[nid][nComprado] != 0)
						{
							i_Negocio[nid][nDinero] += 75;
							i_Negocio[nid][nProductos]--;
						}
						_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $100, a ti te costó $75.");
					}
				}
			}
		}
		//opciones de casas
		case D_Casa_Opciones:
			if(response) switch(listitem)
			{
				case 0: ExPlayerDialog(playerid, D_Casa_Nombre, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre", "{FFFFFF}> Escribe el nuevo nombre de tu casa:", "Aceptar", "Volver");
				case 1:
				{
					if (DentroCasa[playerid] == user[playerid][jCasaLlaves] || DentroCasa[playerid] == user[playerid][j2CasaLlaves]) return _Mensaje(playerid, 4, "b0b0b0", "No puedes interactuar con el dinero de la casa.");
					new coordsstring2[300];
					format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Dinero ({00c200}%d{D6E1EB})", i_Casa[DentroCasa[playerid]][cDinero]);
					ExPlayerDialog(playerid, D_Casa_Dinero, DIALOG_STYLE_INPUT, coordsstring2, "{FFFFFF}Escribe la cantidad de dinero que deseas depositar o retirar\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Depositar", "Retirar");
				}
				case 2: cmd_muebles(playerid);
			}
			else
			{
				_Mensaje(playerid, 4, "b0b0b0", "Saliste del menú de casa.");
			}
		case D_Casa_Nombre:
		{
			new cid = DentroCasa[playerid];
			if(!response) return Opc_casa(playerid, cid);
			if(!strlen(inputtext)) return ExPlayerDialog(playerid, D_Casa_Nombre, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre casa", "> Escribe algún nombre.", "Aceptar", "Cancelar");
			if(strlen(inputtext) > 20 || strlen(inputtext) < 0) { _Mensaje(playerid, 0, "106", "No puedes poner el nombre con más de 20 carácteres."); return 1; }
			alm(i_Casa[cid][cNombre], inputtext);
			format(string, sizeof(string), "Nombre de casa cambiado a {ffea5f}%s{ffffff}.", i_Casa[cid][cNombre]);
			Mensaje_(playerid, -1, string);
			save_Casa(cid);
			return 1;
		}
		case D_Casa_Dinero:
		{
			if (response) //depositar
			{
				new amount = strval(inputtext), cid = DentroCasa[playerid];
				if(!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
				if(amount < 1) return _Mensaje(playerid, 0, "22", "No puedes depositar menos de un dolar.");
				if(ComprobarDineroJ(playerid) >= amount)
				{
					i_Casa[cid][cDinero] += amount;
					DarDineroGC(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en tu casa.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Casa(cid);
					format(string, sizeof(string), "Registros: %s deposito $%d en su casa id %d.", nombre_pj(playerid), amount, cid);
					Log("Registros/DineroCasa.log", string);
				} else return _Mensaje(playerid, 0, "45", "No tienes suficiente dinero para depositar.");
            }
			else // retirar
			{
				new amount = strval(inputtext), cid = DentroCasa[playerid];
				if(!IsNumeric(inputtext)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
				if(amount < 1) return _Mensaje(playerid, 0, "24", "No puedes retirar menos de un dolar.");
				if(i_Casa[cid][cDinero] >= amount)
				{
					i_Casa[cid][cDinero] -= amount;
					DarDineroGC(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu casa.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Casa(cid);
					format(string, sizeof(string), "Registros: %s retiró $%d de su casa id %d.", nombre_pj(playerid), amount, cid);
					Log("Registros/DineroCasa.log", string);
				} else return _Mensaje(playerid, 0, "44", "No tienes suficiente dinero en tu baúl para retirar.");
			}
		}
		case D_Casa_iMuebles:
		{
			if(!response) return 1;

			new i = DentroCasa[playerid];
			pag_muebles[playerid] = 1;

			switch(listitem)
			{
			    case 0: menu_muebles_casa(playerid, i, 1); //agregar
			    case 1: menu_muebles_casa(playerid, i, 2); //guardar
			    case 2: menu_muebles_casa(playerid, i, 3); //editar
			    case 3: menu_muebles_casa(playerid, i, 4); //vender
			    case 4: menu_muebles_casa(playerid, i, 5); //borrar
				case 5:
				{
					ExPlayerDialog(playerid, D_Comprar_Muebles, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Muebles", "Tipo de mueble\tPágina\n\
					Mesas, sillas, sillones\t#1\n\
					Juego de cuarto, camas\t#4\n\
					Baño\t#7\n\
					Cocina\t#8\n\
					Comida + Viveres\t#11\n\
					Electrónica\t#16\n\
					Accesorios varios\t#13\n\
					Accesorios varios-B\t#18\n\
					Puertas\t#23\n\
					Objetos de locales\t#25\n\
					Garaje, mecánica\t#28\n\
					Paredes, marcos\t#30", ">>", "Volver");
				}
			    case 6: ExPlayerDialog(playerid, D_Casa_tMuebles, DIALOG_STYLE_MSGBOX, "{D6E1EB}Muebles", "¿Estás seguro que deseas vender todo?", "Vender", "Volver");
				case 7: menu_muebles_casa(playerid, i, 6); //texturizar
			}
		}
		case D_Casa_oMuebles:
		{
			new i = DentroCasa[playerid], c_op = GetPVarInt(playerid, "c_op_mueble");
			if(i == INVALID_CASA_ID) return 1;

			if(response)
			{
				if(listitem == 100)
				{
				    if (pag_muebles[playerid] == 1) menu_muebles_casa(playerid, i, c_op, 2);
				    else if (pag_muebles[playerid] == 2) menu_muebles_casa(playerid, i, c_op, 3);
				    //página 2 de muebles
				    return 1;
				}
				new suma = 0, m_id = 0;
				if (pag_muebles[playerid] == 2) suma += 100;
				if (pag_muebles[playerid] == 3) suma += 200;
				m_id += listitem+suma;

				if(!i_Casa[i][cObjModel][m_id]) return _Mensaje(playerid, 0, "0", "No seleccionaste nada.");

				switch (c_op)
				{
				    case 1: //agregar
				    {
						if(i_Casa[i][cObjPosX][m_id] != 0.0) return _Mensaje(playerid, 0, "0", "Ese mueble ya está agregado.");
						GetPlayerPos(playerid,i_Casa[i][cObjPosX][m_id], i_Casa[i][cObjPosY][m_id], i_Casa[i][cObjPosZ][m_id]);
						GetPosInFrontOfPlayer(playerid, i_Casa[i][cObjPosX][m_id], i_Casa[i][cObjPosY][m_id], 1.0);
						foreach(new p: Player)
						{
							if(CasaActual[p] == i)
							{
								OBJ_MuebleC[p][m_id] = CreatePlayerObject(p, i_Casa[i][cObjModel][m_id], i_Casa[i][cObjPosX][m_id], i_Casa[i][cObjPosY][m_id], i_Casa[i][cObjPosZ][m_id], 0.0, 0.0, 0.0);
							}
						}
						EditPlayerObject(playerid, OBJ_MuebleC[playerid][m_id]);
						user[playerid][EditandoM] = 1;
						SetPVarInt(playerid,"ID_MUEBLEC",m_id);
						save_Casa(DentroCasa[playerid], false, i);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
					case 2: //guardar
					{
					    if(i_Casa[i][cObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto ya está oculto.");
						i_Casa[i][cObjPosX][m_id] = 0.0;
						i_Casa[i][cObjPosY][m_id] = 0.0;
						i_Casa[i][cObjPosZ][m_id] = 0.0;
						foreach(new p: Player)
						{
							if(CasaActual[p] == i)
							{
						    	DestroyPlayerObject(p, OBJ_MuebleC[p][m_id]);
							}
						}
						save_Casa(i, false, m_id);
						Mensaje_(playerid, 0xF8D48CFF, "Guardaste correctamente el mueble.");
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
					case 3: //editar
					{
					    if(i_Casa[i][cObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto está oculto.");
						EditPlayerObject(playerid, OBJ_MuebleC[playerid][m_id]);
						user[playerid][EditandoM] = 1;
						SetPVarInt(playerid,"ID_MUEBLEC",m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
					case 4: //vender
					{
					    if(i_Casa[i][cObjModel][m_id] == INVALID_MUEBLES_ID) return _Mensaje(playerid, 0, "42", "Objeto seleccionado inválido.");

						new OBJ_INDEX;
						buscar_modelo_obj(i_Casa[i][cObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						new dinero = precio / 2;

						format(string, sizeof(string), "Vendiste el mueble (%s), por $%d.", objetos_interior[OBJ_INDEX][2], dinero);
						Mensaje_(playerid, 0x33CCFFFF, string);
						i_Casa[i][cPrecio] -= precio;

						DarDineroGC(playerid, dinero);
						DestruirMuebleCasa(i, m_id);
						i_Casa[i][cObjModel][m_id] = 0;
						i_Casa[i][cObjPosX][m_id] = 0.0;
						i_Casa[i][cObjPosY][m_id] = 0.0;
						i_Casa[i][cObjPosZ][m_id] = 0.0;
						i_Casa[i][cObjRotX][m_id] = 0.0;
						i_Casa[i][cObjRotY][m_id] = 0.0;
						i_Casa[i][cObjRotZ][m_id] = 0.0;
						i_Casa[i][cTextura1][m_id] = 0;
						i_Casa[i][cTextura2][m_id] = 0;
						i_Casa[i][cTextura3][m_id] = 0;
						i_Casa[i][cTextura4][m_id] = 0;
						i_Casa[i][co_opened][m_id] = 0;
						save_Casa(DentroCasa[playerid], false, m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
					case 5: //borrar
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Casa[i][cObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						i_Casa[i][cPrecio] -= precio;

						DestruirMuebleCasa(i, m_id);
						i_Casa[i][cObjModel][m_id] = 0;
						i_Casa[i][cObjPosX][m_id] = 0.0;
						i_Casa[i][cObjPosY][m_id] = 0.0;
						i_Casa[i][cObjPosZ][m_id] = 0.0;
						i_Casa[i][cObjRotX][m_id] = 0.0;
						i_Casa[i][cObjRotY][m_id] = 0.0;
						i_Casa[i][cObjRotZ][m_id] = 0.0;
						i_Casa[i][cTextura1][m_id] = 0;
						i_Casa[i][cTextura2][m_id] = 0;
						i_Casa[i][cTextura3][m_id] = 0;
						i_Casa[i][cTextura4][m_id] = 0;
						i_Casa[i][co_opened][m_id] = 0;
						Mensaje_(playerid, 0xF8D48CFF, "Eliminaste correctamente el mueble.");
						save_Casa(DentroCasa[playerid], false, m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
					case 6: //texturizar
					{
					    if(i_Casa[i][cObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto está oculto.");
						new
							str [256];

						format (str, sizeof (str), "- Lugar 1 ({90C3D4}%s{ffffff})\n- Lugar 2 ({90C3D4}%s{ffffff})\n- Lugar 3 ({90C3D4}%s{ffffff})\n- Lugar 4 ({90C3D4}%s{ffffff})", GetMuebleTextureName(i_Casa[i][cTextura1][m_id]), GetMuebleTextureName(i_Casa[i][cTextura2][m_id]), GetMuebleTextureName(i_Casa[i][cTextura3][m_id]), GetMuebleTextureName(i_Casa[i][cTextura4][m_id]));
						ExPlayerDialog(playerid, D_Casa_mTexturizar, DIALOG_STYLE_LIST, "{ffffff}Seleccione la parte del {00c200}objeto{ffffff} a texturizar", str, ">>", "Inicio");

						SetPVarInt (playerid, "mueble_index", m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "c_op_mueble");
						return 1;
					}
				}
			}//separación
			else
			{
				if (pag_muebles[playerid] == 1) user_Mueble(playerid, 2);
				else
				{
				    if (pag_muebles[playerid] == 2){ menu_muebles_casa(playerid, i, c_op, 1); pag_muebles[playerid] = 1;}
				    else if (pag_muebles[playerid] == 3){ menu_muebles_casa(playerid, i, c_op, 2); pag_muebles[playerid] = 2;}
				}
			}
		}
		case D_Casa_tMuebles:
		{
			if(response)
			{
			    new h = DentroCasa[playerid], pago;
			    if(h == INVALID_CASA_ID) return Mensaje_(playerid, -1, "ERORR");
				Loop(i, MAX_MUEBLES_C, 0)
				{
					if(i_Casa[h][cObjModel][i])
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Casa[h][cObjModel][i], OBJ_INDEX);
						pago += objetos_interior[OBJ_INDEX][1];
						DestruirMuebleCasa(h, i);
						i_Casa[h][cObjModel][i] = 0;
						i_Casa[h][cObjPosX][i] = 0.0;
						i_Casa[h][cObjPosY][i] = 0.0;
						i_Casa[h][cObjPosZ][i] = 0.0;
						i_Casa[h][cObjRotX][i] = 0.0;
						i_Casa[h][cObjRotY][i] = 0.0;
						i_Casa[h][cObjRotZ][i] = 0.0;
						i_Casa[h][cTextura1][i] = 0;
						i_Casa[h][cTextura2][i] = 0;
						i_Casa[h][cTextura3][i] = 0;
						i_Casa[h][cTextura4][i] = 0;
						i_Casa[h][co_opened][i] = 0;
					}
				}
				DarDineroGC(playerid, pago);
				i_Casa[h][cPrecio] -= pago;

				new elban[128];
				format(elban, 128, DATOS_CASAS, h);
				fremove(elban);

				save_Casa(h);

				format(string, sizeof(string), "Vendiste los muebles de la casa por $%d.", pago);
				Mensaje_(playerid, 0x33CCFFFF, string);
				format(string, sizeof(string), "Registros: %s vendió los muebles de la casa %d ($%d).", nombre_pj(playerid), h, pago);
				Log("Registros/MueblesT.log", string);
				return 1;
			}
			else
			{
				user_Mueble(playerid, 2);
			}
		}
		case D_Casa_mTexturizar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        cmd_muebles(playerid);
		        return 1;
			}
			new
				str2 [200],
				str [sizeof (TextureData) * sizeof (str2)];

			SetPVarInt (playerid, "editm_index", listitem);

			for (new x2; x2 < sizeof (TextureData); x2++)
			{
				format (str2, sizeof (str2), "{b0b0b0}%d)\t%s\n", x2+1, GetMuebleTextureName(x2));
				strcat (str, str2);
			}
			format (str2, sizeof (str2), "{00c200} Texturizar (Lugar %d)", listitem);
			ExPlayerDialog(playerid, D_Casa_mTexturizar2, DIALOG_STYLE_LIST, "Texturizar", str, "Cambiar", "Inicio");
		}

		case D_Casa_mTexturizar2:
		{
		    if (!response)
		    {
				DeletePVar (playerid, "editm_index");
				cmd_muebles(playerid);
		        return 1;
			}
			new
			    m = GetPVarInt (playerid, "mueble_index"),
			    ide = GetPVarInt (playerid, "editm_index"),
			    c_id = DentroCasa[playerid];

			switch (ide)
			{
				case 0: i_Casa[c_id][cTextura1][m] = listitem;
				case 1: i_Casa[c_id][cTextura2][m] = listitem;
				case 2: i_Casa[c_id][cTextura3][m] = listitem;
				case 3: i_Casa[c_id][cTextura4][m] = listitem;
			}
			foreach(new i: Player)
			{
				if (DentroCasa[i] == c_id)
				{
					SetPlayerObjectMaterial (i, OBJ_MuebleC[i][m], ide, GetMuebleTextureModelID(listitem), GetMuebleTextureTXD(listitem), GetMuebleTextureTexture(listitem), GetMuebleTextureColor(listitem));
				}
			}
			DeletePVar (playerid, "editm_index");
			save_Casa(DentroCasa[playerid], false, m);
   			//SelectObject (playerid);
		}
		//opciones de garajes
		case D_Garaje_iMuebles:
		{
			if(!response) return 1;

			new i = DentroGarage[playerid];

			switch(listitem)
			{
			    case 0: menu_muebles_garj(playerid, i, 1); //agregar
			    case 1: menu_muebles_garj(playerid, i, 2); //guardar
			    case 2: menu_muebles_garj(playerid, i, 3); //editar
			    case 3: menu_muebles_garj(playerid, i, 4); //vender
			    case 4: menu_muebles_garj(playerid, i, 5); //borrar
				case 5:
				{
					ExPlayerDialog(playerid, D_Comprar_Muebles, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Muebles", "Tipo de mueble\tPágina\n\
					Mesas, sillas, sillones\t#1\n\
					Juego de cuarto, camas\t#4\n\
					Baño\t#7\n\
					Cocina\t#8\n\
					Comida + Viveres\t#11\n\
					Electrónica\t#16\n\
					Accesorios varios\t#13\n\
					Accesorios varios-B\t#18\n\
					Puertas\t#23\n\
					Objetos de locales\t#25\n\
					Garaje, mecánica\t#28\n\
					Paredes, marcos\t#30", ">>", "Volver");
				}
			    case 6: ExPlayerDialog(playerid, D_Garaje_tMuebles, DIALOG_STYLE_MSGBOX, "{D6E1EB}Muebles", "¿Estás seguro que deseas vender todo?", "Vender", "Volver");
			}
		}

		case D_Garaje_oMuebles:
		{
			new i = DentroGarage[playerid], g_op = GetPVarInt(playerid, "g_op_mueble");
			if(i == INVALID_CASA_ID) return 1;

			if(response)
			{
				new m_id = listitem;

				if(!i_Garaje[i][gObjModel][m_id]) return _Mensaje(playerid, 0, "0", "No seleccionaste nada.");

				switch (g_op)
				{
					case 1: //agregar
					{
						if(i_Garaje[i][gObjPosX][m_id] != 0.0) return _Mensaje(playerid, 0, "0", "Ese mueble ya está agregado.");
						GetPlayerPos(playerid,i_Garaje[i][gObjPosX][m_id], i_Garaje[i][gObjPosY][m_id], i_Garaje[i][gObjPosZ][m_id]);
						GetPosInFrontOfPlayer(playerid, i_Garaje[i][gObjPosX][m_id], i_Garaje[i][gObjPosY][m_id], 1.0);
						foreach(new p: Player)
						{
							if(GarageActual[p] == i)
							{
								OBJ_MuebleG[p][m_id] = CreatePlayerObject(p, i_Garaje[i][gObjModel][m_id], i_Garaje[i][gObjPosX][m_id], i_Garaje[i][gObjPosY][m_id], i_Garaje[i][gObjPosZ][m_id], 0.0, 0.0, 0.0);
							}
						}
						EditPlayerObject(playerid, OBJ_MuebleG[playerid][m_id]);
                        user[playerid][EditandoM] = 3;
						SetPVarInt(playerid,"ID_MUEBLEG",m_id);
						save_Garaje(DentroGarage[playerid], false, i);
						DeletePVar(playerid, "g_op_mueble");
						return 1;
					}
					case 2: //guardar
					{
						if(i_Garaje[i][gObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto ya está oculto.");
						i_Garaje[i][gObjPosX][m_id] = 0.0;
						i_Garaje[i][gObjPosY][m_id] = 0.0;
						i_Garaje[i][gObjPosZ][m_id] = 0.0;
						foreach(new p: Player)
						{
							if(GarageActual[p] == i)
							{
								DestroyPlayerObject(p, OBJ_MuebleG[p][m_id]);
							}
						}
						save_Garaje(i, false, m_id);
						Mensaje_(playerid, 0xF8D48CFF, "Guardaste correctamente el mueble.");
						DeletePVar(playerid, "g_op_mueble");
						return 1;
					}
					case 3: //editar
					{
						if(!i_Garaje[DentroGarage[playerid]][gObjPosX][m_id]) return _Mensaje(playerid, 0, "0", "No puedes editar ese objeto.");
						EditPlayerObject(playerid, OBJ_MuebleG[playerid][m_id]);
                        user[playerid][EditandoM] = 3;
						SetPVarInt(playerid,"ID_MUEBLEG", m_id);
						DeletePVar(playerid, "g_op_mueble");
						return 1;
					}
					case 4: //vender
					{
						if(i_Garaje[i][gObjModel][m_id] == INVALID_MUEBLES_ID) return _Mensaje(playerid, 0, "42", "Objeto seleccionado inválido.");

						new OBJ_INDEX;
						buscar_modelo_obj(i_Garaje[i][gObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						new dinero = precio / 2;

						format(string, sizeof(string), "Vendiste el mueble (%s), por $%d.", objetos_interior[OBJ_INDEX][2], dinero);
						Mensaje_(playerid, 0x33CCFFFF, string);

						DarDineroGC(playerid, dinero);
						DestruirMuebleGarage(i, m_id);
						i_Garaje[i][gObjModel][m_id] = 0;
						i_Garaje[i][gObjPosX][m_id] = 0.0;
						i_Garaje[i][gObjPosY][m_id] = 0.0;
						i_Garaje[i][gObjPosZ][m_id] = 0.0;
						i_Garaje[i][gObjRotX][m_id] = 0.0;
						i_Garaje[i][gObjRotY][m_id] = 0.0;
						i_Garaje[i][gObjRotZ][m_id] = 0.0;
						save_Garaje(DentroGarage[playerid], false, m_id);
						DeletePVar(playerid, "g_op_mueble");
						return 1;
					}
					case 5: //borrar
					{
						DestruirMuebleGarage(i, m_id);
						i_Garaje[i][gObjModel][m_id] = 0;
						i_Garaje[i][gObjPosX][m_id] = 0.0;
						i_Garaje[i][gObjPosY][m_id] = 0.0;
						i_Garaje[i][gObjPosZ][m_id] = 0.0;
						i_Garaje[i][gObjRotX][m_id] = 0.0;
						i_Garaje[i][gObjRotY][m_id] = 0.0;
						i_Garaje[i][gObjRotZ][m_id] = 0.0;
						Mensaje_(playerid, 0xF8D48CFF, "Eliminaste correctamente el mueble.");
						save_Garaje(DentroGarage[playerid], false, m_id);
						DeletePVar(playerid, "g_op_mueble");
						return 1;
					}
				}
			}//separación
			else
			{
				user_Mueble(playerid, 3);
			}
		}
		case D_Garaje_tMuebles:
		{
			if(response)
			{
			    new h = DentroGarage[playerid], pago;
			    if(h == INVALID_CASA_ID) return Mensaje_(playerid, -1, "ERORR");
				Loop(i, MAX_MUEBLES_G, 0)
				{
					if(i_Garaje[h][gObjModel][i])
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Garaje[h][gObjModel][i], OBJ_INDEX);
						pago += objetos_interior[OBJ_INDEX][1];
						DestruirMuebleGarage(h, i);
						i_Garaje[h][gObjModel][i] = 0;
						i_Garaje[h][gObjPosX][i] = 0.0;
						i_Garaje[h][gObjPosY][i] = 0.0;
						i_Garaje[h][gObjPosZ][i] = 0.0;
						i_Garaje[h][gObjRotX][i] = 0.0;
						i_Garaje[h][gObjRotY][i] = 0.0;
						i_Garaje[h][gObjRotZ][i] = 0.0;
					}
				}

				new elban[128];
				format(elban, 128, DATOS_GARAGES, h);
				fremove(elban);

				save_Garaje(h);

				DarDineroGC(playerid, pago);
				format(string, sizeof(string), "Vendiste los muebles del garaje por $%d.", pago);
				Mensaje_(playerid, 0x33CCFFFF, string);
				return 1;
			}
			else
			{
				user_Mueble(playerid, 3);
			}
		}
		//- Opciones de empresas
		case D_empresa_O:
			if(response) switch(listitem)
			{
				case 0:
				{
					ExPlayerDialog(playerid, D_empresa_O2, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre", "{FFFFFF}> Escribe el nuevo nombre de la empresa:", "Aceptar", "Salir");
				}
				case 1:
				{
					if(user[playerid][jEmpresaLlaves] == DentroEmpresa[playerid]) return _Mensaje(playerid, 4, "b0b0b0", "No puedes interactuar con el dinero de la empresa.");
					new coordsstring2[300];
					format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Dinero ({00c200}%d{D6E1EB})", i_Empresa[DentroEmpresa[playerid]][eDinero]);
					ExPlayerDialog(playerid, D_empresa_O3, DIALOG_STYLE_INPUT, coordsstring2, "{FFFFFF}Escribe la cantidad de dinero que deseas depositar o retirar\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Depositar", "Retirar");
				}
				case 3: cmd_muebles(playerid);
			}

		case D_empresa_O2:
		{
			if (!response) return 1;
			if (!strlen(inputtext)) return ExPlayerDialog(playerid, D_empresa_O2, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre{FFFFFF}", "> Escribe algún nombre.", "Aceptar", "Cancelar");
			if (strlen(inputtext) > 20 || strlen(inputtext) < 0)
			{
				_Mensaje(playerid, 0, "106", "No puedes poner el nombre con más de 20 carácteres.");
				return 1;
			}
			alm(i_Empresa[DentroEmpresa[playerid]][eNombre], inputtext);
			format(string, sizeof(string), "Cambiaste el nombre de la empresa:{ffffff} %s", i_Empresa[DentroEmpresa[playerid]][eNombre]);
			_Mensaje(playerid, 4, "33CCFF", string);
			save_Empresa(DentroEmpresa[playerid]);
			return 1;
		}
		case D_empresa_O3:
		{
			if (response) //depositar
			{
				new amount = strval(inputtext);
				new e_id = DentroEmpresa[playerid];
				if(amount < 1) { _Mensaje(playerid, 0, "22", "No puedes depositar menos de un dolar."); return 1; }
				if(ComprobarDineroJ(playerid) >= amount)
				{
					i_Empresa[e_id][eDinero] += amount;
					DarDineroGC(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en la empresa.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Empresa(e_id);
					format(string, sizeof(string), "Registros: %s deposito $%d en la empresa (ID %d).", nombre_pj(playerid), amount, e_id);
					Log("Registros/Empresas.log", string);
					return 1;
				} else _Mensaje(playerid, 0, "23", "No tienes tanto dinero encima para depositar.");
			}
			else // retirar
			{
				new amount = strval(inputtext);
				new e_id = DentroEmpresa[playerid];
				if(amount < 1) { _Mensaje(playerid, 0, "24", "No puedes retirar menos de un dolar."); return 1; }
				if(i_Empresa[e_id][eDinero] >= amount)
				{
					i_Empresa[e_id][eDinero] -= amount;
					DarDineroGC(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de la empresa.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Empresa(e_id);
					format(string, sizeof(string), "Registros: %s retiro $%d de la empresa (ID %d).", nombre_pj(playerid), amount, e_id);
					Log("Registros/Empresas.log", string);
					return 1;
				} else _Mensaje(playerid, 0, "26", "No tienes suficiente dinero en caja para retirar.");
			}
		}
		case D_empresa_O4:
			{
				if(response == 1)
				{
					for(new i = 0; i < 10; i++)
					{
						if(listitem == i)
						{
							new e_id = user[playerid][jEmpresaKey];
							if(InfoVehEmp[e_id][i][vID] == INVALID_PLAYER_VEHICLE_ID) return _Mensaje(playerid, 0, "68", "No puedes interactuar con un inexistente.");
							SetPVarInt(playerid, "slot_veh_e", i);
							ExPlayerDialog(playerid, D_empresa_O5, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "{FFFFFF}Localizar\nVender vehículo\nCambiar color ($60)", "Seleccionar", "Salir");
							return 1;
						}
					}
				}
			}
		case D_empresa_O5:
			if(response) switch(listitem)
			{
				case 0: //localizar
				{
					new e_id = user[playerid][jEmpresaKey];
					new veh = InfoVehEmp[e_id][GetPVarInt(playerid, "slot_veh_e")][vID];
					new Float: carPos[3], zone[MAX_ZONE_NAME];
					GetVehiclePos(veh, carPos[0], carPos[1], carPos[2]);
					GetCar3DZone(veh, zone, sizeof(zone));
					format(string, sizeof(string), "El vehículo de empresa fue localizado en %s.", zone);
					_Mensaje(playerid, 4, "b0b0b0", string);
					set_checkpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					SetPVarInt(playerid, "EnCheckPoint", 1);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 1: //vender
				{
					new Str[256], Str_[3000];
					new e_id = user[playerid][jEmpresaKey];
					new vid = GetPVarInt(playerid, "slot_veh_e");
  					Formato(Str, "Modelo: %s - Precio: %d\n¿Estás seguro que deseas venderlo?", nombre_vehiculo[InfoVehEmp[e_id][vid][vModelo] - 400], InfoVehEmp[e_id][vid][vPrecio]);
					strcat(Str_, Str);
					ExPlayerDialog(playerid, D_empresa_O6, DIALOG_STYLE_MSGBOX, "{D6E1EB}Vehículo de empresa", Str_, "Vender", "Volver");
					return 1;
				}
				case 2: //color
				{
					ExPlayerDialog(playerid,D_empresa_O7,DIALOG_STYLE_LIST,"{D6E1EB}Cambiar color","- Blanco\n- Negro\n- Rojo\n- Amarillo\n- Verde\n- Azul\n- Celeste\n- Naranja\n- Rosa\n- Violeta\n- Verde Fluor\n- Rojo Fluor\n- Celeste claro\n- Gris","Seleccionar","Volver");
					return 1;
				}
			}
			else
			{
				_Mensaje(playerid, 4, "b0b0b0", "Saliste del menú de vehículos de empresa.");
			}
		case D_empresa_O6:
			if(response)
			{
				new e_id = user[playerid][jEmpresaKey];
				new vid = GetPVarInt(playerid, "slot_veh_e");
				format(string, sizeof(string), "El vehículo de empresa fue vendido por $%d.", InfoVehEmp[e_id][vid][vPrecio]);
				_Mensaje(playerid, 4, "33CCFF", string);
				DarDineroGC(playerid, InfoVehEmp[e_id][vid][vPrecio]);
				borrar_VehEmpresa(vid, e_id);
				return 1;
			}
			else
			{
				ExPlayerDialog(playerid, D_empresa_O5, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "{FFFFFF}Localizar\nVender vehículo\nCambiar color ($60)", "Seleccionar", "Salir");
			}
		case D_empresa_O7:
			if(response)
			{
				new e_id = user[playerid][jEmpresaKey];
				new v = GetPVarInt(playerid, "slot_veh_e");
				switch(listitem)
				{
					case 0: { InfoVehEmp[e_id][v][vColor_1] = 1; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 1:	{ InfoVehEmp[e_id][v][vColor_1] = 0; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 2:	{ InfoVehEmp[e_id][v][vColor_1] = 3; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 3:	{ InfoVehEmp[e_id][v][vColor_1] = 6; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 4:	{ InfoVehEmp[e_id][v][vColor_1] = 16; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 5:	{ InfoVehEmp[e_id][v][vColor_1] = 103; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 6:	{ InfoVehEmp[e_id][v][vColor_1] = 118; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 7:	{ InfoVehEmp[e_id][v][vColor_1] = 131; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 8:	{ InfoVehEmp[e_id][v][vColor_1] = 126; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 9:	{ InfoVehEmp[e_id][v][vColor_1] = 149; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 10: { InfoVehEmp[e_id][v][vColor_1] = 144; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 11: { InfoVehEmp[e_id][v][vColor_1] = 151; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 12: { InfoVehEmp[e_id][v][vColor_1] = 130; InfoVehEmp[e_id][v][vColor_2] = 1; }
					case 13: { InfoVehEmp[e_id][v][vColor_1] = 11; InfoVehEmp[e_id][v][vColor_2] = 1; }
				}
				ChangeVehicleColor(InfoVehEmp[e_id][v][vID], InfoVehEmp[e_id][v][vColor_1], InfoVehEmp[e_id][v][vColor_2]);
				_Mensaje(playerid, 4, "33CCFF", "Cambiaste el color del coche por $60.");
				DarDineroGC(playerid, -60);
				save_Empresa(e_id, false, v);
				return 1;
			}
			else
			{
				ExPlayerDialog(playerid, D_empresa_O5, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "{FFFFFF}Localizar\nVender vehículo\nCambiar color ($60)", "Seleccionar", "Salir");
			}
		case D_Empresa_iMuebles:
		{
			if(!response) return 1;

			new i = DentroEmpresa[playerid];
			pag_muebles[playerid] = 1;

			switch(listitem)
			{
			    case 0: menu_muebles_emp(playerid, i, 1); //agregar
			    case 1: menu_muebles_emp(playerid, i, 2); //guardar
			    case 2: menu_muebles_emp(playerid, i, 3); //editar
			    case 3: menu_muebles_emp(playerid, i, 4); //vender
			    case 4: menu_muebles_emp(playerid, i, 5); //borrar
				case 5:
				{
					ExPlayerDialog(playerid, D_Comprar_Muebles, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Muebles", "Tipo de mueble\tPágina\n\
					Mesas, sillas, sillones\t#1\n\
					Juego de cuarto, camas\t#4\n\
					Baño\t#7\n\
					Cocina\t#8\n\
					Comida + Viveres\t#11\n\
					Electrónica\t#16\n\
					Accesorios varios\t#13\n\
					Accesorios varios-B\t#18\n\
					Puertas\t#23\n\
					Objetos de locales\t#25\n\
					Garaje, mecánica\t#28\n\
					Paredes, marcos\t#30", ">>", "Volver");
				}
				case 6: ExPlayerDialog(playerid, D_Empresa_tMuebles, DIALOG_STYLE_MSGBOX, "{D6E1EB}Muebles", "¿Estás seguro que deseas vender todo?", "Vender", "Volver");
				case 7: menu_muebles_emp(playerid, i, 6); //texturizar
			}
		}
		case D_Empresa_oMuebles:
		{
			new i = DentroEmpresa[playerid], e_op = GetPVarInt(playerid, "e_op_mueble");
			if(i == INVALID_CASA_ID) return 1;

			if(response)
			{
				if(listitem == 100)
				{
				    menu_muebles_emp(playerid, i, e_op, 2);
				    //página 2 de muebles
				    return 1;
				}
				new suma = 0, m_id = 0;
				if (pag_muebles[playerid] == 2) suma += 100;
				m_id += listitem+suma;

				if(!i_Empresa[i][eObjModel][m_id]) return _Mensaje(playerid, 0, "0", "No seleccionaste nada.");

				switch (e_op)
				{
				    case 1: //agregar
				    {
						if(i_Empresa[i][eObjPosX][m_id] != 0.0) return _Mensaje(playerid, 0, "0", "Ese mueble ya está agregado.");
						GetPlayerPos(playerid,i_Empresa[i][eObjPosX][m_id], i_Empresa[i][eObjPosY][m_id], i_Empresa[i][eObjPosZ][m_id]);
						GetPosInFrontOfPlayer(playerid, i_Empresa[i][eObjPosX][m_id], i_Empresa[i][eObjPosY][m_id], 1.0);
						foreach(new p: Player)
						{
							if(EmpresaActual[p] == i)
							{
								OBJ_MuebleE[p][m_id] = CreatePlayerObject(p, i_Empresa[i][eObjModel][m_id], i_Empresa[i][eObjPosX][m_id], i_Empresa[i][eObjPosY][m_id], i_Empresa[i][eObjPosZ][m_id], 0.0, 0.0, 0.0);
							}
						}
						EditPlayerObject(playerid, OBJ_MuebleE[playerid][m_id]);
						user[playerid][EditandoM] = 4;
						SetPVarInt(playerid,"ID_MUEBLEE",m_id);
						save_Empresa(DentroEmpresa[playerid], false, -1, m_id);
						return 1;
					}
					case 2: //guardar
					{
						if(i_Empresa[i][eObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto ya está oculto.");
					    i_Empresa[i][eObjPosX][m_id] = 0.0;
					    i_Empresa[i][eObjPosY][m_id] = 0.0;
					    i_Empresa[i][eObjPosZ][m_id] = 0.0;
						foreach(new p: Player)
						{
							if(EmpresaActual[p] == i)
							{
						    	DestroyPlayerObject(p, OBJ_MuebleE[p][m_id]);
							}
						}
						save_Empresa(i, false, -1, m_id);
			            Mensaje_(playerid, 0xF8D48CFF, "Guardaste correctamente el mueble.");
						return 1;
					}
					case 3: //editar
					{
						if(!i_Empresa[DentroEmpresa[playerid]][eObjPosX][m_id]) return _Mensaje(playerid, 0, "0", "No puedes editar ese objeto.");
						EditPlayerObject(playerid, OBJ_MuebleE[playerid][m_id]);
						user[playerid][EditandoM] = 4;
						SetPVarInt(playerid,"ID_MUEBLEE",m_id);
						return 1;
					}
					case 4: //vender
					{
					    if(i_Empresa[i][eObjModel][m_id] == INVALID_MUEBLES_ID) return _Mensaje(playerid, 0, "42", "Objeto seleccionado inválido.");

						new OBJ_INDEX;
						buscar_modelo_obj(i_Empresa[i][eObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						new dinero = precio / 2;

						format(string, sizeof(string), "Vendiste el mueble (%s), por $%d.", objetos_interior[OBJ_INDEX][2], dinero);
						Mensaje_(playerid, 0x33CCFFFF, string);

						i_Empresa[i][ePrecio] -= precio;

			            DarDineroGC(playerid, dinero);
						DestruirMuebleEmpresa(i, m_id);
						i_Empresa[i][eObjModel][m_id] = 0;
						i_Empresa[i][eObjPosX][m_id] = 0.0;
						i_Empresa[i][eObjPosY][m_id] = 0.0;
						i_Empresa[i][eObjPosZ][m_id] = 0.0;
						i_Empresa[i][eObjRotX][m_id] = 0.0;
						i_Empresa[i][eObjRotY][m_id] = 0.0;
						i_Empresa[i][eObjRotZ][m_id] = 0.0;
						i_Empresa[i][eTextura1][m_id] = 0;
						i_Empresa[i][eTextura2][m_id] = 0;
						i_Empresa[i][eTextura3][m_id] = 0;
						i_Empresa[i][eTextura4][m_id] = 0;
						save_Empresa(DentroEmpresa[playerid], false, -1, m_id);
						return 1;
					}
					case 5: //borrar
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Empresa[i][eObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						i_Empresa[i][ePrecio] -= precio;

						DestruirMuebleEmpresa(i, m_id);
						i_Empresa[i][eObjModel][m_id] = 0;
						i_Empresa[i][eObjPosX][m_id] = 0.0;
						i_Empresa[i][eObjPosY][m_id] = 0.0;
						i_Empresa[i][eObjPosZ][m_id] = 0.0;
						i_Empresa[i][eObjRotX][m_id] = 0.0;
						i_Empresa[i][eObjRotY][m_id] = 0.0;
						i_Empresa[i][eObjRotZ][m_id] = 0.0;
						i_Empresa[i][eTextura1][m_id] = 0;
						i_Empresa[i][eTextura2][m_id] = 0;
						i_Empresa[i][eTextura3][m_id] = 0;
						i_Empresa[i][eTextura4][m_id] = 0;
						Mensaje_(playerid, 0xF8D48CFF, "Eliminaste correctamente el mueble.");
						save_Empresa(DentroEmpresa[playerid], false, -1, m_id);
						return 1;
					}
					case 6: //texturizar
					{
						if(i_Empresa[i][eObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto está oculto.");
						new
							str [256];

						format (str, sizeof (str), "- Lugar 1 ({90C3D4}%s{ffffff})\n- Lugar 2 ({90C3D4}%s{ffffff})\n- Lugar 3 ({90C3D4}%s{ffffff})\n- Lugar 4 ({90C3D4}%s{ffffff})", GetMuebleTextureName(i_Empresa[i][eTextura1][m_id]), GetMuebleTextureName(i_Empresa[i][eTextura2][m_id]), GetMuebleTextureName(i_Empresa[i][eTextura3][m_id]), GetMuebleTextureName(i_Empresa[i][eTextura4][m_id]));
						ExPlayerDialog(playerid, D_Emp_mTexturizar, DIALOG_STYLE_LIST, "{ffffff}Seleccione la parte del {00c200}objeto{ffffff} a texturizar", str, ">>", "Inicio");

						SetPVarInt (playerid, "mueble_index", m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "e_op_mueble");
						return 1;
					}
				}
			}//separación
			else
			{
				if (pag_muebles[playerid] == 1) user_Mueble(playerid, 4);
				else
				{
					menu_muebles_emp(playerid, i, e_op);
					pag_muebles[playerid] = 1;
				}
			}
		}
		case D_Emp_mTexturizar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        cmd_muebles(playerid);
		        return 1;
			}
			new
				str2 [200],
				str [sizeof (TextureData) * sizeof (str2)];

			SetPVarInt (playerid, "editm_index", listitem);

			for (new x2; x2 < sizeof (TextureData); x2++)
			{
				format (str2, sizeof (str2), "{b0b0b0}%d)\t%s\n", x2+1, GetMuebleTextureName(x2));
				strcat (str, str2);
			}
			format (str2, sizeof (str2), "{00c200} Texturizar (Lugar %d)", listitem);
			ExPlayerDialog(playerid, D_Emp_mTexturizar2, DIALOG_STYLE_LIST, "Texturizar", str, "Cambiar", "Inicio");
		}

		case D_Emp_mTexturizar2:
		{
		    if (!response)
		    {
				DeletePVar (playerid, "editm_index");
				cmd_muebles(playerid);
		        return 1;
			}
			new
			    m = GetPVarInt (playerid, "mueble_index"),
			    ide = GetPVarInt (playerid, "editm_index"),
			    e_id = DentroEmpresa[playerid];

			switch (ide)
			{
				case 0: i_Empresa[e_id][eTextura1][m] = listitem;
				case 1: i_Empresa[e_id][eTextura2][m] = listitem;
				case 2: i_Empresa[e_id][eTextura3][m] = listitem;
				case 3: i_Empresa[e_id][eTextura4][m] = listitem;
			}
			foreach(new i: Player)
			{
				if (DentroEmpresa[i] == e_id)
				{
					SetPlayerObjectMaterial (i, OBJ_MuebleE[i][m], ide, GetMuebleTextureModelID(listitem), GetMuebleTextureTXD(listitem), GetMuebleTextureTexture(listitem), GetMuebleTextureColor(listitem));
				}
			}
			DeletePVar (playerid, "editm_index");
			save_Empresa(DentroEmpresa[playerid], false, -1, m);
   			//SelectObject (playerid);
		}
		case D_Empresa_tMuebles:
		{
			if(response)
			{
				new h = DentroEmpresa[playerid], pago;
				if(h == INVALID_NEGOCIO_ID) return Mensaje_(playerid, -1, "ERORR");
				Loop(i, MAX_MUEBLES_E, 0)
				{
					if(i_Empresa[h][eObjModel][i])
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Empresa[h][eObjModel][i], OBJ_INDEX);
						pago += objetos_interior[OBJ_INDEX][1];
						DestruirMuebleEmpresa(h, i);
						i_Empresa[h][eObjModel][i] = 0;
						i_Empresa[h][eObjPosX][i] = 0.0;
						i_Empresa[h][eObjPosY][i] = 0.0;
						i_Empresa[h][eObjPosZ][i] = 0.0;
						i_Empresa[h][eObjRotX][i] = 0.0;
						i_Empresa[h][eObjRotY][i] = 0.0;
						i_Empresa[h][eObjRotZ][i] = 0.0;
						i_Empresa[h][eTextura1][i] = 0;
						i_Empresa[h][eTextura2][i] = 0;
						i_Empresa[h][eTextura3][i] = 0;
						i_Empresa[h][eTextura4][i] = 0;
					}
				}
				new elban[128];
				format(elban, 128, DATOS_EMPRESAS, h);
				fremove(elban);

				save_Empresa(h);

				i_Empresa[h][ePrecio] -= pago;
				DarDineroGC(playerid, pago);
				format(string, sizeof(string), "Vendiste los muebles de la empresa por $%d.", pago);
				Mensaje_(playerid, 0x33CCFFFF, string);
				return 1;
			}
			else
			{
				user_Mueble(playerid, 4);
			}
		}
		//opciones de negocios
		case D_Neg_Opciones:
			if(response) switch(listitem)
			{
				case 0:
				{
					if(user[playerid][jNegocioLlaves] == DentroNegocio[playerid]) return _Mensaje(playerid, 4, "b0b0b0", "No puedes interactuar con el nombre del negocio.");
					ExPlayerDialog(playerid, D_Neg_Nombre, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre", "{FFFFFF}> Escribe el nuevo nombre de tu negocio:", "Aceptar", "Salir");
				}
				case 1:
				{
					if(user[playerid][jNegocioLlaves] == DentroNegocio[playerid]) return _Mensaje(playerid, 4, "b0b0b0", "No puedes interactuar con el dinero del negocio.");
					new coordsstring2[300];
					format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Dinero ({00c200}%d{D6E1EB})", i_Negocio[DentroNegocio[playerid]][nDinero]);
					ExPlayerDialog(playerid, D_Neg_Dinero, DIALOG_STYLE_INPUT, coordsstring2, "{FFFFFF}Escribe la cantidad de dinero que deseas depositar o retirar\n\n{FFFFFF}- Escribe únicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Depositar", "Retirar");
				}
				case 2:
				{
					if(user[playerid][jNegocioLlaves] == DentroNegocio[playerid]) return _Mensaje(playerid, 4, "b0b0b0", "No puedes interactuar con los productos.");
					new n_id = DentroNegocio[playerid];
					if (n_id == -1) return _Mensaje(playerid, 4, "b0b0b0", "Operación cancelada.");

					new tipo = i_Negocio[n_id][nTipo], tipo2[50], costo = 0;

					switch (tipo)
					{
					    case 1: costo = 3894, tipo2 = "Productos de venta";
					    case 2: costo = 4026, tipo2 = "Ropa y zapatos";
					    case 3: costo = 4290, tipo2 = "Bebidas y comestibles";
					    case 4: costo = 3135, tipo2 = "Comestibles";
					    case 5: costo = 2970, tipo2 = "Comestibles";
					    case 6: costo = 2871, tipo2 = "Comestibles";
					    case 7: costo = 15015, tipo2 = "Armas y cargadores";
					    case 8: costo = 2805, tipo2 = "Champús y geles";
					    case 9: costo = 2640, tipo2 = "Productos eróticos";
					    case 10: costo = 2475, tipo2 = "Productos de venta";
					    case 11: costo = 9735, tipo2 = "Productos electrónicos";
					    case 12: costo = 3960, tipo2 = "Bebidas y comestibles";
					    case 13: costo = 3135, tipo2 = "Herramientas";
					    case 14: costo = 10395, tipo2 = "Bebidas y comestibles";
					    case 15: costo = 8910, tipo2 = "Bebidas y comestibles";
					    case 16: costo = 9537, tipo2 = "Bebidas y comestibles";
					    case 17: costo = 6930, tipo2 = "Artículos usados";
					    case 18: costo = 3700, tipo2 = "Relojes de marca";
					    case 19: costo = 3135, tipo2 = "Comestibles";
					}

					new coordsstring[300], DialogStatus[3000];
					format(coordsstring, sizeof(coordsstring),
					"{FFFFFF}Información del pedido:\n\n\
					 Costo: {00c200}%d${FFFFFF}\n\
					 Cantidad: {C57BBB}1,000{FFFFFF}\n\
					 Tipo: {b00000}%s{FFFFFF}\n\n\
						Les recuerda el distribuidor que el tiempo llegada varia.\n\n",
					costo, tipo2);
					strcat(DialogStatus, coordsstring);
					ExPlayerDialog(playerid, D_Neg_Productos, DIALOG_STYLE_MSGBOX, "{D6E1EB}Productos", DialogStatus, "Ordenar", "Cancelar");
				}
				case 3:
				{
					if(i_Negocio[DentroNegocio[playerid]][nSeguro] == 0)
					{
						i_Negocio[DentroNegocio[playerid]][nSeguro] = 1;
						accion_rol(playerid, 0, "saca sus llaves de negocio y lo abre.");
						textgame_player(playerid, "~g~Negocio abierto", 3500, 1);
					}
					else
					{
						i_Negocio[DentroNegocio[playerid]][nSeguro] = 0;
						accion_rol(playerid, 0, "saca sus llaves de negocio y lo cierra.");
						textgame_player(playerid, "~r~Negocio Cerrado", 3500, 1);
					}
				}
				case 4: n_verArmario(playerid, DentroNegocio[playerid]);
				case 5: cmd_muebles(playerid);
			}

		case D_Neg_Nombre:
		{
			if (!response) return 1;
			if (!strlen(inputtext)) return ExPlayerDialog(playerid, D_Neg_Nombre, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre{FFFFFF}", "> Escribe algún nombre.", "Aceptar", "Cancelar");
			if (strlen(inputtext) > 20 || strlen(inputtext) < 0)
			{
				_Mensaje(playerid, 0, "106", "No puedes poner el nombre con más de 20 carácteres.");
				return 1;
			}
			alm(i_Negocio[DentroNegocio[playerid]][nNombre], inputtext);
			format(string, sizeof(string), "Cambiaste el nombre del negocio:{ffffff} %s", i_Negocio[DentroNegocio[playerid]][nNombre]);
			_Mensaje(playerid, 4, "33CCFF", string);
			save_Negocio(DentroNegocio[playerid]);
			return 1;
		}
		case D_Neg_Dinero:
		{
			if (response) //depositar
			{
				new amount = strval(inputtext);
				new nid = DentroNegocio[playerid];
				if(amount < 1) { _Mensaje(playerid, 0, "22", "No puedes depositar menos de un dolar."); return 1; }
				if(ComprobarDineroJ(playerid) >= amount)
				{
					i_Negocio[nid][nDinero] += amount;
					DarDineroGC(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en tu negocio.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Negocio(nid);
					format(string, sizeof(string), "Registros: %s deposito $%d en su negocio (neg ID %d).", nombre_pj(playerid), amount, nid);
					Log("Registros/Negocios.log", string);
					return 1;
				} else _Mensaje(playerid, 0, "23", "No tienes tanto dinero encima para depositar.");
			}
			else // retirar
			{
				new amount = strval(inputtext);
				new nid = DentroNegocio[playerid];
				if(amount < 1) { _Mensaje(playerid, 0, "24", "No puedes retirar menos de un dolar."); return 1; }
				if(i_Negocio[nid][nDinero] >= amount)
				{
					i_Negocio[nid][nDinero] -= amount;
					DarDineroGC(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu negocio.", amount);
					_Mensaje(playerid, 4, "33CCFF", string);
					save_Negocio(nid);
					format(string, sizeof(string), "Registros: %s retiro $%d de su negocio (neg ID %d).", nombre_pj(playerid), amount, nid);
					Log("Registros/Negocios.log", string);
					return 1;
				} else _Mensaje(playerid, 0, "26", "No tienes suficiente dinero en caja para retirar.");
			}
		}
		case D_Neg_Productos:
		{
				if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Operación cancelada.");
				new n_id = DentroNegocio[playerid];
				new tipo = i_Negocio[n_id][nTipo], costo = 0;

				switch (tipo)
				{
					case 1: costo = 3894;
					case 2: costo = 4026;
					case 3: costo = 4290;
					case 4: costo = 3135;
					case 5: costo = 2970;
					case 6: costo = 2871;
					case 7: costo = 15015;
					case 8: costo = 2805;
					case 9: costo = 2640;
					case 10: costo = 2475;
					case 11: costo = 9735;
					case 12: costo = 3960;
					case 13: costo = 3135;
					case 14: costo = 10395;
					case 15: costo = 8910;
					case 16: costo = 9537;
					case 17: costo = 6930;
					case 18: costo = 3700;
					case 19: costo = 3135;
				}
				if (ComprobarDineroJ(playerid) >= costo)
				{
					if (i_Negocio[n_id][nPedido] == 5) return _Mensaje(playerid, 4, "b0b0b0", "Ya posees 5 pedidos pendientes.");
					i_Negocio[n_id][nPedido] ++;
					Compra(playerid, costo);
					d_estado += costo;
					save_Negocio(n_id);
					format(string, sizeof(string), "Ordenaste 1,000 productos por $%d.", costo);
					_Mensaje(playerid, 4, "FFEA5F", string);
					return 1;
				}
				else { format(string, sizeof(string), "No tienes $%d para pagar los productos.", costo); _Mensaje(playerid, 4, "b0b0b0", string); }
		}
		case D_Neg_iMuebles:
		{
			if(!response) return 1;

			new i = DentroNegocio[playerid];
			pag_muebles[playerid] = 1;

			switch(listitem)
			{
			    case 0: menu_muebles_neg(playerid, i, 1); //agregar
			    case 1: menu_muebles_neg(playerid, i, 2); //guardar
			    case 2: menu_muebles_neg(playerid, i, 3); //editar
			    case 3: menu_muebles_neg(playerid, i, 4); //vender
			    case 4: menu_muebles_neg(playerid, i, 5); //borrar
				case 5:
				{
					ExPlayerDialog(playerid, D_Comprar_Muebles, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Muebles", "Tipo de mueble\tPágina\n\
					Mesas, sillas, sillones\t#1\n\
					Juego de cuarto, camas\t#4\n\
					Baño\t#7\n\
					Cocina\t#8\n\
					Comida + Viveres\t#11\n\
					Electrónica\t#16\n\
					Accesorios varios\t#13\n\
					Accesorios varios-B\t#18\n\
					Puertas\t#23\n\
					Objetos de locales\t#25\n\
					Garaje, mecánica\t#28\n\
					Paredes, marcos\t#30", ">>", "Volver");
				}
			    case 6: ExPlayerDialog(playerid, D_Neg_tMuebles, DIALOG_STYLE_MSGBOX, "{D6E1EB}Muebles", "¿Estás seguro que deseas vender todo?", "Vender", "Volver");
				case 7: menu_muebles_neg(playerid, i, 6); //texturizar
			}
		}
		case D_Neg_oMuebles:
		{
			new i = DentroNegocio[playerid], n_op = GetPVarInt(playerid, "n_op_mueble");
			if(i == INVALID_NEGOCIO_ID) return 1;

			if(response)
			{
				if(listitem == 100)
				{
				    menu_muebles_neg(playerid, i, n_op, 2);
				    //página 2 de muebles
				    return 1;
				}
				new suma = 0, m_id = 0;
				if (pag_muebles[playerid] == 2) suma += 100;
				m_id += listitem+suma;

				if(!i_Negocio[i][nObjModel][m_id]) return _Mensaje(playerid, 0, "0", "No seleccionaste nada.");

				switch (n_op)
				{
					case 1: //agregar
					{
						if(i_Negocio[i][nObjPosX][m_id] != 0.0) return _Mensaje(playerid, 0, "0", "Ese mueble ya está agregado.");
						GetPlayerPos(playerid,i_Negocio[i][nObjPosX][m_id], i_Negocio[i][nObjPosY][m_id], i_Negocio[i][nObjPosZ][m_id]);
						GetPosInFrontOfPlayer(playerid, i_Negocio[i][nObjPosX][m_id], i_Negocio[i][nObjPosY][m_id], 1.0);
						foreach(new p: Player)
						{
					    	if(NegocioActual[p] == i)
							{
					    		OBJ_MuebleN[p][m_id] = CreatePlayerObject(p, i_Negocio[i][nObjModel][m_id], i_Negocio[i][nObjPosX][m_id], i_Negocio[i][nObjPosY][m_id], i_Negocio[i][nObjPosZ][m_id], 0.0, 0.0, 0.0);
							}
						}
						user[playerid][EditandoM] = 2;
						SetPVarInt(playerid,"ID_MUEBLEN",m_id);
						EditPlayerObject(playerid, OBJ_MuebleN[playerid][m_id]);
						save_Negocio(DentroNegocio[playerid], false, m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
					case 2: //guardar
					{
						if(i_Negocio[i][nObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto ya está oculto.");
						i_Negocio[i][nObjPosX][m_id] = 0.0;
						i_Negocio[i][nObjPosY][m_id] = 0.0;
						i_Negocio[i][nObjPosZ][m_id] = 0.0;
						foreach(new p: Player)
						{
							if(NegocioActual[p] == i)
							{
								DestroyPlayerObject(p, OBJ_MuebleN[p][m_id]);
							}
						}
						save_Negocio(i, false, m_id);
						Mensaje_(playerid, 0xF8D48CFF, "Guardaste correctamente el mueble.");
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
					case 3: //editar
					{
						if(i_Negocio[i][nObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto está oculto.");
						EditPlayerObject(playerid, OBJ_MuebleN[playerid][m_id]);
						user[playerid][EditandoM] = 2;
						SetPVarInt(playerid,"ID_MUEBLEN",m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
					case 4: //vender
					{
						if(i_Negocio[i][nObjModel][m_id] == INVALID_MUEBLES_ID) return _Mensaje(playerid, 0, "42", "Objeto seleccionado inválido.");

						new OBJ_INDEX;
						buscar_modelo_obj(i_Negocio[i][nObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						new dinero = precio / 2;

						format(string, sizeof(string), "Vendiste el mueble (%s), por $%d.", objetos_interior[OBJ_INDEX][2], dinero);
						Mensaje_(playerid, 0x33CCFFFF, string);

						i_Negocio[i][nPrecio] -= precio;

						DarDineroGC(playerid, dinero);
						DestruirMuebleNegocio(i, m_id);
						i_Negocio[i][nObjModel][m_id] = 0;
						i_Negocio[i][nObjPosX][m_id] = 0.0;
						i_Negocio[i][nObjPosY][m_id] = 0.0;
						i_Negocio[i][nObjPosZ][m_id] = 0.0;
						i_Negocio[i][nObjRotX][m_id] = 0.0;
						i_Negocio[i][nObjRotY][m_id] = 0.0;
						i_Negocio[i][nObjRotZ][m_id] = 0.0;
						i_Negocio[i][nTextura1][m_id] = 0;
						i_Negocio[i][nTextura2][m_id] = 0;
						i_Negocio[i][nTextura3][m_id] = 0;
						i_Negocio[i][nTextura4][m_id] = 0;
						save_Negocio(DentroNegocio[playerid], false, m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
					case 5: //borrar
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Negocio[i][nObjModel][m_id], OBJ_INDEX);
						new precio = objetos_interior[OBJ_INDEX][1];
						i_Negocio[i][nPrecio] -= precio;

						DestruirMuebleNegocio(i, m_id);
						i_Negocio[i][nObjModel][m_id] = 0;
						i_Negocio[i][nObjPosX][m_id] = 0.0;
						i_Negocio[i][nObjPosY][m_id] = 0.0;
						i_Negocio[i][nObjPosZ][m_id] = 0.0;
						i_Negocio[i][nObjRotX][m_id] = 0.0;
						i_Negocio[i][nObjRotY][m_id] = 0.0;
						i_Negocio[i][nObjRotZ][m_id] = 0.0;
						i_Negocio[i][nTextura1][m_id] = 0;
						i_Negocio[i][nTextura2][m_id] = 0;
						i_Negocio[i][nTextura3][m_id] = 0;
						i_Negocio[i][nTextura4][m_id] = 0;
						Mensaje_(playerid, 0xF8D48CFF, "Eliminaste correctamente el mueble.");
						save_Negocio(DentroNegocio[playerid], false, m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
					case 6: //texturizar
					{
						if(i_Negocio[i][nObjPosX][m_id] == 0.0) return _Mensaje(playerid, 0, "0", "Ese objeto está oculto.");
						new
							str [256];

						format (str, sizeof (str), "- Lugar 1 ({90C3D4}%s{ffffff})\n- Lugar 2 ({90C3D4}%s{ffffff})\n- Lugar 3 ({90C3D4}%s{ffffff})\n- Lugar 4 ({90C3D4}%s{ffffff})", GetMuebleTextureName(i_Negocio[i][nTextura1][m_id]), GetMuebleTextureName(i_Negocio[i][nTextura2][m_id]), GetMuebleTextureName(i_Negocio[i][nTextura3][m_id]), GetMuebleTextureName(i_Negocio[i][nTextura4][m_id]));
						ExPlayerDialog(playerid, D_Neg_mTexturizar, DIALOG_STYLE_LIST, "{ffffff}Seleccione la parte del {00c200}objeto{ffffff} a texturizar", str, ">>", "Inicio");

						SetPVarInt (playerid, "mueble_index", m_id);
						pag_muebles[playerid] = 0;
						DeletePVar(playerid, "n_op_mueble");
						return 1;
					}
				}
			}//separación
			else
			{
				if (pag_muebles[playerid] == 1) user_Mueble(playerid, 1);
				else
				{
					menu_muebles_neg(playerid, i, n_op);
					pag_muebles[playerid] = 1;
				}
			}
		}
		case D_Neg_mTexturizar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        cmd_muebles(playerid);
		        return 1;
			}
			new
				str2 [200],
				str [sizeof (TextureData) * sizeof (str2)];

			SetPVarInt (playerid, "editm_index", listitem);

			for (new x2; x2 < sizeof (TextureData); x2++)
			{
				format (str2, sizeof (str2), "{b0b0b0}%d)\t%s\n", x2+1, GetMuebleTextureName(x2));
				strcat (str, str2);
			}
			format (str2, sizeof (str2), "{00c200} Texturizar (Lugar %d)", listitem);
			ExPlayerDialog(playerid, D_Neg_mTexturizar2, DIALOG_STYLE_LIST, "Texturizar", str, "Cambiar", "Inicio");
		}

		case D_Neg_mTexturizar2:
		{
		    if (!response)
		    {
				DeletePVar (playerid, "editm_index");
				cmd_muebles(playerid);
		        return 1;
			}
			new
			    m = GetPVarInt (playerid, "mueble_index"),
			    ide = GetPVarInt (playerid, "editm_index"),
			    n_id = DentroNegocio[playerid];

			switch (ide)
			{
				case 0: i_Negocio[n_id][nTextura1][m] = listitem;
				case 1: i_Negocio[n_id][nTextura2][m] = listitem;
				case 2: i_Negocio[n_id][nTextura3][m] = listitem;
				case 3: i_Negocio[n_id][nTextura4][m] = listitem;
			}
			foreach(new i: Player)
			{
				if (DentroNegocio[i] == n_id)
				{
					SetPlayerObjectMaterial (i, OBJ_MuebleN[i][m], ide, GetMuebleTextureModelID(listitem), GetMuebleTextureTXD(listitem), GetMuebleTextureTexture(listitem), GetMuebleTextureColor(listitem));
				}
			}
			DeletePVar (playerid, "editm_index");
			save_Negocio(DentroNegocio[playerid], false, m);
   			//SelectObject (playerid);
		}
		case D_Neg_tMuebles:
		{
			if(response)
			{
			    new h = DentroNegocio[playerid], pago;
			    if(h == INVALID_NEGOCIO_ID) return Mensaje_(playerid, -1, "ERORR");
				Loop(i, MAX_MUEBLES_N, 0)
				{
					if(i_Negocio[h][nObjModel][i])
					{
						new OBJ_INDEX;
						buscar_modelo_obj(i_Negocio[h][nObjModel][i], OBJ_INDEX);
						pago += objetos_interior[OBJ_INDEX][1];
						DestruirMuebleNegocio(h, i);
						i_Negocio[h][nObjModel][i] = 0;
						i_Negocio[h][nObjPosX][i] = 0.0;
						i_Negocio[h][nObjPosY][i] = 0.0;
						i_Negocio[h][nObjPosZ][i] = 0.0;
						i_Negocio[h][nObjRotX][i] = 0.0;
						i_Negocio[h][nObjRotY][i] = 0.0;
						i_Negocio[h][nObjRotZ][i] = 0.0;
						i_Negocio[h][nTextura1][i] = 0;
						i_Negocio[h][nTextura2][i] = 0;
						i_Negocio[h][nTextura3][i] = 0;
						i_Negocio[h][nTextura4][i] = 0;
					}
				}
				i_Negocio[h][nPrecio] -= pago;


				new elban[128];
				format(elban, 128, DATOS_NEGOCIOS, h);
				fremove(elban);

				save_Negocio(h);

				DarDineroGC(playerid, pago);
				format(string, sizeof(string), "Vendiste los muebles del negocio por $%d.", pago);
				Mensaje_(playerid, 0x33CCFFFF, string);

				return 1;
			}
			else
			{
				user_Mueble(playerid, 1);
			}
		}
		///////////////////
		//-
    }
    return 0;
}

user_Mueble(jugador, prope = -1)
{
	switch (prope)
	{
	    case 1: //negocio
	    {
	        ExPlayerDialog(jugador, D_Neg_iMuebles, DIALOG_STYLE_LIST, "{ffffff}Muebles: {60CD00}Negocio",
			"{60CD00}-{FFFFFF} Agregar muebles\n\
			{60CD00}-{FFFFFF} Guardar muebles\n\
			{60CD00}-{FFFFFF} Editar muebles\n\
			{60CD00}-{FFFFFF} Vender muebles\n\
			{60CD00}-{FFFFFF} Borrar muebles\n\
			{60CD00}-{FFFFFF} Comprar muebles\n\
			{00a2ff}-{FFFFFF} Vender todos los muebles\n\
			{b00000}-{FFFFFF} Cambiar textura", ">>", "Cerrar");
		}
	    case 2: //casa
	    {
			ExPlayerDialog(jugador, D_Casa_iMuebles, DIALOG_STYLE_LIST, "{ffffff}Muebles: {60CD00}Casa",
			"{60CD00}-{FFFFFF} Agregar muebles\n\
			{60CD00}-{FFFFFF} Guardar muebles\n\
			{60CD00}-{FFFFFF} Editar muebles\n\
			{60CD00}-{FFFFFF} Vender muebles\n\
			{60CD00}-{FFFFFF} Borrar muebles\n\
			{60CD00}-{FFFFFF} Comprar muebles\n\
			{00a2ff}-{FFFFFF} Vender todos los muebles\n\
			{b00000}-{FFFFFF} Cambiar textura", ">>", "Cerrar");
		}
		case 3: //garaje
		{
		    ExPlayerDialog(jugador, D_Garaje_iMuebles, DIALOG_STYLE_LIST, "{ffffff}Muebles: {60CD00}Garaje",
			"{60CD00}-{FFFFFF} Agregar muebles\n\
			{60CD00}-{FFFFFF} Guardar muebles\n\
			{60CD00}-{FFFFFF} Editar muebles\n\
			{60CD00}-{FFFFFF} Vender muebles\n\
			{60CD00}-{FFFFFF} Borrar muebles\n\
			{60CD00}-{FFFFFF} Comprar muebles\n\
			{00a2ff}-{FFFFFF} Vender todos los muebles", ">>", "Cerrar");
		}
		case 4: //empresa
		{
		    ExPlayerDialog(jugador, D_Empresa_iMuebles, DIALOG_STYLE_LIST, "{ffffff}Muebles: {60CD00}Empresa",
			"{60CD00}-{FFFFFF} Agregar muebles\n\
			{60CD00}-{FFFFFF} Guardar muebles\n\
			{60CD00}-{FFFFFF} Editar muebles\n\
			{60CD00}-{FFFFFF} Vender muebles\n\
			{60CD00}-{FFFFFF} Borrar muebles\n\
			{60CD00}-{FFFFFF} Comprar muebles\n\
			{00a2ff}-{FFFFFF} Vender todos los muebles\n\
			{b00000}-{FFFFFF} Cambiar textura", ">>", "Cerrar");
		}
	}
	return 1;
}

stock menu_muebles_casa(playerid, i = -1, tipo = 0, pag = 1)
{
	if (i == -1) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (c_id).");
	if (tipo == 0) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (tipo).");

	new Str[300], Str2[5000], OBJ_INDEX;

	switch (pag)
	{
		case 1:
		{
			Loop(m, 100, 0)
			{
				if(i_Casa[i][cObjModel][m])
				{
					buscar_modelo_obj(i_Casa[i][cObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Casa[i][cObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Casa[i][cObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
			strcat(Str2, "{90C3D4}>> Siguiente página de muebles");
		}
		case 2:
		{
			pag_muebles[playerid] = 2;
			Loop(m, 200, 100)
			{
				if(i_Casa[i][cObjModel][m])
				{
					buscar_modelo_obj(i_Casa[i][cObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Casa[i][cObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Casa[i][cObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
			strcat(Str2, "{90C3D4}>> Siguiente página de muebles");
		}
		case 3:
		{
			pag_muebles[playerid] = 3;
			Loop(m, MAX_MUEBLES_C, 200)
			{
				if(i_Casa[i][cObjModel][m])
				{
					buscar_modelo_obj(i_Casa[i][cObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Casa[i][cObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Casa[i][cObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
		}
	}
	switch (tipo)
	{
		case 1:
		{
		    SetPVarInt(playerid, "c_op_mueble", 1);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Agregar'", Str2, "Agregar", "Volver");
		}
		case 2:
		{
		    SetPVarInt(playerid, "c_op_mueble", 2);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Guardar'", Str2, "Guardar", "Volver");
		}
		case 3:
		{
		    SetPVarInt(playerid, "c_op_mueble", 3);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Editar'", Str2, "Editar", "Volver");
		}
		case 4:
		{
		    SetPVarInt(playerid, "c_op_mueble", 4);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Vender'", Str2, "Vender", "Volver");
		}
		case 5:
		{
		    SetPVarInt(playerid, "c_op_mueble", 5);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Borrar'", Str2, "Borrar", "Volver");
		}
		case 6:
		{
		    SetPVarInt(playerid, "c_op_mueble", 6);
			ExPlayerDialog(playerid, D_Casa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Texturizar'", Str2, "Texturizar", "Volver");
		}
	}

	return 1;
}

stock menu_muebles_neg(playerid, i = -1, tipo = 0, pag = 1)
{
	if (i == -1) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (n_id).");
	if (tipo == 0) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (tipo).");

	new Str[300], Str2[5000], OBJ_INDEX;

	switch (pag)
	{
		case 1:
		{
			Loop(m, 100, 0)
			{
				if(i_Negocio[i][nObjModel][m])
				{
					buscar_modelo_obj(i_Negocio[i][nObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Negocio[i][nObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Negocio[i][nObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
			strcat(Str2, "{90C3D4}>> Siguiente página de muebles");
		}
		case 2:
		{
			pag_muebles[playerid] = 2;
			Loop(m, MAX_MUEBLES_N, 100)
			{
				if(i_Negocio[i][nObjModel][m])
				{
					buscar_modelo_obj(i_Negocio[i][nObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Negocio[i][nObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Negocio[i][nObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
		}
	}
	switch (tipo)
	{
		case 1:
		{
		    SetPVarInt(playerid, "n_op_mueble", 1);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Agregar'", Str2, "Agregar", "Volver");
		}
		case 2:
		{
		    SetPVarInt(playerid, "n_op_mueble", 2);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Guardar'", Str2, "Guardar", "Volver");
		}
		case 3:
		{
		    SetPVarInt(playerid, "n_op_mueble", 3);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Editar'", Str2, "Editar", "Volver");
		}
		case 4:
		{
		    SetPVarInt(playerid, "n_op_mueble", 4);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Vender'", Str2, "Vender", "Volver");
		}
		case 5:
		{
		    SetPVarInt(playerid, "n_op_mueble", 5);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Borrar'", Str2, "Borrar", "Volver");
		}
		case 6:
		{
		    SetPVarInt(playerid, "n_op_mueble", 6);
			ExPlayerDialog(playerid, D_Neg_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Texturizar'", Str2, "Texturizar", "Volver");
		}
	}

	return 1;
}

stock menu_muebles_garj(playerid, i = -1, tipo = 0)
{
	if (i == -1) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (g_id).");
	if (tipo == 0) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (tipo).");

	new Str[300], Str2[5000], OBJ_INDEX;

	Loop(m, MAX_MUEBLES_G, 0)
	{
		if(i_Garaje[i][gObjModel][m])
		{
			buscar_modelo_obj(i_Garaje[i][gObjModel][m], OBJ_INDEX);
			Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Garaje[i][gObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Garaje[i][gObjModel][m], objetos_interior[OBJ_INDEX][2]);
		}
		else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
		strcat(Str2, Str);
	}

	switch (tipo)
	{
		case 1:
		{
		    SetPVarInt(playerid, "g_op_mueble", 1);
			ExPlayerDialog(playerid, D_Garaje_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Agregar'", Str2, "Agregar", "Volver");
		}
		case 2:
		{
		    SetPVarInt(playerid, "g_op_mueble", 2);
			ExPlayerDialog(playerid, D_Garaje_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Guardar'", Str2, "Guardar", "Volver");
		}
		case 3:
		{
		    SetPVarInt(playerid, "g_op_mueble", 3);
			ExPlayerDialog(playerid, D_Garaje_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Editar'", Str2, "Editar", "Volver");
		}
		case 4:
		{
		    SetPVarInt(playerid, "g_op_mueble", 4);
			ExPlayerDialog(playerid, D_Garaje_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Vender'", Str2, "Vender", "Volver");
		}
		case 5:
		{
		    SetPVarInt(playerid, "g_op_mueble", 5);
			ExPlayerDialog(playerid, D_Garaje_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Borrar'", Str2, "Borrar", "Volver");
		}
	}

	return 1;
}

stock menu_muebles_emp(playerid, i = -1, tipo = 0, pag = 1)
{
	if (i == -1) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (e_id).");
	if (tipo == 0) return Mensaje_(playerid, -1, "ERROR; Envíe este mensaje a bish0p en /foro > (tipo).");

	new Str[300], Str2[5000], OBJ_INDEX;

	switch (pag)
	{
		case 1:
		{
			Loop(m, 100, 0)
			{
				if(i_Empresa[i][eObjModel][m])
				{
					buscar_modelo_obj(i_Empresa[i][eObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Empresa[i][eObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Empresa[i][eObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
			strcat(Str2, "{90C3D4}>> Siguiente página de muebles");
		}
		case 2:
		{
			pag_muebles[playerid] = 2;
			Loop(m, MAX_MUEBLES_E, 100)
			{
				if(i_Empresa[i][eObjModel][m])
				{
					buscar_modelo_obj(i_Empresa[i][eObjModel][m], OBJ_INDEX);
					Formato(Str, "#%d %s%d | %s\n", m + 1, (!i_Empresa[i][eObjPosX][m]) ? ("{D30000}") : ("{00A400}"),i_Empresa[i][eObjModel][m], objetos_interior[OBJ_INDEX][2]);
				}
				else Formato(Str, "{b0b0b0}#%d - Vacío\n", m + 1);
				strcat(Str2, Str);
			}
		}
	}
	switch (tipo)
	{
		case 1:
		{
		    SetPVarInt(playerid, "e_op_mueble", 1);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Agregar'", Str2, "Agregar", "Volver");
		}
		case 2:
		{
		    SetPVarInt(playerid, "e_op_mueble", 2);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Guardar'", Str2, "Guardar", "Volver");
		}
		case 3:
		{
		    SetPVarInt(playerid, "e_op_mueble", 3);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Editar'", Str2, "Editar", "Volver");
		}
		case 4:
		{
		    SetPVarInt(playerid, "e_op_mueble", 4);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Vender'", Str2, "Vender", "Volver");
		}
		case 5:
		{
		    SetPVarInt(playerid, "e_op_mueble", 5);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Borrar'", Str2, "Borrar", "Volver");
		}
		case 6:
		{
		    SetPVarInt(playerid, "e_op_mueble", 6);
			ExPlayerDialog(playerid, D_Empresa_oMuebles, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona 'Texturizar'", Str2, "Texturizar", "Volver");
		}
	}

	return 1;
}

stock estado_civil(playerid)
{
	new
	    casado[32]
	;
	if (strcmp(user[playerid][jCasado], "soltero", true) == 0)
	{
		if (user[playerid][jSexo] == 1) casado = "Soltero";
		else if (user[playerid][jSexo] == 2) casado = "Soltera";
	}
	else
	{
		if (user[playerid][jSexo] == 1) casado = "Casado";
		else if (user[playerid][jSexo] == 2) casado = "Casada";
	}
	return casado;
}

#include <prison>

public OnGameModeInit()
{
	AntiAmx();
	
	SanMusic = 0;

	//» Anticheat Jorge.

	AntiG[Balas] = true;
	AntiG[reparacion] = true;
	AntiG[teleport] = true;

    //» Configuración
    SetGameModeText("RolePlay "#beta_version"");
	SendRconCommand("name Generation City Roleplay");
    SendRconCommand("website https://open.mp/");
    SendRconCommand("game.map San Andreas- Spanish");
    SendRconCommand("rcon.password bishop11");
    SendRconCommand("language Español | Spanish");

	//» Ajustes
	SetWeather(clima);
    AllowInteriorWeapons(true);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
    EnableStuntBonusForAll(false);
    DisableInteriorEnterExits();
    ManualVehicleEngineAndLights();
    SetNameTagDrawDistance(20.0);

	//» Cargado de datos
	CargarObjetosAdmin();
    CargarPuertas();
    CargarCajas();
    CargarStuff();
    CargarCasas();
    CargarGarages();
    CargarNegocios();
    cargar_almacenes();
    cargar_bindon();
    CargarIncendios();
    CargarPeajes();
    cargar_fac_veh();
    cargar_phones();
    //cargar_maquinas();
    CargarMarias();
	cargar_posgraffs();

	for (new id = 0; id < sizeof(point_mesas); id++)
	{
		mesa_cp[id] = CreateDynamicCP(point_mesas[id][0], point_mesas[id][1], point_mesas[id][2] - 1, 1.2, -1, -1, -1, 3.5);
		mesa_used[id] = 0;
	}

	//» Model's
    SkinsHombre = LoadModelSelectionMenu("Modelos/SkinsHombre.txt");
    SkinsMujer = LoadModelSelectionMenu("Modelos/SkinsMujer.txt");
    AccesoriosN = LoadModelSelectionMenu("Modelos/Accesorios.txt");
    AccesoriosVIP = LoadModelSelectionMenu("Modelos/AccesoriosVIP.txt");
    ob_muebles = LoadModelSelectionMenu("Modelos/ob_muebles.txt");

	//negocio
	CreateDynamicObject(18009, 412.28436, -54.44561, 999.07080,   0.00000, 0.00000, -89.93999);
	CreateDynamicObject(18981, 413.15521, -51.14120, 1000.37079,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 378.91949, -189.13831, 999.11432,   0.00000, 90.00000, 90.00000);

    //» Vehículos
	LSPDveh[0] = AddStaticVehicleEx(597, 1392.9595, 1380.9930, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[1] = AddStaticVehicleEx(597, 1392.9595, 1376.9878, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[2] = AddStaticVehicleEx(597, 1392.9595, 1372.9113, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[3] = AddStaticVehicleEx(597, 1392.9595, 1368.8876, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[4] = AddStaticVehicleEx(597, 1392.9595, 1364.7452, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[5] = AddStaticVehicleEx(597, 1392.9595, 1360.5063, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[6] = AddStaticVehicleEx(597, 1392.9595, 1356.5668, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[7] = AddStaticVehicleEx(597, 1392.9595, 1352.5376, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[8] = AddStaticVehicleEx(597, 1392.9595, 1348.6067, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[9] = AddStaticVehicleEx(597, 1392.9595, 1344.2247, 10.6259, 90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[10] = AddStaticVehicleEx(596, 1370.7460, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[11] = AddStaticVehicleEx(596, 1366.7847, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[12] = AddStaticVehicleEx(596, 1362.8098, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[13] = AddStaticVehicleEx(596, 1358.3271, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[14] = AddStaticVehicleEx(596, 1354.2876, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[15] = AddStaticVehicleEx(596, 1350.0251, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[16] = AddStaticVehicleEx(596, 1346.1969, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[17] = AddStaticVehicleEx(596, 1342.0316, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[18] = AddStaticVehicleEx(596, 1337.9475, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[19] = AddStaticVehicleEx(596, 1333.9093, 1331.2377, 10.6259, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[20] = AddStaticVehicleEx(598, 1386.7466, 1387.7441, 10.5857, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[21] = AddStaticVehicleEx(598, 1382.7233, 1387.7441, 10.5857, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[22] = AddStaticVehicleEx(598, 1378.4590, 1387.7441, 10.5857, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[23] = AddStaticVehicleEx(598, 1374.3694, 1387.7441, 10.5857, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[24] = AddStaticVehicleEx(598, 1370.5281, 1387.7441, 10.5857, 180.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[25] = AddStaticVehicleEx(426, 1370.6957, 1314.5313, 10.6259, 0.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[26] = AddStaticVehicleEx(426, 1366.5883, 1314.5313, 10.6259, 0.0000, 1, 1, TIEMPO_RESPAWN, 1);
	LSPDveh[27] = AddStaticVehicleEx(426, 1362.2714, 1314.5313, 10.6259, 0.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[28] = AddStaticVehicleEx(426, 1358.2545, 1314.5313, 10.6259, 0.0000, 1, 1, TIEMPO_RESPAWN, 1);
	LSPDveh[29] = AddStaticVehicleEx(490, 1327.6265, 1324.6011, 11.0315, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[30] = AddStaticVehicleEx(528, 1327.8534, 1320.4659, 10.8510, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[31] = AddStaticVehicleEx(427, 1327.9631, 1316.3699, 10.8738, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[32] = AddStaticVehicleEx(599, 1327.7321, 1312.3531, 11.0281, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[33] = AddStaticVehicleEx(599, 1327.7321, 1308.2263, 11.0281, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[34] = AddStaticVehicleEx(599, 1327.7321, 1304.0769, 11.0281, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[35] = AddStaticVehicleEx(599, 1327.7321, 1300.1276, 11.0281, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[36] = AddStaticVehicleEx(599, 1327.7047, 1296.1680, 11.0281, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[37] = AddStaticVehicleEx(428, 1327.8865, 1291.9745, 10.9913, -90.0000, 0, 1, TIEMPO_RESPAWN);
	LSPDveh[38] = AddStaticVehicleEx(525, 1343.6652, 1288.1759, 10.7035, 90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[39] = AddStaticVehicleEx(525, 1343.6649, 1292.3340, 10.7035, 90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[40] = AddStaticVehicleEx(523, 1374.5369, 1349.5287, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[41] = AddStaticVehicleEx(523, 1374.5421, 1347.2485, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[42] = AddStaticVehicleEx(523, 1374.4897, 1345.3282, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[43] = AddStaticVehicleEx(523, 1374.4965, 1343.3256, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN);
	LSPDveh[44] = AddStaticVehicleEx(461, 1374.9297, 1357.6637, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[45] = AddStaticVehicleEx(461, 1374.7018, 1355.6105, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[46] = AddStaticVehicleEx(581, 1377.7671, 1353.8381, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[47] = AddStaticVehicleEx(581, 1377.6968, 1351.8873, 10.4914, -90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[48] = AddStaticVehicleEx(468, 1390.3479, 1329.0331, 10.6394, 32.3400, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[49] = AddStaticVehicleEx(468, 1388.6409, 1327.4512, 10.6394, 32.3400, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[50] = AddStaticVehicleEx(468, 1386.6425, 1325.7072, 10.6394, 32.3400, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[51] = AddStaticVehicleEx(468, 1384.8324, 1324.1051, 10.6394, 32.3400, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[52] = AddStaticVehicleEx(601,1342.6628,1298.1031,10.6088,90.2563,0,0, TIEMPO_RESPAWN, 1); // swatvan
	LSPDveh[53] = AddStaticVehicleEx(402,1366.5957,1388.1321,10.6817,180.9326,0,0, TIEMPO_RESPAWN, 1); // buffalo
	for(new veh = 0; veh < 54; veh++) { SetVehicleVirtualWorld(LSPDveh[veh], 77); LinkVehicleToInterior(LSPDveh[veh], 12); }
	LSPDveh[54] = AddStaticVehicleEx(411, 1393.5209, 1372.9177, 10.5353, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[55] = AddStaticVehicleEx(541, 1393.5209, 1368.9303, 10.4249, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[56] = AddStaticVehicleEx(402, 1393.5209, 1364.6775, 10.5637, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[57] = AddStaticVehicleEx(480, 1393.5209, 1360.6614, 10.5637, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[58] = AddStaticVehicleEx(415, 1393.5209, 1356.5148, 10.5637, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[59] = AddStaticVehicleEx(566, 1393.5209, 1352.1882, 10.7745, 90.0000, 30, 30, TIEMPO_RESPAWN, 1);
	LSPDveh[60] = AddStaticVehicleEx(445, 1393.5209, 1348.2877, 10.7745, 90.0000, 13, 13, TIEMPO_RESPAWN, 1);
	LSPDveh[61] = AddStaticVehicleEx(495, 1393.5209, 1344.1754, 11.1753, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[62] = AddStaticVehicleEx(420, 1346.4175, 1331.0402, 10.6686, 180.0000, 66, 66, TIEMPO_RESPAWN, 1);
	LSPDveh[63] = AddStaticVehicleEx(489, 1362.5896, 1331.0402, 10.9884, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[64] = AddStaticVehicleEx(477, 1358.4995, 1331.0402, 10.9884, 180.0000, 13, 13, TIEMPO_RESPAWN, 1);
	LSPDveh[65] = AddStaticVehicleEx(579, 1354.4902, 1331.0402, 10.9884, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[66] = AddStaticVehicleEx(579, 1350.1022, 1331.0402, 10.9884, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[67] = AddStaticVehicleEx(489, 1366.5452, 1331.0402, 10.9884, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[68] = AddStaticVehicleEx(507, 1342.1705, 1331.0402, 10.6686, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[69] = AddStaticVehicleEx(482, 1338.1208, 1331.0402, 10.8502, 180.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[70] = AddStaticVehicleEx(508, 1328.5302, 1324.4392, 11.1779, -90.0000, 1, 1, TIEMPO_RESPAWN, 1);
	LSPDveh[71] = AddStaticVehicleEx(585, 1328.2266, 1316.3375, 10.4837, -90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[72] = AddStaticVehicleEx(522, 1376.3729, 1344.8654, 10.4364, -81.3600, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[73] = AddStaticVehicleEx(586, 1376.6842, 1347.9485, 10.3691, -77.2200, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[74] = AddStaticVehicleEx(463, 1376.5704, 1352.4492, 10.3962, -76.5600, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[75] = AddStaticVehicleEx(510, 1378.6921, 1357.3370, 10.5291, -72.5400, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[76] = AddStaticVehicleEx(510, 1379.1122, 1355.1337, 10.5291, -72.5400, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[77] = AddStaticVehicleEx(560, 1393.5209, 1380.8099, 10.5718, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[78] = AddStaticVehicleEx(560, 1393.5209, 1376.8583, 10.5718, 90.0000, 0, 0, TIEMPO_RESPAWN, 1);

	LSPDveh[79] = AddStaticVehicleEx(426, 1370.6957, 1314.5313, 10.6259, 0.0000, 0, 0, TIEMPO_RESPAWN, 1);
	LSPDveh[80] = AddStaticVehicleEx(426, 1366.5883, 1314.5313, 10.6259, 0.0000, 11, 11, TIEMPO_RESPAWN, 1);
	LSPDveh[81] = AddStaticVehicleEx(426, 1362.2714, 1314.5313, 10.6259, 0.0000, 46, 46, TIEMPO_RESPAWN, 1);
	LSPDveh[82] = AddStaticVehicleEx(426, 1358.2545, 1314.5313, 10.6259, 0.0000, 79, 79, TIEMPO_RESPAWN, 1);

	LSPDveh[83] = AddStaticVehicleEx(405,1327.4279,1312.3633,10.7250,270.5696,0,0, TIEMPO_RESPAWN, 1); // senti
	LSPDveh[84] = AddStaticVehicleEx(405,1328.3868,1308.2397,10.7250,270.8725,3,3, TIEMPO_RESPAWN, 1); // senti
	LSPDveh[85] = AddStaticVehicleEx(405,1327.9038,1304.3726,10.7250,270.0938,0,0, TIEMPO_RESPAWN, 1); // tahoma
	LSPDveh[86] = AddStaticVehicleEx(405,1328.3838,1300.2413,10.7250,269.8973,53,53, TIEMPO_RESPAWN, 1); // tahoma
	LSPDveh[87] = AddStaticVehicleEx(442,1328.0280,1296.0385,10.6773,271.2502,1,1, TIEMPO_RESPAWN, 1); // romero
	LSPDveh[88] = AddStaticVehicleEx(475,1327.5637,1291.9736,10.6530,269.1989,109,109, TIEMPO_RESPAWN, 1); // sabre
	LSPDveh[89] = AddStaticVehicleEx(546,1327.7820,1287.8029,10.5743,270.4960,125,125, TIEMPO_RESPAWN, 1); // intruder
	LSPDveh[90] = AddStaticVehicleEx(438,1343.8795,1291.9799,10.8577,89.6966,6,6, TIEMPO_RESPAWN, 1); // cabbie
	LSPDveh[91] = AddStaticVehicleEx(400,1343.6310,1296.9088,10.9423,88.8985,119,118, TIEMPO_RESPAWN, 1); // landstalker

	for(new veh = 54; veh < 92; veh++) { SetVehicleVirtualWorld(LSPDveh[veh], 88); LinkVehicleToInterior(LSPDveh[veh], 12); }
	LSPDveh[92] = AddStaticVehicleEx(497, 1214.5895, -1799.3768, 33.7194, 0.0000, 0, 1, TIEMPO_RESPAWN); //Police Maverick
	LSPDveh[93] = AddStaticVehicleEx(497, 1231.0806, -1792.7971, 33.7783, 180.0000, 0, 1, TIEMPO_RESPAWN); //Police Maverick
	LSPDveh[94] = AddStaticVehicleEx(472, 947.2029, -1912.9249, 0.2126, 138.1800, -1, -1, TIEMPO_RESPAWN);//Unidades maritimas
	LSPDveh[95] = AddStaticVehicleEx(472, 2921.8674, -2042.7813, 0.9429, 270.0000, -1, -1, TIEMPO_RESPAWN);
	LSPDveh[96] = AddStaticVehicleEx(472, 1396.5685, -272.5795, 0.1750, 0.0000, -1, -1, TIEMPO_RESPAWN);
	LSPDveh[97] = AddStaticVehicleEx(472, 212.8019, 165.9864, 1.2852, 0.0000, -1, -1, TIEMPO_RESPAWN);
	LSPDveh[98] = AddStaticVehicleEx(472, -126.0968, -818.5525, 0.8088, 85.5600, -1, -1, TIEMPO_RESPAWN);
	LSPDveh[99] = AddStaticVehicleEx(431, -2024.6807, -95.6019, 35.2811, 90.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[100] = AddStaticVehicleEx(596, -2065.3718, -84.2396, 34.7285, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[102] = AddStaticVehicleEx(596, -2069.5476, -84.2396, 34.7285, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[103] = AddStaticVehicleEx(596, -2074.2070, -84.2396, 34.7285, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[104] = AddStaticVehicleEx(596, -2079.0852, -84.2396, 34.7285, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[105] = AddStaticVehicleEx(596, -2083.5698, -84.2396, 34.7285, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSPDveh[106] = AddStaticVehicleEx(402, 1278.8179, -1797.1603, 13.0920, 180.0000, 0, 0, TIEMPO_RESPAWN);	//u fast
	LSPDveh[107] = AddStaticVehicleEx(415, 1274.1954, -1796.5580, 13.1530, 180.0000, 0, 0, TIEMPO_RESPAWN);	//u fast
	LSPDveh[108] = AddStaticVehicleEx(461, 1269.6235, -1795.3441, 12.9713, 189.0000, 0, 0, TIEMPO_RESPAWN);	//u fast
	LSPDveh[109] = AddStaticVehicleEx(521, 1266.9594, -1795.2792, 12.9561, 186.7800, 0, 0, TIEMPO_RESPAWN);	//u fast

	//emergencias
	CreateDynamicObject(3928, 1161.71204, -1300.93469, 30.61580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 1160.65686, -1330.54211, 30.42221,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 1161.63867, -1320.49695, 30.49780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 1150.05762, -1297.78979, 12.57600,   0.00000, 0.00000, 90.00000);
	LSFDveh[0] = AddStaticVehicleEx(407, 1393.1803, 1380.7836, 11.0195, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[1] = AddStaticVehicleEx(407, 1393.1803, 1372.9232, 11.0195, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[2] = AddStaticVehicleEx(407, 1393.1803, 1364.7297, 11.0195, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[3] = AddStaticVehicleEx(416, 1392.5378, 1356.3860, 11.0096, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[4] = AddStaticVehicleEx(416, 1392.5378, 1344.2777, 11.0096, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[5] = AddStaticVehicleEx(416, 1392.5378, 1350.5831, 11.0096, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[6] = AddStaticVehicleEx(426, 1370.5942, 1330.7700, 10.5268, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSFDveh[7] = AddStaticVehicleEx(426, 1362.6306, 1330.7700, 10.5268, 180.0000, 1, 1, TIEMPO_RESPAWN);
	LSFDveh[8] = AddStaticVehicleEx(437, 1382.8456, 1389.1823, 10.8071, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[9] = AddStaticVehicleEx(455, 1328.4613, 1324.4144, 11.2976, -90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[10] = AddStaticVehicleEx(455, 1328.0283, 1316.1670, 11.2976, -90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[11] = AddStaticVehicleEx(490, 1327.7267, 1307.9625, 11.0044, -90.0000, 3, 3, TIEMPO_RESPAWN);
	LSFDveh[12] = AddStaticVehicleEx(525, 1327.8667, 1299.9789, 10.7307, -90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[13] = AddStaticVehicleEx(552, 1327.5967, 1288.1134, 10.5783, -90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[14] = AddStaticVehicleEx(552, 1327.6609, 1293.7810, 10.5783, -90.0000, 3, 1, TIEMPO_RESPAWN);
	for(new x = 0; x < 15; x++) { SetVehicleVirtualWorld(LSFDveh[x], 55); LinkVehicleToInterior(LSFDveh[x], 12); }
	LSFDveh[15] = AddStaticVehicleEx(487, 1160.9845, -1320.6510, 31.6778, -90.0000, 3, 3, TIEMPO_RESPAWN);
	LSFDveh[16] = AddStaticVehicleEx(563, 1159.7159, -1300.7007, 32.5494, 90.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[17] = AddStaticVehicleEx(511, 2004.5956, -2631.7437, 15.0017, 0.0000, 3, 1, TIEMPO_RESPAWN);
	LSFDveh[18] = AddStaticVehicleEx(473, 802.0201, -1901.8918, 0.4873, 180.0000, 3, 3, TIEMPO_RESPAWN);

	//san
	SANveh[0] = AddStaticVehicleEx(582, 738.9597, -1335.3448, 13.5650, 180.0000, 79, 0, TIEMPO_RESPAWN);
	SANveh[1] = AddStaticVehicleEx(582, 742.8975, -1335.6124, 13.5650, 180.0000, 79, 0, TIEMPO_RESPAWN);
	SANveh[2] = AddStaticVehicleEx(582, 746.9339, -1335.6832, 13.5650, 179.4000, 79, 0, TIEMPO_RESPAWN);
	SANveh[3] = AddStaticVehicleEx(582, 751.2432, -1335.6798, 13.5650, 179.4000, 79, 0, TIEMPO_RESPAWN);
	SANveh[4] = AddStaticVehicleEx(426, 755.6212, -1335.4259, 13.5650, 179.4000, 79, 0, TIEMPO_RESPAWN);
	SANveh[5] = AddStaticVehicleEx(579, 759.6477, -1335.7297, 13.5650, 179.4000, 79, 0, TIEMPO_RESPAWN);
	SANveh[6] = AddStaticVehicleEx(488, 743.9432, -1371.2987, 25.9211, 89.5514, 79, 0, TIEMPO_RESPAWN);
	SANveh[7] = AddStaticVehicleEx(431, 1546.9238, -1611.6027, 13.4909, 90.0000, 79, 0, TIEMPO_RESPAWN);

	//alcaldía
	ALSveh[0] = AddStaticVehicleEx(579, 1551.2499, -1387.2008, 13.9581, 180.0000, 1, 1, TIEMPO_RESPAWN);

	//sadoc
	SADOCveh[0] = AddStaticVehicleEx(431, 114.2668, 1437.2072, 10.5265, 180.0000, 32, 32, TIEMPO_RESPAWN, 1);
	SADOCveh[1] = AddStaticVehicleEx(482, 135.1581, 1431.1432, 10.7202, 90.0000, 32, 32, TIEMPO_RESPAWN, 1);
	SADOCveh[2] = AddStaticVehicleEx(482, 134.8558, 1427.3073, 10.7202, 90.0000, 32, 32, TIEMPO_RESPAWN, 1);
	SADOCveh[3] = AddStaticVehicleEx(597, 125.5866, 1438.4597, 10.4049, 180.0000, 32, 32, TIEMPO_RESPAWN);
	SADOCveh[4] = AddStaticVehicleEx(597, 120.8633, 1438.2903, 10.4049, 180.0000, 32, 32, TIEMPO_RESPAWN);

	//--- limite 111 vehículos

	//granjero
	for(new x = 0; x < 15; x++)
	{
		Granjero_Veh[x] = AddStaticVehicleEx(531, -378.6338, -1447.3992, 25.7867, 0.0000, 44, 44, 100);
		SetVehicleVirtualWorld(Granjero_Veh[x], Granjero_Veh[x]);
	}
	//pescador
	Pescador_Veh[0] = AddStaticVehicleEx(453, 2943.2183, -1565.9127, 1.5254, -101.2200, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[1] = AddStaticVehicleEx(453, 2940.4880, -1576.4822, 1.5254, -101.1000, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[2] = AddStaticVehicleEx(453, 2938.3240, -1587.0587, 1.5254, -100.8600, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[3] = AddStaticVehicleEx(453, 2934.9866, -1598.3455, 1.5254, -106.6800, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[4] = AddStaticVehicleEx(453, 2931.3887, -1609.6906, 1.5254, -104.6400, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[5] = AddStaticVehicleEx(453, 2928.5098, -1620.9264, 1.5254, -104.6400, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[6] = AddStaticVehicleEx(453, 2926.2664, -1630.4517, 1.5254, -104.6400, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[7] = AddStaticVehicleEx(453, 2966.3069, -1559.1631, 1.5254, -101.2200, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[8] = AddStaticVehicleEx(453, 2968.0515, -1549.0406, 1.5254, -101.2200, 1, 6, TIEMPO_RESPAWN);
	Pescador_Veh[9] = AddStaticVehicleEx(453, 2969.3870, -1539.1044, 1.5254, -101.2200, 1, 6, TIEMPO_RESPAWN);
	for(new x = 0; x < 10; x++) { SetVehicleVirtualWorld(Pescador_Veh[x], Pescador_Veh[x]); }

	//--- limite 137 vehículos

		//-cochesrenta
	coche_renta[0] = AddStaticVehicleEx(492, 1653.3070, -2314.1567, -3.0748, -90.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[1] = AddStaticVehicleEx(492, 1581.5728, -2289.9690, -3.2184, 180.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[2] = AddStaticVehicleEx(492, 1671.3306, -2259.4407, -3.1161, 90.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[3] = AddStaticVehicleEx(492, 1560.4130, -2260.9158, 13.2304, 90.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[4] = AddStaticVehicleEx(492, 1560.2736, -2254.1787, 13.2304, 90.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[5] = AddStaticVehicleEx(492, 1560.3474, -2247.8167, 13.2304, 90.0000, 0, 0, TIEMPO_RESPAWN);
	coche_renta[6] = AddStaticVehicleEx(492, 1560.4640, -2241.1846, 13.2304, 90.0000, 0, 0, TIEMPO_RESPAWN);

	for(new x = 0; x < 149; x++) { random_veh[x] = x; }

    CargarConcesionarias();
    CargarVehUsados();
    VariablesVeh(); //- Variables de vehículos
    CargarEmpresas();
    CargarVehiculos();

	//Leñador arboles
	area_lenador = CreateDynamicSphere(-554.0010, -1496.7751, 9.4138, 50.0, 0, 0);
	for(new i = 0; i != sizeof i_Lenador; i ++)
	{
		i_Lenador[i][l_objeto_id] = CreateDynamicObject(i_Lenador[i][l_modelo], i_Lenador[i][l_posicionX], i_Lenador[i][l_posicionY], i_Lenador[i][l_posicionZ], i_Lenador[i][l_posicionRX], i_Lenador[i][l_posicionRY], i_Lenador[i][l_posicionRZ], 0, 0);
		i_Lenador[i][l_3dlabel] = CreateDynamic3DTextLabel("\n\nPulsa {90C3D4}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.", 0xFFFFFFFF, i_Lenador[i][l_posicionX], i_Lenador[i][l_posicionY], i_Lenador[i][l_posicionZ] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}

	//Leñador
	CreateDynamicPickup(19793, 1, -554.0010, -1496.7751, 9.4138, 0, 0);
	CreateDynamic3DTextLabel("Escribe {90C3D4}/talar{FFFFFF}\npara comenzar o terminar", 0xFFFFFFFF, -554.0010, -1496.7751, 9.4138, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//sistema de licencias
	CreateDynamicObject(4641, 704.55835, -1696.51074, 4.11927,   0.00000, 0.00000, 90.00000); //botes obj 1
	CreateDynamicObject(1291, 1772.66724, -2432.35034, 13.05227,   0.00000, 0.00000, 0.00000); //aviones obj 2
	CreateDynamicObject(638, 1764.14087, -2432.01807, 13.15660,   0.00000, 0.00000, -90.00000); //aviones obj 2
	for(new l, ls = sizeof(LicensesPoint); l < ls; l++)
	{
		_MapIcon(LicensesPoint[l][licenseX], LicensesPoint[l][licenseY], LicensesPoint[l][licenseZ], 53);
		CreateDynamicPickup(1581, 1, LicensesPoint[l][licenseX], LicensesPoint[l][licenseY], LicensesPoint[l][licenseZ], 0, 0);
		CreateDynamic3DTextLabel("Escribe {90C3D4}/licencia{FFFFFF}", 0xFFFFFFFF, LicensesPoint[l][licenseX], LicensesPoint[l][licenseY], LicensesPoint[l][licenseZ], 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}
    //» 3D Label's

	//> concesionarias
	_MapIcon(8727.8135,14170.5762,6.5043, 55);	//  *   Motos
	_MapIcon(8683.3047,14367.3936,6.6591, 55); 	// 	*   Clase M
	_MapIcon(555.2177, -1438.9354, 15.7073, 55); 	//	*	Clase A
	_MapIcon(942.8696, -1418.1125, 13.5469, 55);	//	*	Camionetas
	_MapIcon(2006.0568, -2271.4482, 13.5344, 5);	//	*	aviones
	_MapIcon(2770.6709, -1628.4618, 12.1775, 55);	//  *   Clase B
	_MapIcon(-63.0295, -1121.5996, 1.1733, 55);		//	*	coches usados
	_MapIcon(354.5555, -2055.0317, 7.8399, 55);		//	*	barcos
	CreateDynamicPickup(1274, 1, 8727.8135,14170.5762,6.5043); 	//	*	Motos
	CreateDynamicPickup(1274, 1, 8683.3047,14367.3936,6.6591); 	//	*	Clase M
	CreateDynamicPickup(1274, 1, 555.2177, -1438.9354, 15.7073); 	//	*	Clase A
	CreateDynamicPickup(1274, 1, 942.8696, -1418.1125, 13.5469); 	//	*	Camionetas
	CreateDynamicPickup(1274, 1, 2006.0568, -2271.4482, 13.5344);	//	*	aviones
	CreateDynamicPickup(1274, 1, 2770.6709, -1628.4618, 12.1775);	//  *   Clase B
	CreateDynamicPickup(1274, 1, -63.0295, -1121.5996, 1.1733);		//	*	coches usados
	CreateDynamicPickup(1274, 1, 354.5555, -2055.0317, 7.8399);		//	*	barcos
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 8727.8135,14170.5762,6.5043, 7.5);	//  *   Motos
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 8683.3047,14367.3936,6.6591, 7.5); 	//	*	Clase M
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 555.2177, -1438.9354, 15.7073, 7.5); 	//	*	Clase A
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 942.8696, -1418.1125, 13.5469, 7.5); 	//	*	Camionetas
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 2006.0568, -2271.4482, 13.5344, 7.5);	//	*	aviones
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 2770.6709, -1628.4618, 12.1775, 7.5);	//  *	Clase B
	CreateDynamic3DTextLabel("(/catalogo)\n{ffffff}(/venderveh)", 0xffff00ff, -63.0295, -1121.5996, 1.1733, 7.5); //coches usados
	CreateDynamic3DTextLabel("(/catalogo)", 0xffff00ff, 354.5555, -2055.0317, 7.8399, 7.5);		//	*	barcos

		//talleres dinámicos
	CreateDynamicPickup(1239, 1, 720.4227, -465.2718, 16.3359);
	CreateDynamicPickup(1239, 1, 1025.0483, -1031.6508, 31.9656);
	CreateDynamicPickup(1239, 1, -1904.5531, 276.1320, 41.0469);
	CreateDynamicPickup(1239, 1, -2713.8391, 216.8167, 4.2731);
	CreateDynamicPickup(1239, 1, 2386.7439, 1040.9083, 10.8203);
	CreateDynamicPickup(1239, 1, 2072.9839, -1831.3838, 13.5455);
	_MapIcon(720.4227, -465.2718, 16.3359, 63);
	_MapIcon(1025.0483, -1031.6508, 31.9656, 63);
	_MapIcon(-1904.5531, 276.1320, 41.0469, 63);
	_MapIcon(-2713.8391, 216.8167, 4.2731, 63);
	_MapIcon(2386.7439, 1040.9083, 10.8203, 63);
	_MapIcon(2072.9839, -1831.3838, 13.5455, 63);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, 720.4227, -465.2718, 16.3359, 10.0);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, 1025.0483, -1031.6508, 31.9656, 10.0);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, -1904.5531, 276.1320, 41.0469, 10.0);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, -2713.8391, 216.8167, 4.2731, 10.0);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, 2386.7439, 1040.9083, 10.8203, 10.0);
	CreateDynamic3DTextLabel("({ffff00}/taller{FFFFFF})", 0xffffffff, 2072.9839, -1831.3838, 13.5455, 10.0);

	//> Policía
	CreateDynamic3DTextLabel("(/tallerpd)",											0xffffffff, 1360.0743, 1371.0730, 10.8500, 	8.0, .testlos = true, .worldid = 77, .interiorid = 12);
	CreateDynamic3DTextLabel("(/tallerpd)",											0xffffffff, 1360.0743, 1371.0730, 10.8500, 	8.0, .testlos = true, .worldid = 88, .interiorid = 12);
	CreateDynamic3DTextLabel("(/tallerfd)",											0xffffffff, 1360.0743, 1371.0730, 10.8500, 	8.0, .testlos = true, .worldid = 55, .interiorid = 12);
	CreateDynamic3DTextLabel("Para incautar los objetos\nEscribe {90C3D4}/borrar",	0xffffffff, 866.7289, 2294.6890, 1910.3156, 8.0);
	CreateDynamicPickup(1366, 1, 1360.0743, 1371.0730, 10.8500, -1, 12); // /tallerpd - /tallerfd
	CreateDynamicPickup(1239, 1, 866.7289, 2294.6890, 1910.3156); // /borrar

	for(new i=0, t=200; i < t; i++)
	{
		cartel[i] = Create3DTextLabel("cartelito", -1, -1266.9980, 44.1900, 32.9023, 1.0, i+666, 1);
	}
	for(new i=0, t=250; i < t; i++)
	{
		TextCallSign[i] = Create3DTextLabel("vehid", -1, -1178.1569, 58.9069, 1.9609, 40.0, i, 1+777);
	}
	CreateObject(18981, -26.91166, -49.80461, 1002.02673,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 1206.78113, -31.13935, 999.44775,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 1208.00977, -3.92006, 999.41504,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 955.05048, -52.20440, 999.61029,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 291.60226, -106.83201, 1000.00800,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 372.38263, -124.51276, 999.93073,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 368.65411, -68.82710, 1000.00586,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 314.96454, -134.97142, 998.08435,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 501.80670, -73.90924, 997.24347,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 208.89661, -103.65580, 1003.61786,   0.00000, 90.00000, 90.00000);
	CreateObject(18981, 163.10716, -91.74467, 1000.28247,   0.00000, 90.00000, 90.00000);

     //-comandos
    CreateDynamic3DTextLabel("(/tomar)", 					0xffffffff, 149.6309, -185.1440, 342.8410, 8.0); // /tomar en la prisión federal
    CreateDynamic3DTextLabel("(/computador)", 				0xffffffff, 861.3701, 2306.4800, 1910.4048, 8.0);
    CreateDynamic3DTextLabel("(/computador)", 				0xffffffff, 338.6380,857.9088,1004.4059, 10.0, -1, 0, 1, -1, 41); //computador pf
    CreateDynamic3DTextLabel("(/banco)", 					0xffffffff, -1539.4642,321.0930,53.5363, 8.0);
    CreateDynamic3DTextLabel("(/banco)", 					0xffffffff, 2311.9250,-13.7656,26.7422, 8.0); //pueblos
    CreateDynamic3DTextLabel("(/mercado)", 					0xffffffff, 2119.1084, -2001.5844, 8.0257, 4.0);
    CreateDynamic3DTextLabel("(/directo)", 					0xffffffff, 255.5458, 1762.5281, 701.0929, 8.0);
    CreateDynamic3DTextLabel("(/practicar)", 				0xffffffff, 767.6719, 13.6320, 1000.7010, 8.0);
    CreateDynamic3DTextLabel("(/practicar)", 				0xffffffff, 765.7796,-24.0472,1000.5859, 8.0);
    CreateDynamic3DTextLabel("(/practicar)", 				0xffffffff, 774.7818,-62.6608,1000.7184, 8.0);
    CreateDynamic3DTextLabel("(/pagarmulta)", 				0xffffffff, 862.3019, 2334.1997, 1910.4048, 8.0); // LSPD
    CreateDynamic3DTextLabel("(/ayuntamiento)", 			0xffffffff, 361.8402, 173.5364, 1008.3828, 8.0); // Ayuntamiento

	CreateDynamic3DTextLabel("Enfermería\n{ffffff}(/curarme)", C_ROJO, -197.6426, -1760.8300, 675.7021, 8.0); // /curarme

    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, 322.5535,862.3134,1000.9999, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 44); // Equipo SADOC
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, -429.4801, 688.3015, 3853.0627, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Equipo Policía
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, 256.1008, 1779.5509, 701.0867, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // SAN LS
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, -208.5554, -1737.9666, 675.7973, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Equipo LSFD
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, 874.8904, 2295.0615, 1910.4546, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Equipo LSPD
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, 1021.5993, 2088.3018, -94.2204, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Equipo DIC

    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, -196.9528, -1752.3590, 675.7817, 8.0);
    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, 858.4502, 2316.3831, 1910.4048, 8.0);
    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, 374.3038,186.4248,1014.1875, 8.0);

     //- Comandos de facciones
    CreateDynamic3DTextLabel("(/arrestar)",					0xFFFF00FF, 261.7050, 1988.9712, 17.6406, 8.0); // Arresto Prisión federal
    CreateDynamic3DTextLabel("(/arrestar)",					0xFFFF00FF, 897.6996, 2279.0515, 1910.4048, 8.0); // Arresto LSPD Interior
	CreateDynamic3DTextLabel("(/arrestarf)", 				0xFFFF00FF, 364.5627, 819.0615,1000.9888, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 48);

     //- /empleo
    CreateDynamic3DTextLabel("Carguero\n{ffffff}(/trabajar o /trabajar2)",						0xE7D800FF, 2468.5474, -2116.8491, 13.4846, 10);
    CreateDynamic3DTextLabel("Carpintero\n{ffffff}(/trabajar o /trabajar2)",					0xE7D800FF, 2080.4480,-2355.2971,13.5469, 10);
    CreateDynamic3DTextLabel("Delincuente\n{ffffff}(/trabajar o /trabajar2)",					0xE7D800FF, 8512.2188,13940.5342,4.9182, 10);
	CreateDynamic3DTextLabel("Ladrón de coches\n{ffffff}(/trabajar o /trabajar2)",				0xE7D800FF, 8756.8242,14228.8154,7.4378, 10);
	CreateDynamic3DTextLabel("Pescador\n{ffffff}(/trabajar o /trabajar2)\n(/puerto)",			0xE7D800FF, 8571.8350, 14494.7344, 5.7692, 10);
    CreateDynamic3DTextLabel("Leñador\n{ffffff}(/trabajar o /trabajar2)",						0xE7D800FF, -566.1776, -1496.1948, 9.4454, 10);
    CreateDynamic3DTextLabel("Granjero\n{ffffff}(/trabajar o /trabajar2)\n(/vendercosecha)",	0xE7D800FF, -383.0549, -1438.9514, 26.3276, 10);
	//- /ropaescuela
	CreateDynamic3DTextLabel("Tienda del colegio\n{ffffff}(/ropaescuela)\n(/ropaescuela2)",		0xE7D800FF, 7639.6514, 13933.5459, 1001.0056, 10);
	// - /tomarbus
	CreateDynamic3DTextLabel("Parada de bus\n{ffffff}(/tomarbus)",								0xE7D800FF, 8647.1846, 14746.0244, 23.1869, 10);
	CreateDynamic3DTextLabel("Parada de bus\n{ffffff}(/tomarbus)",								0xE7D800FF, 8836.5840, 14202.1211, 6.9101, 10);
     //- Premium/Vip
	CreateDynamic3DTextLabel("Casillero premium\n{ffffff}(/casillero)", C_VIP, -2301.9307,174.2739,35.3407, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 22, 5);
	CreateDynamic3DTextLabel("Accesorios premium\n{ffffff}(/prendas)", C_VIP, -2304.5933,170.7388,35.3407, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 22, 5);

	//» MapIcon's

	_MapIcon(1257.3170,241.8207,19.9111, 23); // club motg
	_MapIcon(2419.7034,-1509.0748,24.0000, 14); // cluckin bell
	_MapIcon(1456.3093,-1137.7604,23.9488, 45); // ropazip
	_MapIcon(1396.8842,-1569.7557,14.2670, 49); // bar strip
	_MapIcon(2070.6338,-1793.8966,13.5469, 7); // peluqueria frente pizzeria
	_MapIcon(1567.9646,-1897.9996,13.5609, 50); // restaurante tipo lc
	_MapIcon(1315.4746,-897.6888,39.5781, 17); // 24-vinewood
	_MapIcon(1971.3170,-1283.2708,23.9844, 17); // 24-7
	_MapIcon(204.0190,-201.9656,1.5781, 29); // pizzeria blue
	_MapIcon(1836.7097,-1682.2950,13.3366, 48); // alhambra

	//» Jobs
	_MapIcon(2468.5474, -2116.8491, 13.4846, 42); // Trabajo Carguero
	_MapIcon(2080.4480,-2355.2971,13.5469, 42); // Trabajo Carpintero
	_MapIcon(8571.8350, 14494.7344, 5.7692, 9); // Trabajo Pescador
	_MapIcon(-566.1776, -1496.1948, 9.4454, 42); // Trabajo Leñador
	_MapIcon(-383.0549, -1438.9514, 26.3276, 42); // Trabajo Granjero

	//TALLERES
	CreateObject(19534, 2068.57642, -1828.59570, 4.15020,   0.00000, 0.00000, 180.00000);  //idlewood
	CreateObject(19534, 2387.11060, 1047.78955, 0.28001,   0.00000, 0.00000, 0.00000); //lv transfer
	CreateObject(19534, -1904.75293, 283.13306, 27.04520,   0.00000, 0.00000, 0.00000); // sf1
	CreateObject(19534, -2722.82275, 217.61871, -10.17228,   0.00000, 0.00000, 0.00000); //sf2
	CreateObject(19534, 1025.42505, -1023.89569, 23.51535,   0.00000, 0.00000, 0.00000); // vinewood
	CreateObject(19534, 719.41412, -458.02344, 6.72480,   0.00000, 0.00000, 0.00000); // dillimore





	//» Mapeos
	//chinatown
	new g_Object[38];
	g_Object[0] = CreateDynamicObject(1568, 1444.5517, -1334.5893, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[1] = CreateDynamicObject(1568, 1444.5517, -1323.0854, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[2] = CreateDynamicObject(1568, 1426.7851, -1323.0854, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[3] = CreateDynamicObject(1568, 1427.5653, -1334.5196, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[4] = CreateDynamicObject(1568, 1425.5551, -1355.7202, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[5] = CreateDynamicObject(1568, 1418.7152, -1355.7202, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[6] = CreateDynamicObject(9482, 1442.4582, -1328.8431, 17.9705, 0.0000, 0.0000, 0.0000); //chinagate
	g_Object[7] = CreateDynamicObject(9494, 1402.0043, -1316.8404, 22.7943, 0.0000, 0.0000, 0.0000); //tempbuild_sfw41
	g_Object[8] = CreateDynamicObject(9494, 1400.9666, -1359.5705, 17.2543, 0.0000, 0.0000, -90.0000); //tempbuild_sfw41
	g_Object[9] = CreateDynamicObject(1568, 1425.9246, -1291.9047, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[10] = CreateDynamicObject(1568, 1425.9246, -1342.7275, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[11] = CreateDynamicObject(1568, 1425.9246, -1310.3765, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[12] = CreateDynamicObject(1568, 1403.7242, -1299.4666, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[13] = CreateDynamicObject(1498, 1417.3889, -1347.5438, 12.5033, 0.0000, 0.0000, 90.0000); //Gen_doorEXT03
	g_Object[14] = CreateDynamicObject(1568, 1421.2145, -1285.0666, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[15] = CreateDynamicObject(1568, 1421.2145, -1268.1762, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[16] = CreateDynamicObject(3061, 1417.1260, -1308.4968, 13.7514, 0.0000, 0.0000, 0.0000); //ad_flatdoor
	g_Object[17] = CreateDynamicObject(19860, 1417.4150, -1351.0114, 13.8202, 0.0000, 0.0000, 90.0000); //MIHouse1Door4
	g_Object[18] = CreateDynamicObject(1535, 1417.4014, -1354.4863, 12.5988, 0.0000, 0.0000, 90.0000); //Gen_doorEXT14
	g_Object[19] = CreateDynamicObject(1568, 1436.3914, -1323.0854, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[20] = CreateDynamicObject(1342, 1422.6672, -1294.3464, 13.6144, 0.0000, 0.0000, 0.0000); //noodlecart_prop
	g_Object[21] = CreateDynamicObject(1342, 1431.3181, -1324.8480, 13.6144, 0.0000, 0.0000, 90.0000); //noodlecart_prop
	g_Object[22] = CreateDynamicObject(1568, 1436.3914, -1334.4564, 12.4134, 0.0000, 0.0000, 0.0000); //chinalamp_sf
	g_Object[23] = CreateDynamicObject(2957, 1426.3985, -1316.0249, 14.1750, 0.0000, 0.0000, 90.0000); //chinaTgarageDoor
	g_Object[24] = CreateDynamicObject(1498, 1426.3680, -1320.9034, 12.5033, 0.0000, 0.0000, 90.0000); //Gen_doorEXT03
	g_Object[25] = CreateDynamicObject(1570, 1424.4897, -1337.5632, 13.8457, 0.0000, 0.0000, -125.0000); //CJ_NOODLE_3
	g_Object[26] = CreateDynamicObject(3038, 1422.5240, -1321.0598, 19.1293, 0.0000, 0.0000, 90.0000); //ct_lanterns
	g_Object[27] = CreateDynamicObject(3038, 1421.9534, -1301.2703, 19.1293, 0.0000, 0.0000, 90.0000); //ct_lanterns
	g_Object[28] = CreateDynamicObject(2955, 1418.5828, -1357.7143, 13.7816, 0.0000, 0.0000, 90.0000); //imy_compin
	g_Object[29] = CreateDynamicObject(3038, 1411.0335, -1298.6904, 19.1293, 0.0000, 0.0000, 0.0000); //ct_lanterns
	g_Object[30] = CreateDynamicObject(3038, 1419.4737, -1277.1197, 19.1293, 0.0000, 0.0000, 90.0000); //ct_lanterns
	g_Object[31] = CreateDynamicObject(2955, 1424.1535, -1357.7143, 13.7816, 0.0000, 0.0000, 90.0000); //imy_compin
	g_Object[32] = CreateDynamicObject(2955, 1421.2735, -1357.7143, 13.7816, 0.0000, 0.0000, 90.0000); //imy_compin
	g_Object[33] = CreateDynamicObject(2959, 1427.2835, -1354.1700, 12.5636, 0.0000, 0.0000, 0.0000); //rider1_door
	g_Object[34] = CreateDynamicObject(2957, 1427.2233, -1349.9709, 14.2024, 0.0000, 0.0000, 90.0000); //chinaTgarageDoor
	g_Object[35] = CreateDynamicObject(1346, 1417.9960, -1304.0522, 13.8752, 0.0000, 0.0000, 90.0000); //CJ_PHONE_KIOSK2
	g_Object[36] = CreateDynamicObject(19377, 1407.0206, -1376.9256, 6.8359, 0.0000, 0.0000, 90.0000); //wall025
	g_Object[37] = CreateDynamicObject(19377, 1416.5910, -1376.9256, 6.8359, 0.0000, 0.0000, 90.0000); //wall025

   //apartamento playa / 40 objetos
    CreateDynamicObject(18755, 287.94241, -1609.34106, 18.75534,   0.00000, 0.00000, 80.00000);//estacionamiento

	CreateDynamicObject(18757, 287.94241, -1609.34106, 33.82510,   0.00000, 0.00000, 80.00000);//planta baja
	CreateDynamicObject(18756, 287.94241, -1609.34106, 33.82510,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 33.82510,   0.00000, 0.00000, 80.00000);

	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342,   0.00000, 0.00000, 80.00000);//piso 1
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342,   0.00000, 0.00000, 80.00000);

	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*1),   0.00000, 0.00000, 80.00000);//piso 2
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*1),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*1),   0.00000, 0.00000, 80.00000);

	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*2),   0.00000, 0.00000, 80.00000);//piso 3
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*2),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*2),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*3),   0.00000, 0.00000, 80.00000);//piso 4
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*3),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*3),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*4),   0.00000, 0.00000, 80.00000);//piso 5
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*4),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*4),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*5),   0.00000, 0.00000, 80.00000);//piso 6
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*5),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*5),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*6),   0.00000, 0.00000, 80.00000);//piso 7
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*6),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*6),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*7),   0.00000, 0.00000, 80.00000);//piso 8
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*7),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*7),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*8),   0.00000, 0.00000, 80.00000);//piso 9
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*8),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*8),   0.00000, 0.00000, 80.00000);
	

	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*9),   0.00000, 0.00000, 80.00000);//piso 10
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*9),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*9),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*10),   0.00000, 0.00000, 80.00000);//piso 11
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*10),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*10),   0.00000, 0.00000, 80.00000);


	CreateDynamicObject(18757, 287.94241, -1609.34106, 47.87342 + (4.4723*11),   0.00000, 0.00000, 80.00000);//piso 12
	CreateDynamicObject(18756, 287.94241, -1609.34106, 47.87342 + (4.4723*11),   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(18755, 287.94241, -1609.34106, 47.87342 + (4.4723*11),   0.00000, 0.00000, 80.00000);

	//int hotel
	CreateObject(9321, 970.16986, -53.51535, 1000.92651,   90.00000, 0.00000, 0.00000, 500.0);
	CreateObject(1498, 967.48157, -53.95238, 1000.09119,   0.00000, 0.00000, 90.00000, 500.0);
	//

    //pressban /entrenar
	CreateDynamicObject(2629, 773.91681, 5.12037, 999.67188,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2631, 769.71997, 3.54693, 999.71796,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2629, 762.90918, -48.24812, 999.67188,   0.00000, 0.00000, 180.00000);

    //barco
	CreateDynamicObjectEx(10230, 466.38925, -2278.12646, 7.26340,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(10229, 466.14594, -2279.55200, 6.09502,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(10231, 465.49142, -2279.64209, 8.71050,   0.00000, 0.00000, 0.00010, 1000.000, 1000.000);
	CreateDynamicObjectEx(944, 422.26212, -2288.88159, 8.43725,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(944, 425.62692, -2274.62720, 8.43725,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(2669, 410.59723, -2279.47168, 8.85999,   0.00000, 0.00000, 90.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(17055, 425.75806, -2279.55957, 9.88689,   0.00000, 0.00000, 91.71890, 1000.000, 1000.000);
	CreateDynamicObjectEx(3565, 514.91797, -2279.83472, 11.45665,   0.00000, 0.00000, 90.00000, 1000.000, 1000.000);

    //mapeo de market
	CreateDynamicObject(19381, 1134.01563, -1380.30505, 13.20000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1134.44995, -1385.04895, 11.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1123.51404, -1380.30505, 13.20000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1113.01196, -1380.30505, 13.20000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1102.51196, -1380.30505, 13.20000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1124.81555, -1385.04895, 11.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19463, 1115.18152, -1385.06897, 11.56000,   0.00000, 0.00000, 90.25000);
	CreateDynamicObject(19463, 1105.54797, -1385.15503, 11.56000,   0.00000, 0.00000, 90.75000);
	CreateDynamicObject(19381, 1102.51196, -1380.38513, 13.20200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1102.02710, -1385.18896, 11.56300,   0.00000, 0.00000, 90.75000);
	CreateDynamicObject(19463, 1097.27100, -1380.50452, 11.56000,   0.00000, 0.00000, 0.01000);
	CreateDynamicObject(19463, 1102.02710, -1375.49048, 11.56300,   0.00000, 0.00000, 89.91001);
	CreateDynamicObject(19463, 1097.26831, -1380.21106, 11.55900,   0.00000, 0.00000, 0.01000);
	CreateDynamicObject(19463, 1105.54797, -1375.49048, 11.56000,   0.00000, 0.00000, 89.79002);
	CreateDynamicObject(19463, 1115.18152, -1375.49048, 11.56000,   0.00000, 0.00000, 90.25000);
	CreateDynamicObject(19463, 1124.81555, -1375.49048, 11.56000,   0.00000, 0.00000, 89.76001);
	CreateDynamicObject(19463, 1134.44995, -1375.49048, 11.56000,   0.00000, 0.00000, 90.23999);
	CreateDynamicObject(19463, 1139.18933, -1380.20898, 11.55900,   0.00000, 0.00000, -0.11000);
	CreateDynamicObject(673, 1122.88867, -1380.26892, 12.72760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1112.61365, -1380.26892, 12.72760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1102.86279, -1380.26599, 12.72760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1125.37744, -1380.47229, 13.65720,   0.00000, 0.00000, 180.77998);
	CreateDynamicObject(1281, 1108.33020, -1380.40723, 14.11802,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(1281, 1099.79504, -1380.48987, 14.11802,   0.00000, 0.00000, 106.14001);
	CreateDynamicObject(869, 1112.63599, -1380.49121, 13.72112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1103.37537, -1380.12427, 13.72112,   0.00000, 0.00000, 22.86000);
	CreateDynamicObject(869, 1122.94226, -1380.43726, 13.72112,   0.00000, 0.00000, 4.14000);
	CreateDynamicObject(1280, 1120.43518, -1380.38330, 13.65720,   0.00000, 0.00000, 361.73996);
	CreateDynamicObject(1280, 1114.97534, -1380.54028, 13.65720,   0.00000, 0.00000, 541.98004);
	CreateDynamicObject(1297, 1149.11707, -1384.92615, 16.21106,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1149.28625, -1382.48804, 11.07460,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1378.48804, 11.06660,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1374.48804, 11.05660,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1370.48804, 11.03060,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1366.48804, 11.00460,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(1297, 1149.11707, -1365.71814, 16.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1149.28625, -1362.48804, 10.97860,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1357.98804, 10.95860,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1353.98804, 10.95460,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1349.98804, 10.95460,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(19449, 1149.28625, -1346.11401, 10.94860,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(1297, 1149.11707, -1346.23499, 16.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 1152.07959, -1345.52856, 12.72770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 1146.90417, -1345.52856, 12.72770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 1141.72400, -1345.52856, 12.72770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 1139.85681, -1347.41064, 12.93900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19976, 1139.19995, -1385.08093, 12.78210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1091.58459, -1380.86890, 13.29451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19968, 1097.27502, -1385.27820, 12.78210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1091.56396, -1385.20972, 13.29450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1091.60608, -1383.04578, 13.27933,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1342, 1084.38806, -1384.17920, 13.79136,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1341, 1118.94666, -1384.18884, 14.15931,   0.00000, 0.00000, -102.29997);

    //joyería
	CreateObject(19376, -1754.01843, 789.06042, 106.59850,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, -1754.01843, 779.43799, 106.59850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1748.79395, 779.51123, 108.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1759.32166, 779.59027, 108.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1759.31897, 789.12848, 108.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1748.79395, 789.14447, 108.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1753.58423, 793.94250, 108.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1763.15796, 793.94751, 108.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1753.58423, 774.95099, 108.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1763.15796, 774.95502, 108.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2623, -1753.90308, 792.49792, 108.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18066, -1757.51611, 775.05890, 109.60040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, -1758.26318, 774.98621, 106.67000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2656, -1749.28699, 775.02228, 108.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, -1753.95764, 781.52264, 110.32019,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, -1756.24731, 793.56873, 109.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2700, -1751.64087, 793.56873, 109.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2413, -1749.20728, 788.76538, 106.68330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2413, -1749.20728, 785.68549, 106.68330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2413, -1749.20728, 782.34149, 106.68330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2885, -1753.95764, 788.14948, 110.32020,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, -1753.95764, 794.82813, 110.32020,   270.00000, 0.00000, 0.00000);

	//arreglo bug del bar dillimore
	CreateDynamicObject(5020,681.7000000,-447.5000000,-26.7000000,0.0000000,270.0000000,0.0000000); //object(mul_las) (1)
	CreateDynamicObject(5020,680.3500000,-447.5000000,-24.9000000,0.0000000,0.0000000,0.0000000); //object(mul_las) (2)
	CreateDynamicObject(5020,682.6700000,-447.5000000,-24.6000000,0.0000000,0.0000000,0.0000000); //object(mul_las) (3)
	CreateDynamicObject(2952,680.4000000,-443.7000000,-26.6000000,0.0000000,0.0000000,90.0000000); //object(kmb_gimpdoor) (1)

	//stake park
	CreateDynamicObjectEx(1533, 1972.02844, -1283.80896, 22.96500,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);

	//tienda electronica
	CreateObject(18030, 166.44530, -126.83040, 1003.17188,   0.00000, 0.00000, 0.00000);
	CreateObject(18981, 158.07600, -125.91470, 1000.30078,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1500, 160.62500, -140.81329, 1000.79688,   0.00000, 0.00000, 0.00000);

	CreateDynamicObject(2708, 183.30757, -131.79614, 1000.89880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2708, 183.31946, -132.17169, 1000.89880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18070, 161.35941, -123.72800, 1001.30469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1514, 162.77341, -125.44340, 1002.05469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1514, 159.75780, -125.44340, 1002.05469,   0.00000, 0.00000, 0.00000);
	//ex
	CreateDynamicObject(2708, 183.31508, -88.59669, 1000.94312,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(2708, 183.31287, -88.98791, 1000.94312,   0.00000, 0.00000, 89.64000);
	//alhambra
	CreateObject(18018, 520.21527, 137.98230, 999.67188,   0.00000, 0.00000, 0.00000);
	CreateObject(18981, 523.41290, 138.30080, 999.16406,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1537, 521.71301, 148.39000, 999.70313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1533, 518.70001, 148.39000, 999.70313,   0.00000, 0.00000, 0.00000);

	CreateObject(19354, 284.64401, -224.47360, 348.16980,   0.00000, 90.00000, 0.00000);
	CreateObject(19354, 293.43405, -204.97743, 348.18008,   0.00000, 90.00000, 0.00000);
	CreateObject(19354, 143.66335, -193.34804, 341.77750,   0.00000, 90.00000, 0.00000);

	map_prison();
    cargar_maps(); //- Carga include 'Mapeos.inc'
	//empresas
		//-reparto
    CreateDynamicObject(14603, 1034.68127, 1208.28601, 11.63000,   0.00000, 0.00000, -0.60000, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14634, 1034.58569, 1204.05798, 11.39215,   0.00000, 0.00000, 0.00000, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(1498, 1032.97229, 1203.60840, 9.84541,   0.00000, 0.00000, 0.00000, -1, 15, -1, MAX_RADIO_STREAM);
		//-mecánica
	CreateDynamicObject(9163, 1907.59485, -2195.51465, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1882.99207, -2169.05371, 16.43989,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1906.17517, -2215.52441, 16.43990,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36292, -2234.03174, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1894.82471, -2226.88037, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1881.37219, -2230.20947, 16.43989,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1886.42371, -2216.12378, 14.51643,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);

	CreateDynamicObject(9163, 1907.59485, -2195.51465, 16.43990,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21741, -2170.90088, 16.43989,   0.00000, 0.00000, -90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21765, -2217.66650, 16.43989,   0.00000, 0.00000, -90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1893.08325, -2209.00879, 14.51640,   0.00000, 0.00000, 90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);

	CreateDynamicObject(9163, 1899.88818, -2194.00977, 16.43990,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21741, -2170.90088, 16.43989,   0.00000, 0.00000, -90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21765, -2217.66650, 16.43989,   0.00000, 0.00000, -90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1875.37915, -2208.99170, 14.51640,   0.00000, 0.00000, 90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);

	//- Utiles de gymnasio
	PressBancaBarraObjeto[0] = CreateObject(2913, barbell_pos[0][0], barbell_pos[0][1], barbell_pos[0][2], barbell_pos[0][3], barbell_pos[0][4], barbell_pos[0][5]);
	PressBancaBarraObjeto[1] = CreateObject(2913, barbell_pos[1][0], barbell_pos[1][1], barbell_pos[1][2], barbell_pos[1][3], barbell_pos[1][4], barbell_pos[1][5]);
	PressBancaBarraObjeto[2] = CreateObject(2913, barbell_pos[2][0], barbell_pos[2][1], barbell_pos[2][2], barbell_pos[2][3], barbell_pos[2][4], barbell_pos[2][5]);
	PressBancaBarraObjeto[3] = CreateObject(2913, barbell_pos[3][0], barbell_pos[3][1], barbell_pos[3][2], barbell_pos[3][3], barbell_pos[3][4], barbell_pos[3][5]);
	PressBancaBarraObjeto[4] = CreateObject(2913, barbell_pos[4][0], barbell_pos[4][1], barbell_pos[4][2], barbell_pos[4][3], barbell_pos[4][4], barbell_pos[4][5]);
 	PressBancaBarraObjeto[5] = CreateObject(2913, barbell_pos[5][0], barbell_pos[5][1], barbell_pos[5][2], barbell_pos[5][3], barbell_pos[5][4], barbell_pos[5][5]);
 	PressBancaBarraObjeto[6] = CreateObject(2913, barbell_pos[6][0], barbell_pos[6][1], barbell_pos[6][2], barbell_pos[6][3], barbell_pos[6][4], barbell_pos[6][5]);

 //continuar
	CreateDynamicObject(1498, 2043.86523, -1762.62634, 12.51593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7597, 2174.89990, -1764.00000, 27.90000,   0.00000, 0.00000, 320.00000);
	CreateDynamicObjectEx(3783, 2258.19946, -1402.72546, 25.25966,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3783, 2235.24927, -1402.71130, 25.26300,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3783, 2236.39673, -1466.16492, 25.28301,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3783, 2259.46899, -1466.14978, 25.26934,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObject(620, 2270.03735, -1471.64612, 20.93610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2224.33545, -1463.12634, 23.84916,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2270.10742, -1405.81299, 23.84916,   0.00000, 0.00000, 0.00000);
	CreateDynamicObjectEx(3655, 2391.53027, -1310.92371, 26.80950,   0.00000, 2.50000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3651, 2392.42017, -1296.45447, 26.92970,   0.00000, -2.50000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObject(8674, 2393.80298, -1374.26135, 23.45116,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 2388.65332, -1374.26111, 23.45120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 2404.09277, -1374.24548, 23.45116,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3496, 2406.52466, -1374.61926, 23.30760,   -1.00000, 0.00000, 180.00000);
	CreateDynamicObject(1297, 2335.43921, -1312.89160, 26.29400,   0.00000, 0.00000, -118.67999);
	CreateDynamicObject(910, 2408.77686, -1310.43604, 25.20387,   4.00000, 0.00000, 90.00000);
	CreateDynamicObject(2695, 2361.06934, -1321.84827, 24.26220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(947, 2102.96289, -1153.77368, 26.41398,   0.00000, 0.00000, 179.76012);
	CreateDynamicObject(1421, 2091.18530, -1158.00891, 25.23734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5170, 2262.49341, -1742.67908, 14.64190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 2245.48511, -1725.88501, 13.81327,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 2219.99390, -1438.74658, 24.19409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 1851.59729, -1064.63074, 23.87260,   0.00000, 0.00000, -89.28001);
	CreateDynamicObject(973, 1851.54553, -1054.71802, 23.87260,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(973, 1851.68530, -1044.60510, 23.87260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 1851.68066, -1037.65173, 23.87260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 2578.58350, -1460.42358, 23.80305,   0.00000, 0.00000, 25.25998);
	CreateDynamicObject(973, 2091.44653, -1836.60046, 13.36297,   0.00000, 0.00000, 89.40000);
	CreateDynamicObject(973, 2822.26709, -1426.85608, 16.05331,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 2553.11108, -2049.23413, 3.64323,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 2580.37646, -1489.76086, 23.80305,   0.00000, 0.00000, 90.05995);
	CreateDynamicObject(1232, 2345.19849, -1259.24475, 21.28517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2329.60254, -1230.83228, 21.28517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObjectEx(3588, 2479.23877, -1417.84546, 30.46700,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3588, 2479.23877, -1387.10413, 30.46703,   0.00000, 0.00000, 0.00000, 1000.000, 1000.000);
	CreateDynamicObject(1412, 2501.67017, -1431.59802, 29.06133,   0.00000, 0.00000, -270.53995);
	CreateDynamicObject(1413, 2501.63599, -1426.29565, 29.07940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1413, 2501.66162, -1421.02930, 29.07940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1412, 2501.75098, -1415.74060, 29.06133,   0.00000, 0.00000, -270.83994);
	CreateDynamicObject(1413, 2501.73291, -1410.42700, 29.07940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3496, 2463.14063, -1362.43140, 27.82760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1946, 2464.18506, -1363.99316, 27.91462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 2471.49976, -1357.45740, 28.18690,   0.00000, 0.00000, -6.96000);
	CreateDynamicObject(1368, 2473.79199, -1357.71240, 28.53172,   0.00000, 0.00000, -6.96000);
	CreateDynamicObject(1368, 2476.55981, -1358.04980, 28.53172,   0.00000, 0.00000, -6.96000);
	CreateDynamicObject(3593, 2497.86621, -1361.11450, 28.32305,   0.00000, 0.00000, 169.61993);
	CreateDynamicObject(1709, 2488.54346, -1359.68701, 27.81555,   0.00000, 0.00000, 9.18000);
	CreateDynamicObject(1712, 2486.70752, -1362.01123, 27.79593,   0.00000, 0.00000, 79.14000);
	CreateDynamicObject(2673, 2486.32520, -1363.64929, 27.94394,   0.00000, 0.00000, 153.30002);
	CreateDynamicObject(850, 2483.48389, -1355.75708, 27.93923,   0.00000, 0.00000, 94.20001);
	CreateDynamicObject(1257, 2505.15454, -1428.71667, 28.81939,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1498, 2488.71460, -1387.98962, 27.73200,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1498, 2473.78687, -1424.52515, 27.73200,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1498, 2488.71460, -1418.58936, 27.73200,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1498, 2473.70288, -1393.76050, 27.73200,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1498, 2473.89014, -1411.16650, 27.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2473.87036, -1380.41589, 27.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 2463.11450, -1358.44409, 31.64487,   0.00000, 0.00000, 119.10000);
	CreateDynamicObject(1226, 2482.51660, -1386.01599, 31.64487,   0.00000, 0.00000, 42.54002);
	CreateDynamicObject(1368, 2220.37671, -1428.41235, 23.68620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 2220.47803, -1430.81506, 23.35144,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1408, 2242.54761, -1411.22278, 23.51551,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 2242.69385, -1410.38721, 23.64880,   0.00000, 0.00000, -87.24001);
	CreateDynamicObject(1408, 2245.59180, -1394.33386, 23.54471,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3532, 2245.54395, -1395.10718, 23.64880,   0.00000, 0.00000, 91.74001);
	CreateDynamicObject(1408, 2265.81372, -1394.32141, 23.54566,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3532, 2265.83838, -1395.15210, 23.64880,   0.00000, 0.00000, 91.74001);
	CreateDynamicObject(1408, 2242.54761, -1456.04553, 23.53910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3532, 2242.58130, -1456.89465, 23.64880,   0.00000, 0.00000, 91.85999);
	CreateDynamicObject(1408, 2242.12183, -1473.96448, 23.03194,   0.00000, 2.00000, 0.06000);
	CreateDynamicObject(1408, 2258.04956, -1473.96680, 22.56991,   0.00000, 2.00000, 0.06000);
	CreateDynamicObject(3532, 2242.38843, -1473.24158, 23.16006,   0.00000, 1.16000, 272.75989);
	CreateDynamicObject(3532, 2258.34009, -1473.31311, 22.84232,   0.00000, -2.00000, 446.45987);
	CreateDynamicObject(763, 2244.77197, -1432.43384, 23.66284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(763, 2276.36548, -1441.16089, 22.47562,   0.00000, 0.00000, 128.28000);
	CreateDynamicObject(1368, 2266.51807, -1433.03137, 23.69970,   0.00000, 0.00000, 84.90000);
	CreateDynamicObjectEx(3556, 2095.70020, -1633.12268, 14.83930,   0.00000, 0.00000, 90.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3582, 2095.82495, -1652.64331, 14.92924,   0.00000, 0.00000, 90.00000, 1000.000, 1000.000);
	CreateDynamicObjectEx(3556, 2095.70020, -1667.45471, 14.83930,   0.00000, 0.00000, 90.00000, 1000.000, 1000.000);
	CreateDynamicObject(1412, 2102.45972, -1679.09082, 13.79150,   0.00000, 0.00000, 262.85992);
	CreateDynamicObject(1412, 2101.80957, -1684.28943, 13.79150,   0.00000, 0.00000, 262.85992);
	CreateDynamicObject(1412, 2101.04980, -1689.45569, 13.79150,   0.00000, 0.00000, 260.33994);
	CreateDynamicObject(1490, 2099.88086, -1647.58301, 14.16991,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7093, 2139.03906, -1739.44153, 22.07555,   0.00000, 0.00000, -34.98000);
	CreateDynamicObjectEx(3555, 2375.99902, -1640.71887, 14.99545,   0.00000, 0.00000, 180.23997, 1000.000, 1000.000);
	CreateDynamicObjectEx(3555, 2429.35767, -1642.46814, 14.99540,   0.00000, 0.00000, 180.00000, 1000.000, 1000.000);
	CreateDynamicObject(1280, 2240.12939, -1742.41309, 12.93393,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1532, 2261.24805, -1722.30042, 12.53410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 2240.12939, -1743.09192, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2248.31641, -1742.41309, 12.93390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 2248.31641, -1743.09912, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2258.41504, -1742.41309, 12.93390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 2266.87012, -1742.41309, 12.93390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 2276.46558, -1742.41309, 12.93390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 2284.93433, -1742.41309, 12.93390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 2258.41504, -1743.09192, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2266.87012, -1743.09192, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2276.46558, -1743.09192, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2284.93433, -1743.09192, 12.93390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1229, 2237.73340, -1747.13245, 13.92618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1229, 2255.45874, -1747.11731, 13.92618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1229, 2275.51147, -1747.12000, 13.92618,   0.00000, 0.00000, 0.00000);

	// water in pools
	CreateObject(10444, 1339.55957, -650.36328, 107.64650,   0.00000, 0.00000, 110.00000);
	CreateObject(10444, 881.52557, -683.94800, 112.61460,   0.00000, 0.00000, 145.00000);
	CreateObject(10444, 714.78162, -1054.18042, 45.20150,   0.00000, 0.00000, 150.10519);

	//- Porton e puertas de policia

	puertasan = CreateDynamicObject(1495, 245.89000, 1775.83777, 699.97021,   0.00000, 0.00000, 0.00000, 40, 40);
	puertadic = CreateDynamicObject(1569, 1023.0825, 2097.2563, -95.2023, 0.0000, 0.0000, 90.0000); //ADAM_V_DOOR
	puerta_policia = CreateDynamicObject(1495, 861.31921, 2325.18262, 1909.38721,   0.00000, 0.00000, 0.00000);
	boton_policia = CreateButton(863.44263, 2325.12085, 1910.77637, 0.00000);
	boton_policia1 = CreateButton(860.60339, 2325.28149, 1910.77637, 180.00000);

      //- Porton de SAN
    portonSAN1 = CreateDynamicObject(969, 774.11444092, -1384.98632812, 12.92022705, 0.00000000, 0.00000000, 0.00000000);
    portonSAN = CreateDynamicObject(976, 781.77209500, -1330.31884800, 12.68660500, 0.00000000, 0.00000000, -180.85939924);
      //- Porton de embargos
    portondeposito = CreateDynamicObject(19912, -497.41959, -562.72961, 27.28690,   0.00000, 0.00000, 180.59996);

	 //- /equipo
    CreateDynamicPickup(1242, 1, 322.5535,862.3134,1000.9999, -1, 44); // Equipo SADOC
    CreateDynamicPickup(1242, 1, -429.4801, 688.3015, 3853.0627); // Equipo Policía
    CreateDynamicPickup(1239, 1, 256.1008, 1779.5509, 701.0867); // Equipo SAN LA
    CreateDynamicPickup(1239, 1, -208.5554, -1737.9666, 675.7973); // Equipo LSFD - Médicos
    CreateDynamicPickup(1242, 1, 874.8904, 2295.0615, 1910.4546); // Equipo LSPD
    CreateDynamicPickup(1242, 1, 1021.5993, 2088.3018, -94.2204); // Equipo DIC

     //- Comandos de facciones
    CreateDynamicPickup(19418, 1, 261.7050, 1988.9712, 17.6406); // /arrestar - Prisión federal
    CreateDynamicPickup(19418, 1, 897.6996, 2279.0515, 1910.4048); // /arrestar - dentro
    CreateDynamicPickup(19418, 1, 364.5627,819.0615,1000.9888, -1, 48); // /arrestarf - Prisión Federal

     //- Extra
    CreateDynamicPickup(19418, 1, 861.3701, 2306.4800, 1910.4048); // /Computador
    CreateDynamicPickup(19418, 1, 338.6380,857.9088,1004.4059, -1, 41); // /Computador pf
    CreateDynamicPickup(1274, 1, -1539.4642,321.0930,53.5363); // /banco
    CreateDynamicPickup(1274, 1, 2311.9250,-13.7656,26.7422); // /banco, pueblos
    CreateDynamicPickup(1239, 1, 2119.1084, -2001.5844, 8.0257); // /mercado
    CreateDynamicPickup(1239, 1, 862.3019, 2334.1997, 1910.4048); // Pagar multa LSPD
    CreateDynamicPickup(1581, 1, 361.8402, 173.5364, 1008.3828); // /ayuntamiento
    CreateDynamicPickup(1240, 1, -197.6426, -1760.8300, 675.7021); // /curarme LSFD
    CreateDynamicPickup(19523, 1, 149.6309, -185.1440, 342.8410); // /tomar en la prisión federal.

     //- /empleo
    CreateDynamicPickup(19624, 1, 2468.5474, -2116.8491, 13.4846); // Carguero
    CreateDynamicPickup(1239, 1, 8512.2188,13940.5342,4.9182); // Delincuente
    CreateDynamicPickup(1239, 1, 8756.8242,14228.8154,7.4378); //ladrón de coches
    CreateDynamicPickup(19624, 1, 2080.4480,-2355.2971,13.5469); // Carpintero
    CreateDynamicPickup(19624, 1, 8571.8350, 14494.7344, 5.7692); // Pescador
    CreateDynamicPickup(19624, 1, -566.1776, -1496.1948, 9.4454); // Leñador
    CreateDynamicPickup(19624, 1, -383.0549, -1438.9514, 26.3276); // granjero

	//cargado de mods
    D_LOGIN = TextDrawCreate(-7.200000, -6.720000, "LD_SPAC:black");
    TextDrawLetterSize(D_LOGIN, 0.000000, 0.000000);
    TextDrawTextSize(D_LOGIN, 650.399902, 460.693298);
    TextDrawAlignment(D_LOGIN, 1);
    TextDrawColor(D_LOGIN, -1);
    TextDrawSetShadow(D_LOGIN, 0);
    TextDrawSetOutline(D_LOGIN, 0);
    TextDrawFont(D_LOGIN, 4);



    fondo_negro = TextDrawCreate(-7.200000, -6.720000, "LD_SPAC:black");
    TextDrawLetterSize(fondo_negro, 0.000000, 0.000000);
    TextDrawTextSize(fondo_negro, 650.399902, 460.693298);
    TextDrawAlignment(fondo_negro, 1);
    TextDrawColor(fondo_negro, -1);
    TextDrawSetShadow(fondo_negro, 0);
    TextDrawSetOutline(fondo_negro, 0);
    TextDrawFont(fondo_negro, 4);

	fondo_gris = TextDrawCreate(-7.200000, -6.720000, "_");
	TextDrawLetterSize(fondo_gris, 0.000000, 0.000000);
	TextDrawTextSize(fondo_gris, 650.399902, 460.693298);
	TextDrawAlignment(fondo_gris, 1);
	TextDrawColor(fondo_gris, 0);
	TextDrawUseBox(fondo_gris, true);
	TextDrawBoxColor(fondo_gris, 0x8C9082FF);
	TextDrawSetShadow(fondo_gris, 0);
	TextDrawSetOutline(fondo_gris, 0);
	TextDrawFont(fondo_gris, 0);

    //» Timer's
    SetTimer("A_Reloj", 1000, 1);
    SetTimer("A_Vehiculos", 60000, 1);
    SetTimer("A_Microbeat", 250, 1);
    SetTimer("A_Spec", 3000, 1);
    SetTimer("A_MedioSegundo", 500, 1);
    SetTimer("A_Segundo", 1000, 1);
    SetTimer("A_Minuto", 60000, 1);
    SetTimer("A_Hora", 3600000, 1);
    SetTimer("a_segundino", 250, 1);
    SetTimer("a_hora_server", 60000, 1); // medio segundo

	//» Extras
    CargaFamilias();
	printf("|- Parqueos/peajes [%i]", MAX_PEAJE);
    printf("|- Objetos fijos [%i]", MAX_OBJECT_FIJOS);
	return 1;
}

funcion a_hora_server()
{
	new hora_s, minuto_s, segundo_s;
	gettime(hora_s, minuto_s, segundo_s);
	foreach(new idjugador: Player)
	{
		if(user[idjugador][jDtipo] != 5 && user[idjugador][jDtipo] != 7)
		{
			SetPlayerTime(idjugador, hora_s, minuto_s);
		}
	}
	if(minuto_s == 0 && segundo_s < 60 && segundo_s > 0)
	{
		new string[35];
		if(hora_s >= 12) format(string, sizeof(string), "Hora actual: %02d:00 PM.", (hora_s == 12) ? (12) : (hora_s - 12));
		else if(hora_s < 12) format(string, sizeof(string), "Hora actual: %02d:00 AM.", (hora_s == 0) ? (12) : (hora_s));
		foreach(new idjugador: Player) SendClientMessage(idjugador, -1, string);
	}
}

Float: GetVehicleSpeed(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehicleVelocity(vehicleid,x,y,z);
	return floatmul(VectorSize(x,y,z),170.0);
}

stock radio_tw(x, Float: veintex=0.0, Float: veintey=0.0)
{
	info_w[x][Radio] = CreatePlayerTextDraw(x, veintex, veintey, "_");
	PlayerTextDrawLetterSize(x, info_w[x][Radio], 0.428999, 1.175626);
	PlayerTextDrawAlignment(x, info_w[x][Radio], 2);
	PlayerTextDrawColor(x, info_w[x][Radio], -1);
	PlayerTextDrawSetShadow(x, info_w[x][Radio], 0);
	PlayerTextDrawSetOutline(x, info_w[x][Radio], 1);
	PlayerTextDrawBackgroundColor(x, info_w[x][Radio], 255);
	PlayerTextDrawFont(x, info_w[x][Radio], 3);
	PlayerTextDrawSetProportional(x, info_w[x][Radio], 1);
}

stock velocimetro_tw(x)
{
	info_w[x][Velocimetro] = CreatePlayerTextDraw(x, 497.222290, 381.629638, "_");
	PlayerTextDrawLetterSize(x, info_w[x][Velocimetro], 0.302777, 1.029629);
	PlayerTextDrawAlignment(x, info_w[x][Velocimetro], 1);
	PlayerTextDrawColor(x, info_w[x][Velocimetro], -1);
	PlayerTextDrawSetShadow(x, info_w[x][Velocimetro], 0);
	PlayerTextDrawSetOutline(x, info_w[x][Velocimetro], 1);
	PlayerTextDrawBackgroundColor(x, info_w[x][Velocimetro], 255);
	PlayerTextDrawFont(x, info_w[x][Velocimetro], 2);
	PlayerTextDrawSetProportional(x, info_w[x][Velocimetro], 1);
}

funcion A_Reloj()
{
	new RconCommand[50], time[3], year, month, day;
	getdate(year, month, day);
	gettime(time[0], time[1], time[2]);
	if(time[0] >= 12) format(RconCommand, 32, "worldtime %s: %02d:%02d PM", GetWeekDay(), (time[0] == 12) ? (12) : (time[0] - 12), time[1]);
	else if(time[0] < 12) format(RconCommand, 32, "worldtime %s: %02d:%02d AM", GetWeekDay(), (time[0] == 0) ? (12) : (time[0]), time[1]);
	SendRconCommand(RconCommand);
	return 1;
}

funcion a_segundino()
{
    for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if (IsPlayerConnected(playerid))
		{
			new string[128], time[3], year, month, day;
			getdate(year, month, day);
			gettime(time[0], time[1], time[2]);

			if(time[0] >= 12) format(string, 128, "~b~%02d - %02d - %02d~n~~g~%02d:%02d PM", day, month, year, (time[0] == 12) ? (12) : (time[0] - 12), time[1]);
			else if(time[0] < 12) format(string, 128, "~b~%02d - %02d - %02d~n~~g~%02d:%02d AM", day, month, year, (time[0] == 0) ? (12) : (time[0]), time[1]);
			PlayerTextDrawSetString(playerid, info_w[playerid][Fecha], string);

            if(user[playerid][pUseHud] == 0) UpdatePlayerHud(playerid, GetPlayerVehicleID(playerid));
		}
	}
}

stock VariablesVeh()
{
	for(new v = 0; v < MAX_VEHICULOS; v++)
	{
		i_Vehiculo[v][vSpawned] = 0;
		i_Vehiculo[v][v_timer] = 0;
		i_Vehiculo[v][v_robo] = 0;
	}
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
		veh_gasolina[v] = 100;
		SetVehicleMatricula(v);
	}
}

stock TieneNumeros(str[])
{
	Loop(i,strlen(str),0)
	{
	    Loop(n,9,0)
		{
	    	if(str[i] == n) return 1;
		}
	}
	return 0;
}

funcion Loteria(number)
{
	new DineroLoteriaFallen = 0, string[128], winner[50 + MAX_PLAYER_NAME];
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(user[i][jLoteria] > 0)
			{
				if(user[i][jLoteria] == number)
				{
					DineroLoteriaFallen = 1;
					GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "[INN] Ganador número '%d - %s', con un total de $%d", number, winner, d_loteria);
					_MensajeSAN(0x00DC76FF, string);
					format(string, sizeof(string), "[SMS: 9891]: Felicitaciones, has ganado $%d con tu boleta de loteria n°%d.", d_loteria, number);
					_Mensaje(i, 4, "FFEA5F", string);
					DarDineroGC(i, d_loteria);
					d_estado -= d_loteria;
				}
				else
				{
					_Mensaje(i, 4, "b0b0b0", "No has ganado la loteria, suerte en la proxima.");
				}
			}
			user[i][jLoteria] = 0;
		}
	}
	if(DineroLoteriaFallen)
	{
		new rand = random(200);
		rand += 50;
		d_loteria = rand;
		save_stuff();
		format(string, sizeof(string), "[INN] Número ganador %d, nuevo monto total de premio es de {00C200}$%d", number, d_loteria);
		_MensajeSAN(0x00DC76FF, string);
	}
	else
	{
		new rand = random(200);
		rand += 175;
		d_loteria += rand;
		save_stuff();
		format(string, sizeof(string), "[INN] Número ganador %d, nuevo monto total de premio es de {00C200}$%d", number, d_loteria);
		_MensajeSAN(0x00DC76FF, string);
	}
	return 1;
}

funcion user_clean(playerid)
{
	orm_clear_vars(accountORM[playerid]);
	orm_clear_vars(charORM[playerid]);
	orm_destroy(accountORM[playerid]);
	orm_destroy(charORM[playerid]);
	p_bank[playerid][0] = -1;
	p_bank[playerid][1] = -1;
	un_rent[playerid] = 0;
	veh_spawn[playerid] = 0;
	random_movil[playerid] = 0;
	code_nivel[playerid] = 0;
	code_horas[playerid] = 0;
	code_dinero[playerid] = 0;
    trazo_graffiti[playerid] = 0;
	solid_chat[playerid] = 0;
	tipo_ref[playerid] = 1;
    check_motor[playerid] = 0;
	user[playerid][jCoche][0] = 0;
	user[playerid][jCoche][1] = -1;
	u_objeto[playerid] = -1;
	wsp_u[playerid] = -1;
	wsp_time[playerid] = -1;
	time_change[playerid] = -1;
	user[playerid][pEditingMode] = 0;
	pused_mesa[playerid] = -1;
    enter_vehicle[playerid] = 0;
	Granjero[playerid] = 0;
	tipo_carga[playerid] = 1;
	DeletePVar(playerid, "d_configs");
	DeletePVar(playerid, "en_correo");
    con_cartel[playerid] = 0;
    boombox[playerid] = 0;
	playerTextdraw[playerid] = false;
	used_vehicle[playerid] = 0;
    number_mask[playerid] = 200000+random(199991);
    contador_balas[playerid] = 0;
    SetPVarInt(playerid, "graffs_fuente", 3);
	SetPVarString(playerid, "graffs_texto", "Los Santos");
	SetPVarInt(playerid, "letra_i", 5);
    ContadorCuraciones[playerid] = 0;
	DeletePVar(playerid, "g_borrar");
	Exam_ResetVars(playerid); //licencias
	con_caja[playerid] = 0;
	user[playerid][pAFKTime] = 0;
	en_lenador[playerid] = 0;
	user[playerid][pLenador_free] = -1;
	DentroCasa[playerid] = -1;
	DentroAlmacen[playerid] = -1;
	DentroNegocio[playerid] = -1;
	DentroEmpresa[playerid] = -1;
	DentroGarage[playerid] = -1;
    pag_muebles[playerid] = 0;
	r_tiempo[playerid] = -1;
    UsandoGym2[playerid] = 0;
    comando_pd[playerid] = 0;
    r_id[playerid] = -1;
    B_Admin[playerid] = 0;
    B_Radito[playerid] = 0;
    limitarobo[playerid] = 0;
    registrando[playerid] = 0;
	usandoYo[playerid] = 0;
	B_SANMUSIC[playerid] = 0;
	CurrentDialog[playerid] = -1;
	Anti[playerid][vidac1] = 1001.0;
	Anti[playerid][vidac2] = 1001.0;
	EmpresaLlamada[playerid] = -1;
	Taximetro[playerid] = -1;
	EnTaxi[playerid] = -1;
	PasajeroTaxi[playerid] = -1;
	haciend_[playerid] = 0;
	reaparecer[playerid] = 0;
	EnServicioTaxi[playerid] = false;
	m_operacion[playerid][0] = 0;
	m_operacion[playerid][1] = 0;
	m_operacion[playerid][2] = -1;
	m_operacion[playerid][3] = -1;
	m_operacion[playerid][4] = -1;
	m_operacion[playerid][5] = -1;
	id_tune[playerid] = -1;
	e_tune[playerid] = -1;
	veh_tune[playerid] = 0;
	pago_tune[playerid] = 0;
	for(new x = 0; x < 11; x++) { pieza_tune[playerid][x] = 0; }
	Altavoz[playerid] = 0;
	Anti[playerid][BalasW] = 0;
	cocherobo[playerid] = 0;
	checkcoche[playerid] = 0;
	veh_robo[playerid] = 0;
	_mirilla[playerid] = -1;
	tipo_m[playerid] = 0;
	UsandoOptiwand[playerid] = -1;
	TipoOptiwand[playerid] = 0;
	_Logeo[playerid] = 0;
	_rVeh[playerid] = 0;
	for(new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0.0; }
	pescando[playerid] = 0;
	_Pesca[playerid] = 0;
	_arma[playerid] = -1;
	asesino[playerid] = -1;
	DeletePVar(playerid, "EnEvento");
	jEvento[playerid][eInterior] = 0;
	jEvento[playerid][eVW] = 0;
	DentroGarage[playerid] = -1;
	Taseado[playerid] = 0;
	_Gomas[playerid] = 0;
	EnGarajeID[playerid] = INVALID_CASA_ID;
	EnCasaID[playerid] = INVALID_CASA_ID;
	MostrarNombre[playerid] = 0;
	VisitaTimer[playerid] = 0;
	VisitaTimer2[playerid] = 0;
	SolicitaRefuerzos[playerid] = 0;
	BotonPanico[playerid] = 0;
	VehMaleteroPlayer[playerid] = 0;
	VehGuanteraPlayer[playerid] = 0;
	escuchandop[playerid] = 0;
	estacionp[playerid] = 0;
	MusicaEsc[playerid] = 0;
	B_Pecho[playerid] = 0;
	Vendado[playerid] = 0;
	RepeticionesPressBanca[playerid] = 0;
	Atado[playerid] = 0;
	Esposado[playerid] = 0;
	HaciendoPressBanca[playerid] = 0;
	compra_Veh[playerid] = -1;
	r_negocio[playerid] = -1;
	tipo_reparto[playerid] = 0;
	r_vehiculo[playerid] = 0;
	IsTaller[playerid] = 0;
	EnTaller[playerid] = 0;
	veh_asiento[playerid] = -1;
	Saludo_ID[playerid] = 999;
	Saludo2_ID[playerid] = 0;
	Beso_ID[playerid] = 999;
	Beso2_ID[playerid] = 0;
	alcoholemia[playerid] = 999;
	ReporteA[playerid] = 0;
	ReporteT[playerid] = "Nada";
	ReporteB[playerid] = 0;
	TomandoTrabajo[playerid] = -1;
	fInvitadoP[playerid] = 0;
	fIDfamilia[playerid] = 255;
	DudaT[playerid] = "Nada";
	PrivadosB[playerid] = 0;
	DudaB[playerid] = 0;
	DudaA[playerid] = 0;
	TestErrores[playerid] = 10;
	YaAviso[playerid] = 0;
	BuscarTrabajo[playerid] = -1;
	IDNegocio[playerid] = -1;
	p_drogas[playerid] = -1;
	p_armas[playerid] = 0;
	PrestadorCoche[playerid] = -1;
	LlavePrestada[playerid] = -1;
	B_WSP[playerid] = 0;
	B_Familia[playerid] = 0;
	_MedicAcept[playerid] = 999;
	_BombAcept[playerid] = 999;
	B_VIP[playerid] = 1;
	B_Faccion[playerid] = 0;
	JugadorEnSeccion {playerid} = 0;
	QuienManejo[playerid] = 0;
	RanuraSeleccionada[playerid] = -1;
	RanuraSeleccionadaA[playerid] = -1;
	MultaOfrecer[playerid] = 999;
	MultaPrecio[playerid] = 0;
	EnServicioADM[playerid] = 0;
	_Medic2Call[playerid] = 0;
	_Entrevista[playerid] = 999;
	EnLlamada[playerid] = 0; //Sistema teléfono
	ToqueLlamada[playerid] = 0;
	PersonaEnLlamada[playerid] = -1;
	_Vehdueno[playerid] = 999;
	_Vehprecio[playerid] = 0;
	_VehID[playerid] = -1;
	EditandoObjetoJ[playerid] = 0;
	Spectando[playerid] = 0;
	SpectadorID[playerid] = 999;
	Spectate[playerid] = 999;
	_2Entrevista[playerid] = INVALID_PLAYER_ID;
	VerPrivados[playerid] = 0;
	TruckDeliver[playerid] = 0;
	_CamVeh[playerid] = INVALID_VEHICLE_ID;
	es_hablando[playerid] = 0;
	con_animacion[playerid] = 0;
	EnServicio[playerid] = 0;
	EnServicioPD[playerid] = 0;
	Carguero[playerid] = 0;
    Carpintero[playerid] = 0;
	CasaOffer[playerid] = 999;
	CasaPrice[playerid] = 0;
	NegocioOffer[playerid] = 999;
	NegocioPrice[playerid] = 0;
	JetPack[playerid] = 0;
	CurrentMoney[playerid] = 0;
	FacturaMulta[playerid] = 0;
	format(QuienMato[playerid], 24, "Nadie");
    //- variables en timer's
    CederTiempo[playerid] = -1;
    RecargarTiempo[playerid] = -1;
    Intentar[playerid] = -1;
    Intentar2[playerid] = -1;
    IntentarD[playerid] = -1;
    TiempoReporte[playerid] = -1;
    PagarTiempo[playerid] = -1;
    DudaTimer[playerid] = -1;
	//-
	Loop(i, MAX_MUEBLES_C, 0) { OBJ_MuebleC[playerid][i] = INVALID_OBJECT_ID; }
	Loop(i, MAX_MUEBLES_N, 0) { OBJ_MuebleN[playerid][i] = INVALID_OBJECT_ID; }
	Loop(i, MAX_MUEBLES_G, 0) { OBJ_MuebleN[playerid][i] = INVALID_OBJECT_ID; }
	Loop(i, MAX_MUEBLES_E, 0) { OBJ_MuebleE[playerid][i] = INVALID_OBJECT_ID; }
	user[playerid][EditandoM] = 0;
	CasaActual[playerid] = INVALID_CASA_ID;
	GarageActual[playerid] = INVALID_CASA_ID;
	NegocioActual[playerid] = INVALID_NEGOCIO_ID;
	DeletePVar(playerid, "Esta_Herido");
	SetPVarInt(playerid, "HaciendoMueble", 0);
	DeletePVar(playerid, "Congelado"); DeletePVar(playerid, "_DeMbug");

	for(new x = 0; x < 20; x++)
	{
		alm(llamada_registro[playerid][x], "-\n");
		llamada_2registro[playerid][x] = 0;
	}

	// DATA USERS
	LoggedIn[playerid] = -1;
	charLoggedIn[playerid] = -1;
	user[playerid][jSQLID] = -1;
	user[playerid][jNombre] = -1;
	user[playerid][jClave] = -1;
	user[playerid][jEmail] = -1;
	user[playerid][jRegistrado] = 0;
	user[playerid][jPosicion_X] = 1612.3240;
	user[playerid][jPosicion_Y] = -2330.1670;
	user[playerid][jPosicion_Z] = 13.5469;
	user[playerid][jPosicion_R] = 13.5469;
	user[playerid][jSangre] = 100.0;
	user[playerid][jChaleco] = 0.0;
	user[playerid][jInterior] = 0;
	user[playerid][jVirtualWorld] = 0;
	user[playerid][jSexo] = 1;
	user[playerid][jRaza] = 1;
	user[playerid][jEdad] = 18;
	user[playerid][jCiudad] = 1;
	user[playerid][jHablar] = 1;
	user[playerid][jEstilo] = 1;
	user[playerid][jPelea] = 4;
	user[playerid][jSed] = 0;
	user[playerid][jHambre] = -10;
	user[playerid][jAlcohol] = 0;
	user[playerid][jFuerza] = 20;
	user[playerid][jDinero] = 200;
	user[playerid][jBanco] = 500;
	user[playerid][jCheques] = 0;
	user[playerid][jDebito] = -1;
	user[playerid][jPuntosRol][0] = 0;
	user[playerid][jPuntosRol][1] = 0;
	user[playerid][jNivel] = -1;
	user[playerid][jExperiencia] = 0;
	user[playerid][j_Horas] = 0;
	user[playerid][jMulticuenta] = 0;
	user[playerid][jAdmin] = 0;
	alm(user[playerid][jStaff], "Novato");
	user[playerid][jBaneado] = 0;
	user[playerid][jBtiempo] = 0;
	alm(user[playerid][jBculpable], "SERVER");
	alm(user[playerid][jBrazon], "-");
	alm(user[playerid][jBmomento], "-");
	for(new x = 0; x < 5; x++)
	{
		user[playerid][jEncargado][x] = 0;
	}
	user[playerid][jAlmacen] = -1;
	user[playerid][jCasaKey] = -1;
	user[playerid][jCasaKey2] = -1;
	user[playerid][jAlquiler] = -1;
	user[playerid][j_timeunrent] = 0;
	user[playerid][jCasaLlaves] = -1;
	user[playerid][jCasa2Llaves] = 0;
	user[playerid][j2CasaLlaves] = -1;
	user[playerid][j2Casa2Llaves] = 0;
	user[playerid][jNegocioKey] = -1;
	user[playerid][jNegocioKey2] = -1;
	user[playerid][jNegocioLlaves] = -1;
	user[playerid][jNegocio2Llaves] = 0;
	user[playerid][jEmpresaKey] = -1;
	user[playerid][jEmpresaLlaves] = -1;
	user[playerid][jEmpresa2Llaves] = 0;
	user[playerid][jContrato] = -1;
	user[playerid][jHorasE] = 0;
	for(new i = 0; i < 6; i++)
	{
		user[playerid][jLlaveCoche][i] = 0;
		user[playerid][j2Vehiculos][i] = 0;
		user[playerid][j2Vehixculos][i] = 0;
	}
	user[playerid][jPremium] = 0;
	user[playerid][jColorP] = 0;
	user[playerid][jD_premium] = -1;
	user[playerid][jM_premium] = -1;
	for(new x = 0; x < 10; x++)
	{
		user[playerid][jBolsillo][x] = 0;
		user[playerid][jBolsilloCant][x] = 0;
	}
	user[playerid][jm_Izquierda] = 0;
	user[playerid][jm_IzquierdaCant] = 0;
	user[playerid][jm_Derecha] = 0;
	user[playerid][jm_DerechaCant] = 0;
	user[playerid][jEspalda] = 0;
	user[playerid][jEspaldaCant] = 0;
	for(new x = 0; x < 6; x++)
	{
		user[playerid][jCinturon][x] = 0;
		user[playerid][jCinturonCant][x] = 0;
	}
	user[playerid][jRopa] = 155;
	user[playerid][jSkin] = 0;
	for(new x = 0; x < MAX_ROPA; x++)
	{
	    user[playerid][jRopaArmario][x] = 0;
	}
	user[playerid][jtimeP] = 0;
	user[playerid][jPayday] = 0;
	user[playerid][jLider] = 0;
	user[playerid][jMiembro] = 0;
	user[playerid][jRango] = 0;
	user[playerid][jLiderFam] = 0;
	user[playerid][jMiembroFam] = 0;
	user[playerid][jRangoFam] = 1;
	user[playerid][jMuerto] = 0;
	user[playerid][jMuerto2] = 0;
	new randphone = 100000 + random(899999);
	user[playerid][jTelefono] = randphone;
	user[playerid][jSaldo] = 0;
	user[playerid][jFrecuencia] = -1;
	user[playerid][jBoombox] = 0;
	user[playerid][jLoteria] = 0;
	user[playerid][jMascara] = 0;
	user[playerid][jEstrellas] = 0;
	user[playerid][jSanciones] = 0;
	user[playerid][jArrestos] = 0;
	user[playerid][jPuntosLic] = 0;
	user[playerid][jEncarcelado] = 0;
	alm(user[playerid][jJculpable], "Ninguno");
	alm(user[playerid][jJrazon], "-");
	alm(user[playerid][jJmomento], "-");
	user[playerid][jTiempoCarcel] = 0;
	user[playerid][jtiempito] = 0;
	user[playerid][jTroncos] = 0;
	user[playerid][jCargas] = 0;
	user[playerid][jPescados] = 0;
	user[playerid][jMuebles] = 0;
	user[playerid][jCosechas] = 0;
	user[playerid][jTrabajo1] = 0;
	user[playerid][jTrabajo2] = 0;
	user[playerid][jTrabajo3] = 0;
	for(new x = 0; x < 7; x++)
	{
		user[playerid][jLicencias][x] = 0;
	}
	for(new x = 0; x < 10; x++)
	{
		user[playerid][jHabilidad][x] = 0;
		user[playerid][jHabilidad2][x] = 1;
		user[playerid][jAdiccion][x] = 0;
	}
	alm(user[playerid][jCasado], "soltero");
	alm(user[playerid][jEstado], "Alegre");
	new documento = Random(100000, 499999);
	user[playerid][jDocumento] = documento;
	user[playerid][jf_Edad] = 21;
	user[playerid][jf_Dni] = 0;
	alm(user[playerid][jf_Nombre], "Ninguno");
	for(new x = 0; x < 10; x++)
	{
		user[playerid][jDelito][x] = 0;
		alm(p_delito[playerid][x], "Ninguno");
	}
	for(new x = 0; x < 20; x++)
	{
		user[playerid][jContacto][x] = 0;
	}
	alm(user[playerid][jContactoN1], "Vacío");
	alm(user[playerid][jContactoN2], "Vacío");
	alm(user[playerid][jContactoN3], "Vacío");
	alm(user[playerid][jContactoN4], "Vacío");
	alm(user[playerid][jContactoN5], "Vacío");
	alm(user[playerid][jContactoN6], "Vacío");
	alm(user[playerid][jContactoN7], "Vacío");
	alm(user[playerid][jContactoN8], "Vacío");
	alm(user[playerid][jContactoN9], "Vacío");
	alm(user[playerid][jContactoN10], "Vacío");
	alm(user[playerid][jContactoN11], "Vacío");
	alm(user[playerid][jContactoN12], "Vacío");
	alm(user[playerid][jContactoN13], "Vacío");
	alm(user[playerid][jContactoN14], "Vacío");
	alm(user[playerid][jContactoN15], "Vacío");
	alm(user[playerid][jContactoN16], "Vacío");
	alm(user[playerid][jContactoN17], "Vacío");
	alm(user[playerid][jContactoN18], "Vacío");
	alm(user[playerid][jContactoN19], "Vacío");
	alm(user[playerid][jContactoN20], "Vacío");
	for(new x = 0; x < 10; x++)
	{
		user[playerid][jTiempos][x] = 0;
	}
	user[playerid][jTiempos][10] = 0;
	user[playerid][jTiempos][11] = 0;
	user[playerid][jTiempos][12] = 0;
	user[playerid][jTiempos][13] = 0;
	user[playerid][jTiempos][14] = 0;
	user[playerid][jTiempos][15] = 67;
	user[playerid][jTiempos][16] = 0;
	user[playerid][jTiempos][17] = 0;
	user[playerid][jTiempos][18] = 0;
	user[playerid][jTiempos][19] = 0;
	user[playerid][jTiempos][20] = 0;
	user[playerid][jTiempos][21] = 0;
	user[playerid][jHoras] = 0;
	user[playerid][jMinutos] = 0;
	user[playerid][jSegundos] = 0;
	user[playerid][jDias] = 0;
	user[playerid][jMeses] = 0;
	user[playerid][jAnos] = 0;
	for(new x = 0; x < 5; x++)
	{
		user[playerid][jEmpeno][x] = 0;
		user[playerid][jEmpeno2][x] = 0;
	}
	for(new x = 0; x < 12; x++)
	{
		user[playerid][job_PF][x] = 0;
		user[playerid][job_PFCant][x] = 0;
	}
	user[playerid][jDineroPF] = 0;
	user[playerid][ObjetosRep] = 0;
	user[playerid][jDtipo] = 0;
	user[playerid][jDtiempo] = 0;
	user[playerid][jDpower] = 0;
	user[playerid][jDbonus][0] = 0;
	user[playerid][jDbonus][1] = 0;
	KillTimer(random_abstinence[playerid]);
	abstinence_power[playerid] = 0;
	random_abstinence[playerid] = 0;
	user[playerid][pAbstinenceEffect] = 0;
	user[playerid][pAbstinenceTime] = 0;
	user[playerid][jFianza] = 0;
	user[playerid][j_uTelefono] = 0;
	user[playerid][j_uManos] = 0;
	user[playerid][j_uMP] = 0;
	alm(user[playerid][j_uMP2], "user_none");
	user[playerid][j_uRadio] = 0;
	user[playerid][j_uAudio] = 0;
	user[playerid][j_uSAN] = 1;
	user[playerid][j_uOOC] = 1;
	user[playerid][pUseHud] = 0;
	user[playerid][ptimegame] = 0;
	user[playerid][jGraffito] = 0;
	user[playerid][pHud] = 1;
 	new code_1[128];
	format(code_1, sizeof(code_1), "none");
	user[playerid][pfechareg] = code_1;
	//no guardable
	user[playerid][State] = 0;
	user[playerid][jMascaraPD] = 0;
	user[playerid][j_Mascara] = 0;
	user[playerid][jTiempoServicio] = 0;
	user[playerid][jRescatePolicial] = 0;
	user[playerid][jTiempoGuardado] = -1;
	user[playerid][jTiempoCurar] = -1;
	// DATA HERIDAS
	alm(InfoHeridas[playerid][Cabeza], "-"); InfoHeridas[playerid][Cabezar] = 0;
	alm(InfoHeridas[playerid][Torso], "-"); InfoHeridas[playerid][Torsor] = 0;
	alm(InfoHeridas[playerid][BrazoD], "-"); InfoHeridas[playerid][BrazoDr] = 0;
	alm(InfoHeridas[playerid][BrazoI], "-"); InfoHeridas[playerid][BrazoIr] = 0;
	alm(InfoHeridas[playerid][EntreP], "-"); InfoHeridas[playerid][EntrePr] = 0;
	alm(InfoHeridas[playerid][PiernaD], "-"); InfoHeridas[playerid][PiernaDr] = 0;
	alm(InfoHeridas[playerid][PiernaI], "-"); InfoHeridas[playerid][PiernaIr] = 0;
	alm(InfoHeridas[playerid][Lesiones], "-"); InfoHeridas[playerid][Lesionesr] = 0;
	// DATA ACCESORIOS
	for(new x = 0; x < MAX_ACCESORIOS; x++)
	{
		InfoAccesorio[playerid][x][aModelo] = 0;
		InfoAccesorio[playerid][x][aParte] = 0;
		InfoAccesorio[playerid][x][aPosicionX] = 0.0;
		InfoAccesorio[playerid][x][aPosicionY] = 0.0;
		InfoAccesorio[playerid][x][aPosicionZ] = 0.0;
		InfoAccesorio[playerid][x][aRotacionX] = 0.0;
		InfoAccesorio[playerid][x][aRotacionY] = 0.0;
		InfoAccesorio[playerid][x][aRotacionZ] = 0.0;
		InfoAccesorio[playerid][x][aEscalaX] = 1;
		InfoAccesorio[playerid][x][aEscalaY] = 1;
		InfoAccesorio[playerid][x][aEscalaZ] = 1;
		InfoAccesorio[playerid][x][aColocado] = 0;
	}

	//textdraws
		//-1
	TextTrabajo[playerid] = CreatePlayerTextDraw(playerid, 318.399963, 352.426788, "_");
	PlayerTextDrawLetterSize(playerid, TextTrabajo[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, TextTrabajo[playerid], 2);
	PlayerTextDrawColor(playerid, TextTrabajo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextTrabajo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextTrabajo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextTrabajo[playerid], 255);
	PlayerTextDrawFont(playerid, TextTrabajo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TextTrabajo[playerid], 1);



	new x = playerid;
	info_w[x][Fecha] = CreatePlayerTextDraw(x, 552.666564, 102.504577, "_");
	PlayerTextDrawLetterSize(x, info_w[x][Fecha], 0.428999, 1.175626);
	PlayerTextDrawAlignment(x, info_w[x][Fecha], 2);
	PlayerTextDrawColor(x, info_w[x][Fecha], -1);
	PlayerTextDrawSetShadow(x, info_w[x][Fecha], 0);
	PlayerTextDrawSetOutline(x, info_w[x][Fecha], 1);
	PlayerTextDrawBackgroundColor(x, info_w[x][Fecha], 255);
	PlayerTextDrawFont(x, info_w[x][Fecha], 3);
	PlayerTextDrawSetProportional(x, info_w[x][Fecha], 1);

	radio_tw(playerid, 552.666564, 104.817077);
	velocimetro_tw(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!IsPlayerConnectedEx(playerid) && !IsPlayerNPC(playerid)) return(_Mensaje(playerid, 1, "0", "Fuiste expulsado automáticamente, no has ingresado correctamente."), Kick(playerid));
	_OnPlayerSpawn(playerid);
	return 1;
}

public OnPlayerDeath(playerid, killerid, WEAPON:reason)
{
	if(GetPVarInt(playerid, "EnEvento") == 1) return 1;
	SetPlayerColor(playerid, C_PLAYERBLANCO);
	if (EnServicioADM[playerid] != 1) SetPVarInt(playerid, "_DeMbug", 1);
	return 1;
}

stock spawn_veh(veh = 1)
{
	alm(veh_music[veh], "nadauwu");
	arr_Engine{veh} = 0;
	estacionveh[veh] = 0;
	VehSeguro[veh] = 0;
	_Contenido[veh] = 0;
	if (VehCallSign[veh])
	{
		Delete3DTextLabel(TextCallSign[veh]);
		VehCallSign[veh] = 0;
	}
	if (VehicleWindows[veh])
	{
		VehicleWindows[veh] = 0;
		SetVehicleParamsCarWindows(veh, 1, 1, 1, 1);
	}
	if(SirenOn[veh] == true)
	{
		DestroyDynamicObject(SirenObject[veh]); SirenOn[veh] = false;
	}
	if(Platform[veh])
	{
		DestroyObject(Platform1[veh]);
		DestroyObject(Platform2[veh]);
		DestroyObject(Platform3[veh]);
		Platform[veh] = 0;
	}
}

public OnVehicleSpawn(vehicleid)
{
	spawn_veh(vehicleid);
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			random_veh[vehicleid] = 0;
			DestroyVehicle(vehicleid);
   			i_Vehiculo[v][vID] = CreateVehicle(i_Vehiculo[v][vModelo], i_Vehiculo[v][vPosicionX], i_Vehiculo[v][vPosicionY], i_Vehiculo[v][vPosicionZ], i_Vehiculo[v][vPosicionR], i_Vehiculo[v][vColor_1], i_Vehiculo[v][vColor_2], -1);
			random_veh[i_Vehiculo[v][vID]] = i_Vehiculo[v][vID] + random(899999);
			if(i_Vehiculo[v][vUSeguro] == 1) { VehSeguro[i_Vehiculo[v][vID]] = 1; vehicle_lock_doors(i_Vehiculo[v][vID]); }
			ChangeVehiclePaintjob(i_Vehiculo[v][vID], i_Vehiculo[v][vPaintJob]);
         	ChangeVehicleColor(i_Vehiculo[v][vID], i_Vehiculo[v][vColor_1], i_Vehiculo[v][vColor_2]);
          	SetVehicleVirtualWorld(i_Vehiculo[v][vID], i_Vehiculo[v][vVirtualWorld]);
           	LinkVehicleToInterior(i_Vehiculo[v][vID], i_Vehiculo[v][vInterior]);
            SetExVehicleHealth(i_Vehiculo[v][vID], i_Vehiculo[v][vVida]);
            for(new m = 0; m < MAX_MODVEHICULOS; m++) { AddVehicleComponent(i_Vehiculo[v][vID], i_Vehiculo[v][vModificaciones][m]); }
      		foreach(new playerid: Player)
			{
				for(new x = 0; x < 6; x++)
				{
					if(user[playerid][jLlaveCoche][x] == i_Vehiculo[v][vLlave] || es_patente(user[playerid][j2Vehiculos][x]) == i_Vehiculo[v][vLlave])
					{
						new string[128];
       					format(string, sizeof(string), "Vehículo (%s) fue enviado a su última posición.", NombreVehiculo(i_Vehiculo[v][vID]));
       					_Mensaje(playerid, 5, "0", string);
					}
				}
			}
      	}
    }
	if(LSPD_Veh2(vehicleid)) { SetVehicleVirtualWorld(vehicleid, 77); LinkVehicleToInterior(vehicleid, 12); }
	if(LSPD_Veh3(vehicleid)) { SetVehicleVirtualWorld(vehicleid, 88); LinkVehicleToInterior(vehicleid, 12); }

	if (veh_Granjero(vehicleid) || veh_Pescador(vehicleid))
	{
		SetVehicleVirtualWorld(vehicleid, vehicleid);
	}
	if(LSFD_2Veh(vehicleid))
	{
		SetVehicleVirtualWorld(vehicleid, 55);
		LinkVehicleToInterior(vehicleid, 12);
	}
	return 1;
}

funcion LimpiezaLineas(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			_Mensaje(playerid, 4, "ffffff", " ");
		}
	}
	return 1;
}

funcion CleanScreen()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		LimpiezaLineas(i, 100);
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	spawn_veh(vehicleid);
	if(iVehiculo2(vehicleid))
	{
		random_veh[vehicleid] = 0;
		DestroyVehicle(vehicleid);
	}
	return 1;
}

iVehiculo2(carid)
{
	for(new v = 0; v < 40; v++) { if(carid == iVehiculo[v]) return 1; }
	return 0;
}

Log(const sz_fileName[], const sz_input[])
{
	new sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

funcion _HERIDO(playerid)
{
	if (user[playerid][jEncarcelado] == 1)
	{
		SetPlayerPos(playerid, 2687.3630, 2705.2537, 22.9472);
		SetPlayerVirtualWorld(playerid, playerid); user[playerid][jVirtualWorld] = playerid;
		SetPlayerInterior(playerid, 0); user[playerid][jInterior] = 0;
	}
	else if (user[playerid][jEncarcelado] == 2)
	{
		user[playerid][jSangre] = 85;
		user[playerid][jInterior] = 5;
		SetPlayerInterior(playerid, 5);
		SetPlayerVirtualWorld(playerid, 0);
		user[playerid][jVirtualWorld] = 0;
		new rand = random(sizeof(_COMISARIAp));
		SetPlayerPos(playerid, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2]);
		CargarObjetos(playerid);
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
		_Mensaje(playerid, 4, "00428E", "LSPD:{ffffff} Sigues en la prisión de la comisaría, espera tu condena.");
	}
	else if (user[playerid][jEncarcelado] == 3)
	{
		user[playerid][jSangre] = 85;
		SetPlayerInterior(playerid, 0); user[playerid][jInterior] = 0;
		SetPlayerVirtualWorld(playerid, 0); user[playerid][jVirtualWorld] = 0;
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		new rand = random(sizeof(_FEDERALp));
		SetPlayerPos(playerid, _FEDERALp[rand][0], _FEDERALp[rand][1], _FEDERALp[rand][2]);
		_Mensaje(playerid, 4, "00778E", "SADOC:{ffffff} Sigues en la prisión federal, espera tu condena.");
	}
	return 1;
}

_OnPlayerSpawn(playerid)
{
	SetPlayerTeam(playerid, 1);
	if (user[playerid][jRegistrado] == 0)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
		_cIniciales(playerid, 1);
		user[playerid][jEdad] = 18; user[playerid][jSexo] = 1;
		ExPlayerDialog(playerid, D_SEXO, DIALOG_STYLE_MSGBOX, "Sexo:", "¿Cuál es el sexo de su personaje?", "Hombre", "Mujer");
	}
	else if (user[playerid][jRegistrado] != 0)
	{
		if (user[playerid][jBaneado] == 10 || user[playerid][jBaneado] == 20) _Dban(playerid);
		else
		{
			Anti[playerid][vidac1] = 1001.0;
			Anti[playerid][vidac2] = 1001.0;
			SetPlayerColor(playerid, C_PLAYERBLANCO);
			user[playerid][j_uOOC] = 0;
			user[playerid][j_uSAN] = 0;
			SetPlayerSkin(playerid, user[playerid][jRopa]);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
			new ManoDer = user[playerid][jm_Derecha], ManoIzq = user[playerid][jm_Izquierda], Espalda = user[playerid][jEspalda];
			if (ManoDer == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			if (ManoDer > 0) { PonerObjeto(playerid, 1, ManoDer); if (InfoObjeto[ManoDer][IDArma] > 0) { _GiveWeapon(playerid, InfoObjeto[ManoDer][IDArma], user[playerid][jm_DerechaCant]); } }
			if (ManoIzq > 0) { PonerObjeto(playerid, 2, ManoIzq); }
			if (Espalda > 0) { PonerObjeto(playerid, 3, Espalda); }
			for (new x; x < MAX_uACCESORIOS; x++)
			{
				if (InfoAccesorio[playerid][x][aColocado] != 0) ColocarObject(playerid, x, InfoAccesorio[playerid][x][aModelo], InfoAccesorio[playerid][x][aParte], InfoAccesorio[playerid][x][aPosicionX], InfoAccesorio[playerid][x][aPosicionY], InfoAccesorio[playerid][x][aPosicionZ], InfoAccesorio[playerid][x][aRotacionX], InfoAccesorio[playerid][x][aRotacionY],
				InfoAccesorio[playerid][x][aRotacionZ], InfoAccesorio[playerid][x][aEscalaX], InfoAccesorio[playerid][x][aEscalaY], InfoAccesorio[playerid][x][aEscalaZ]);
			}
			if(GetPVarInt(playerid, "EnEvento") == 1)
			{
				DeletePVar(playerid, "EnEvento");
				SetPlayerPos(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
				SetPlayerVirtualWorld(playerid, jEvento[playerid][eVW]);
				SetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
				SetPlayerInterior(playerid, jEvento[playerid][eInterior]);
				Sangre_(playerid, jEvento[playerid][eVariable][4]);
				Chaleco_(playerid, jEvento[playerid][eVariable][5]);
				for(new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0.0; }
				jEvento[playerid][eVW] = 0;
				jEvento[playerid][eInterior] = 0;
				TogglePlayerControllable(playerid, 1);
				return 1;
			}
			if (user[playerid][jEncarcelado] == 1)
			{
				user[playerid][j_uTelefono] = 1;
				SetPlayerVirtualWorld(playerid, playerid); user[playerid][jVirtualWorld] = playerid;
				SetPlayerInterior(playerid, 0); user[playerid][jInterior] = 0;
				SetPlayerPos(playerid, 2687.3630, 2705.2537, 22.9472);
				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "Congelado", 1);
				new string[200];
				format(string, sizeof(string), "OOC{ffffff} Fecha: %s / Razón: %s / Responsable: %s", user[playerid][jJmomento], user[playerid][jJrazon], user[playerid][jJculpable]);
				SendSplitMessage(playerid, 0xB00000ff, string);
				PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
				return 1;
			}
			else if (user[playerid][jEncarcelado] == 2)
			{
				user[playerid][j_uTelefono] = 1;
				new rand = random(sizeof(_COMISARIAp));
				SetPlayerPos(playerid, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2]);
				CargarObjetos(playerid);
				_Mensaje(playerid, 4, "00428E", "LSPD:{ffffff} Sigues en la prisión de la comisaría, espera tu condena.");
				user[playerid][jInterior] = 5;
				SetPlayerInterior(playerid, 5);
				return 1;
			}
			else if (user[playerid][jEncarcelado] == 3)
			{
				user[playerid][j_uTelefono] = 1;
				if (user[playerid][jVirtualWorld] != 1)
				{
					SetPlayerInterior(playerid, 0); user[playerid][jInterior] = 0;
					SetPlayerVirtualWorld(playerid, 0); user[playerid][jVirtualWorld] = 0;
					new rand = random(sizeof(_FEDERALp));
					SetPlayerPos(playerid, _FEDERALp[rand][0], _FEDERALp[rand][1], _FEDERALp[rand][2]);
				}
				_Mensaje(playerid, 4, "00778E", "SADOC:{ffffff} Sigues en la prisión federal, espera tu condena.");
				return 1;
			}
			if(GetPVarInt(playerid, "_DeMbug") == 1)
			{
				if(user[playerid][Started])
				{
				    arr_Engine {user[playerid][Vehicle]} = 0;
					DisablePlayerRaceCheckpoint(playerid);
					DestroyVehicle(user[playerid][Vehicle]);
					random_veh[user[playerid][Vehicle]] = 0;
					//Iter_Remove(Vehicles, user[playerid][Vehicle]);
					Exam_ResetVars(playerid);
				}
				_Limuerte(playerid);
				user[playerid][jAlcohol] = 0;
				Sangre_(playerid, 60);
				Chaleco_(playerid, 0);
				user[playerid][jBanco] -= 25;
				d_estado += 25;
		    	new id = is_player_spawn(playerid);
				set_pos(playerid, point_muerte[id][x_spawn], point_muerte[id][y_spawn], point_muerte[id][z_spawn], point_muerte[id][angle_spawn], 0, 0);
				limpiar_chat(playerid, 20);
				new string[90];
				format(string, sizeof(string), "Bienvenido de vuelta, %s.", nombre_pj(playerid));
				Mensaje_(playerid, 0x537CDBFF, string);
				TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);
				user[playerid][jMuerto2] = 0;
				user[playerid][jMuerto] = 0;
				EliminarHerido(playerid);
				format(QuienMato[playerid], 24, "Nadie");
				reaparecer[playerid] = 0;
			    if (user[playerid][jDtipo] != 0)
			    {
					terminardroga(playerid, user[playerid][jDtipo]);
					user[playerid][jDtiempo] = 0;
				}
				DeletePVar(playerid, "_DeMbug");
			}
		}
	}
	return 1;
}

funcion Caminar(playerid)
{
	switch(user[playerid][jEstilo])
	{
		case 1:  SetPlayerWalkingStyle(playerid,WALK_DEFAULT);
		case 2:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA);
		case 3:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA2);
		case 4:  SetPlayerWalkingStyle(playerid,WALK_OLD);
		case 5:  SetPlayerWalkingStyle(playerid,WALK_FAT_OLD);
		case 6:  SetPlayerWalkingStyle(playerid,WALK_FAT);
		case 7:  SetPlayerWalkingStyle(playerid,WALK_LADY);
		case 8:  SetPlayerWalkingStyle(playerid,WALK_LADY2);
		case 9:  SetPlayerWalkingStyle(playerid,WALK_WHORE);
		case 10: SetPlayerWalkingStyle(playerid,WALK_WHORE2);
		case 11: SetPlayerWalkingStyle(playerid,WALK_DRUNK);
		case 12: SetPlayerWalkingStyle(playerid,WALK_BLIND);
	}
	return 1;
}

stock _Limuerte(pd)
{
	usandoYo[pd] = 0;
	mensaje_bubble(pd, "", 0xBFC0C2FF, 1.0, 1000, 1);
	colocar_estado(2, pd, "void", 0xBFC0C2FF);
    _arma[pd] = -1;
	asesino[pd] = -1;
	YaAviso[pd] = 0;
    format(InfoHeridas[pd][Cabeza], 24, "-"); InfoHeridas[pd][Cabezar] = 0;
    format(InfoHeridas[pd][Torso], 24, "-"); InfoHeridas[pd][Torsor] = 0;
    format(InfoHeridas[pd][BrazoD], 24, "-"); InfoHeridas[pd][BrazoDr] = 0;
    format(InfoHeridas[pd][BrazoI], 24, "-"); InfoHeridas[pd][BrazoIr] = 0;
    format(InfoHeridas[pd][EntreP], 24, "-"); InfoHeridas[pd][EntrePr] = 0;
    format(InfoHeridas[pd][PiernaD], 24, "-"); InfoHeridas[pd][PiernaDr] = 0;
    format(InfoHeridas[pd][PiernaI], 24, "-"); InfoHeridas[pd][PiernaIr] = 0;
    format(InfoHeridas[pd][Lesiones], 24, "-"); InfoHeridas[pd][Lesionesr] = 0;
}

stock _cIniciales(playerid, tipo)
{
	if (tipo == 1)//registro
	{
		TogglePlayerSpectating(playerid, false);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, playerid + 500);
		SetPlayerPos(playerid, 2489.0820, -1498.1196, 23.9304);
		SetPlayerCameraPos(playerid, 2481.2100, -1498.2103, 25.1600);
		SetPlayerCameraLookAt(playerid, 2480.3101, -1497.7776, 25.0600);
	}
	else if (tipo == 2)//ingreso
	{
		TogglePlayerSpectating(playerid, false);
		TogglePlayerSpectating(playerid, 0);
		SetPlayerVirtualWorld(playerid, playerid + 500);
		SetPlayerInterior(playerid, 6);
		SetPlayerCameraPos(playerid, 2313.9963, -1208.8090, 1050.2799);
		SetPlayerCameraLookAt(playerid, 2314.1931, -1207.8302, 1050.3053);
		SetPlayerPos(playerid, 2311.7051, -1211.8851, 1049.0728);
	}
}

// lo pusist komo stock y no hace falta men,t amo.

/*characterSave(extraid)
{
	if(user[extraid][jMascaraPD] == 1) return 1;

	if(!JugadorEnSeccion {extraid}) return 1;

	new personaje = GetPVarInt(extraid, "crear_pj");

	new playername[50 + MAX_PLAYER_NAME];

	switch (personaje)
	{
		case 1: alm(playername, user[extraid][jCuenta_1]);
		case 2: alm(playername, user[extraid][jCuenta_2]);
		case 3: alm(playername, user[extraid][jCuenta_3]);
	}

	if(characterCheck(playername) || registrando[extraid] == 1)
	{
		new data[60];
		format(data, sizeof data, DATOS_Personajes, playername);
		new INI: File = INI_Open(data);
		INI_WriteString(File, "NombrePJ", playername);
		INI_WriteInt(File, "Registrado", user[extraid][jRegistrado]);
		INI_WriteString(File, "Cuenta", username[extraid]);
		if(GetPVarInt(extraid, "EnEvento") == 0) { GetPlayerHealth(extraid, user[extraid][jSangre]); }
		if(_mirilla[extraid] == -1 && EnServicioADM[extraid] == 0)
		{
			GetPlayerPos(extraid, user[extraid][jPosicion_X], user[extraid][jPosicion_Y], user[extraid][jPosicion_Z]);
			GetPlayerFacingAngle(extraid, user[extraid][jPosicion_R]);
			user[extraid][jInterior] = GetPlayerInterior(extraid);
			user[extraid][jVirtualWorld] = GetPlayerVirtualWorld(extraid);
		}
		INI_WriteInt(File, "Time_Game", user[extraid][ptimegame]);
		INI_WriteString(File, "Fecha_reg", user[extraid][pfechareg]);
		INI_WriteFloat(File, "Posicion_X", user[extraid][jPosicion_X]);
		INI_WriteFloat(File, "Posicion_Y", user[extraid][jPosicion_Y]);
		INI_WriteFloat(File, "Posicion_Z", user[extraid][jPosicion_Z]);
		INI_WriteFloat(File, "Posicion_R", user[extraid][jPosicion_R]);
		INI_WriteFloat(File, "Vida", user[extraid][jSangre]);
		INI_WriteFloat(File, "Chaleco", user[extraid][jChaleco]);
		INI_WriteInt(File, "Interior", user[extraid][jInterior]);
		INI_WriteInt(File, "VirtualWorld", user[extraid][jVirtualWorld]);
		INI_WriteInt(File, "Sexo", user[extraid][jSexo]);
		INI_WriteInt(File, "Raza", user[extraid][jRaza]);
		INI_WriteInt(File, "Edad", user[extraid][jEdad]);
		INI_WriteInt(File, "Ciudad", user[extraid][jCiudad]);
		INI_WriteInt(File, "Hablar", user[extraid][jHablar]);
		INI_WriteInt(File, "Estilo", user[extraid][jEstilo]);
		INI_WriteInt(File, "Pelea", user[extraid][jPelea]);
		INI_WriteInt(File, "Sed", user[extraid][jSed]);
		INI_WriteFloat(File, "Hambre", user[extraid][jHambre]);
		INI_WriteInt(File, "Alcohol", user[extraid][jAlcohol]);
		INI_WriteInt(File, "Fuerza", user[extraid][jFuerza]);
		INI_WriteInt(File, "Dinero", GetPVarInt(extraid, "Money"));
		INI_WriteInt(File, "Banco", user[extraid][jBanco]);
		INI_WriteInt(File, "Cheques", user[extraid][jCheques]);
		INI_WriteInt(File, "Debito", user[extraid][jDebito]);
		INI_WriteInt(File, "PuntosRol", user[extraid][jPuntosRol][0]);
		INI_WriteInt(File, "PuntosNRol", user[extraid][jPuntosRol][1]);
		INI_WriteInt(File, "Nivel", user[extraid][jNivel]);
		INI_WriteInt(File, "Experiencia", user[extraid][jExperiencia]);
		INI_WriteInt(File, "Horas", user[extraid][j_Horas]);
		INI_WriteInt(File, "Multicuenta", user[extraid][jMulticuenta]);
		INI_WriteInt(File, "Baneado", user[extraid][jBaneado]);
		INI_WriteString(File, "bCulpable", user[extraid][jBculpable]);
		INI_WriteString(File, "bRazon", user[extraid][jBrazon]);
		INI_WriteString(File, "bMomento", user[extraid][jBmomento]);
		INI_WriteInt(File, "Casa", user[extraid][jCasaKey]);
		INI_WriteInt(File, "Casa2", user[extraid][jCasaKey2]);
		INI_WriteInt(File, "CasaRenta", user[extraid][jAlquiler]);
		INI_WriteInt(File, "timeunrent", user[extraid][j_timeunrent]);
		INI_WriteInt(File, "CasaLlaves", user[extraid][jCasaLlaves]);
		INI_WriteInt(File, "Casa2Llaves", user[extraid][jCasa2Llaves]);
		INI_WriteInt(File, "2CasaLlaves", user[extraid][j2CasaLlaves]);
		INI_WriteInt(File, "2Casa2Llaves", user[extraid][j2Casa2Llaves]);
		INI_WriteInt(File, "Negocio", user[extraid][jNegocioKey]);
		INI_WriteInt(File, "Negocio2", user[extraid][jNegocioKey2]);
		INI_WriteInt(File, "NegocioLlaves", user[extraid][jNegocioLlaves]);
		INI_WriteInt(File, "Negocio2Llaves", user[extraid][jNegocio2Llaves]);
		INI_WriteInt(File, "Empresa", user[extraid][jEmpresaKey]);
		INI_WriteInt(File, "EmpresaLlaves", user[extraid][jEmpresaLlaves]);
		INI_WriteInt(File, "Empresa2Llaves", user[extraid][jEmpresa2Llaves]);
		INI_WriteInt(File, "Contrato", user[extraid][jContrato]);
		INI_WriteInt(File, "HorasE", user[extraid][jHorasE]);
		INI_WriteInt(File, "Almacen", user[extraid][jAlmacen]);
		for(new i = 0; i < 6; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Coche%d", i);
			INI_WriteInt(File, sql, user[extraid][jLlaveCoche][i]);
			format(sql, sizeof(sql), "CocheLlaves%d", i);
			INI_WriteInt(File, sql, user[extraid][j2Vehiculos][i]);
			format(sql, sizeof(sql), "CochexLlaves%d", i);
			INI_WriteInt(File, sql, user[extraid][j2Vehixculos][i]);
		}
		INI_WriteInt(File, "Premium", user[extraid][jPremium]);
		INI_WriteInt(File, "ColorP", user[extraid][jColorP]);
		INI_WriteInt(File, "dPremium", user[extraid][jD_premium]);
		INI_WriteInt(File, "mPremium", user[extraid][jM_premium]);
		for(new i = 0; i < 10; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Bolsillo%d", i);
			INI_WriteInt(File, sql, user[extraid][jBolsillo][i]);
			format(sql, sizeof(sql), "BolsilloCant%d", i);
			INI_WriteInt(File, sql, user[extraid][jBolsilloCant][i]);
		}
		INI_WriteInt(File, "Izquierda", user[extraid][jm_Izquierda]);
		INI_WriteInt(File, "IzquierdaCant", user[extraid][jm_IzquierdaCant]);
		INI_WriteInt(File, "Derecha", user[extraid][jm_Derecha]);
		INI_WriteInt(File, "DerechaCant", user[extraid][jm_DerechaCant]);
		INI_WriteInt(File, "Espalda", user[extraid][jEspalda]);
		INI_WriteInt(File, "EspaldaCant", user[extraid][jEspaldaCant]);
		for(new i = 0; i < 6; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Cinturon%d", i);
			INI_WriteInt(File, sql, user[extraid][jCinturon][i]);
			format(sql, sizeof(sql), "CinturonCant%d", i);
			INI_WriteInt(File, sql, user[extraid][jCinturonCant][i]);
		}
		INI_WriteInt(File, "Ropa", user[extraid][jRopa]);
		INI_WriteInt(File, "Skin", user[extraid][jSkin]);

		INI_WriteInt(File, "RopaArmario1", user[extraid][jRopaArmario][0]);
		INI_WriteInt(File, "RopaArmario2", user[extraid][jRopaArmario][1]);
		INI_WriteInt(File, "RopaArmario3", user[extraid][jRopaArmario][2]);
		INI_WriteInt(File, "RopaArmario4", user[extraid][jRopaArmario][3]);
		INI_WriteInt(File, "RopaArmario5", user[extraid][jRopaArmario][4]);
		INI_WriteInt(File, "RopaArmario6", user[extraid][jRopaArmario][5]);
		INI_WriteInt(File, "RopaArmario7", user[extraid][jRopaArmario][6]);
		INI_WriteInt(File, "RopaArmario8", user[extraid][jRopaArmario][7]);
		INI_WriteInt(File, "Payday", user[extraid][jPayday]);
		INI_WriteInt(File, "timeP", user[extraid][jtimeP]);
		INI_WriteInt(File, "Lider", user[extraid][jLider]);
		INI_WriteInt(File, "Miembro", user[extraid][jMiembro]);
		INI_WriteInt(File, "Rango", user[extraid][jRango]);
		INI_WriteInt(File, "Lider2", user[extraid][jLiderFam]);
		INI_WriteInt(File, "Miembro2", user[extraid][jMiembroFam]);
		INI_WriteInt(File, "Rango2", user[extraid][jRangoFam]);
		INI_WriteInt(File, "Muerto", user[extraid][jMuerto]);
		INI_WriteInt(File, "Muerto2", user[extraid][jMuerto2]);
		INI_WriteInt(File, "Telefono", user[extraid][jTelefono]);
		INI_WriteInt(File, "Saldo", user[extraid][jSaldo]);
		INI_WriteInt(File, "Frecuencia", user[extraid][jFrecuencia]);
		INI_WriteInt(File, "Boombox", user[extraid][jBoombox]);
		INI_WriteInt(File, "Loteria", user[extraid][jLoteria]);
		INI_WriteInt(File, "Mascara", user[extraid][jMascara]);
		INI_WriteInt(File, "MascaraPD", user[extraid][jMascaraPD]);
		INI_WriteInt(File, "Estrellas", user[extraid][jEstrellas]);
		INI_WriteInt(File, "Arrestos", user[extraid][jArrestos]);
		INI_WriteInt(File, "PuntosLic", user[extraid][jPuntosLic]);
		INI_WriteInt(File, "Sanciones", user[extraid][jSanciones]);
		INI_WriteInt(File, "Encarcelado", user[extraid][jEncarcelado]);
		INI_WriteString(File, "jCulpable", user[extraid][jJculpable]);
		INI_WriteString(File, "jRazon", user[extraid][jJrazon]);
		INI_WriteString(File, "jMomento", user[extraid][jJmomento]);
		INI_WriteInt(File, "TiempoCarcel", user[extraid][jTiempoCarcel]);
		new elpru[30];
		format(elpru, sizeof(elpru), "%d", user[extraid][jtiempito]);
		INI_WriteString(File, "tiempito", elpru);
		INI_WriteInt(File, "Cargas", user[extraid][jCargas]);
		INI_WriteInt(File, "Troncos", user[extraid][jTroncos]);
		INI_WriteInt(File, "Pescados", user[extraid][jPescados]);
		INI_WriteInt(File, "Cosechas", user[extraid][jMuebles]);
		INI_WriteInt(File, "cosechitas", user[extraid][jCosechas]);
		INI_WriteInt(File, "Trabajo1", user[extraid][jTrabajo1]);
		INI_WriteInt(File, "Trabajo2", user[extraid][jTrabajo2]);
		INI_WriteInt(File, "Trabajo3", user[extraid][jTrabajo3]);
		INI_WriteInt(File, "Licencias1", user[extraid][jLicencias][0]);
		INI_WriteInt(File, "Licencias2", user[extraid][jLicencias][1]);
		INI_WriteInt(File, "Licencias3", user[extraid][jLicencias][2]);
		INI_WriteInt(File, "Licencias4", user[extraid][jLicencias][3]);
		INI_WriteInt(File, "Licencias5", user[extraid][jLicencias][4]);
		INI_WriteInt(File, "Licencias6", user[extraid][jLicencias][5]);
		INI_WriteInt(File, "Licencias7", user[extraid][jLicencias][6]);
		for(new i = 0; i < 10; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Habilidad%d", i);
			INI_WriteInt(File, sql, user[extraid][jHabilidad][i]);
			format(sql, sizeof(sql), "Habilidadx%d", i);
			INI_WriteInt(File, sql, user[extraid][jHabilidad2][i]);
			format(sql, sizeof(sql), "Adiccion%d", i);
			INI_WriteInt(File, sql, user[extraid][jAdiccion][i]);
		}
		INI_WriteString(File, "Estado", user[extraid][jEstado]);
		INI_WriteInt(File, "Documento", user[extraid][jDocumento]);
		INI_WriteInt(File, "fEdad", user[extraid][jf_Edad]);
		INI_WriteInt(File, "fDocumento", user[extraid][jf_Dni]);
		INI_WriteString(File, "fNombre", user[extraid][jf_Nombre]);
		INI_WriteString(File, "Delito1", p_delito[extraid][0]);
		INI_WriteString(File, "Delito2", p_delito[extraid][1]);
		INI_WriteString(File, "Delito3", p_delito[extraid][2]);
		INI_WriteString(File, "Delito4", p_delito[extraid][3]);
		INI_WriteString(File, "Delito5", p_delito[extraid][4]);
		INI_WriteString(File, "Delito6", p_delito[extraid][5]);
		INI_WriteString(File, "Delito7", p_delito[extraid][6]);
		INI_WriteString(File, "Delito8", p_delito[extraid][7]);
		INI_WriteString(File, "Delito9", p_delito[extraid][8]);
		INI_WriteString(File, "Delito10", p_delito[extraid][9]);
		INI_WriteInt(File, "Delitox1", user[extraid][jDelito][0]);
		INI_WriteInt(File, "Delitox2", user[extraid][jDelito][1]);
		INI_WriteInt(File, "Delitox3", user[extraid][jDelito][2]);
		INI_WriteInt(File, "Delitox4", user[extraid][jDelito][3]);
		INI_WriteInt(File, "Delitox5", user[extraid][jDelito][4]);
		INI_WriteInt(File, "Delitox6", user[extraid][jDelito][5]);
		INI_WriteInt(File, "Delitox7", user[extraid][jDelito][6]);
		INI_WriteInt(File, "Delitox8", user[extraid][jDelito][7]);
		INI_WriteInt(File, "Delitox9", user[extraid][jDelito][8]);
		INI_WriteInt(File, "Delitox10", user[extraid][jDelito][9]);
		for(new i = 0; i < 20; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Contacto%d", i);
			INI_WriteInt(File, sql, user[extraid][jContacto][i]);
		}
		INI_WriteString(File, "ContactoN1", user[extraid][jContactoN1]);
		INI_WriteString(File, "ContactoN2", user[extraid][jContactoN2]);
		INI_WriteString(File, "ContactoN3", user[extraid][jContactoN3]);
		INI_WriteString(File, "ContactoN4", user[extraid][jContactoN4]);
		INI_WriteString(File, "ContactoN5", user[extraid][jContactoN5]);
		INI_WriteString(File, "ContactoN6", user[extraid][jContactoN6]);
		INI_WriteString(File, "ContactoN7", user[extraid][jContactoN7]);
		INI_WriteString(File, "ContactoN8", user[extraid][jContactoN8]);
		INI_WriteString(File, "ContactoN9", user[extraid][jContactoN9]);
		INI_WriteString(File, "ContactoN10", user[extraid][jContactoN10]);
		INI_WriteString(File, "ContactoN11", user[extraid][jContactoN11]);
		INI_WriteString(File, "ContactoN12", user[extraid][jContactoN12]);
		INI_WriteString(File, "ContactoN13", user[extraid][jContactoN13]);
		INI_WriteString(File, "ContactoN14", user[extraid][jContactoN14]);
		INI_WriteString(File, "ContactoN15", user[extraid][jContactoN15]);
		INI_WriteString(File, "ContactoN16", user[extraid][jContactoN16]);
		INI_WriteString(File, "ContactoN17", user[extraid][jContactoN17]);
		INI_WriteString(File, "ContactoN18", user[extraid][jContactoN18]);
		INI_WriteString(File, "ContactoN19", user[extraid][jContactoN19]);
		INI_WriteString(File, "ContactoN20", user[extraid][jContactoN20]);
		for(new i = 0; i < 22; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Tiempos%d", i);
			INI_WriteInt(File, sql, user[extraid][jTiempos][i]);
		}
		INI_WriteInt(File, "uHora", user[extraid][jHoras]);
		INI_WriteInt(File, "uMinuto", user[extraid][jMinutos]);
		INI_WriteInt(File, "uSegundo", user[extraid][jSegundos]);
		INI_WriteInt(File, "uDia", user[extraid][jDias]);
		INI_WriteInt(File, "uMes", user[extraid][jMeses]);
		INI_WriteInt(File, "uAno", user[extraid][jAnos]);
		for(new i = 0; i < 5; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Empeno%d", i);
			INI_WriteInt(File, sql, user[extraid][jEmpeno][i]);
			format(sql, sizeof(sql), "Empenox%d", i);
			INI_WriteInt(File, sql, user[extraid][jEmpeno2][i]);
		}
		for(new i = 0; i < 12; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "obPF%d", i);
			INI_WriteInt(File, sql, user[extraid][job_PF][i]);
			format(sql, sizeof(sql), "obPFCant%d", i);
			INI_WriteInt(File, sql, user[extraid][job_PFCant][i]);
		}
		INI_WriteInt(File, "DineroPF", user[extraid][jDineroPF]);
		INI_WriteInt(File, "ObjetosRep", user[extraid][ObjetosRep]);
		INI_WriteInt(File, "Droga_tipo", user[extraid][jDtipo]);
		INI_WriteInt(File, "Droga_tiempo", user[extraid][jDtiempo]);
		INI_WriteInt(File, "Droga_power", user[extraid][jDpower]);
		INI_WriteInt(File, "Droga_bonus1", user[extraid][jDbonus][0]);
		INI_WriteInt(File, "Droga_bonus2", user[extraid][jDbonus][1]);
		INI_WriteInt(File, "AbstinenceEffect", user[extraid][pAbstinenceEffect]);
		INI_WriteInt(File, "AbstinenceTime", user[extraid][pAbstinenceTime]);
		INI_WriteInt(File, "Textdraw_T", user[extraid][pHud]);
		INI_WriteInt(File, "Fianza", user[extraid][jFianza]);
		INI_WriteInt(File, "uTelefono", user[extraid][j_uTelefono]);
		INI_WriteInt(File, "uManos", user[extraid][j_uManos]);
		INI_WriteInt(File, "uMP", user[extraid][j_uMP]);
		INI_WriteString(File, "uMP2", user[extraid][j_uMP2]);
		INI_WriteInt(File, "uRadio", user[extraid][j_uRadio]);
		INI_WriteInt(File, "uAudio", user[extraid][j_uAudio]);
		INI_WriteInt(File, "uSAN", user[extraid][j_uSAN]);
		INI_WriteInt(File, "uOOC", user[extraid][j_uOOC]);
		INI_WriteInt(File, "uTextdraw", user[extraid][pUseHud]);
		INI_WriteInt(File, "rand_veh1", user[extraid][jCoche][0]);
		INI_WriteInt(File, "rand_veh2", user[extraid][jCoche][1]);
		INI_WriteString(File, "Casado", user[extraid][jCasado]);
		INI_WriteInt(File, "Graffito", user[extraid][jGraffito]);
		
		for(new v = 0; v < MAX_ACCESORIOS; v++)
		{
			new string[128];
			format(string, 128, "%d_Modelo", v);
			INI_WriteInt(File, string, InfoAccesorio[extraid][v][aModelo]);
			format(string, 128, "%d_Parte", v);
			INI_WriteInt(File, string, InfoAccesorio[extraid][v][aParte]);
			format(string, 128, "%d_Posicion_X", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aPosicionX]);
			format(string, 128, "%d_Posicion_Y", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aPosicionY]);
			format(string, 128, "%d_Posicion_Z", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aPosicionZ]);
			format(string, 128, "%d_Rotacion_X", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aRotacionX]);
			format(string, 128, "%d_Rotacion_Y", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aRotacionY]);
			format(string, 128, "%d_Rotacion_Z", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aRotacionZ]);
			format(string, 128, "%d_Escala_X", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aEscalaX]);
			format(string, 128, "%d_Escala_Y", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aEscalaY]);
			format(string, 128, "%d_Escala_Z", v);
			INI_WriteFloat(File, string, InfoAccesorio[extraid][v][aEscalaZ]);
			format(string, 128, "%d_Colocado", v);
			INI_WriteInt(File, string, InfoAccesorio[extraid][v][aColocado]);
		}
		INI_Close(File);
	}
	return 1;
}*/

stock cargar_pj(playerid)
{
    StopAudioStreamForPlayer(playerid);
    ResetPlayerMoney(playerid);
    JugadorEnSeccion {playerid} = 1;
    CurrentMoney[playerid] = GetPVarInt(playerid, "Money");
    if(user[playerid][jMuerto] == 1)
	{
		SetPVarInt(playerid, "EnCrack", 1);
        if(user[playerid][jMuerto2] == 1) SinSangre(playerid, 1);
        else if(user[playerid][jMuerto2] == 2) SinSangre(playerid, 2);
    }
	SpawnPlayer(playerid);
	RevisarVIP(playerid); // Revisa su sistema vip.
	SetPlayerSkin(playerid, user[playerid][jRopa]);
	//
	if (user[playerid][jCoche][0] == 0)
	{
		SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
		SetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
		SetPlayerInterior(playerid, user[playerid][jInterior]);
		SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
		Streamer_UpdateEx(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		new id_veh = 0;
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if (random_veh[x] == user[playerid][jCoche][0])
			{
				id_veh = x;
			}
		}
		if (id_veh != 0)
		{
			new Float: posx = 0.0, Float: posy = 0.0, Float: posz = 0.0, vw = GetVehicleVirtualWorld(id_veh);
			GetVehiclePos(id_veh, posx, posy, posz);
			if (posx == 0.0)
			{
				SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
				SetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
				SetPlayerInterior(playerid, user[playerid][jInterior]);
				SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
				Streamer_UpdateEx(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
				SetCameraBehindPlayer(playerid);
				user[playerid][jCoche][0] = 0;
				user[playerid][jCoche][1] = -1;
			}
			else
			{
				if (vw != 0)
				{
					SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
					SetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
					SetPlayerInterior(playerid, user[playerid][jInterior]);
					SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
					Streamer_UpdateEx(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
					SetCameraBehindPlayer(playerid);
					user[playerid][jCoche][0] = 0;
					user[playerid][jCoche][1] = -1;
				}
				else
				{
					if(IsSeatAvailable(id_veh, user[playerid][jCoche][1]))
					{
						ClearAnimations(playerid);
						SetPlayerPos(playerid, posx, posy, posz);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						PutPlayerInVehicle(playerid, id_veh, user[playerid][jCoche][1]);
					}
					else
					{
						SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y]+2, user[playerid][jPosicion_Z]);
						SetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
						SetPlayerInterior(playerid, user[playerid][jInterior]);
						SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
						user[playerid][jCoche][0] = 0;
						user[playerid][jCoche][1] = -1;
					}
			    }
			}
		}
		else
		{
			SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y]+2, user[playerid][jPosicion_Z]);
			SetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
			SetPlayerInterior(playerid, user[playerid][jInterior]);
			SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
			user[playerid][jCoche][0] = 0;
			user[playerid][jCoche][1] = -1;
		}
	}
	//
	Sangre_(playerid, user[playerid][jSangre]);
	Chaleco_(playerid, user[playerid][jChaleco]);
	SetPlayerScore(playerid, user[playerid][jNivel]);
	SetPlayerFightingStyle(playerid, user[playerid][jPelea]);
	user[playerid][State] = 3;
	Caminar(playerid);
	new hora_s, minuto_s, segundo_s;
	gettime(hora_s, minuto_s, segundo_s);
	SetPlayerTime(playerid, hora_s, minuto_s);
	OnPlayerChangeHud(playerid);
	if(user[playerid][jInterior] > 0 || user[playerid][jVirtualWorld] > 0) { CargarObjetos(playerid); }
	if (user[playerid][jDtipo] != 0)
	{
	    if(user[playerid][jAdiccion][0] >= 10 || user[playerid][jAdiccion][1] >= 10 || user[playerid][jAdiccion][2] >= 10 || user[playerid][jAdiccion][3] >= 10 || user[playerid][jAdiccion][4] >= 10 || user[playerid][jAdiccion][5] >= 10)
	    {
		    if(user[playerid][pAbstinenceTime] != 0) GiveAbstinence(playerid);
		    else random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
	    }
		new d_tipo = user[playerid][jDtipo];
		if (d_tipo == 7)
		{
			switch(hora_s)
        	{
				case 0..5: SetPlayerTime(playerid, 0, 0), SetPlayerWeather(playerid, 44);
				case 6..8: SetPlayerTime(playerid, 7, 0), SetPlayerWeather(playerid, 44);
				case 9..19: SetPlayerTime(playerid, 20, 0), SetPlayerWeather(playerid, 44);
				case 20..23: SetPlayerTime(playerid, 1, 0), SetPlayerWeather(playerid, 44);
			}
		}
		else if (d_tipo == 5)
		{
			if (user[playerid][jDpower] == 1)
			{
				if(hora_s > 5 && hora_s < 20) SetPlayerTime(playerid, 7, 0), SetPlayerWeather(playerid, 250);
				else if(hora_s <= 5 && hora_s >= 20) SetPlayerTime(playerid, 6, 0), SetPlayerWeather(playerid, 250);
			}
			else
			{
				if(hora_s > 5 && hora_s < 20) SetPlayerTime(playerid, 9, 0), SetPlayerWeather(playerid, -66);
   				else if(hora_s <= 5 && hora_s >= 20) SetPlayerTime(playerid, 21, 0), SetPlayerWeather(playerid, -66);
			}
		}
	}
	// para limpiar cosas futuras
	/*if(user[playerid][jTiempos][15] != 67)
	{
	    if(user[playerid][jTiempos][15] = 67;
	}*/
	juegador(playerid);
	reiniciar_veh(playerid);
	if (user[playerid][jMiembro] == 2) sadocs++;
	if (Es_Faccion(playerid, 5)) members_fd++;
	DeletePVar(playerid, "change_pj");
	SetPlayerColor(playerid, C_PLAYERBLANCO);
	if (user[playerid][jCoche][0] != 0) ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
	return 1;
}

juegador(playerid)
{
	limpiar_chat(playerid, 60);
	new
		vip[8],
		string[300]
	;

	format(string, sizeof(string), "[INFO] Bienvenido a Generation City RolePlay. Su última conexión fue el día %02d/%02d/%02d  %02d:%02d\n\n", user[playerid][jDias], user[playerid][jMeses], user[playerid][jAnos], user[playerid][jHoras], user[playerid][jMinutos]);
	SendClientMessage(playerid, 0x7593F5FF, string);
	SendClientMessage(playerid, 0x7593F5FF, "[INFO] Puedes usar (/lugares) o (/gps) para localizar los puntos más importantes del servidor.");

	if (user[playerid][jPuntosRol][0] <= 0) user[playerid][jPuntosRol][0] = 0;
	switch (user[playerid][jPremium])
	{
     	case 1: vip = "PLATA";
    	case 2: vip = "ORO";
    }
    if (user[playerid][jPremium] > 0)
	{
        format(string, sizeof(string), "[INFO] Actualmente cuenta con premium: %s. Cual vence el día %d de %s.", vip, user[playerid][jD_premium], GetMonth(user[playerid][jM_premium]));
		SendClientMessage(playerid, 0xFFDB4200, string);
    }
    return 1;
}
/*	new vehss;
	for(new i = 0; i < 6; i++)
	{
		new veh = user[playerid][jLlaveCoche][i];
		if(veh != 0)++vehss;
	}
	if (vehss) { strcat(DialogStatus, "{ffffff}Los vehículos están guardados en su última posición. {00c200}(/coches)\n"); }

	if (user[playerid][jDtipo] != 0)
	{
		new d_tipo = user[playerid][jDtipo];
		if (d_tipo == 7) strcat(DialogStatus, "\n{84C000}Sigues bajo los efectos del PCP.\n");
		else if (d_tipo == 5) strcat(DialogStatus, "\n{84C000}Sigues bajo los efectos del LSD.\n");
	}
	if(user[playerid][jDocumento] == 0) strcat(DialogStatus, "\n{F8D48C}Recuerda que no tienes un documento, saca uno en el ayuntamiento.\n");

	format(string2, sizeof(string2), "Bienvenido %s.", nombre_pj(playerid));

	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, string2, DialogStatus, "Jugar", "");
}*/


slot_objeto(id_objeto, cantidad)
{
	new
		mensaje [128]
	;

	switch (InfoObjeto[id_objeto][oDefinition])
	{
		case 1: // objetos
		{
			switch (id_objeto)
			{
				case 50: format(mensaje, sizeof(mensaje), "%s {7b7dfe}[ID: %d]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
				case 51..71: format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
				case 72: format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d.0]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
				case 131: format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d$]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
				default: format(mensaje, sizeof(mensaje), "%s", InfoObjeto[id_objeto][NombreObjeto]);
			}
		}

		case 2: // armas con munición fija
		{
			format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
		}

		case 3: // armas con capacidad - cargadores - cajas de armas y cargadores - fardos de drogas
		{
			format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d/{3daf41}%d{7b7dfe}]", InfoObjeto[id_objeto][NombreObjeto], cantidad, InfoObjeto[id_objeto][Capacidad]);
		}

		case 4:
		{
			format(mensaje, sizeof(mensaje), "%s {7b7dfe}[%d]", InfoObjeto[id_objeto][NombreObjeto], cantidad);
		}

	}
	return mensaje;
}

capacidad_objecto(id_objeto)
{
	new
		cantidad
	;
	switch (id_objeto)
	{
		case 19: cantidad = 150; //45. Colt
		case 20: cantidad = 100; //45. Colt+silenciador
		case 21: cantidad = 100; //D. Eagle
		case 29: cantidad = 200; //Tec-9
		case 25: cantidad = 200; //UZI
		case 26: cantidad = 180; //MP5K
		case 22: cantidad = 80; //Escopeta
		case 23: cantidad = 40; //Escopeta recortada
		case 24: cantidad = 70; //Escopeta de combate
		case 27: cantidad = 200; //Ak-47
		case 28: cantidad = 200; //M4A1
		case 30: cantidad = 30; //Rifle de caza
		case 31: cantidad = 20; //Rifle de francotirador
		case 41: cantidad = 50; //Cargador 45. Colt
		case 42: cantidad = 50; //Cargador D. Eagle
		case 45: cantidad = 100; //Cargador Tec-9
		case 43: cantidad = 100; //Cargador UZI
		case 44: cantidad = 180; //Cargador MP5K
		case 46: cantidad = 200; //Cargador Ak-47
		case 47: cantidad = 200; //Cargador M4A1
		case 48: cantidad = 10; //Cargador rifle
		case 49: cantidad = 30; //Cargador Escopeta
		case 72: cantidad = 65; //Chaleco
		case 161: cantidad = 180; // paintball smg
		default: cantidad = InfoObjeto[id_objeto][Capacidad];
	}
	return cantidad;
}

//
funcion update_manos(playerid)
{
	new ManoDer = user[playerid][jm_Derecha], ManoDerCant = user[playerid][jm_DerechaCant];
	if(ManoDer == 0) RemovePlayerAttachedObject(playerid, 7);
	if(InfoObjeto[ManoDer][Arrojadizo] == 1 && ManoDerCant <= 0)
	{
		user[playerid][jm_Derecha] = 0;
		user[playerid][jm_DerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
	}
	if(ManoDer > 0 && ManoDer < sizeof(InfoObjeto))
	{
		if(ManoDerCant > InfoObjeto[ManoDer][Capacidad])
		{
			if(InfoObjeto[ManoDer][IDArma] > 0) { ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, InfoObjeto[ManoDer][IDArma], InfoObjeto[ManoDer][Capacidad]); }
			user[playerid][jm_DerechaCant] = InfoObjeto[ManoDer][Capacidad];
		}
		if(ManoDer < 16 && ManoDerCant <= 0) { GivePlayerWeapon(playerid, InfoObjeto[ManoDer][IDArma], 1); }
	}
	new ManoIzq = user[playerid][jm_Izquierda], ManoIzqCant = user[playerid][jm_IzquierdaCant];
	if(ManoIzq == 0) RemovePlayerAttachedObject(playerid, 8);
	if(ManoIzq > 0 && ManoIzq < sizeof(InfoObjeto))
	{
		if(ManoIzqCant > InfoObjeto[ManoIzq][Capacidad]) { user[playerid][jm_IzquierdaCant] = InfoObjeto[ManoIzq][Capacidad]; }
		if(ManoIzq < 16 && ManoIzqCant <= 0) { user[playerid][jm_IzquierdaCant] = 1; }
	}
	if(InfoObjeto[ManoIzq][Arrojadizo] == 1 && ManoIzqCant <= 0)
	{
		user[playerid][jm_Izquierda] = 0;
		user[playerid][jm_IzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
	}
}
//
funcion ver_fArmario(playerid, familia)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 12; i++)
	{
		new ArmarioObj = i_Familia[familia][fArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s [%d]", InfoObjeto[ArmarioObj][NombreObjeto], i_Familia[familia][fArmarioCantidad][i]);
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s [%d]", InfoObjeto[user[playerid][jm_Derecha]][NombreObjeto], user[playerid][jm_DerechaCant]);
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s [%d]", InfoObjeto[user[playerid][jm_Izquierda]][NombreObjeto], user[playerid][jm_IzquierdaCant]);
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_Farmario, DIALOG_STYLE_LIST, "{D6E1EB}Armario de organización", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_fArmario(playerid, familia, id)
{
	if(familia == 0) return 1;
	update_manos(playerid);
	new ArmarioObj = i_Familia[familia][fArmario][id], Cant = i_Familia[familia][fArmarioCantidad][id], string[128];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
 	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Familia[familia][fArmario][id] = 0;
		i_Familia[familia][fArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas un ~b~%s~w~ del armario.", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		ActualizarFamilia(user[playerid][jMiembroFam]);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Familia[familia][fArmario][id] = 0;
		i_Familia[familia][fArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas un ~b~%s~w~ del armario.", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		ActualizarFamilia(user[playerid][jMiembroFam]);
	} else  return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_fArmario(playerid, familia, mano)
{
	if(familia == 0) return 1;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 12; x++)
		{
			if(i_Familia[familia][fArmario][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Familia[familia][fArmario][x] = Mano;
				i_Familia[familia][fArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				ActualizarFamilia(user[playerid][jMiembroFam]);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 12; x++)
		{
			if(i_Familia[familia][fArmario][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Familia[familia][fArmario][x] = Mano;
				i_Familia[familia][fArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				ActualizarFamilia(user[playerid][jMiembroFam]);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	return 1;
}
//
funcion ver_alquiler(playerid, casa)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 7; i++)
	{
		new ArmarioObj = i_Casa[casa][c_stockarmy][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Casa[casa][c_stockarmy_cant][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, d_alquiler, DIALOG_STYLE_LIST, "{ffffff}Armario: {90C3D4}Alquiler", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion alqS_Armario(playerid, casa, id)
{
	if(casa == 0) return 1;
	new string[128];
	update_manos(playerid);
	new ArmarioObj = i_Casa[casa][c_stockarmy][id], Cant = i_Casa[casa][c_stockarmy_cant][id];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Casa[casa][c_stockarmy][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Casa[casa][c_stockarmy][id] = 0;
		i_Casa[casa][c_stockarmy_cant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		save_Casa(casa, false, -1, true);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Casa[casa][c_stockarmy][id] = 0;
		i_Casa[casa][c_stockarmy_cant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		save_Casa(casa, false, -1, true);
	} else return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

funcion alqG_Armario(playerid, casa, mano)
{
	if(casa == 0) return 1;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 7; x++)
		{
			if(i_Casa[casa][c_stockarmy][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Casa[casa][c_stockarmy][x] = Mano;
				i_Casa[casa][c_stockarmy_cant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				save_Casa(casa, false, -1, true);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 7; x++)
		{
			if(i_Casa[casa][c_stockarmy][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Casa[casa][c_stockarmy][x] = Mano;
				i_Casa[casa][c_stockarmy_cant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				save_Casa(casa, false, -1, true);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	return 1;
}
//
funcion ver_Armario(playerid, casa)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 15; i++)
	{
		new ArmarioObj = i_Casa[casa][cArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Casa[casa][cArmarioCantidad][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_Carmario2, DIALOG_STYLE_LIST, "{ffffff}Armario: {00c200}Casa", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_Armario(playerid, casa, id)
{
	if(casa == 0) return 1;
	new string[128];
	update_manos(playerid);
	new ArmarioObj = i_Casa[casa][cArmario][id], Cant = i_Casa[casa][cArmarioCantidad][id];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Casa[casa][cArmario][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Casa[casa][cArmario][id] = 0;
		i_Casa[casa][cArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (EnCasaID[playerid]!= INVALID_CASA_ID) {
			format(string, sizeof(string), "Registros: %s sacó %s de la casa ID %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], EnCasaID[playerid]);
			Log("Registros/ArmarioC.log", string);
		}
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Casa[casa][cArmario][id] = 0;
		i_Casa[casa][cArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (EnCasaID[playerid]!= INVALID_CASA_ID)
		{
			format(string, sizeof(string), "Registros: %s sacó %s de la casa ID %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], EnCasaID[playerid]);
			Log("Registros/ArmarioC.log", string);
		}
	} else return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

funcion G_Armario(playerid, casa, mano)
{
	if(casa == 0) return 1;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 15; x++)
		{
			if(i_Casa[casa][cArmario][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Casa[casa][cArmario][x] = Mano;
				i_Casa[casa][cArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 15; x++)
		{
			if(i_Casa[casa][cArmario][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Casa[casa][cArmario][x] = Mano;
				i_Casa[casa][cArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	return 1;
}
funcion _PDArmario(playerid, casa)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 15; i++)
	{
		new ArmarioObj = i_Casa[casa][cArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Casa[casa][cArmarioCantidad][i]));
		strcat(dialog, string);
	}
	if (user[playerid][jRango] < 6) { ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}Armario de casa", dialog, "Seleccionar", "Cancelar"); }
	else ExPlayerDialog(playerid, D_PDarmario, DIALOG_STYLE_LIST, "{D6E1EB}Armario de casa", dialog, "Seleccionar", "Cancelar");
	return 1;
}

//almacen
funcion ver_Almacen(playerid, almacen)
{
	update_manos(playerid);
	new
		dialog[3000],
		string[128],
		string2[128]
	;
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}Mano derecha vacía");
	else format(string, sizeof(string), "\n{FFFFFF}Guardar mano derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}Mano izquierda vacía");
	else format(string, sizeof(string), "\n{FFFFFF}Guardar mano izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	strcat(dialog, "\n{00a2ff}-----");

	for(new i = 0; i < 35; i++)
	{
		new ArmarioObj = i_Almacen[almacen][aArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Almacen[almacen][aArmarioCant][i]));
		strcat(dialog, string);
	}
	
	format(string2, sizeof(string2), "{D6E1EB}Almacen nª%d", almacen);
	ExPlayerDialog(playerid, d_Almacen, DIALOG_STYLE_LIST, string2, dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion s_Almacen(playerid, almacen, id)
{
	if(almacen == 0) return 1;
	almacen--;
	new string[128];
	update_manos(playerid);
	new ArmarioObj = i_Almacen[almacen][aArmario][id], Cant = i_Almacen[almacen][aArmarioCant][id];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Almacen[almacen][aArmario][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Almacen[almacen][aArmario][id] = 0;
		i_Almacen[almacen][aArmarioCant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del almacen", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		save_Almacen(almacen, false, id);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Almacen[almacen][aArmario][id] = 0;
		i_Almacen[almacen][aArmarioCant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del almacen", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		save_Almacen(almacen, false, id);
	} else return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

funcion g_Almacen(playerid, almacen, mano)
{
	if(almacen == 0) return 1;
	almacen--;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 50; x++)
		{
			if(i_Almacen[almacen][aArmario][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Almacen[almacen][aArmario][x] = Mano;
				i_Almacen[almacen][aArmarioCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el almacen", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				save_Almacen(almacen, false, x);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del almacen están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 50; x++)
		{
			if(i_Almacen[almacen][aArmario][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Almacen[almacen][aArmario][x] = Mano;
				i_Almacen[almacen][aArmarioCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el almacen", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				save_Almacen(almacen, false, x);
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del almacen están ocupadas.");
	}
	return 1;
}
//armario garaje

funcion _PDgArmario(playerid, casa)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 15; i++)
	{
		new ArmarioObj = i_Garaje[casa][gArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Garaje[casa][gArmarioCantidad][i]));
		strcat(dialog, string);
	}
	if (user[playerid][jRango] < 6) { ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}Armario de garaje", dialog, "Seleccionar", "Cancelar"); }
	else ExPlayerDialog(playerid, D_PDgarmario, DIALOG_STYLE_LIST, "{D6E1EB}Armario de garaje", dialog, "Seleccionar", "Cancelar");
	return 1;
}

funcion ver_gArmario(playerid, casa)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 15; i++)
	{
		new ArmarioObj = i_Garaje[casa][gArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Garaje[casa][gArmarioCantidad][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_gArmario2, DIALOG_STYLE_LIST, "{ffffff}Armario: {00a2ff}Garaje", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_gArmario(playerid, casa, id)
{
	if(casa == 0) return 1;
	new string[128];
	update_manos(playerid);
	new ArmarioObj = i_Garaje[casa][gArmario][id], Cant = i_Garaje[casa][gArmarioCantidad][id];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Garaje[casa][gArmario][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Garaje[casa][gArmario][id] = 0;
		i_Garaje[casa][gArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (EnGarajeID[playerid]!= INVALID_CASA_ID) {
			format(string, sizeof(string), "Registros: %s sacó %s del garaje ID %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], EnGarajeID[playerid]);
			Log("Registros/ArmarioG.log", string);
		}
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Garaje[casa][gArmario][id] = 0;
		i_Garaje[casa][gArmarioCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (EnGarajeID[playerid]!= INVALID_CASA_ID)
		{
			format(string, sizeof(string), "Registros: %s sacó %s del garaje ID %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], EnGarajeID[playerid]);
			Log("Registros/ArmarioG.log", string);
		}
	} else return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

funcion G_gArmario(playerid, casa, mano)
{
	if(casa == 0) return 1;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 15; x++)
		{
			if(i_Garaje[casa][gArmario][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Garaje[casa][gArmario][x] = Mano;
				i_Garaje[casa][gArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 15; x++)
		{
			if(i_Garaje[casa][gArmario][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Garaje[casa][gArmario][x] = Mano;
				i_Garaje[casa][gArmarioCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	return 1;
}
//
funcion n_verArmario(playerid, negocio)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 10; i++)
	{
		new ArmarioObj = i_Negocio[negocio][nArmario][i];
		if(ArmarioObj == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(ArmarioObj, i_Negocio[negocio][nArmarioCant][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_ArmarioN, DIALOG_STYLE_LIST, "{D6E1EB}Armario de negocio", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_nArmario(playerid, negocio, id)
{
	if(negocio == 0) return 1;
	update_manos(playerid);
	new ArmarioObj = i_Negocio[negocio][nArmario][id], Cant = i_Negocio[negocio][nArmarioCant][id], string[128];
	if(ArmarioObj == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
 	if(ArmarioObj == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Negocio[negocio][nArmario][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[ArmarioObj][IDArma] > 0)
		{
			new arma = InfoObjeto[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = ArmarioObj;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		i_Negocio[negocio][nArmario][id] = 0;
		i_Negocio[negocio][nArmarioCant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "Registros: %s sacó %s del negocio %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], negocio);
		Log("Registros/ArmarioN.log", string);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = ArmarioObj;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, ArmarioObj);
		i_Negocio[negocio][nArmario][id] = 0;
		i_Negocio[negocio][nArmarioCant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del armario", InfoObjeto[ArmarioObj][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "Registros: %s sacó %s del negocio %d.", nombre_pj(playerid), InfoObjeto[ArmarioObj][NombreObjeto], negocio);
		Log("Registros/ArmarioN.log", string);
	} else return _Mensaje(playerid, 0, "1", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_nArmario(playerid, negocio, mano)
{
	if(negocio == 0) return 1;
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], ArmarioLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 10; x++)
		{
			if(i_Negocio[negocio][nArmario][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Negocio[negocio][nArmario][x] = Mano;
				i_Negocio[negocio][nArmarioCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof(string), "Registros: %s guardó %s en el negocio %d.", nombre_pj(playerid), InfoObjeto[Mano][NombreObjeto], negocio);
				Log("Registros/ArmarioN.log", string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "1", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], ArmarioLibre;
		for(new x = 0; x < 10; x++)
		{
			if(i_Negocio[negocio][nArmario][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Negocio[negocio][nArmario][x] = Mano;
				i_Negocio[negocio][nArmarioCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en el armario", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof(string), "Registros: %s guardó %s en el negocio %d.", nombre_pj(playerid), InfoObjeto[Mano][NombreObjeto], negocio);
				Log("Registros/ArmarioN.log", string);
				ArmarioLibre = 1;
				return 1;
			}
		}
		if(ArmarioLibre == 0) return _Mensaje(playerid, 0, "1", "Todas las ranuras del armario están ocupadas.");
	}
	return 1;
}
//
funcion ver_Guantera(playerid, vehicleid)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 6; i++)
	{
		new Bonnet = i_Vehiculo[vehicleid][vGuantera][i];
		if(Bonnet == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(Bonnet, i_Vehiculo[vehicleid][vGuanteraCantidad][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_MENUGUANTERA, DIALOG_STYLE_LIST, "{D6E1EB}Inventario vehicular", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_Guantera(playerid, vehicleid, id)
{
	update_manos(playerid);
	new Bonnet = i_Vehiculo[vehicleid][vGuantera][id], Cant = i_Vehiculo[vehicleid][vGuanteraCantidad][id], string[128];
	if(Bonnet == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	new weaponid = InfoObjeto[i_Vehiculo[vehicleid][vGuantera][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[Bonnet][IDArma] > 0)
		{
			new arma = InfoObjeto[Bonnet][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = Bonnet;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		i_Vehiculo[vehicleid][vGuantera][id] = 0;
		i_Vehiculo[vehicleid][vGuanteraCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del vehículo", InfoObjeto[Bonnet][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		VehGuanteraPlayer[playerid] = 0;
		vehicleSave(vehicleid);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = Bonnet;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bonnet);
		i_Vehiculo[vehicleid][vGuantera][id] = 0;
		i_Vehiculo[vehicleid][vGuanteraCantidad][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ del vehículo", InfoObjeto[Bonnet][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		VehGuanteraPlayer[playerid] = 0;
		vehicleSave(vehicleid);
	} else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_Guantera(playerid, vehicleid, mano)
{
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], BonnetLibre;
		if(InfoObjeto[Mano][Guardable] == 2) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 6; x++)
		{
			if(i_Vehiculo[vehicleid][vGuantera][x] == 0)
			{
				i_Vehiculo[vehicleid][vGuantera][x] = Mano;
				i_Vehiculo[vehicleid][vGuanteraCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en la guantera.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				BonnetLibre = 1;
				VehGuanteraPlayer[playerid] = 0;
				vehicleSave(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del vehículo están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], BonnetLibre;
		if(InfoObjeto[Mano][Guardable] == 2 || InfoObjeto[Mano][Guardable] == 3) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		for(new x = 0; x < 6; x++)
		{
			if(i_Vehiculo[vehicleid][vGuantera][x] == 0)
			{
				i_Vehiculo[vehicleid][vGuantera][x] = Mano;
				i_Vehiculo[vehicleid][vGuanteraCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en la guantera.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				BonnetLibre = 1;
				VehGuanteraPlayer[playerid] = 0;
				vehicleSave(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del vehículo están ocupadas.");
	}
	return 1;
}
//
funcion ver_Maletero(playerid, vehicleid)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < i_Vehiculo[vehicleid][vMaxMaletero]; i++)
	{
		new Bonnet = i_Vehiculo[vehicleid][vMaletero][i];
		if(Bonnet == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(Bonnet, i_Vehiculo[vehicleid][vMaleteroCantidad][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	if(i_Vehiculo[vehicleid][vMaxMaletero] == 12+user[playerid][jPremium]) ExPlayerDialog(playerid, D_MENUMALETERO, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Salir");
	else if(i_Vehiculo[vehicleid][vMaxMaletero] == 7+user[playerid][jPremium]) ExPlayerDialog(playerid, D_MENUMALETERO2, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Salir");
	else if(i_Vehiculo[vehicleid][vMaxMaletero] == 2+user[playerid][jPremium]) ExPlayerDialog(playerid, D_MENUMALETERO3, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Salir");
	else if(i_Vehiculo[vehicleid][vMaxMaletero] == 15) ExPlayerDialog(playerid, D_MENUMALETERO5, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Salir");
	else ExPlayerDialog(playerid, D_MENUMALETERO4, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_Maletero(playerid, vehicleid, id)
{
	update_manos(playerid);
	new Bonnet = i_Vehiculo[vehicleid][vMaletero][id], Cant = i_Vehiculo[vehicleid][vMaleteroCantidad][id], string[128];
	if(Bonnet == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(Bonnet == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_Vehiculo[vehicleid][vMaletero][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{

		if(InfoObjeto[Bonnet][IDArma] > 0)
		{
			new arma = InfoObjeto[Bonnet][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = Bonnet;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		i_Vehiculo[vehicleid][vMaletero][id] = 0;
		i_Vehiculo[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "saca su %s del vehículo %s.", InfoObjeto[Bonnet][NombreObjeto], nombre_vehiculo[i_Vehiculo[vehicleid][vModelo] - 400]);
		accion_rol(playerid, 1, string, 1);
		format(string, sizeof string, "%s sacó del maletero (ID VEH %d) [%s].", nombre_pj(playerid), i_Vehiculo[vehicleid][vLlave], InfoObjeto[Bonnet][NombreObjeto]);
		Log("Registros/MaleterosU.log", string);
		VehMaleteroPlayer[playerid] = 0;
		vehicleSave(vehicleid);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = Bonnet;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bonnet);
		i_Vehiculo[vehicleid][vMaletero][id] = 0;
		i_Vehiculo[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "saca su %s del vehículo %s.", InfoObjeto[Bonnet][NombreObjeto], nombre_vehiculo[i_Vehiculo[vehicleid][vModelo] - 400]);
		accion_rol(playerid, 1, string, 1);
		format(string, sizeof string, "%s sacó del maletero (ID VEH %d) [%s].", nombre_pj(playerid), i_Vehiculo[vehicleid][vLlave], InfoObjeto[Bonnet][NombreObjeto]);
		Log("Registros/MaleterosU.log", string);
		VehMaleteroPlayer[playerid] = 0;
		vehicleSave(vehicleid);
	} else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_Maletero(playerid, vehicleid, mano)
{
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], BonnetLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < i_Vehiculo[vehicleid][vMaxMaletero]; x++)
		{
			if(i_Vehiculo[vehicleid][vMaletero][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Vehiculo[vehicleid][vMaletero][x] = Mano;
				i_Vehiculo[vehicleid][vMaleteroCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "guarda su %s en el vehículo %s.", InfoObjeto[Mano][NombreObjeto], nombre_vehiculo[i_Vehiculo[vehicleid][vModelo] - 400]);
				accion_rol(playerid, 1, string, 1);
				format(string, sizeof string, "%s guardó en el maletero (ID VEH %d) [%s].", nombre_pj(playerid), i_Vehiculo[vehicleid][vLlave], InfoObjeto[Mano][NombreObjeto]);
				Log("Registros/MaleterosU.log", string);
				BonnetLibre = 1;
				VehMaleteroPlayer[playerid] = 0;
				vehicleSave(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del maletero están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], BonnetLibre;
		for(new x = 0; x < i_Vehiculo[vehicleid][vMaxMaletero]; x++)
		{
			if(i_Vehiculo[vehicleid][vMaletero][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_Vehiculo[vehicleid][vMaletero][x] = Mano;
				i_Vehiculo[vehicleid][vMaleteroCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "guarda su %s en el vehículo %s.", InfoObjeto[Mano][NombreObjeto], nombre_vehiculo[i_Vehiculo[vehicleid][vModelo] - 400]);
				accion_rol(playerid, 1, string, 1);
				format(string, sizeof string, "%s guardó en el maletero (ID VEH %d) [%s].", nombre_pj(playerid), i_Vehiculo[vehicleid][vLlave], InfoObjeto[Mano][NombreObjeto]);
				Log("Registros/MaleterosU.log", string);
				BonnetLibre = 1;
				VehMaleteroPlayer[playerid] = 0;
				vehicleSave(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del maletero están ocupadas.");
	}
	return 1;
}
//
funcion ver_MaleteroF(playerid, vehicleid)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 12; i++)
	{
		new Bonnet = i_facveh[vehicleid][vMaletero][i];
		if(Bonnet == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(Bonnet, i_facveh[vehicleid][vMaleteroCantidad][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	ExPlayerDialog(playerid, D_MENUMALETEROF, DIALOG_STYLE_LIST, "{D6E1EB}Maletero", dialog, "Seleccionar", "Cancelar");
	return 1;
}
funcion S_MaleteroF(playerid, vehicleid, id)
{
	update_manos(playerid);
	new string[128];
	new Bonnet = i_facveh[vehicleid][vMaletero][id], Cant = i_facveh[vehicleid][vMaleteroCantidad][id];
	if(Bonnet == 0) return _Mensaje(playerid, 0, "1", "Ésta ranura se encuentra vacía.");
	if(Bonnet == 131)
	{
		if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		} else return _Mensaje(playerid, 0, "9", "Debes poseer ambas manos vacías.");
	}
	new weaponid = InfoObjeto[i_facveh[vehicleid][vMaletero][id]][IDArma];
	if (user[playerid][j_Horas] < 10)
	{
		if (weaponid >= 22 && weaponid <= 29309)
		{
 			_Mensaje(playerid, 4, "b00000", "No posees diez horas de juego, no puedes tomar el arma.");
 			return 1;
    	}
	}
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[Bonnet][IDArma] > 0)
		{
			new arma = InfoObjeto[Bonnet][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = Bonnet;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		i_facveh[vehicleid][vMaletero][id] = 0;
		i_facveh[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "Sacas un(a) ~b~%s~w~ del maletero.", InfoObjeto[Bonnet][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		VehMaleteroPlayer[playerid] = 0;
		save_veh_fac(vehicleid);
		format(string, sizeof string, "%s ha sacado del maletero (ID VEH %d) [%s].", nombre_pj(playerid), vehicleid, InfoObjeto[Bonnet][NombreObjeto]);
		Log("Registros/MaleterosFac.log", string);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = Bonnet;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bonnet);
		i_facveh[vehicleid][vMaletero][id] = 0;
		i_facveh[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "Sacas un(a) ~b~%s~w~ del maletero.", InfoObjeto[Bonnet][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		VehMaleteroPlayer[playerid] = 0;
		save_veh_fac(vehicleid);
		format(string, sizeof string, "%s ha sacado del maletero (ID VEH %d) [%s].", nombre_pj(playerid), vehicleid, InfoObjeto[Bonnet][NombreObjeto]);
		Log("Registros/MaleterosFac.log", string);
	} else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_MaleteroF(playerid, vehicleid, mano)
{
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128],BonnetLibre;
		if(InfoObjeto[Mano][IDArma] > 0) //- Si es arma
		{
			if(IntentoChitearBalas(playerid)) return 1;
			Cant = user[playerid][jm_DerechaCant];
			RemovePlayerWeapon(playerid, InfoObjeto[Mano][IDArma]);
		}
		for(new x = 0; x < 12; x++)
		{
			if(i_facveh[vehicleid][vMaletero][x] == 0)
			{
				if(user[playerid][jm_Derecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_facveh[vehicleid][vMaletero][x] = Mano;
				i_facveh[vehicleid][vMaleteroCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas un(a) ~b~%s~w~.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof string, "%s ha guardado en el maletero (ID VEH %d) [%s].", nombre_pj(playerid), vehicleid, InfoObjeto[Mano][NombreObjeto]);
				Log("Registros/MaleterosFac.log", string);
				BonnetLibre = 1;
				VehMaleteroPlayer[playerid] = 0;
				save_veh_fac(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del maletero están ocupadas.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "9", "No tienes nada en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], BonnetLibre;
		for(new x = 0; x < 12; x++)
		{
			if(i_facveh[vehicleid][vMaletero][x] == 0)
			{
				if(user[playerid][jm_Izquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				i_facveh[vehicleid][vMaletero][x] = Mano;
				i_facveh[vehicleid][vMaleteroCantidad][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas un(a) ~b~%s~w~ en el maletero.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof string, "%s ha guardado en el maletero (ID VEH %d) [%s].", nombre_pj(playerid), vehicleid, InfoObjeto[Mano][NombreObjeto]);
				Log("Registros/MaleterosFac.log", string);
				BonnetLibre = 1;
				VehMaleteroPlayer[playerid] = 0;
				save_veh_fac(vehicleid);
				return 1;
			}
		}
		if(BonnetLibre == 0) return _Mensaje(playerid, 0, "9", "Todas las ranuras del maletero están ocupadas.");
	}
	return 1;
}

//
funcion ver_inventario(playerid)
{
	update_manos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 10; i++)
	{
		new Bol = user[playerid][jBolsillo][i];
		if(Bol == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
		else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(Bol, user[playerid][jBolsilloCant][i]));
		strcat(dialog, string);
	}
	format(string, sizeof(string), "\n{ffffff}-----");
	strcat(dialog, string);
	if(user[playerid][jm_Derecha] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Derecha: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid][jm_Derecha], user[playerid][jm_DerechaCant]));
	strcat(dialog, string);
	if(user[playerid][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
	else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid][jm_Izquierda], user[playerid][jm_IzquierdaCant]));
	strcat(dialog, string);
	if(user[playerid][jEspalda] != 0)
	{
		format(string, sizeof(string), "\n{90C3D4}%s:{FFFFFF} %s", ParteAccesorios[InfoAccesorio[playerid][7][aParte]], slot_objeto(user[playerid][jEspalda], user[playerid][jEspaldaCant]));
		strcat(dialog, string);
	}
	ExPlayerDialog(playerid, D_INVENTARIO, DIALOG_STYLE_LIST, "{D6E1EB}Inventario", dialog, "Seleccionar", "Cancelar");
	return 1;
}

funcion R_Inventario(playerid, playerid2)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(playerid2))
	{
		update_manos(playerid2);
		new string[300], DialogStatus[3000];
		for(new i = 0; i < 10; i++)
		{
			new Bol = user[playerid2][jBolsillo][i];
			if(Bol == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
			else format(string, sizeof(string), "\n{FFFFFF} %s", slot_objeto(Bol, user[playerid2][jBolsilloCant][i]));
			strcat(DialogStatus, string);
		}
		if(user[playerid2][jm_Derecha] == 0) format(string, sizeof(string), "\n\n{b0b0b0}M. Derecha: vacía");
		else format(string, sizeof(string), "\n\n{FFFFFF}M. Derecha: %s", slot_objeto(user[playerid2][jm_Derecha], user[playerid2][jm_DerechaCant]));
		strcat(DialogStatus, string);
		if(user[playerid2][jm_Izquierda] == 0) format(string, sizeof(string), "\n{b0b0b0}M. Izquierda: vacía");
		else format(string, sizeof(string), "\n{FFFFFF}M. Izquierda: %s", slot_objeto(user[playerid2][jm_Izquierda], user[playerid2][jm_IzquierdaCant]));
		strcat(DialogStatus, string);
		if(user[playerid2][jEspalda] != 0)
		{
			format(string, sizeof(string), "\n{90C3D4}%s:{FFFFFF} %s", ParteAccesorios[InfoAccesorio[playerid2][7][aParte]], slot_objeto(user[playerid2][jEspalda], user[playerid2][jEspaldaCant]));
			strcat(DialogStatus, string);
		}
		format(string, sizeof(string), "\n\n{ffffff}Dinero: {00c200}%d\n", ComprobarDineroJ(playerid2));
		strcat(DialogStatus, string);
		new coordsstring2[128];
		format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Inventario de %s", nombre_pj(playerid2));
		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, coordsstring2, DialogStatus, "Cerrar", "");
	}
	return 1;
}
//
funcion ver_Cinturon(playerid, playerid2)
{
	update_manos(playerid);
	if(IsPlayerConnected(playerid) && IsPlayerConnected(playerid2))
	{
		new cinturon[1024], string[128];
		for(new i = 0; i < 6; i++)
		{
			new Bol = user[playerid2][jCinturon][i];
			if(Bol == 0) format(string, sizeof(string), "\n{b0b0b0}Vacío");
			else format(string, sizeof(string), "\n{FFFFFF}%s", slot_objeto(Bol, user[playerid2][jCinturonCant][i]));
			strcat(cinturon, string);
		}
		ExPlayerDialog(playerid, D_CINTURON, DIALOG_STYLE_LIST, "{D6E1EB}Cinturón táctico", cinturon, "Seleccionar", "Cancelar");
	}
	return 1;
}
funcion S_Cinturon(playerid, id)
{
	update_manos(playerid);
	new Bol = user[playerid][jCinturon][id], Cant = user[playerid][jCinturonCant][id], string[128];
	if(Bol == 0) return 1;
	if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[Bol][IDArma] > 0)
		{
			new arma = InfoObjeto[Bol][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = Bol;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		user[playerid][jCinturon][id] = 0;
		user[playerid][jCinturonCant][id] = 0;
		format(string, sizeof(string), "Sacas ~b~%s~w~ del ct.", InfoObjeto[Bol][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "desenfunda su %s reglamentaria.", InfoObjeto[Bol][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 0)
	{
		user[playerid][jm_Izquierda] = Bol;
		user[playerid][jm_IzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bol);
		user[playerid][jCinturon][id] = 0;
		user[playerid][jCinturonCant][id] = 0;
		format(string, sizeof(string), "Sacas ~b~%s~w~ del ct.", InfoObjeto[Bol][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "desenfunda su %s reglamentaria.", InfoObjeto[Bol][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
	} else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}
funcion G_Cinturon(playerid, mano)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], BolsilloLibre;
		if(InfoObjeto[Mano][Guardable] == 2 || InfoObjeto[Mano][Guardable] == 3) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		for(new x = 0; x < 6; x++)
		{
			if(user[playerid][jCinturon][x] == 0)
			{
				user[playerid][jCinturon][x] = Mano;
				user[playerid][jCinturonCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				ResetPlayerWeapons(playerid);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas ~b~%s~w~ en el ct.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof(string), "enfunda su %s reglamentaria.", InfoObjeto[Mano][NombreObjeto]);
				accion_rol(playerid, 1, string, 1);
				BolsilloLibre = 1;
				return 1;
			}
		}
		if(BolsilloLibre == 0) return _Mensaje(playerid, 0, "9", "No tienes más huecos en tu cinturón.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], BolsilloLibre;
		if(InfoObjeto[Mano][Guardable] == 2 || InfoObjeto[Mano][Guardable] == 3) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		for(new x = 0; x < 6; x++)
		{
			if(user[playerid][jCinturon][x] == 0)
			{
				user[playerid][jCinturon][x] = Mano;
				user[playerid][jCinturonCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas ~b~%s~w~ en el ct.", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				format(string, sizeof(string), "enfunda su %s reglamentaria.", InfoObjeto[Mano][NombreObjeto]);
				accion_rol(playerid, 1, string, 1);
				BolsilloLibre = 1;
				return 1;
			}
		}
		if(BolsilloLibre == 0) return _Mensaje(playerid, 0, "9", "No tienes más huecos en tu cinturón.");
	}
	return 1;
}
funcion S_Bol(playerid, id)
{
	update_manos(playerid);
	new Bol = user[playerid][jBolsillo][id], Cant = user[playerid][jBolsilloCant][id], string[128];
	if(Bol == 0) return 1;
	if(user[playerid][jm_Izquierda] == 0)
	{
	    if(user[playerid][jm_Derecha] == 0)
		{
			if(InfoObjeto[Bol][IDArma] > 0)
			{
				new arma = InfoObjeto[Bol][IDArma], municion = Cant;
				if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
			}
			user[playerid][jm_Derecha] = Bol;
			user[playerid][jm_DerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bol);
			user[playerid][jBolsillo][id] = 0;
			user[playerid][jBolsilloCant][id] = 0;
			format(string, sizeof(string), "Sacas tu ~b~%s~w~ de tus bolsillos", InfoObjeto[Bol][NombreObjeto]);
			ShowPlayerFooter(playerid, string);
			if (!IsPlayerInAnyVehicle(playerid))
			{
				format(string, sizeof(string), "saca su %s.", InfoObjeto[Bol][NombreObjeto]);
				accion_rol(playerid, 1, string, 1);
			}
			return 1;
		}
		else
		{
		    new x_bol = user[playerid][jm_Derecha], x_cant = user[playerid][jm_DerechaCant];
		    if(InfoObjeto[x_bol][IDArma] > 0) //- Si es arma
			{
				if(IntentoChitearBalas(playerid)) return 1;
				x_cant = user[playerid][jm_DerechaCant];
				RemovePlayerWeapon(playerid, InfoObjeto[x_bol][IDArma]);
			}
			user[playerid][jm_Izquierda] = x_bol;
			user[playerid][jm_IzquierdaCant] = x_cant;
			PonerObjeto(playerid, 2, x_bol);
			if(InfoObjeto[Bol][IDArma] > 0)
			{
				new arma = InfoObjeto[Bol][IDArma], municion = Cant;
				if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
			}
			user[playerid][jm_Derecha] = Bol;
			user[playerid][jm_DerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bol);
			user[playerid][jBolsillo][id] = 0;
			user[playerid][jBolsilloCant][id] = 0;
			format(string, sizeof(string), "Sacas tu ~b~%s~w~, moviste a tu otra mano tu ~b~%s~w~", InfoObjeto[Bol][NombreObjeto], InfoObjeto[x_bol][NombreObjeto]);
			ShowPlayerFooter(playerid, string);
			if (!IsPlayerInAnyVehicle(playerid))
			{
				format(string, sizeof(string), "saca su %s.", InfoObjeto[Bol][NombreObjeto]);
				accion_rol(playerid, 1, string, 1);
			}
			return 1;
		}
	}
	else if(user[playerid][jm_Derecha] == 0)
	{
		if(InfoObjeto[Bol][IDArma] > 0)
		{
			new arma = InfoObjeto[Bol][IDArma], municion = Cant;
			if(municion > 0) { _GiveWeapon(playerid, arma, municion); }
		}
		user[playerid][jm_Derecha] = Bol;
		user[playerid][jm_DerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		user[playerid][jBolsillo][id] = 0;
		user[playerid][jBolsilloCant][id] = 0;
		format(string, sizeof(string), "Sacas tu ~b~%s~w~ de tus bolsillos", InfoObjeto[Bol][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (!IsPlayerInAnyVehicle(playerid))
		{
			format(string, sizeof(string), "saca su %s.", InfoObjeto[Bol][NombreObjeto]);
			accion_rol(playerid, 1, string, 1);
		}
		return 1;
	}
	else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
}
funcion G_Bol(playerid, mano)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	update_manos(playerid);
	if(mano == 1)
	{
		if(user[playerid][jm_Derecha] == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto en tu mano derecha.");
		new Mano = user[playerid][jm_Derecha], Cant = user[playerid][jm_DerechaCant], string[128], BolsilloLibre;
		if(InfoObjeto[Mano][Guardable] == 2 || InfoObjeto[Mano][Guardable] == 3) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		for(new x = 0; x < 10; x++)
		{
			if(user[playerid][jBolsillo][x] == 0)
			{
				user[playerid][jBolsillo][x] = Mano;
				user[playerid][jBolsilloCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				ResetPlayerWeapons(playerid);
				user[playerid][jm_Derecha] = 0;
				user[playerid][jm_DerechaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en los bolsillos", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				if (!IsPlayerInAnyVehicle(playerid))
				{
					format(string, sizeof(string), "guarda su %s.", InfoObjeto[Mano][NombreObjeto]);
					accion_rol(playerid, 1, string, 1);
				}
				BolsilloLibre = 1;
				return 1;
			}
		}
		if(BolsilloLibre == 0) return _Mensaje(playerid, 0, "9", "No tienes espacio en tus bolsillos.");
	}
	else if(mano == 2)
	{
		if(user[playerid][jm_Izquierda] == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto en tu mano izquierda.");
		new Mano = user[playerid][jm_Izquierda], Cant = user[playerid][jm_IzquierdaCant], string[128], BolsilloLibre;
		if(InfoObjeto[Mano][Guardable] == 2 || InfoObjeto[Mano][Guardable] == 3) return _Mensaje(playerid, 0, "9", "Este objeto es demasiado grande.");
		for(new x = 0; x < 10; x++)
		{
			if(user[playerid][jBolsillo][x] == 0)
			{
				user[playerid][jBolsillo][x] = Mano;
				user[playerid][jBolsilloCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				format(string, sizeof(string), "Guardas tu ~b~%s~w~ en los bolsillos", InfoObjeto[Mano][NombreObjeto]);
				ShowPlayerFooter(playerid, string);
				if (!IsPlayerInAnyVehicle(playerid))
				{
					format(string, sizeof(string), "guarda su %s.", InfoObjeto[Mano][NombreObjeto]);
					accion_rol(playerid, 1, string, 1);
				}
				BolsilloLibre = 1;
				return 1;
			}
		}
		if(BolsilloLibre == 0) return _Mensaje(playerid, 0, "9", "No tienes espacio en tus bolsillos.");
	}
	return 1;
}
funcion C_Mano(playerid)
{
	update_manos(playerid);
	if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0) { _Mensaje(playerid, 0, "9", "No tienes nada en ninguna mano."); return 1; }
	new ManoDer = user[playerid][jm_Derecha], ManoDerCant = user[playerid][jm_DerechaCant];
	new ManoIzq = user[playerid][jm_Izquierda], ManoIzqCant = user[playerid][jm_IzquierdaCant];
	if(ManoDer == 0)
	{
		RemovePlayerAttachedObject(playerid, 8);
		PonerObjeto(playerid, 1, ManoIzq);
		ShowPlayerFooter(playerid, "~y~Has intercambiado los objetos de tus manos");
		if(InfoObjeto[ManoIzq][IDArma] > 0) {
			_GiveWeapon(playerid, InfoObjeto[ManoIzq][IDArma], ManoIzqCant);
		}
	}
	else if(ManoIzq == 0)
	{
		PonerObjeto(playerid, 2, ManoDer);
		ResetPlayerWeapons(playerid);
		RemovePlayerAttachedObject(playerid, 7);
		ShowPlayerFooter(playerid, "~y~Has intercambiado los objetos de tus manos");
	}
	else
	{
		ResetPlayerWeapons(playerid);
		PonerObjeto(playerid, 1, ManoIzq);
		PonerObjeto(playerid, 2, ManoDer);
		ShowPlayerFooter(playerid, "~y~Has intercambiado los objetos de tus manos");
		if(InfoObjeto[ManoIzq][IDArma] > 0) { _GiveWeapon(playerid, InfoObjeto[ManoIzq][IDArma], ManoIzqCant); }
	}
	user[playerid][jm_DerechaCant] = ManoIzqCant, user[playerid][jm_Derecha] = ManoIzq;
	user[playerid][jm_IzquierdaCant] = ManoDerCant, user[playerid][jm_Izquierda] = ManoDer;
	return 1;
}
//
public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == boton_policia || buttonid == boton_policia1)
	{
		if(!Es_Faccion(playerid, 1))
		{
			_Mensaje(playerid, 0, "6", "Tu no tienes acceso a abrir esta puerta.");
			return 1;
		}
		MoveDynamicObject(puerta_policia, 859.8000, 2325.1826, 1909.3872, 0.8);
		SetTimer("Cerrarpuerta_policia", 5000, 0);
	}
	return false;
}

funcion Cerrarpuerta_policia(playerid) return MoveDynamicObject(puerta_policia, 861.31921, 2325.18262, 1909.38721, 0.8);

funcion EliminarHerido(playerid)
{
	DeletePVar(playerid, "EnCrack");
	DeletePVar(playerid, "Esta_Herido");
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new
		string[256],
		Float: distancia
	;
	if (!JugadorEnSeccion {playerid}) return 0;
	if (_mirilla[playerid] != -1) { _Mensaje(playerid, 4, "b0b0b0", "No puedes hablar este estado."); return 0; }
	if (user[playerid][jEncarcelado] == 1) { _Mensaje(playerid, 4, "FFF000", "No puedes hablar en jail ooc."); return 0; }
	if (user[playerid][jMuerto2] == 2) { Mensaje_(playerid, 0xb00000ff, "No puedes hablar en estado de muerto."); return 0; }
	if (chat_log == 1) printf("[chat] %s dice: %s", nombre_pj(playerid), text); //Se guarda en el chatlog
	if (_2Entrevista[playerid] != INVALID_PLAYER_ID)
	{
		if (Es_Faccion(playerid, 3))
		{
			format(string, sizeof(string), "[INN] Reportero %s: %s", nombre_pj(playerid, 0), text);
			_MensajeSAN(0x00DC76FF, string);
		}
		else
		{
			format(string, sizeof(string), "[INN] Invitado %s: %s", nombre_pj(playerid, 0), text);
			_MensajeSAN(0x00A476FF, string);
		}
		return 0;
	}
	if ( _sanCall == playerid )
	{
		format(string, sizeof(string), "[INN] Línea telefónica: %s", text);
		_MensajeSAN(0x00DC3AFF, string);
		return 0;
	}

	//sistema de centralita
	if(EnLlamada[playerid] == 911) //inicio
	{
		if (strcmp("pd", text, true) == 0)
		{
			format(string, sizeof(string), "%s por teléfono: %s", nombre_pj(playerid, 0), text);
			ProxDetector(8.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, le redireccionaremos hacia la centralita policial.");
			Mensaje_(playerid, 0xA7CE00FF, "Una voz de operadora te saluda. Enseguida te pondrá con alguien.");
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: Policía, ¿dónde es su emergencia?");
			EnLlamada[playerid] = 920;
			for (new x=1; x<sizeof(info_c); x++)
			{
				if (info_c[x][aID] == 0)
				{
					r_id[playerid] = x;
					return 0;
				}
			}
			return 0;
		}
		else if (strcmp("fd", text, true) == 0)
		{
			format(string, sizeof(string), "%s por teléfono: %s", nombre_pj(playerid, 0), text);
			ProxDetector(8.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, le redireccionaremos hacia la centralita de emergencias.");
			Mensaje_(playerid, 0xA7CE00FF, "Una voz de operadora te saluda. Enseguida te pondrá con alguien.");
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: Paramédico, ¿dónde es su emergencia?");
			EnLlamada[playerid] = 930;
			for (new x=1; x<sizeof(info_c); x++)
			{
				if (info_c[x][aID] == 0)
				{
					r_id[playerid] = x;
					return 0;
				}
			}
			return 0;
		}
		_Mensaje(playerid, 4, "b0b0b0", "Opción incorrecta; Opciones disponibles 'FD' o 'PD'.");
		return 0;
	}
	else if(EnLlamada[playerid] == 920) //elige pd
	{
		new x = r_id[playerid];
		format(string, sizeof(string), "%s por teléfono: %s", nombre_pj(playerid, 0), text);
		ProxDetector(8.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		if (GetPVarInt(playerid, "en_emergencias") == 0)
		{
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, ¿cuál es su emergencia? Sea lo más explícito posible, por favor.");
			if (r_id[playerid] != -1) alm(info_c[x][aLugar], text);
			SetPVarInt(playerid, "en_emergencias", 1);
			return 0;
		}
		else if (GetPVarInt(playerid, "en_emergencias") == 1)
		{
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: Su llamada de emergencia está siendo procesada.");
			new zona[128];
			GetPlayer3DZone(playerid, zona, MAX_ZONE_NAME);
			if (r_id[playerid] != -1)
			{
				info_c[x][aID] = x;
				info_c[x][aTelefono] = user[playerid][jTelefono];
				alm(info_c[x][aNombre], nombre_pj(playerid, 0));
				alm(info_c[x][aHechos], text);
				alm(info_c[x][aZona], zona);
				info_c[x][aTipo] = 1;
			}
			//mensaje a policia
			_MensajeRfac(1, 0x00a2ffff, "[PRIORIDAD LSPD] Se ha recibido una nueva llamada al 911. (/centralita)");
			_MensajeRfac(1, C_COLORPOLICIA, "|___________Llamada de emergencia___________|");
			new info[128];
			format(info, sizeof(info), "{00a2ff}* Nombre del ciudadano:{DDCC72} %s", nombre_pj(playerid, 0)); _MensajeRfac(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Teléfono:{DDCC72} %d", user[playerid][jTelefono]); _MensajeRfac(1, 0xDDCC72FF, info);
			new mensaje2[30];
			alm(mensaje2, info_c[x][aLugar]);
			strdel(mensaje2, 30, strlen(mensaje2));
			format(info, sizeof(info), "{00a2ff}* Localización:{DDCC72} %s", mensaje2); _MensajeRfac(1, 0xDDCC72FF, info);
			new mensaje[25];
			alm(mensaje, info_c[x][aHechos]);
			strdel(mensaje, 25, strlen(mensaje));
			format(info, sizeof(info), "{00a2ff}* Situación:{DDCC72} %s...", mensaje); _MensajeRfac(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Rastreo de llamada:{DDCC72} %s.", zona); _MensajeRfac(1, 0xDDCC72FF, info);
			r_id[playerid] = -1;
			DeletePVar(playerid, "en_emergencias");
			EnLlamada[playerid] = 0;
			return 0;
		}
	}
	else if(EnLlamada[playerid] == 930) //elige ed
	{
		new x = r_id[playerid];
		format(string, sizeof(string), "%s por teléfono: %s", nombre_pj(playerid, 0), text);
		ProxDetector(8.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		if (GetPVarInt(playerid, "en_emergencias") == 0)
		{
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, ¿cuál es su emergencia? Sea lo más explícito posible, por favor.");
			if (r_id[playerid] != -1) alm(info_c[x][aLugar], text);
			SetPVarInt(playerid, "en_emergencias", 1);
			return 0;
		}
		else if (GetPVarInt(playerid, "en_emergencias") == 1)
		{
			Mensaje_(playerid, 0xFFF000FF, "[Teléfono: 911]: Su llamada de emergencia está siendo procesada.");
			new zona[128];
			GetPlayer3DZone(playerid, zona, MAX_ZONE_NAME);
			if (r_id[playerid] != -1)
			{
				info_c[x][aID] = x;
				info_c[x][aTelefono] = user[playerid][jTelefono];
				alm(info_c[x][aNombre], nombre_pj(playerid, 0));
				alm(info_c[x][aHechos], text);
				alm(info_c[x][aZona], zona);
				info_c[x][aTipo] = 2;
			}
			//mensaje a LSFD
			_MensajeRfac(5, 0x00a2ffff, "[PRIORIDAD LSFD] Se ha recibido una nueva llamada al 911. (/centralita)");
			_MensajeRfac(5, C_COLORPOLICIA, "|___________Llamada de emergencia___________|");
			new info[128];
			format(info, sizeof(info), "{00a2ff}* Nombre del ciudadano:{DDCC72} %s", nombre_pj(playerid, 0)); _MensajeRfac(5, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Teléfono:{DDCC72} %d", user[playerid][jTelefono]); _MensajeRfac(5, 0xDDCC72FF, info);
			new mensaje2[100];
			alm(mensaje2, info_c[x][aLugar]);
			strdel(mensaje2, 30, strlen(mensaje2));
			format(info, sizeof(info), "{00a2ff}* Localización:{DDCC72} %s", mensaje2); _MensajeRfac(5, 0xDDCC72FF, info);
			new mensaje[100];
			alm(mensaje, info_c[x][aHechos]);
			strdel(mensaje, 25, strlen(mensaje));
			format(info, sizeof(info), "{00a2ff}* Situación:{DDCC72} %s...", mensaje); _MensajeRfac(5, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Rastreo de llamada:{DDCC72} %s.", zona); _MensajeRfac(5, 0xDDCC72FF, info);
			DeletePVar(playerid, "en_emergencias");
			EnLlamada[playerid] = 0;
			r_id[playerid] = -1;
			return 0;
		}
	}

	///////////////////////////
	//-----------------
	///////////////////////////

	if (GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0)
	{
		if (IsPlayerInAnyVehicle(playerid)) distancia = 7.0;
		else distancia = 8.0;
	}
	else
	{
		if (IsPlayerInAnyVehicle(playerid)) distancia = 12.0;
		else distancia = 15.0;
	}
	if(PersonaEnLlamada[playerid] != -1)
	{
		if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3 || EnLlamada[playerid] == 912)
		{
		    new i_numr;
		    if (random_movil[playerid] != 0) i_numr = random_movil[playerid];
		    else i_numr = user[playerid][jTelefono];
			if(Altavoz[PersonaEnLlamada[playerid]] == 0)
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof(string), "[Teléfono: 911]: %s", text);
				else format(string, sizeof(string), "[Teléfono: %d]: %s", i_numr, text);
				_Mensaje(PersonaEnLlamada[playerid], 4, "FFF000", string);
			}
			else
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof(string), "[T. Altavoz: 911]: %s", text);
				else format(string, sizeof(string), "[T. Altavoz: %d]: %s", i_numr, text);
				ProxDetector(3.5, PersonaEnLlamada[playerid], string, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF);
			}
			format(string, sizeof(string), "%s por teléfono: %s", nombre_pj(playerid, 0), text);
			ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			return 0;
		}
		if (!IsPlayerInAnyVehicle(playerid))
		{
			Hablando(playerid, text);
			format(string, sizeof(string), "%s dice: %s", nombre_pj(playerid, 0), text);
			ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		}
		else
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if (!IsWindowedVehicle(tmpcar))
			{
				format(string, sizeof(string), "%s dice: %s", nombre_pj(playerid, 0), text);
				ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			}
			else
			{
				Hablando(playerid, text);
				if (VehicleWindows[tmpcar] == 0)
				{
					foreach(new p: Player)
					{
						if(IsPlayerInVehicle(p, tmpcar))
						{
							format(string, sizeof(string), "[V-C] %s dice: %s", nombre_pj(playerid, 0), text);
							SendClientMessage(p, -1, string);
						}
					}
				}
				else
				{
					format(string, sizeof(string), "[V-A] %s dice: %s", nombre_pj(playerid, 0), text);
					ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
				}
			}
		}
		return 0;
	}
	if (!IsPlayerInAnyVehicle(playerid))
	{
		Hablando(playerid, text);
		format(string, sizeof(string), "%s dice: %s", nombre_pj(playerid, 0), text);
		ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	}
	else
	{
		new carid = GetPlayerVehicleID(playerid);
		if (!IsWindowedVehicle(carid))
		{
			format(string, sizeof(string), "%s dice: %s", nombre_pj(playerid, 0), text);
			ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		}
		else
		{
			Hablando(playerid, text);
			if (VehicleWindows[carid] == 0)
			{
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p, carid))
					{
						format(string, sizeof(string), "[V-C] %s dice: %s", nombre_pj(playerid, 0), text);
						SendClientMessage(p, -1, string);
					}
				}
			}
			else
			{
				format(string, sizeof(string), "[V-A] %s dice: %s", nombre_pj(playerid, 0), text);
				ProxDetector(distancia, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			}
		}
	} // fin charla ic
	return 0;
}

funcion Hablando(playerid, text[])
{
	//
	if (en_lenador[playerid] == 1) return 1;
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return 1;
	if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	if (GetPVarInt(playerid, "EnCrack") == 1) return 1;
	if (_Gomas[playerid] == 1 || Taseado[playerid] == 1) return 1;
	if (JugadorSentado[playerid] == 1) return 1;
	if (user[playerid][j_uManos] == 1) return 1;
	//
	new anim = GetPlayerAnimationIndex(playerid);
	if (!con_animacion[playerid])
	{
		if ((anim != 1538 || anim != 1539 || anim != 1540 || anim != 1541 || anim != 1542))
		{
		    es_hablando[playerid] = 1;
			switch (user[playerid][jHablar])
			{
			    case 1: //normal
			    {
					ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 2: //pandillero
			    {
					ApplyAnimation(playerid, "MISC", "IDLE_CHAT_02", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 200, false, "d", playerid);
					return 1;
			    }
			    case 3: //pandillero2
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 4: //pandillero3
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 5: //pandillero4
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 6: //pandillero5
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 7: //pandillero6
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			    case 8: //pandillero7
			    {
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 0, 0, 1, 1, 1);
					SetTimerEx("FinHablar", strlen(text) * 150, false, "d", playerid);
					return 1;
			    }
			}
		}
	}
	return 1;
}

funcion FinHablar(playerid)
{
	con_animacion[playerid] = 0;
	es_hablando[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!JugadorEnSeccion {playerid})
	{
		_Mensaje(playerid, 0, "646", "No puedes usar ningún comando sin ingresar al servidor.");
		return 0;
	}
	if(GetPVarInt(playerid, "CargandoObjetos") == 1)
	{
		_Mensaje(playerid, 0, "647", "No puedes usar ningún comando, mientras cargan los objetos.");
		return 0;
	}
	if (_mirilla[playerid] != -1)
	{
		if(!strfind(cmdtext, "/mirilla", true)){ }
		else if(!strfind(cmdtext, "/a", true)){ }
		else
		{
			_Mensaje(playerid, 4, "b0b0b0", "No puedes colocar comandos este estado.");
			return 0;
		}
	}
	if (user[playerid][jMuerto2] == 2)
	{
    	if(EnServicioADM[playerid] == 0)
		{
			if(!strfind(cmdtext, "/w", true)){ }
			else if(!strfind(cmdtext, "/mp", true)){ }
			else if(!strfind(cmdtext, "/re", true)){ }
			else if(!strfind(cmdtext, "/gc2", true)){ }
			else if(!strfind(cmdtext, "/reportar", true)){ }
			else if(!strfind(cmdtext, "/revivir", true)){ }
			else if(!strfind(cmdtext, "/ceder", true)){ }
			else if(!strfind(cmdtext, "/qfa", true)){ }
			else if(!strfind(cmdtext, "/do", true)){ }
			else if(!strfind(cmdtext, "/heridas", true)){ }
			else
			{
				Mensaje_(playerid, 0xb00000ff, "No puedes colocar comandos en estado de muerto.");
				return 0;
			}
		}
	}
	if (user[playerid][jEncarcelado] == 1)
	{
    	if(EnServicioADM[playerid] == 0)
		{
			if(!strfind(cmdtext, "/w", true)){ }
			else if(!strfind(cmdtext, "/gc2", true)){ }
			else if(!strfind(cmdtext, "/mp", true)){ }
			else if(!strfind(cmdtext, "/duda", true)){ }
			else if(!strfind(cmdtext, "/fam", true)){ }
			else if(!strfind(cmdtext, "/fac", true)){ }
			else
			{
				_Mensaje(playerid, 4, "FFF000", "No puedes colocar comandos en jail ooc.");
				_Mensaje(playerid, 5, "0", "Sólo /mp - /duda");
				return 0;
			}
		}
	}
	printf("[cmd] [%s]: %s", nombre_pj(playerid), cmdtext);
    if(user[playerid][jAdmin] < 1) {
        if(strfind(cmdtext, ":", true) != -1) {
            new i_numcount, i_period, i_pos;
            while(cmdtext[i_pos]) {
                if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
                else if(cmdtext[i_pos] == '.') i_period++;
                i_pos++;
            }
            if(i_numcount >= 8 && i_period >= 3) {
                new string[128];
                format(string, sizeof(string), "[Atención]{FFFFFF} (ID: %d) %s puede estar haciendo SPAM: '%s'.", playerid, nombre_pj(playerid), cmdtext);
                MensajeAdmin(string);
                return 0;
            }
        }
    }
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		Mensaje_(playerid, 0xb0b0b0ff, "> Comando desconocido. Escribe (/ayuda) para ver los comandos disponibles.");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPVarInt(playerid, "EnCrack") == 1) SetPVarInt(playerid, "_Ejcet", 1);

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: veh_gasolina[vehicleid] = 200, arr_Engine {vehicleid} = 1, SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 0;
	}

	Casco[playerid] = 0;
	if(veh_gasolina[vehicleid] <= 0) { EncenderVehiculo(vehicleid, playerid); }

	if(!ispassenger)
	{
		Anti[playerid][vidac1] = 1001.0;
		Anti[playerid][vidac2] = 1001.0;
		if(cocheocupado(vehicleid))
		{
			ClearAnimations(playerid);
			_Mensaje(playerid, 0, "1", "No esta permitido el CJ, en este servidor.");
			TogglePlayerControllable(playerid, false);
			SetTimerEx("Descongelar", 3000, 0, "i", playerid);
		}
		new si_no = 0;
		//facciones
		if(LSPD_Veh(vehicleid) && Es_Faccion(playerid, 1)) si_no = 1;
		else if(SADOC_Veh(vehicleid) && Es_Faccion(playerid, 2)) si_no = 1;
		else if(SAN_Vehicle(vehicleid) && Es_Faccion(playerid, 3)) si_no = 1;
		else if(ALS_Veh(vehicleid) && Es_Faccion(playerid, 4)) si_no = 1;
		else if(LSFD_Veh(vehicleid) && Es_Faccion(playerid, 5)) si_no = 1;
		//trabajos
		else if(veh_Pescador(vehicleid) && Es_job(playerid, 3)) si_no = 1;
		else if(veh_Granjero(vehicleid) && Es_job(playerid, 6)) si_no = 1;
		if (vehicleid >= 149) si_no = 1;
		if (si_no != 1)
		{
			if(playerTextdraw[playerid] == false)
			{
				playerVehicleTextdraw[playerid] = CreateDynamic3DTextLabel("No tienes las llaves de este vehiculo.", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "i", playerid);

				playerTextdraw[playerid] = true;
			}
			new Float: slx,Float: sly,Float: slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			return ClearAnimations(playerid);
		}
    }
    else
    {
		if(!CercaDelVehiculo(playerid, vehicleid, 7.5) || VehSeguro[vehicleid] >= 1)// G-bugging fix
		{
			if(playerTextdraw[playerid] == false)
			{
				playerVehicleTextdraw[playerid] = CreateDynamic3DTextLabel("Este vehículo se encuentra bloqueado.", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "i", playerid);

				playerTextdraw[playerid] = true;
			}
			new Float: slx,Float: sly,Float: slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			return ClearAnimations(playerid);
		}
	}
	return 1;
}

funcion OnVehicleTextdraw(playerid)
{
	if(IsValidDynamic3DTextLabel(playerVehicleTextdraw[playerid]))
		DestroyDynamic3DTextLabel(playerVehicleTextdraw[playerid]);

	playerTextdraw[playerid] = false;
	return 1;
}

funcion cocheocupado(vehicleid)
{
	for(new i; i < GetMaxPlayers(); i++)
	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER) return 1;
	return 0;
}

funcion cocheocupado2(vehicleid)
{
	for(new i; i < GetMaxPlayers(); i++)
	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER) return i;
	return -1;
}

//Prox detector
forward ProxDetector(Float:radi, playerid, const string[], color1, color2, color3, color4, color5);
public ProxDetector(Float:radi, playerid, const string[], color1, color2, color3, color4, color5)
{
	new
		Float:currentPos[3],
		Float:oldPos[3],
		Float:checkPos[3]
	;
	if(user[playerid][jNivel]==500)SendClientMessage(playerid, color5, "mamalagaz");
	GetPlayerPos(playerid, oldPos[0], oldPos[1], oldPos[2]);
	foreach (new i : Player)
	{
		GetPlayerPos(i, currentPos[0], currentPos[1], currentPos[2]);
		for (new p = 0; p < 3; p++)
		{
			checkPos[p] = (oldPos[p] - currentPos[p]);
		}

		if (GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))
			continue;

		if (((checkPos[0] < radi/16) && (checkPos[0] > -radi/16)) && ((checkPos[1] < radi/16) && (checkPos[1] > -radi/16)) && ((checkPos[2] < radi/16) && (checkPos[2] > -radi/16)))
		{
			if (user[i][jNivel] != -1) SendSplitMessage(i, color1, string);
		}
		else if (((checkPos[0] < radi/8) && (checkPos[0] > -radi/8)) && ((checkPos[1] < radi/8) && (checkPos[1] > -radi/8)) && ((checkPos[2] < radi/8) && (checkPos[2] > -radi/8)))
		{
			if (user[i][jNivel] != -1) SendSplitMessage(i, color2, string);
		}
		else if (((checkPos[0] < radi/4) && (checkPos[0] > -radi/4)) && ((checkPos[1] < radi/4) && (checkPos[1] > -radi/4)) && ((checkPos[2] < radi/4) && (checkPos[2] > -radi/4)))
		{
			if (user[i][jNivel] != -1) SendSplitMessage(i, color3, string);
		}
		else if (((checkPos[0] < radi/2) && (checkPos[0] > -radi/2)) && ((checkPos[1] < radi/2) && (checkPos[1] > -radi/2)) && ((checkPos[2] < radi/2) && (checkPos[2] > -radi/2)))
		{
			if (user[i][jNivel] != -1) SendSplitMessage(i, color4, string);
		}
	}
	return 1;
}

SendSplitMessage(playerid, color, const text[])
{
	#define LENGHT (120)

	if(strlen(text) > LENGHT)
	{
		new firstString[LENGHT], secondString[LENGHT];

		strmid(firstString, text, 0, LENGHT);
		strmid(secondString, text, LENGHT - 1, LENGHT * 2);

		format(firstString, LENGHT, "%s...", firstString);
		format(secondString, LENGHT, "...%s", secondString);

		SendClientMessage(playerid, color, firstString);
		SendClientMessage(playerid, color, secondString);
	}
	else SendClientMessage(playerid, color, text);

	#undef LENGHT

	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new string[256];
	switch(GetPlayerVehicleSeat(playerid))
	{
		case -1:
		{
		    // carpintero
			for (new id = 0; id < sizeof(point_mesas); id++)
			{
				if(checkpointid == mesa_cp[id])
				{
					if(GetPVarInt(playerid, "con_troncos") == 1)
					{
						if (mesa_used[id] == 0)
						{
							if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);

							TogglePlayerAllDynamicCPs(playerid, false);
							DeletePVar(playerid, "con_troncos");
							SetPlayerPos(playerid, point_mesas[id][0], point_mesas[id][1], point_mesas[id][2]);
							SetPlayerFacingAngle(playerid, point_mesas[id][3]);
							SetCameraBehindPlayer(playerid);

							SetPVarInt(playerid, "HaciendoMueble", 1);
							ColocarObject(playerid, 9, 18635, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
							mesa_used[id] = 1;
							pused_mesa[playerid] = id;
							ClearAnimations(playerid);
							con_animacion[playerid] = 0;
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							user[playerid][j_uManos] = 1;
							GameTextForPlayer(playerid, "~g~Creando mueble...", 15000, 3);
							SetTimerEx("terminar_mueble", 13500, false, "%d", playerid);
							ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 0, 0, 0, 1);
						} else SendClientMessage(playerid, -1, "Mesa en uso, ve a alguna que esté disponible.");
					} else SendClientMessage(playerid, -1, "No tienes troncos, usa /imueble.");
				}
			}
		    // casas
			for(new cid = 0; cid != MAX_CASAS; cid++)
			{
				if(checkpointid == _casaCP[cid])
				{
					if (i_Casa[cid][cComprado] == 0)
					{
						if (i_Casa[cid][c_alquiler] > 0)
						{
						    format(string, sizeof(string), "~n~~g~Llave ~w~%d ~n~~g~En venta o Alquiler ~n~~g~Espacio: ~w~%s ~n~~g~Venta: ~w~%d - ~y~Alquiler: ~w~%d",
							cid, _EspacioC(cid), i_Casa[cid][cPrecio], i_Casa[cid][c_alquiler]);
							textgame_player(playerid, _text(string), 3000, 3);
				        }
						else
						{
							format(string, sizeof(string), "~n~~g~Llave ~w~%d ~n~~g~En venta ~n~~g~Espacio: ~w~%s ~n~~g~Precio: ~w~%d",
							cid, _EspacioC(cid), i_Casa[cid][cPrecio]);
							textgame_player(playerid, _text(string), 3000, 3);
						}
					}
					else
					{
						new location[MAX_ZONE_NAME];
						Get2DZone(location, MAX_ZONE_NAME, i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ]);

						if (EnServicioADM[playerid] == 0) format(string, sizeof(string), "~n~~n~~n~~g~Llave ~w~%d ~n~~p~%s ~n~%s ~n~~g~Espacio: ~w~%s", cid, location, _EstadoC(cid,1), _EspacioC(cid));
						else format(string, sizeof(string), "~n~~g~Llave ~w~%d ~n~~g~Dueño: ~w~%s ~n~~g~Espacio: ~w~%s", cid, i_Casa[cid][cComprador], _EspacioC(cid));
						textgame_player(playerid, _text(string), 3000, 3);
					}
					return 1;
				}
			}
		}
	}
	for(new gid = 0; gid != MAX_GARAJES; gid++)
	{
		if(checkpointid == _gajCP[gid])
		{
			format(string, sizeof(string), "~n~~n~~n~~b~~w~Garaje ~w~%d ~y~%d~n~%s ~n~~g~Espacio: ~w~%s", i_Garaje[gid][gIDCasa], gid, _EstadoG(gid), _EspacioG(gid));
			textgame_player(playerid, _text(string), 3000, 3);
			return 1;
		}
	}

	return 1;
}

funcion terminar_mueble(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	if (pused_mesa[playerid] != -1)
	{
		mesa_used[pused_mesa[playerid]] = 0;
		pused_mesa[playerid] = -1;
	}
	new objeto_id = ObjetoIDs[random(sizeof(ObjetoIDs))];

	TogglePlayerControllable(playerid, true);

	switch (objeto_id)
	{
	    case 1814: ColocarObject(playerid, 9, 1814, 6, -0.087999, -0.155000, -0.328999, -115.399986, 0.400002, -94.799919, 0.431000, 0.508000, 0.799000);
		case 2083: ColocarObject(playerid, 9, 2083, 6, 0.345999, 0.038999, 0.173999, -106.599998, 0.000000, 83.699996, 0.660999, 0.579999, 0.829999);
		case 1811: ColocarObject(playerid, 9, 1811, 6, 0.017000, 0.054999, -0.223999, -105.900001, 0.000000, 81.400032, 0.867999, 0.695000, 1.000000);
		default: ColocarObject(playerid, 9, 1811, 6, 0.017000, 0.054999, -0.223999, -105.900001, 0.000000, 81.400032, 0.867999, 0.695000, 1.000000);
	}

	DeletePVar(playerid, "HaciendoMueble");
	set_checkpoint(playerid, 2092.0237,-2382.7969,13.5469, 3.5);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	user[playerid][j_uManos] = 0;
	tp_trabajo[playerid] = 2;
	SendClientMessage(playerid, 0x007798ff, "Has hecho un mueble, llevalo al deposito.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

	return 1;
}

funcion _Encargo(playerid, n_id)
{
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	set_checkpoint(playerid, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ], 2);

	new location[MAX_ZONE_NAME], te_xt[128];
	Get2DZone(location, MAX_ZONE_NAME, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ]);
	format(te_xt, sizeof(te_xt), "El vehículo fue cargado con éxito, lleva la mercancía a %s.", location);
	_Mensaje(playerid, 4, "A7CE00", te_xt);
	_Mensaje(playerid, 4, "b0b0b0", "Una vez en la puerta del local, escribe /mercancia.");
	SetPVarInt(playerid, "EnCheckPoint", 5);
	return 1;
}

En_camion(veh)
{
	new camions[] = {422, 428, 440, 482, 498, 499};
	for(new i = 0; i < sizeof(camions); i++) { if(GetVehicleModel(veh) == camions[i]) return 1; }
	return 0;
}

el_2tiempo()
{
	new thetime[92], Year, Month, Day, horas, mins, segs;
	getdate(Year, Month, Day);
	gettime(horas, mins, segs);

	if(horas >= 12) format(thetime, sizeof(thetime), "%s %d de %s [%02d:%02d PM]", GetWeekDay(), Day, GetMonth(Month), (horas == 12) ? (12) : (horas - 12), mins);
	else if(horas < 12) format(thetime, sizeof(thetime), "%s %d de %s [%02d:%02d AM]", GetWeekDay(), Day, GetMonth(Month), (horas == 0) ? (12) : (horas), mins);
	return thetime;
}

el_tiempo()
{
	new thetime[92], Year, Month, Day, horas, mins, segs;
	getdate(Year, Month, Day);
	gettime(horas, mins, segs);

	if(horas >= 12) format(thetime, sizeof(thetime), "%s %d de %s de %d [%02d:%02d PM]", GetWeekDay(), Day, GetMonth(Month), Year, (horas == 12) ? (12) : (horas - 12), mins);
	else if(horas < 12) format(thetime, sizeof(thetime), "%s %d de %s de %d [%02d:%02d AM]", GetWeekDay(), Day, GetMonth(Month), Year, (horas == 0) ? (12) : (horas), mins);
	return thetime;
}


CancelLumberjackWork(playerid)
{
	if(user[playerid][pLenador_free] != -1)
	{
		DestroyDynamicObject(i_Lenador[ user[playerid][pLenador_free] ][l_objeto_id]);
		i_Lenador[ user[playerid][pLenador_free] ][l_objeto_id] = CreateDynamicObject(
		i_Lenador[ user[playerid][pLenador_free] ][l_modelo],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionX],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionY],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionZ],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionRX],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionRY],
		i_Lenador[ user[playerid][pLenador_free] ][l_posicionRZ], 0, 0);

		i_Lenador[ user[playerid][pLenador_free] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;
		UpdateDynamic3DTextLabelText(i_Lenador[ user[playerid][pLenador_free] ][l_3dlabel], -1, "\n\nPulsa {90C3D4}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.");
	}

	DisablePlayerCheckpoint(playerid);
	DeletePVar(playerid, "EnCheckPoint");

	en_lenador[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 7);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(timer_lenador[playerid]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid, true);
	user[playerid][pt_PLAYER_CARRYING_TREE] = false;
	user[playerid][pLenador_free] = -1;
	new string[200];
    d_estado -= user[playerid][jTroncos] * 3;
	DarDineroGC(playerid, user[playerid][jTroncos] * 3);
	format(string, sizeof(string), "* Recibiste $%d por los %d troncos que talaste.", user[playerid][jTroncos] * 3, user[playerid][jTroncos]);
	_Mensaje(playerid, 4, "33CCFF", string);
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	user[playerid][jTroncos] = 0;
	return 1;
}
forward Float:frandom(Float:max, Float:min, dp);
forward LumberjackUp(playerid, tree);
public LumberjackUp(playerid, tree)
{
	if(user[playerid][pLenador_free_PROG] < 100.0)
	{
		user[playerid][pLenador_free_PROG] += frandom(12.0, 8.0, 2);
		if(user[playerid][pLenador_free_PROG] > 100.0) user[playerid][pLenador_free_PROG] = 100.0;

		SetPlayerArmedWeapon(playerid, 9);
		ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0, 1);

		new label_str[256];
		format(label_str, sizeof label_str, "\n\nTalando... {CCCCCC}(%.1f%%)", user[playerid][pLenador_free_PROG]);
		UpdateDynamic3DTextLabelText(i_Lenador[ tree ][l_3dlabel], -1, label_str);

		KillTimer(timer_lenador[playerid]);
		timer_lenador[playerid] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return 1;
	}

	new Float: Angle;

	GetPlayerFacingAngle(playerid, Angle);
	SetDynamicObjectRot(i_Lenador[ tree ][l_objeto_id], i_Lenador[ tree ][l_posicionRX], i_Lenador[ tree ][l_posicionRY], Angle);
	MoveDynamicObject(i_Lenador[ tree ][l_objeto_id], i_Lenador[ tree ][l_posicionX], i_Lenador[ tree ][l_posicionY], i_Lenador[ tree ][l_posicionZ] + 0.01, 0.0065, -85.0, 0.0, Angle);
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

	KillTimer(timer_lenador[playerid]);
	timer_lenador[playerid] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, Angle);

	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid, true);
	return 1;
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = i_Lenador[ tree ][l_posicionX];
	pos[1] = i_Lenador[ tree ][l_posicionY];
	pos[2] = i_Lenador[ tree ][l_posicionZ];

	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));

	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(i_Lenador[ tree ][l_objeto_id]);
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);

	i_Lenador[ tree ][l_objeto_id] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);

	user[playerid][pt_PLAYER_CARRYING_TREE] = true;
	user[playerid][pLenador_free] = -1;

	if(en_lenador[playerid] == 1)//esto
	{
		set_checkpoint(playerid, -548.8622, -1496.4225, 8.8761, 2.5);
		SetPVarInt(playerid, "EnCheckPoint", 22);
		SendClientMessage(playerid, -1, "{CCCCCC}Lleva los troncos al punto marcado.");
	}

	i_Lenador[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "\n\nReapareciendo en {90C3D4}%s", TimeConvert(i_Lenador[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(i_Lenador[ tree ][l_3dlabel], -1, label_str);

	i_Lenador[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(i_Lenador[ tree ][lumber_tree_GROW_TIMER]);
	i_Lenador[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ColocarObject(playerid, 7, 1463, 1, 0.20, 0.36, 0.0, 0.0, 90.0, 0.0, 0.4, 0.3, 0.6);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(i_Lenador[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;

	if(i_Lenador[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		i_Lenador[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "\n\nReapareciendo en {90C3D4}%s", TimeConvert(i_Lenador[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(i_Lenador[ tree ][l_3dlabel], -1, label_str);

		KillTimer(i_Lenador[ tree ][lumber_tree_GROW_TIMER]);
		i_Lenador[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}

	DestroyDynamicObject(i_Lenador[ tree ][l_objeto_id]);
	i_Lenador[ tree ][l_objeto_id] = CreateDynamicObject(i_Lenador[ tree ][l_modelo], i_Lenador[ tree ][l_posicionX], i_Lenador[ tree ][l_posicionY], i_Lenador[ tree ][l_posicionZ], i_Lenador[ tree ][l_posicionRX], i_Lenador[ tree ][l_posicionRY], i_Lenador[ tree ][l_posicionRZ], 0, 0);
	i_Lenador[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;
	UpdateDynamic3DTextLabelText(i_Lenador[ tree ][l_3dlabel], -1, "Pulsa {90C3D4}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.");
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

static const Float:pos_entrega[][] =
{
	{8304.5977, 13838.6416, 1.3881},
	{8304.5977, 13838.6416, 1.3881},
	{8304.5977, 13838.6416, 1.3881},
	{8304.5977, 13838.6416, 1.3881},
	{8304.5977, 13838.6416, 1.3881}
};
public OnPlayerEnterCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 30803, 0.0, 0.0, 0.0);
	new carid = GetPlayerVehicleID(playerid), vehicleid = GetPlayerVehicleID(playerid);

	new en_check = GetPVarInt(playerid, "EnCheckPoint");
	if (en_check == 1)
	{
		DeletePVar(playerid, "EnCheckPoint");
		_Mensaje(playerid, 5, "0", "Llegaste al destino marcado.");
		TogglePlayerAllDynamicCPs(playerid, true);
		DisablePlayerCheckpoint(playerid);
	}
	else if (en_check == 18)
	{
		DeletePVar(playerid, "EnCheckPoint");
		cmd_comprar(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		DisablePlayerCheckpoint(playerid);
	}
	else if (en_check == 2)
	{
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		if (_Medic2Call[playerid] == 1)
		{
            _Medic2Call[playerid] = 0;
            _MedicAcept[playerid] = 999;
			_Mensaje(playerid, 4, "fcc1fd", "Llegaste al llamado de un médico.");
            return 1;
		}
		else if (_Bomb2Call[playerid] == 1)
		{
            _Bomb2Call[playerid] = 0;
            _BombAcept[playerid] = 999;
			_Mensaje(playerid, 4, "EF2F28", "Llegaste al llamado de un bombero.");
            return 1;
		}
	}
	else if (en_check == 22)
	{
	    if(!en_pos(playerid,12, -548.8622, -1496.4225, 8.8761))
		{
		    cmd_talar(playerid);
		    _Mensaje(playerid, 0, "126", "No estás en el lugar correcto.");
		    return 1;
		}
		if(en_lenador[playerid] == 1)
		{
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid, "EnCheckPoint");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 7);
			user[playerid][pt_PLAYER_CARRYING_TREE] = false;
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

			new tronc = Random(4, 10);
			user[playerid][jTroncos] += tronc;
		}
	}
	else if (en_check == 3) //repartos, tipo 1 empresas
	{
		if(!en_pos(playerid,12,-114.8255, -330.7507, 0.9912) && !en_pos(playerid,12,-183.9354, -277.5449, 1.0257) && !en_pos(playerid,12,65.1676, -273.5888, 1.1238)) return _Mensaje(playerid, 0, "126", "No estás en el lugar de mercancía.");
		if(!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "Usted no se encuentra en ningún vehículo.");
		if(!En_camion(vehicleid))
		{
			TogglePlayerAllDynamicCPs(playerid, true);
			DeletePVar(playerid, "EnCheckPoint");
			DisablePlayerCheckpoint(playerid);
			if (r_negocio[playerid] != -1)
			{
				i_Negocio[r_negocio[playerid]][EnPedido] = 0;
				r_negocio[playerid] = -1;
				tipo_reparto[playerid] = 0;
			}
			_Mensaje(playerid, 4, "b0b0b0", "Este vehículo no tiene suficiente espacio, busca uno de la empresa.");
		    return 1;
		}
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		r_vehiculo[playerid] = vehicleid;
		textgame_player(playerid,"~w~subiendo ~g~mercancia...",10000,3);
		SetTimerEx("_Encargo", 10000, false, "ii", playerid, r_negocio[playerid]);
	}
	else if (en_check == 5)
	{
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
	}
	else if (en_check == 31) //cmd_pedido(playerid, "coche");
	{
		if(!en_pos(playerid, 10, pos_entrega[0][0], pos_entrega[0][1], pos_entrega[0][2]) &&
		!en_pos(playerid, 10, pos_entrega[1][0], pos_entrega[1][1], pos_entrega[1][2]) &&
		!en_pos(playerid, 10, pos_entrega[2][0], pos_entrega[2][1], pos_entrega[2][2]) &&
		!en_pos(playerid, 10, pos_entrega[3][0], pos_entrega[3][1], pos_entrega[3][2]) &&
		!en_pos(playerid, 10, pos_entrega[4][0], pos_entrega[4][1], pos_entrega[4][2])
		) return _Mensaje(playerid, 0, "0", "No estás en el lugar del pedido."), cancelar_robo(playerid);

		new v_id = checkcoche[playerid]-666;

		if (i_Vehiculo[v_id][vID] != carid) return _Mensaje(playerid, 0, "0", "Este no es el vehículo que te solicitaron."), cancelar_robo(playerid);

		cmd_motor(playerid);
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);

		_Mensaje(playerid, 4, "b0b0b0", "Baja del vehículo y vete del lugar.");
		_Mensaje(playerid, 4, "b0b0b0", "Tienes 12 segundos antes que la Policía sea alertada.");

		SetTimerEx("_roboVeh", 12000, false, "iii", playerid, vehicleid, 1);
	}
	else if (en_check == 6) //cmd_pedido(playerid, "camion");
	{
		if(GetVehicleModel(vehicleid) == checkcoche[playerid])
		{
			if(!en_pos(playerid, 10, pos_entrega[0][0], pos_entrega[0][1], pos_entrega[0][2]) &&
			!en_pos(playerid, 10, pos_entrega[1][0], pos_entrega[1][1], pos_entrega[1][2]) &&
			!en_pos(playerid, 10, pos_entrega[2][0], pos_entrega[2][1], pos_entrega[2][2]) &&
			!en_pos(playerid, 10, pos_entrega[3][0], pos_entrega[3][1], pos_entrega[3][2]) &&
			!en_pos(playerid, 10, pos_entrega[4][0], pos_entrega[4][1], pos_entrega[4][2])
			) return _Mensaje(playerid, 0, "0", "No estás en el lugar del pedido."), cmd_pedido(playerid, "cancelar");
			cmd_motor(playerid);
			DeletePVar(playerid, "EnCheckPoint");
			DisablePlayerCheckpoint(playerid);
			TogglePlayerAllDynamicCPs(playerid, true);

			_Mensaje(playerid, 4, "b0b0b0", "Baja del vehículo y vete del lugar.");
			_Mensaje(playerid, 4, "b0b0b0", "Tienes 10 segundos antes que la Policía sea alertada.");

			SetTimerEx("_roboVeh", 10000, false, "iii", playerid, vehicleid, 2);

		}
	}
    //pedidos de drogas
	if (p_drogas[playerid] != -1)
	{
		if (!en_pDrogas(playerid))
		{
			p_drogas[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			TogglePlayerAllDynamicCPs(playerid, true);
			_Mensaje(playerid, 0, "0", "No estás en el lugar del pedido, repite el pedido.");
			return 1;
		}
		new year, month, day;
		getdate(year, month, day);
		new
			precio = 0,
			drogita[50],
			objeto = -1,
			string[128];

		if(i_Familia[user[playerid][jMiembroFam]][fTipo] == 2) //mafias
		{
			switch(p_drogas[playerid])
			{
				case 0: precio = 6250, drogita = "Fardo de Cocaína", objeto = 111;
				case 1: precio = 3125, drogita = "Fardo de Crack", objeto = 112;
				case 2: precio = 2500, drogita = "Fardo de LSD", objeto = 145;
				case 3: precio = 5000, drogita = "Fardo de Éxtasis", objeto = 144;
				case 4: precio = 4375, drogita = "Fardo de Heroína", objeto = 113;
				case 5: precio = 6875, drogita = "Fardo de PCP", objeto = 147;
				case 6: precio = 6250, drogita = "Fardo de Ketamina", objeto = 146;
				case 7: precio = 3750, drogita = "Fardo de Marihuana", objeto = 110;
				case 8: precio = 4250, drogita = "Fardo de Hachis", objeto = 148;
				case 9: precio = 500, drogita = "Paquete de Esteroides", objeto = 143;
			}
		}
		else //general
		{
			switch(p_drogas[playerid])
			{
				case 0: precio = 1250, drogita = "Ziploc de cocaína", objeto = 75;
				case 1: precio = 625, drogita = "Paquete de Crack", objeto = 76;
				case 2: precio = 500, drogita = "Paquete de LSD", objeto = 139;
				case 3: precio = 1000, drogita = "Paquete de Éxtasis", objeto = 138;
				case 4: precio = 875, drogita = "Paquete de Heroína", objeto = 77;
				case 5: precio = 1375, drogita = "Paquete de PCP", objeto = 141;
				case 6: precio = 1250, drogita = "Paquete de Ketamina", objeto = 140;
				case 7: precio = 750, drogita = "Paquete de Marihuana", objeto = 74;
				case 8: precio = 850, drogita = "Paquete de Hachis", objeto = 142;
			}
		}
		if (RevisarDinero(playerid, precio))
		{
			if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0)
			{
				p_drogas[playerid] = -1;
				DisablePlayerCheckpoint(playerid);
				TogglePlayerAllDynamicCPs(playerid, true);
				_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
				return 1;
			}
			if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = InfoObjeto[objeto][Capacidad];}
			else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = InfoObjeto[objeto][Capacidad];}

			DarDineroGC(playerid, -precio);
			Formato(string, "Pagaste %s dólares por el %s.", diner_coma(precio), drogita);
			_Mensaje(playerid, 4, "FFFF00", string);
			user[playerid][jTiempos][10] = day;
		}
		p_drogas[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
	}
    //pedidos de armas
	if (p_armas[playerid] != 0)
	{
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);

		new year, month, day;
		getdate(year, month, day);

		switch (p_armas[playerid])
		{
			case 2: //c. colts
		    {
				if (!en_pos(playerid,10,81.3671, -162.7582, 2.5793)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 2000))
				{
					TirarObjeto(51, 4, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -2000);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 2,000$ dólares por 4 colts, la caja está a un lado.");
					user[playerid][jTiempos][13] = 120;
				}
			}
			case 3: //c. eagles
			{
			    if (!en_pos(playerid,10,730.1278, 296.5151, 20.2267)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 8000))
				{
					TirarObjeto(52, 4, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -8000);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 8,000$ dólares por 4 eagles, la caja está a un lado.");
					user[playerid][jTiempos][13] = 240;
				}
			}
			case 4: //c. tecs
			{
				if(!en_pos(playerid,10,993.9947, -1263.2609, 15.0218)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 7000))
				{
					TirarObjeto(53, 4, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -7000);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 7,000$ dólares por 4 tecs, la caja está a un lado.");
					user[playerid][jTiempos][13] = 180;
				}
			}
			case 5: //c. uzis
			{
			    if (!en_pos(playerid,10,1680.5959, -2082.4014, 13.5660)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 7200))
				{
					TirarObjeto(54, 4, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -7200);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 7,200$ dólares por 4 uzis, la caja está a un lado.");
					user[playerid][jTiempos][13] = 180;
				}
			}
			case 6: //c. shotguns
			{
			    if (!en_pos(playerid,10,284.2628, -1530.8906, 24.5884)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 18000))
				{
					TirarObjeto(56, 4, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -18000);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 18,000$ dólares por 4 shotguns, la caja está a un lado.");
					user[playerid][jTiempos][13] = 240;
				}
			}
			case 7: //c. cargas colts
			{
			    if (!en_pos(playerid,10,81.3671, -162.7582, 2.5793)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 1600))
				{
					TirarObjeto(63, 15, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -1600);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 1,600$ dólares por 15 cargas de colt, la caja está a un lado.");
					user[playerid][jTiempos][13] = 60;
				}
			}
			case 8: //c. cargas eagles
			{
			    if (!en_pos(playerid,10,730.1278, 296.5151, 20.2267)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 2400))
				{
					TirarObjeto(64, 15, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -2400);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 2,400$ dólares por 15 cargas de eagle, la caja está a un lado.");
					user[playerid][jTiempos][13] = 60;
				}
			}
			case 9: //c. cargas tecs
			{
			    if (!en_pos(playerid,10,993.9947, -1263.2609, 15.0218)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 2000))
				{
					TirarObjeto(65, 15, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -2000);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 2,000$ dólares por 15 cargas de tecs, la caja está a un lado.");
					user[playerid][jTiempos][13] = 60;
				}
			}
			case 10: //c. cargas uzis
			{
			    if (!en_pos(playerid,10,1680.5959, -2082.4014, 13.5660)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 2100))
				{
					TirarObjeto(66, 15, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -2100);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 2,100$ dólares por 15 cargas de uzis, la caja está a un lado.");
					user[playerid][jTiempos][13] = 60;
				}
			}
			case 11: //c. cargas de shotguns
			{
			    if (!en_pos(playerid,10,284.2628, -1530.8906, 24.5884)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 3400))
				{
					TirarObjeto(108, 15, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -3400);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 3,400$ dólares por 15 cargas de shotguns, la caja está a un lado.");
					user[playerid][jTiempos][13] = 30;
				}
			}

			case 12: //c. colts+cargas
		    {
				if (!en_pos(playerid,10,81.3671, -162.7582, 2.5793)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 2500))
				{
					TirarObjeto(51, 3, X, Y - 0.3, Z, World, Interior);
					TirarObjeto(63, 3, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -2500);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 2,500$ dólares, las cajas están a un lado.");
					user[playerid][jTiempos][13] = 120;
				}
			}
			case 13: //c. tecs+cargas
			{
				if(!en_pos(playerid,10,993.9947, -1263.2609, 15.0218)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 7200))
				{
					TirarObjeto(53, 3, X, Y - 0.3, Z, World, Interior);
					TirarObjeto(65, 3, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -7200);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 7,200$ dólares, las cajas están a un lado.");
					user[playerid][jTiempos][13] = 120;
				}
			}
			case 14: //c. ak47
			{
				if(!en_pos(playerid,10,1902.9418,178.8859,37.1332)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 7200))
				{
					TirarObjeto(59, 3, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -28800);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 28,800$ dólares por tres ak47, la caja está a un lado.");
					user[playerid][jTiempos][13] = 240;
				}
			}
			case 15: //c. cargas ak47
			{
				if(!en_pos(playerid,10,1902.9418,178.8859,37.1332)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 6400))
				{
					TirarObjeto(68, 8, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -6400);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 6,400$ dólares por 8 cargas de ak47, la caja está a un lado.");
					user[playerid][jTiempos][13] = 30;
				}
			}
			case 22: //molotov
		    {
				if (!en_pos(playerid,10,2442.9165, -1980.9652, 13.5448)) return _Mensaje(playerid, 0, "126", "No estás en el lugar del pedido.");
				if (RevisarDinero(playerid, 1200))
				{
					TirarObjeto(18, 5, X, Y - 0.3, Z, World, Interior);
					Streamer_Update(playerid);
					DarDineroGC(playerid, -1200);
					_Mensaje(playerid, 4, "b0b0b0", "Pagaste 1,200$ dólares por la molotov, el objeto está a un lado.");
					user[playerid][jTiempos][13] = 20;
				}
			}
		}
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		p_armas[playerid] = 0;
		return 1;
	}
	//  trabajo carpintero
	if (en_pos(playerid, 4.0, 2151.3848,-2386.9004,13.5469))
	{   //  toma troncos
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);

		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		TogglePlayerControllable(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPVarInt(playerid, "con_troncos", 1);
		ColocarObject(playerid, 9, 1463, 6, 0.091000, 0.114000, -0.191000, -109.600006, -2.500003, 77.600013, 0.336999, 0.307000, 0.376000);

		SendClientMessage(playerid, 0x007b1dff, "Has recogido los troncos, ve a una mesa disponible.");
	}
	if (en_pos(playerid, 4.0, 2092.0237,-2382.7969,13.5469))
	{   //  deja mueble
		if (tp_trabajo[playerid] != 0) { Detectar_TT(playerid, 2); return 1; }
		if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer esto en un vehículo.");

		if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		DisablePlayerCheckpoint(playerid);
		user[playerid][jMuebles] += 1;
		ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
		set_checkpoint(playerid, 2151.3848,-2386.9004,13.5469, 2.0);
		SetPVarInt(playerid, "EnCheckPoint", 5);
		if (user[playerid][jPremium] != 0) user[playerid][jHabilidad][7]+=2;
		else user[playerid][jHabilidad][7]++;
		return 1;
	}
	//  Trabajo carguero
	if (en_pos(playerid, 2.0, 2512.1077, -2108.5527, 13.4846))
	{   //  toma caja
		if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer esto en un vehículo.");
		DisablePlayerCheckpoint(playerid);
		textgame_player(playerid, "~g~Bajando carga...", 8000, 3);
		SetPVarInt(playerid, "HaciendoMueble", 1);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		SetTimerEx("bajar_carga", 9000, 0, "d", playerid);
	}
	if (en_pos(playerid, 2.0, 2457.7969, -2080.2349, 13.5636) || en_pos(playerid, 2.0, 2457.7144, -2071.1301, 13.5636))
	{   //  deja caja
		if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer esto en un vehículo.");
		if (tp_trabajo[playerid] != 0) { Detectar_TT(playerid, 1); return 1; }
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		set_checkpoint(playerid, 2512.1077, -2108.5527, 13.4846, 2.0);
		SetPVarInt(playerid, "EnCheckPoint", 5);
		user[playerid][jCargas]++;
		if (user[playerid][jPremium] != 0) user[playerid][jHabilidad][4]+=2;
		else user[playerid][jHabilidad][4]++;
		SetPVarInt(playerid, "HaciendoMueble", 0);
		if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
	}
	/*else
	{
		SetPVarInt(playerid, "HaciendoCarga", 0);
		if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		DisablePlayerCheckpoint(playerid);
		Carguero[playerid] = 0;
		PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
		_Mensaje(playerid, 4, "ff0000", "Entraste a un checkpoint erróneo.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPVarInt(playerid, "HaciendoMueble", 0);
		ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
	}
	*/

	//  Trabajo granjero
	if (Es_job(playerid, 6))
	{
		if (Granjero[playerid] == 1)
		{
			if (veh_Granjero(carid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
			{
				if (!en_cosechas(playerid))
				{
					DisablePlayerCheckpoint(playerid);
					Granjero[playerid] = 0;
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					_Mensaje(playerid, 4, "ff0000", "Entraste a un checkpoint erróneo.");
					PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
					DisableRemoteVehicleCollisions(playerid, false);
					return 1;
				}
				if (user[playerid][jCosechas] < 381)
				{
					if (tp_trabajo[playerid] != 0) { Detectar_TT(playerid, 4); return 1; }
					new cos = random(4);
					DisablePlayerCheckpoint(playerid);
					user[playerid][jCosechas] += cos + 1;
					if (user[playerid][jPremium] != 0) user[playerid][jHabilidad][1]+=2;
					else user[playerid][jHabilidad][1]++;
					tp_trabajo[playerid] = 2;
					/*
						próx checkpoint
					*/
					new check_prox = user[playerid][Checkpoint];
					switch(user[playerid][Checkpoint])
					{
						case 13:
						{
						    SetPlayerCheckpoint(playerid, p_granjero[0][0], p_granjero[0][1], p_granjero[0][2], 5.0);
							user[playerid][Checkpoint] = 1;
						}
						default: SetPlayerCheckpoint(playerid, p_granjero[check_prox][0], p_granjero[check_prox][1], p_granjero[check_prox][2], 5.0), user[playerid][Checkpoint]++;
					}

					SetPVarInt(playerid, "EnCheckPoint", 5);
					return 1;
				}
				else
				{
					DisablePlayerCheckpoint(playerid);
					_Mensaje(playerid, 0, "460", "Posees más de 380 gramos, no puedes llevar más.");
					Granjero[playerid] = 0;
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
					DisableRemoteVehicleCollisions(playerid, false);
					return 1;
				}
			}
			else
			{
				_Mensaje(playerid, 0, "0", "No estás en el tractor de granja.");
				Granjero[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
				DisableRemoteVehicleCollisions(playerid, false);
				return 1;
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2974.0786, -1454.8707, -0.1233))
	{
		if (tp_trabajo[playerid] != 0) { Detectar_TT(playerid, 6); return 1; }
		if(BOTE(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && _Pesca[playerid] == 1)
		{

			new atext[20], paga, peso;
			switch(pesca[playerid])
			{
				case 1: atext = "la tortuga";
				case 2: atext = "el delfin";
				case 3: atext = "el tiburon";
			}
			vehicleid = GetPlayerVehicleID(playerid);
			RemovePlayerFromVehicle(playerid);
			set_pos(playerid, 2954.3696,-1486.8500,1.8422,255.9397, 0, 0);
			SetVehicleToRespawn(vehicleid);
			DestroyObject(pescador[playerid]);
			DisablePlayerCheckpoint(playerid);
			RemovePlayerMapIcon(playerid, 99);
			_Pesca[playerid] = 0;
			pescando[playerid] = 0;
			if (user[playerid][jHabilidad2][2] == 3)
			{
				switch(pesca[playerid])
				{
					case 1: peso=50,paga=278;
					case 2: peso=69,paga=313;
					case 3: peso=77,paga=397;
				}
			}
			else if (user[playerid][jHabilidad2][2] == 4)
			{
				switch(pesca[playerid])
				{
					case 1: peso=89,paga=370;
					case 2: peso=115,paga=450;
					case 3: peso=110,paga=529;
				}
			}
			else if (user[playerid][jHabilidad2][2] == 5)
			{
				switch(pesca[playerid])
				{
					case 1: peso=110,paga=440;
					case 2: peso=137,paga=522;
					case 3: peso=165,paga=607;
				}
			}
			new at[128];
			format(at, 128, "* Recibiste $%d por %s de %dkg.", paga, atext, peso);
			_Mensaje(playerid, 4, "33CCFF", at);

			DarDineroGC(playerid, paga);
			d_estado -= paga;

			user[playerid][jHabilidad][2] += 3;
			used_vehicle[playerid] = 0;

		}
	}

	return 1;
}

funcion _roboVeh(jugador, coche, tipo)
{
	switch (tipo)
	{
		case 1: //coche
		{
			if (checkcoche[jugador] != 0)
			{
				new string[128],
				vid = checkcoche[jugador]-666,
				zone[MAX_ZONE_NAME],
				pago = 0,
				precio = i_Vehiculo[vid][vPrecio];

				GetCar3DZone(coche, zone, sizeof(zone));
				format(string, sizeof(string), "CENTRAL: Informe reciente en %s, trafico del vehículo %s.", zone, NombreVehiculo(coche));
				_MensajeRfac(1, C_COLORPOLICIA, string);

				if (precio >= 5000 && precio <= 15000) pago = 3207;
				else if (precio >= 15001 && precio <= 100000) pago = 6800;
				else if (precio >= 100001 && precio <= 500000) pago = 9380;
				else if (precio >= 500001 && precio <= 1000000) pago = 14700;
				else pago = 750;

				format(string, sizeof(string), "El vehículo fue entregado con éxito, recibiste %s$ por el.", diner_coma(pago));
				_Mensaje(jugador, 4, "A7CE00", string);

				DarDineroGC(jugador, pago);

				cocherobo[jugador] = 0;
		    	checkcoche[jugador] = 0;
		    	veh_robo[jugador] = 0;
				i_Vehiculo[vid][v_robo] = 0;
				i_Vehiculo[vid][vNeon] = 1440;
				user[jugador][jTiempos][17] = 240;
				if (user[jugador][jHabilidad][3] < 40) user[jugador][jHabilidad][3] += 2;

				VehiculoGuardar(vid, -1, 1); //guardarveh
				return 1;
			}
		}
		case 2: //camion
		{
			new string[128], zone[MAX_ZONE_NAME];
			GetCar3DZone(coche, zone, sizeof(zone));
			format(string, sizeof(string), "CENTRAL: Informe reciente en %s, trafico del vehículo %s.", zone, NombreVehiculo(coche));
			_MensajeRfac(1, C_COLORPOLICIA, string);

			DarDineroGC(jugador, 2000);
			DestroyVehicle(cocherobo[jugador]);
			random_veh[cocherobo[jugador]] = 0;
			cocherobo[jugador] = 0;
    		checkcoche[jugador] = 0;
			user[jugador][jTiempos][17] = 120;

			_Mensaje(jugador, 4, "A7CE00", "El vehículo fue entregado con éxito, recibiste 2,000$ por el.");

			if (user[jugador][jHabilidad][3] < 40) user[jugador][jHabilidad][3] ++;
			return 1;
		}
	}
	return 1;
}

funcion Detectar_TT(jugador, tipo)
{
	new string[256], trabajo[32];
	if (tipo == 1) trabajo = "Carguero";
	else if (tipo == 2) trabajo = "Carpintero";
	else if (tipo == 4) trabajo = "Granjero";
	else if (tipo == 6) trabajo = "Pescador";
    format(string, sizeof(string), "{FF6347}AdmWarning: %s fue expulsado. Razón:[TP %s]", nombre_pj(jugador), trabajo);
	MensajeAdmin(string);
	ExPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{FF0000}Advertencia", "{ffffff}El servidor te ha expulsado por posible teleport hack.", "Aceptar", "");
	SetTimerEx("TimerKICK", 2000, 0, "d", jugador);
	format(string, sizeof(string), "Registros: %s fue expulsado. Razón: TP (%s).", nombre_pj(jugador), trabajo);
	Log("Registros/TeleportHack.log", string);
	return 1;
}

public OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)
{
	new string[128], engine, lights, alarm, doors, bonnet, boot, objective;
	if (IsPlayerNPC(playerid))
	{
		if (newstate == PLAYER_STATE_SPECTATING)
		{
			TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if (SpectadorID[playerid] != 999)
	{
		new spectator = SpectadorID[playerid];
		if (!IsPlayerConnected(spectator))
		{
			SpectadorID[playerid] = 999;
			Spectate[spectator] = 999;
		}
		if (newstate == PLAYER_STATE_DRIVER && user[spectator][jAdmin] >= 1 || newstate == PLAYER_STATE_PASSENGER && user[spectator][jAdmin] >= 1)
		{
			TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID(playerid);
			PlayerSpectateVehicle(spectator, carid);
			SetPVarInt(spectator, "SpecState", newstate);
		}
		else if (newstate == PLAYER_STATE_ONFOOT && user[spectator][jAdmin] >= 1)
		{
			TogglePlayerSpectating(spectator, true);
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPVarInt(spectator, "SpecState", newstate);
		}
	}
	if (oldstate == PLAYER_STATE_DRIVER) { PlayerTextDrawHide(playerid, info_w[playerid][Velocimetro]); }
	if (oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		Anti[playerid][vidac1] = 1001.0;
		Anti[playerid][vidac2] = 1001.0;
	}
	if (oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
		Anti[playerid][vidac1] = 1001.0;
		Anti[playerid][vidac2] = 1001.0;
	}
	if (newstate == PLAYER_STATE_ONFOOT)
	{
		user[playerid][jCoche][0] = 0;
		user[playerid][jCoche][1] = -1;
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    if (random_veh[GetPlayerVehicleID(playerid)] != 0) user[playerid][jCoche][0] = random_veh[GetPlayerVehicleID(playerid)];
		user[playerid][jCoche][1] = GetPlayerVehicleSeat(playerid);
	    veh_asiento[playerid] = GetPlayerVehicleSeat(playerid);
		if (estacionveh[GetPlayerVehicleID(playerid)] != 0)
		{
			new station[126], name[126];
			switch (estacionveh[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://54house.stream-balancer.de:80") && format(name, sizeof(name), "54 House");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147") && format(name, sizeof(name), "Top Latino");
				case 3: format(station, sizeof(station), "http://148.251.91.15:7004") && format(name, sizeof(name), "Dubbase.FM");
				case 4: format(station, sizeof(station), "http://listen.shoutcast.com/reggaetonhits.m3u") && format(name, sizeof(name), "Reggae Hits");
				case 5: format(station, sizeof(station), "http://216.230.231.122:8000/MP3128") && format(name, sizeof(name), "MBradio.FM");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145") && format(name, sizeof(name), "Classical Weta 90.9FM");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858") && format(name, sizeof(name), "LOVE TIMES");
				case 8: format(station, sizeof(station), "http://173.244.215.163:8380") && format(name, sizeof(name), "Soft Rock Cafe");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421") && format(name, sizeof(name), "HardRadio.com");
				case 10: format(station, sizeof(station), "http://64.202.98.133:2010") && format(name, sizeof(name), "Aural Moon");
				case 11: format(station, sizeof(station), "http://50.117.115.211:80") && format(name, sizeof(name), "Idobi Radio");
				case 12: format(station, sizeof(station), "http://108.61.30.179:4010") && format(name, sizeof(name), "www.Hot108.com");
				case 13: format(station, sizeof(station), "http://50.7.64.226:80/frisky_mp3_hi") && format(name, sizeof(name), "Sensacion Peru");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543") && format(name, sizeof(name), "DEEGAY RADIO");
				case 15: format(station, sizeof(station), "http://62.210.209.179:8030/stream") && format(name, sizeof(name), "PaganMetalRadio");
				case 16: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323") && format(name, sizeof(name), "PulsRadio TRANCE");
				case 17: format(station, sizeof(station), "http://somafm.com/tags.pls") && format(name, sizeof(name), "The Trip");
				case 18: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187") && format(name, sizeof(name), "Parazitii Club");
				case 19: format(station, sizeof(station), "http://s3.voscast.com:8002/;.m3u") && format(name, sizeof(name), "Amor latino");
				case 20: format(station, sizeof(station), "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u") && format(name, sizeof(name), "Hotmixradio");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562") && format(name, sizeof(name), "RadioHot69");
				case 22: format(station, sizeof(station), "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel") && format(name, sizeof(name), "Radio Hunter");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126") && format(name, sizeof(name), "92.5 The River");
				case 24: format(station, sizeof(station), veh_music[GetPlayerVehicleID(playerid)]) && format(name, sizeof(name), "Audio descargado");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = EscucharMusica(playerid, station);
			escuchandop[playerid] = 1;
			format(string, sizeof(string), "> Estación de radio: {FFFFFF}%s.", name);
			if(user[playerid][j_uAudio] == 0) _Mensaje(playerid, 4, "00A2FF", string);
		}
		if(GetPVarInt(playerid, "_Ejcet") >= 1)
		{
			SetPVarInt(playerid, "_Ejcet", 0);
			RemovePlayerFromVehicle( playerid );
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "EnCrack") == 1)
			{
				TogglePlayerControllable(playerid, 0);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			}
		}
		_vVelocidad[playerid] = 0.0;
		new name[50 + MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		new vehicleid = GetPlayerVehicleID(playerid);
		QuienManejo[playerid] = vehicleid;
	}
	if (newstate == PLAYER_STATE_DRIVER)
	{
		if (random_veh[GetPlayerVehicleID(playerid)] != 0) user[playerid][jCoche][0] = random_veh[GetPlayerVehicleID(playerid)];
		user[playerid][jCoche][1] = GetPlayerVehicleSeat(playerid);
	    new vehicle_id = GetPlayerVehicleID(playerid);
		veh_asiento[playerid] = GetPlayerVehicleSeat(playerid);

		if (veh_sinrentar(vehicle_id))
		{
			SendClientMessage(playerid, -1, "Este vehiculo esta disponible, su renta por 30 minutos es de 500$. (/rentarveh)");
			return 1;
		}
		if (renta_Veh[vehicle_id][veh_renta] != 0)
		{
			if (strcmp(nombre_sin(playerid), renta_Veh[vehicle_id][veh_dueno], true) == 0)
			{
				format(string, sizeof(string), "Le quedan %d minutos a tu vehículo rentado.", renta_Veh[vehicle_id][veh_tiempo]);
				SendClientMessage(playerid, 0x33AA33FF, string);
				return 1;
			}
		}
		if (estacionveh[vehicle_id] != 0)
		{
			new station[126], name[126];
			switch (estacionveh[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://54house.stream-balancer.de:80") && format(name, sizeof(name), "54 House");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147") && format(name, sizeof(name), "Top Latino");
				case 3: format(station, sizeof(station), "http://148.251.91.15:7004") && format(name, sizeof(name), "Dubbase.FM");
				case 4: format(station, sizeof(station), "http://listen.shoutcast.com/reggaetonhits.m3u") && format(name, sizeof(name), "Reggae Hits");
				case 5: format(station, sizeof(station), "http://216.230.231.122:8000/MP3128") && format(name, sizeof(name), "MBradio.FM");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=103145") && format(name, sizeof(name), "Classical Weta 90.9FM");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1709858") && format(name, sizeof(name), "LOVE TIMES");
				case 8: format(station, sizeof(station), "http://173.244.215.163:8380") && format(name, sizeof(name), "Soft Rock Cafe");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1171421") && format(name, sizeof(name), "HardRadio.com");
				case 10: format(station, sizeof(station), "http://64.202.98.133:2010") && format(name, sizeof(name), "Aural Moon");
				case 11: format(station, sizeof(station), "http://50.117.115.211:80") && format(name, sizeof(name), "Idobi Radio");
				case 12: format(station, sizeof(station), "http://108.61.30.179:4010") && format(name, sizeof(name), "www.Hot108.com");
				case 13: format(station, sizeof(station), "http://50.7.64.226:80/frisky_mp3_hi") && format(name, sizeof(name), "Sensacion Peru");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543") && format(name, sizeof(name), "DEEGAY RADIO");
				case 15: format(station, sizeof(station), "http://62.210.209.179:8030/stream") && format(name, sizeof(name), "PaganMetalRadio");
				case 16: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323") && format(name, sizeof(name), "PulsRadio TRANCE");
				case 17: format(station, sizeof(station), "http://somafm.com/tags.pls") && format(name, sizeof(name), "The Trip");
				case 18: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1411187") && format(name, sizeof(name), "Parazitii Club");
				case 19: format(station, sizeof(station), "http://s3.voscast.com:8002/;.m3u") && format(name, sizeof(name), "Amor latino");
				case 20: format(station, sizeof(station), "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u") && format(name, sizeof(name), "Hotmixradio");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1701562") && format(name, sizeof(name), "RadioHot69");
				case 22: format(station, sizeof(station), "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel") && format(name, sizeof(name), "Radio Hunter");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190126") && format(name, sizeof(name), "92.5 The River");
				case 24: format(station, sizeof(station), veh_music[GetPlayerVehicleID(playerid)]) && format(name, sizeof(name), "Audio descargado");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = EscucharMusica(playerid, station);
			escuchandop[playerid] = 1;
			format(string, sizeof(string), "> Estación de radio: {FFFFFF}%s - Puedes cambiar la emisora. {00C2FF}'/estereo'.", name);
			if(user[playerid][j_uAudio] == 0) _Mensaje(playerid, 4, "00A2FF", string);
		}
		_vVelocidad[playerid] = 0.0;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(newcar, arr_Engine {newcar}, lights, alarm, doors, bonnet, boot, objective);
		if ((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_ON) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510)
		{
			OnPlayerChangeHud(playerid);
			if (checkcoche[playerid] != 0)
			{
				new randomize = random(sizeof(pos_entrega));
				if (checkcoche[playerid] == 401 || checkcoche[playerid] == 440 || checkcoche[playerid] == 459)
				{
					if (GetVehicleModel(newcar) == 401 || GetVehicleModel(newcar) == 440 || GetVehicleModel(newcar) == 459)
					{
						TogglePlayerAllDynamicCPs(playerid, false);
						SetPVarInt(playerid, "EnCheckPoint", 6);
						set_checkpoint(playerid, pos_entrega[randomize][0], pos_entrega[randomize][1], pos_entrega[randomize][2], 8.0);
						_Mensaje(playerid, 4, "0ED39E", "Ahora que posees el camión, ve directo al punto de entrega sin llamar la atención.");
					}
				}
				else
				{
					new v_id = checkcoche[playerid]-666;

					if (i_Vehiculo[v_id][vID] == newcar)
					{
						TogglePlayerAllDynamicCPs(playerid, false);
						SetPVarInt(playerid, "EnCheckPoint", 31);
						set_checkpoint(playerid, pos_entrega[randomize][0], pos_entrega[randomize][1], pos_entrega[randomize][2], 8.0);
						_Mensaje(playerid, 4, "0ED39E", "Ahora que posees el vehículo, ve directo al punto de entrega sin llamar la atención.");
					}
				}
			}
		}
		if (GetPVarInt(playerid, "_Ejcet") >= 1)
		{
			SetPVarInt(playerid, "_Ejcet", 0);
			RemovePlayerFromVehicle( playerid );
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "EnCrack") == 1) {
				TogglePlayerControllable(playerid, 0);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			}
		}
		QuienManejo[playerid] = newcar;
		foreach(new i: Player)
		{
			new v = TieneLlavesCoche(i, newcar);
			if (v != -1)
			{
				if (i == playerid)
				{
					format(string, sizeof(string), "Tienes las llaves de este %s.", NombreVehiculo(newcar));
					_Mensaje(playerid, 5, "0", string);
				}
				else if (i_Vehiculo[v][vUSeguro] == 1)
				{
					GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
					if (doors == VEHICLE_PARAMS_ON)
					{
						format(string, sizeof(string), "[Atención]{FFFFFF} %s(%d) ha entrado a un vehículo con el seguro cerrado. (Posible hack)", nombre_pj(playerid), playerid);
						MensajeAdmin(string);
						format(string, sizeof(string), "Registros: %s(%d) ha entrado a un vehículo con el seguro cerrado. (Posible hack)", nombre_pj(playerid), playerid);
						Log("Registros/HackVehicle.log", string);
					}
				}
				return 1;
			}
		}
	}
	if (oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		new newcar = GetPlayerVehicleID(playerid);
		QuienManejo[playerid] = newcar;
	}
	return 1;
}


forward veh_sinrentar(vehicleid); public veh_sinrentar(vehicleid)
{
	if(en_rentable(vehicleid) && renta_Veh[vehicleid][veh_renta] == 0)
	{
 		return 1;
   	}
    return 0;
}


funcion CercaDelWeon(Float:radi, playerid, playerid2) {
	new Float: fp_playerPos[3];
	GetPlayerPos(playerid2, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(en_pos(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(playerid2)) { return 1; }
	return 0;
}

stock MensajeVIP(color, const string[])
{
	foreach(new i: Player)
	{
		if((user[i][jPremium] >= 1 || user[i][jAdmin] >= 1) && B_VIP[i] >= 1)
		{
			SendSplitMessage(i, color, string);
		}
	}
}

stock _MensajeOOC(color, const string[])
{
	foreach(new i: Player)
	{
		if(!user[i][j_uOOC])
		{
			SendSplitMessage(i, color, string);
		}
	}
}

stock _MensajeSAN(color, const string[])
{
	foreach(new i: Player)
	{
		if(!user[i][j_uSAN])
		{
			SendSplitMessage(i, color, string);
		}
	}
}

stock _MensajeRfac(member, color, const string[])
{
	foreach(new i: Player)
	{
		if(user[i][jMiembro] == member && B_Radito[i] == 0)
		{
			SendSplitMessage(i, color, string);
		}
	}
}

stock mensaje_faccion(facid, color, const string[])
{
	foreach(new i: Player)
	{
		if(user[i][jMiembro] == facid || user[i][jLider] == facid)
		{
			if(!B_Faccion[i])
			{
				SendSplitMessage(i, color, string);
			}
		}
	}
}

stock _FamWSP(famid, color, const string[])
{
	foreach(new i: Player)
	{
		if(user[i][jLiderFam] == famid || user[i][jMiembroFam] == famid)
		{
			if(!B_WSP[i])
			{
				SendSplitMessage(i, color, string);
			}
		}
	}
}

stock mensaje_familia(famid, color, const string[])
{
	foreach(new i: Player)
	{
		if(user[i][jLiderFam] == famid || user[i][jMiembroFam] == famid)
		{
			if(!B_Familia[i])
			{
				SendSplitMessage(i, color, string);
			}
		}
	}
}

stock MensajeAdmin(const string[], color = 1)
{
	foreach(new i: Player)
	{
		if (user[i][State] != 0)
		{
			if(user[i][jAdmin] >= 1 && B_Admin[i] == 0)
			{
				if(color == 1) Mensaje_(i, 0xE00000FF, string);
				else if(color == 2) Mensaje_(i, 0xFFFF00FF, string);
			}
		}
	}
	return 1;
}

stock mensaje_admin(const string[], color, dale = 0)
{
	foreach(new i: Player)
	{
		if (user[i][State] != 0)
		{
			if(user[i][jAdmin] >= 1 && B_Admin[i] == 0)
			{
				if(dale == 0) SendSplitMessage(i, color, string);
				else if(dale == 1) Mensaje_(i, color, string);
			}
		}
	}
	return 1;
}

stock MensajeAdmins(color, const string[])
{
	foreach(new i: Player)
	{
		if (user[i][State] != 0)
		{
			if(user[i][jAdmin] >= 1 && B_Admin[i] == 0)
			{
				Mensaje_(i, color, string);
			}
		}
	}
}

stock MensajeMPS(color, const string[])
{
	foreach(new i: Player)
	{
		if (user[i][State] != 0)
		{
			if(user[i][jAdmin] >= 1 && VerPrivados[i] == 0)
			{
				SendSplitMessage(i, color, string);
			}
		}
	}
}

stock MessageEx(playerid_1, playerid_2, const color, const string[])
{
	Mensaje_(playerid_1, color, string);
	Mensaje_(playerid_2, color, string);
}

stock Float:GetPlayerDistanceToVehicle(playerid, vehicleid)
{
	new Float:PCoords[3], Float:VCoords[3];
	GetPlayerPos(playerid, PCoords[0], PCoords[1], PCoords[2]);
	GetVehiclePos(vehicleid, VCoords[0], VCoords[1], VCoords[2]);
	new Float:Distance[4];
	for(new n=0; n<3; n++)
	{

		Distance[n] = floatabs(PCoords[n]) - floatabs(VCoords[n]);
	}
	Distance[3] = floatsqroot((Distance[0] * Distance[0]) + (Distance[1] * Distance[1]) + (Distance[2] * Distance[2]));
	return Distance[3];
}

stock MenuComponentes(playerid, vehiclemodel, specific = false, component_type = 0) {
    if (vehiclemodel < 400 || vehiclemodel > 611) return 0;
    new str[1024];
    new component, count = 1, conteo = 0;
    while(IsModelComponentCompatibleEx(vehiclemodel, count, component)) {
        if(specific) {
            if(GetVehicleComponentType(component) != component_type) {
                count ++;
                continue;
            }
        }
        if(component != 0) {
            format(str, sizeof str, "%s{ffffff}%s ($%d)\n", str, GetComponentName(component), GetComponentPrice(component));
            TipoTunning[playerid][conteo] = component;
            conteo++;
        }
        count ++;
    }
	if(isnull(str))
	{
		Menu_Tuneo(playerid);
		_Mensaje(playerid, 0, "0", "Este vehiculo no admite dichos componentes.");
		return 1;
	}
	ExPlayerDialog(playerid, D_Tmecanico2, DIALOG_STYLE_LIST, "{D6E1EB}Opciones - Tunning", str, "Seleccionar", "Volver");
	return 1;
}

funcion bajar_carga(playerid)
{
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ColocarObject(playerid, 9, 1221, 17, -0.028000, 0.424000, -0.049999, -10.499997, 97.500030, 1.200000, 0.446000, 0.249000, 0.490000);

	new carga_random = random(3);

	switch(carga_random)
	{
		case 0: set_checkpoint(playerid, 2457.7969, -2080.2349, 13.5636, 2.0);
		case 1: set_checkpoint(playerid, 2457.7144, -2071.1301, 13.5636, 2.0);
		case 2: set_checkpoint(playerid, 2457.7969, -2080.2349, 13.5636, 2.0);
	}

	SetPVarInt(playerid, "EnCheckPoint", 5);
	SendClientMessage(playerid, 0x007798ff, "Dirígete con la caja hasta el checkpoint.");
	SetPVarInt(playerid, "HaciendoMueble", 0);
	tp_trabajo[playerid] = 4;
    return 1;
}

dinero_productos(n_id)
{
	new dinero = 0, tipo = i_Negocio[n_id][nTipo];
	switch (tipo)
	{
		case 1: dinero = 1470;
		case 2: dinero = 1500;
		case 3: dinero = 1600;
		case 4: dinero = 1170;
		case 5: dinero = 1110;
		case 6: dinero = 1065;
		case 7: dinero = 3300;
		case 8: dinero = 1050;
		case 9: dinero = 990;
		case 10: dinero = 920;
		case 11: dinero = 2550;
		case 12: dinero = 1485;
		case 13: dinero = 1650;
		case 14: dinero = 2775;
		case 15: dinero = 2100;
		case 16: dinero = 2340;
		case 17: dinero = 1950;
		case 18: dinero = 1400;
		case 19: dinero = 1170;
	}
	return dinero;
}

Uso_Dop(const string[], color, Float: radio, Float: x, Float: y, Float: z, vw)
{
	foreach(new i: Player)
	{
		if(GetPlayerVirtualWorld(i) == vw)
		{
			if(en_pos(i, radio / 16, x, y, z))
			{
				SendSplitMessage(i, color, string);
			}
			else if(en_pos(i, radio / 8, x, y, z))
			{
				SendSplitMessage(i, color, string);
			}
			else if(en_pos(i, radio / 4, x, y, z))
			{
				SendSplitMessage(i, color, string);
			}
			else if(en_pos(i, radio / 2, x, y, z))
			{
				SendSplitMessage(i, color, string);
			}
			else if(en_pos(i, radio, x, y, z))
			{
				SendSplitMessage(i, color, string);
			}
		}
	}
	return 1;
}

limpiar_p(p)
{
	user[p][jTrabajo1] = 0;
	user[p][jTrabajo2] = 0;
	user[p][jTrabajo3] = 0;
	_Mensaje(p, 4, "ffff00", "Recibiste limpieza de trabajos, no posees un punto de rol.");
}

stock IsAHeli(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 487, 488, 497: return 1;
	}
	return 0;
}

Float: detectar_veh(vehiculo)
{
	new Float:x,Float:y,Float:z;
	GetVehicleVelocity(vehiculo, x, y, z);
	return floatsqroot(((x*x)+(y*y))+(z*z))*180;
}

stock muestra (numero = 0, tipo = 1)
{
	new string[50];
	switch (tipo)
	{
	    case 1:
	    {
			if (numero==1) string = "{ff0000}OFF";
			else string = "{00c200}ON";
	    }
	    case 2:
	    {
			if (numero==1) string = "{ff0000}No";
			else string = "{00c200}Sí";
	    }
	    case 3:
	    {
			if (numero==1) string = "{00a2ff}Hombre";
			else string = "{ffff00}Mujer";
	    }
	}
	return string;
}

en_pDrogas(playerid)
{
	if(en_pos(playerid, 2.0, 2316.5281, -61.9243, 26.5151)) return 1; //
	else if(en_pos(playerid, 2.0, 1311.1685, 351.1704, 19.5823)) return 1; //
	else if(en_pos(playerid, 2.0, 2795.2341, -1619.5961, 10.8852)) return 1; //
	else if(en_pos(playerid, 2.0, -146.0256, -89.1870, 3.0863)) return 1; //
	return 0;
}

en_ascensor(playerid)
{
	if(en_pos(playerid, 2.0, 287.8700,-1609.0222,17.9553)) return 1; // estacionamiento
	else if(en_pos(playerid, 2.0, 287.4495,-1612.5898,32.9868)) return 2; // > piso baja
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,47.0014)) return 3; // > 1
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,51.5025)) return 4; // > 2
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,56.0036)) return 5; // > 3
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,60.5047)) return 6; // > 4
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,65.0058)) return 7; // > 5
	else if(en_pos(playerid, 2.0, 287.3116,-1612.7666,69.5069)) return 8; // > 6
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,73.9923)) return 9; // > 7
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,78.4934)) return 10; // > 8
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,82.9945)) return 11; // > 9
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,87.4956)) return 12; // > 10
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,91.9967)) return 13; // > 11
	else if(en_pos(playerid, 2.0, 287.2756,-1612.8395,96.4978)) return 14; // > 12
	return 0;
}

static FloorNames[14][] =
{
	"Estacionamiento",
	"Planta baja",
	"Piso 1",
	"Piso 2",
	"Piso 3",
	"Piso 4",
	"Piso 5",
	"Piso 6",
	"Piso 7",
	"Piso 8",
	"Piso 9",
	"Piso 10",
	"Piso 11",
	"Piso 12"
};

OnFurnitureOptions(playerid, c_id); public OnFurnitureOptions(playerid, c_id)
{
	new objectid;
	new tmpModel;
	new Float:x, Float:y, Float:z;
	new Float:oRotX, Float:oRotY, Float:oRotZ;

	for (new m = 0; m < MAX_MUEBLES_C; m++)
	{
		if (i_Casa[c_id][cObjPosX][m] != 0)
		{
			objectid = OBJ_MuebleC[playerid][m];
			if(IsValidPlayerObject(playerid, objectid) <= 0)continue;
			GetPlayerObjectPos(playerid, objectid, x, y, z);
			tmpModel = GetPlayerObjectModel(playerid, objectid);
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z) || OpenableDoor(tmpModel) == -1)continue;
			GetPlayerObjectRot(playerid, objectid, oRotX, oRotY, oRotZ);
			i_Casa[c_id][co_opened][m] = (i_Casa[c_id][co_opened][m]) ? 0 : 1;
			oRotZ = (i_Casa[c_id][co_opened][m]) ? oRotZ - 90 : oRotZ + 90;
			i_Casa[c_id][cObjRotX][m] = oRotX;
			i_Casa[c_id][cObjRotY][m] = oRotY;
			i_Casa[c_id][cObjRotZ][m] = oRotZ;
			AjustarMueble_R(c_id, m, oRotX, oRotY, oRotZ);
			save_Casa(c_id, false, m);
		}
	}
	return 1;
}

OpenableDoor(modelid)
{
    static const openableDoors[] =
    {
        1495, 1498, 1535, 1557, 1536, 3089, 997,
        1492, 1494, 1493, 1499, 1504, 1507, 1567,
        1555, 2963, 19302, 19303, 1569, 1537, 2875,
        2876, 2877, 2878, 19859, 19860, 1561, 19875
    };

    for(new x; x < sizeof(openableDoors); x++) if(modelid == openableDoors[x]) return x;

    return -1;
}

/*Gxdtest(playerid)
{
    new string[128];
	new anim = GetPlayerAnimationIndex(playerid);
	format(string, 128, "%d", anim);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;

}*/

funcion color_global(playerid)
{
	if (IsPlayerConnectedEx(playerid))
	{
		switch (EnServicioADM[playerid])
		{
			case 0: //_user
			{
				switch (user[playerid][jMiembro])
				{
					case 1: //LSPD
					{
						if (EnServicioPD[playerid] != 0)
						{
						    SetPlayerColor(playerid, 0x8D8DFF00);
						}
						else SetPlayerColor(playerid, C_PLAYERBLANCO);
					}
					case 5: //LSFD
					{
						if (EnServicio[playerid] != 0)
						{
							SetPlayerColor(playerid, 0xF07A7A00);
						}
						else SetPlayerColor(playerid, C_PLAYERBLANCO);
					}
					default:
					{
						if (user[playerid][jColorP] != 0) //vip
						{
							SetPlayerColor(playerid, 0xFFDB4200);
						}
						else SetPlayerColor(playerid, C_PLAYERBLANCO);
					}
				}
			}
			case 1: //_duty
			{
				SetPlayerColor(playerid, 0x587B9500);
			}
			case 2: //_duty_oculte
			{
				SetPlayerColor(playerid, 0x00000000);
			}
		}
	}
	return 1;
}

stock registrar_anuncio(playerid, const mensaje[])
{
	new
		si_no = 0
	;

	for (new ad = 0; ad < MAX_ANUNCIOS; ad++)
	{
		if (ad_info[ad][num_ad] == 0)
		{
		    si_no = 1;
			id_ultimo = ad;
			ad_info[ad][num_ad] = user[playerid][jTelefono];
			ad_info[ad][tiempo_ad] = 0;
			format(ad_info[ad][por_ad], 32, nombre_pj(playerid));
			format(ad_info[ad][texto_ad], 256, mensaje);
			return 1;
		}
	}

	if (si_no == 0)
	{
		new ad;
		switch (id_ultimo)
		{
		    case 0: ad = 1;
		    case 1: ad = 2;
		    case 2: ad = 3;
		    case 3: ad = 4;
		    case 4: ad = 5;
		    case 5: ad = 6;
		    case 6: ad = 7;
		    case 7: ad = 8;
		    case 8: ad = 9;
		    case 9: ad = 0;
		}
		id_ultimo = ad;
		ad_info[ad][num_ad] = user[playerid][jTelefono];
		ad_info[ad][tiempo_ad] = 0;
		format(ad_info[ad][por_ad], 32, nombre_pj(playerid));
		format(ad_info[ad][texto_ad], 256, mensaje);
	}

	return 1;
}

decir_eltiempo(playerid, id_tiempo)
{
	new
	    tiempo,
	    string[128]
	;
	
	tiempo = user[playerid][jTiempos][id_tiempo];

	if (tiempo != 0)
	{
		format(string, sizeof(string), "Debes esperar %d minutos para volver a usar este comando.", tiempo);
		SendClientMessage(playerid, 0xffff00ff, string);
	}
	else
	{
		format(string, sizeof(string), "El tiempo culmino, intenta nuevamente.");
		SendClientMessage(playerid, 0xffff00ff, string);
	}

	return 1;
}

// Inicio de comandos.
GCMD:dp_bank(playerid,  const params[])
{
	// p_bank0 = jugador1
	// p_bank1 = jugador2
	new
		playerid2,
		string[256]
	;
	if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/dp_bank [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid) return _Mensaje(playerid, 0, "0", "No seas retrasado, no coloques tu ID.");
	if (p_bank[playerid][0] != -1) return _Mensaje(playerid, 0, "0", "No puedes hacer esto, antes retira permisos al anterior jugador (/qp_bank).");
	if (p_bank[playerid2][1] != -1) return _Mensaje(playerid, 0, "0", "Ese jugador ya posee permisos bancarios.");

	p_bank[playerid][0] = playerid2;
	p_bank[playerid2][1] = playerid;
	format(string, sizeof(string), "Has dado permisos de tu cuenta bancaria a %s.", nombre_pj(playerid2));
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "%s te ha dado permisos de su cuenta bancaria.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

GCMD:qp_bank(playerid,  const params[])
{
	// p_bank0 = jugador1
	// p_bank1 = jugador2
	new
		playerid2,
		string[256]
	;
	if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/qp_bank [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid) return _Mensaje(playerid, 0, "0", "No seas retrasado, no coloques tu ID.");
	if (p_bank[playerid][0] == -1) return _Mensaje(playerid, 0, "0", "No has cedido permisos de tu cuenta bancaria a nadie.");
	if (p_bank[playerid2][1] != playerid) return _Mensaje(playerid, 0, "0", "Ese jugador no posee permisos de tu cuenta bancaria.");

	p_bank[playerid][0] = -1;
	p_bank[playerid2][1] = -1;
	format(string, sizeof(string), "Has retirado los permisos de tu cuenta bancaria a %s.", nombre_pj(playerid2));
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "%s te ha retirado los permisos de su cuenta bancaria.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

GCMD:code(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1338) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		code[24],
		nivel,
		horas,
		dinero
	;
	if (sscanf(params, "s[24]ddd", code, nivel, horas, dinero)) return _Mensaje(playerid, 3, "0", "/code [CODE] [NIVEL] [HORAS] [DINERO]");
	if(!check_code(code))
	{
		c_codes++;
		save_stuff();

		new data[60];
		format(data, sizeof data, data_codes, code);
		new INI: File = INI_Open(data);

		INI_WriteInt(File, "Dinero", dinero);
		INI_WriteInt(File, "Nivel", nivel);
		INI_WriteInt(File, "Horas", horas);
		INI_Close(File);

		new sql[128];
		format(sql, sizeof(sql), "Nuevo CODE: %s | Nivel: %d - Horas: %d - Dinero: %d$", code, nivel, horas, dinero);
		SendClientMessage(playerid, 0xccccccff, sql);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, 0xccccccff, "Cuenta existente");
		return 1;
	}
}
GCMD:cosas(playerid)
{
	if(user[playerid][jNivel] != 0) return SendClientMessage(playerid, 0xb00000ff, "Este personaje ya ha recibido estadisticas.");
	new DialogStatus[2000];
	strcat(DialogStatus, "Hola!\n\n");
	strcat(DialogStatus, "Recordamos que cada código tiene un solo uso, es decir, sólo tu y nadie más..\n");
	strcat(DialogStatus, "debe usarlo, así que por favor ingrese correctamente su código de recuperación.\n\n");
	strcat(DialogStatus, "EJEMPLO:\n");
	strcat(DialogStatus, "ÑÑÑCE\n\n");
	strcat(DialogStatus, "___________________________________________\n\n");
	strcat(DialogStatus, "Éxitos con tu nuevo rol en Los Santos, gracias por seguir con nosotros, gracias a ti seguimos en línea! <3\n");
	ExPlayerDialog(playerid, d_codes, DIALOG_STYLE_INPUT, "¡Recuperación de personaje!", DialogStatus, "Seguir", "Cerrar");
	return 1;
}
GCMD:talleres(playerid)
{
	new
		Str[500],
		Str_[3000],
		i_ = 0
	;

	for (new i = 0; i < MAX_EMPRESAS; i++)
	{
		if(i_Empresa[i][eTipo] == 2)
		{
			new Float:Distancia = (GetPlayerDistanceFromPoint(playerid, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]) * 0.01);
			Formato(Str,"{ffffff}* %s ({4B64B5}num: %d{ffffff}) / {cccccc}Distancia: %0.2f Km\n",i_Empresa[i][eNombre],i_Empresa[i][eTelefono], Distancia);
			strcat(Str_,Str);
			Formato(Str,"GPS_Taller_%d",i_);
			SetPVarInt(playerid,Str,i);
			i_++;
		}
	}
	if (i_==0) ExPlayerDialog(playerid,D_INVALIDO,DIALOG_STYLE_LIST,"{D6E1EB}Talleres de la ciudad","No hay talleres existentes.",">>", "<<");
	else ExPlayerDialog(playerid,D_INVALIDO,DIALOG_STYLE_LIST,"{D6E1EB}Talleres de la ciudad",Str_,">>", "<<");
	return 1;
}

GCMD:solidchat(playerid,  const params[])
{
	new
		color_mod
	;
	if (sscanf(params, "d", color_mod)) return _Mensaje(playerid, 3, "0", "/solidchat [0: desactivar / 1: color negro]");
	if (color_mod < 0 || color_mod > 2) return _Mensaje(playerid, 3, "0", "/solidchat [0: desactivar / 1: color negro]");
	solid_chat[playerid] = color_mod;
	switch (color_mod)
	{
		case 1:
		{
			TextDrawHideForPlayer(playerid, fondo_negro);
			//TextDrawHideForPlayer(playerid, fondo_gris);
			TextDrawShowForPlayer(playerid, fondo_negro);
		}
		case 2:
		{
		    SendClientMessage(playerid, 0xccccccff, "fondo gris próximamente.");
			/*TextDrawHideForPlayer(playerid, fondo_negro);
			TextDrawHideForPlayer(playerid, fondo_gris);
			TextDrawShowForPlayer(playerid, fondo_gris);*/
		}
		default:
		{
			TextDrawHideForPlayer(playerid, fondo_negro);
			//TextDrawHideForPlayer(playerid, fondo_gris);
		}
	}
	return 1;
}

GCMD:almacen(playerid)
{
	if (user[playerid][jAlmacen] == -1) return SendClientMessage(playerid, 0xFF6347AA, "No posees un almacen.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jAlmacen] + 888)
	{
		ver_Almacen(playerid, user[playerid][jAlmacen]);
		DentroAlmacen[playerid] = user[playerid][jAlmacen];
	} else return SendClientMessage(playerid, 0xFF6347AA, "No estás en ningún almacen o en uno propio.");
	return 1;
}

GCMD:mialmacen(playerid)
{
	if (user[playerid][jAlmacen] == -1) return SendClientMessage(playerid, 0xFF6347AA, "No posees un almacen.");
	if (GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return _Mensaje(playerid, 0, "0", "Sólo puedes ubicar tu almacen en exteriores.");
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return _Mensaje(playerid, 0, "148","Tienes un checkpoint pendiente, escribe /eliminarcp.");
	if (Granjero[playerid] == 1) return _Mensaje(playerid, 1, "0", "Estás cosechando, termina antes.");

	new
		id = user[playerid][jAlmacen]
	;
	
	_MarcarPos(playerid, i_Almacen[id][aExteriorX], i_Almacen[id][aExteriorY], i_Almacen[id][aExteriorZ], "Ubicación marcada en tu radar.");

	return 1;
}

GCMD:crearalmacen(playerid,  const params[])
{
	new
		tipo,
		playerid2,
		string[128]
	;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", tipo, playerid2)) return _Mensaje(playerid, 3, "0", "/crearalmacen [tamaño] [id jugador]");
	if (tipo < 1 || tipo > 3) return SendClientMessage(playerid, 0xFF6347AA, "Error de tamaño, intenta entre 1 - 3.");
	if (user[playerid2][jAlmacen] != -1) return SendClientMessage(playerid, 0xFF6347AA, "Ese jugador ya posee un almacen.");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	for (new id = 0; id < MAX_ALMACENES; id++)
	{
		if (!i_Almacen[id][aTipo])
		{
			i_Almacen[id][aTipo] = tipo;
			i_Almacen[id][aSeguro] = 0;
			i_Almacen[id][a_Int] = 73;
			i_Almacen[id][a_VW] = id+888;
			i_Almacen[id][aComprado] = 1;
			user[playerid2][jAlmacen] = id;
			strmid(i_Almacen[id][aComprador], nombre_sin(playerid2), 0, strlen(nombre_sin(playerid2)), 32);
			GetPlayerPos(playerid, i_Almacen[id][aExteriorX], i_Almacen[id][aExteriorY], i_Almacen[id][aExteriorZ]);
			GetPlayerFacingAngle(playerid, i_Almacen[id][aExteriorA]);
			GetPosInFrontOfPlayer(playerid, i_Almacen[id][aExteriorX_V], i_Almacen[id][aExteriorY_V], 2);
			switch (tipo)
			{
				case 1: // pequeño
				{
					i_Almacen[id][aInteriorX] = 2793.7334;
					i_Almacen[id][aInteriorY] = 2594.4534;
					i_Almacen[id][aInteriorZ] = 10.8351;
					i_Almacen[id][aInteriorA] = 278.4619;
				}
				case 2: // mediano
				{
					i_Almacen[id][aInteriorX] = 2799.6348;
					i_Almacen[id][aInteriorY] = 2635.1755;
					i_Almacen[id][aInteriorZ] = 10.8351;
					i_Almacen[id][aInteriorA] = 87.3033;
				}
				case 3: // grande
				{
					i_Almacen[id][aInteriorX] = 2845.4641;
					i_Almacen[id][aInteriorY] = 2637.8289;
					i_Almacen[id][aInteriorZ] = 10.8351;
					i_Almacen[id][aInteriorA] = 186.0510;
				}
			}
			format(string, sizeof(string), "Registros: %s ha creado el almacen ID %d.", nombre_pj(playerid), id);
			Log("Registros/Almacenes.log", string);
			save_Almacen(id);
			id = MAX_ALMACENES;
		}
	}
	return 1;
}

GCMD:borraralmacen(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/borraralmacen [id empresa]");
	new id = params[0];
	if (!i_Almacen[id][aTipo]) return _Mensaje(playerid, 0, "548", "ID almacen inválida.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jAlmacen] == id)
			{
				user[i][jAlmacen] = -1;
				format(string, sizeof(string), "* %s ha borrado tu Almacen (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b0b0b0", string);
			}
		}
	}

	format(i_Almacen[id][aComprador], 32, "enventa");
	i_Almacen[id][aTipo] = 0;
	i_Almacen[id][aSeguro] = 0;
	i_Almacen[id][aComprado] = 0;
	i_Almacen[id][aExteriorX] = 0.0;
	i_Almacen[id][aExteriorY] = 0.0;
	i_Almacen[id][aExteriorZ] = 0.0;
	i_Almacen[id][aExteriorA] = 0.0;
	i_Almacen[id][aExteriorX_V] = 0.0;
	i_Almacen[id][aExteriorY_V] = 0.0;
	i_Almacen[id][aInteriorX] = 0.0;
	i_Almacen[id][aInteriorY] = 0.0;
	i_Almacen[id][aInteriorZ] = 0.0;
	i_Almacen[id][aInteriorA] = 0.0;
	i_Almacen[id][aDinero] = 0;
	i_Almacen[id][a_Int] = 0;
	i_Almacen[id][a_VW] = 0;

	for(new i = 0; i < 50; i++)
	{
		i_Almacen[id][aArmario] = 0;
		i_Almacen[id][aArmarioCant] = 0;
	}
		
	new elban[128];
	format(elban, 128, DATOS_ALMACENES, id);
	fremove(elban);

	return 1;
}

GCMD:editara(playerid,  const params[])
{
	new
		e_id,
		string[256]
	;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editara [nombre] [almacen] [codigo]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}exterior - interior.");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, e_id)) return _Mensaje(playerid, 3, "0", "/editarn exterior [almacen]");
		if (!i_Almacen[e_id][aTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		GetPlayerPos(playerid, i_Almacen[e_id][aExteriorX], i_Almacen[e_id][aExteriorY], i_Almacen[e_id][aExteriorZ]);
		Mensaje_(playerid, -1, "Editaste el exterior del almacen.");
		save_Almacen(e_id);
		format(string, sizeof(string), "Registros: %s ha cambiado el exterior del almacen ID %d.", nombre_pj(playerid), e_id);
		Log("Registros/Almacenes.log", string);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, e_id)) return _Mensaje(playerid, 3, "0", "/editarn interior [almacen]");
		if (!i_Almacen[e_id][aTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		GetPlayerPos(playerid, i_Almacen[e_id][aInteriorX], i_Almacen[e_id][aInteriorY], i_Almacen[e_id][aInteriorZ]);
		GetPlayerFacingAngle(playerid, i_Almacen[e_id][aInteriorA]);
		i_Almacen[e_id][a_Int] = GetPlayerInterior(playerid);
		Mensaje_(playerid, -1, "Editaste el interior del almacen.");
		format(string, sizeof(string), "Registros: %s ha cambiado el interior del almacen ID %d.", nombre_pj(playerid), e_id);
		Log("Registros/Almacenes.log", string);

		save_Almacen(e_id);
	}
	return 1;
}
GCMD:quitaralmacen(playerid, params[]){
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new quitalmName[MAX_PLAYER_NAME];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/quitaralmacenoff [Nombre_Apellido]");
	sscanf(params, "s[25]", quitalmName);
	yield 1;
	if (characterCheck(quitalmName))
	{
		new ply,
		string[128];
		if((ply = IsCharConnected(quitalmName)) != -1){
			if(user[ply][jAlmacen] == -1) return _Mensaje(playerid, 0, "0", "El personaje no tiene ningun almacen.");
			user[ply][jAlmacen] = -1;
			format(string, 128, "[Administración]{FFFFFF} %s le quitó el almacen que tenía %s.", nombre_pj(playerid), params);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s le quitó el almacen que tenía %s.", nombre_pj(playerid), params);
			Log("Registros/QuitarNegocio.log", string);
			return 1;
		}
		yield 1;
		new qa_alm;
		new eScaped[MAX_PLAYER_NAME];
		new pjid;
		mysql_escape_string(quitalmName, eScaped);
		await mysql_aquery_s(mainDatabase, str_format("SELECT Almacen, SQLID FROM characters WHERE NombrePJ = '%s' LIMIT 1", eScaped));
		if(cache_num_rows()){
			cache_get_value_name_int(0, "Almacen", qa_alm);
			cache_get_value_name_int(0, "SQLID", pjid);
			if(qa_alm == -1) return _Mensaje(playerid, 0, "0", "El personaje no tiene ningun almacen.");
			qa_alm = -1;
			mysql_tquery_s(mainDatabase, str_format("UPDATE characters SET Almacen = %d WHERE SQLID = %d", qa_alm, pjid));
			format(string, 128, "[Administración]{FFFFFF} %s le quitó el almacen que tenía %s.", nombre_pj(playerid), quitalmName);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s le quitó el almacen que tenía %s.", nombre_pj(playerid), quitalmName);
			Log("Registros/QuitarNegocio.log", string);
		}
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}


GCMD:iralmacen(playerid,  const params[])
{
	new e_id, string[128];
    if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", e_id)) return _Mensaje(playerid, 3, "0", "/iralmacen [id almacen]");
    if (e_id < 0 || e_id >= MAX_ALMACENES) return _Mensaje(playerid, 0, "453", "ID de almacen errónea.");
    if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "ID almacen inválida.");
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPos(playerid, i_Almacen[e_id][aExteriorX], i_Almacen[e_id][aExteriorY], i_Almacen[e_id][aExteriorZ]);
    format(string, sizeof(string), " Usted se teletransporto al almacen ID %d.", e_id);
    _Mensaje(playerid, 4, "ffffff", string);
    return 1;
}

//
GCMD:a_graffito(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new
		string[128],
		playerid2
	;

	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/a_graffito [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "367", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid)  return _Mensaje(playerid, 0, "367", "No seas down por favor, como va ser la misma id.");
	if (user[playerid2][jGraffito])
	{
		user[playerid2][jGraffito] = 0;
		format(string, sizeof(string), "[AvisoAdmin] %s retiro permisos de /graffiti a %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
		MensajeAdmin(string, 2);
	}
	else
	{
		user[playerid2][jGraffito] = 1;
		format(string, sizeof(string), "[AvisoAdmin] %s dio permisos de /graffiti a %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
		MensajeAdmin(string, 2);
	}
	Log("Registros/a_graffito.log", string);
	return 1;
}

GCMD:ayudar(playerid,  const params[])
{
	new
		string[128],
		playerid2
	;

	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/ayudar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "0", "No te puedes ayudar a tí mismo.");
	if (!CercaDelWeon(3.0, playerid, playerid2)) { _Mensaje(playerid, 0, "0", "Estás lejos del jugador."); return 1; }
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (IsPlayerInAnyVehicle(playerid)) { _Mensaje(playerid, 0, "0", "No puedes ayudar a alguien desde un vehículo."); return 1; }
	if (user[playerid2][jMuerto2] == 2) return _Mensaje(playerid, 0, "12", "No puedes ayudar a los muertos.");
	if (user[playerid][jTiempos][20] != 0) return _Mensaje(playerid, 0, "12", "Ya has ayudado a alguien, debes esperar menos de 60 minutos.");
	if (GetPVarInt(playerid2, "EnCrack") == 1)
	{
		if (contador_balas[playerid2] != 0) return _Mensaje(playerid, 0, "12", "El jugador posee heridas de balas, es imposible ayudarlo.");
		if (user[playerid2][jTiempos][21] != 0) return _Mensaje(playerid, 0, "12", "Ese jugador ya le han ayudado, debe esperar menos de 60 minutos.");
		_arma[playerid2] = -1;
		format(QuienMato[playerid2], 24, "Nadie");
		asesino[playerid2] = -1;
		TogglePlayerControllable(playerid, 0);
		TogglePlayerControllable(playerid2, 0);
		SetTimerEx("Descongelar", 8000, false, "i", playerid);
		SetTimerEx("Descongelar", 8000, false, "i", playerid2);
		ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid2, "CRACK", "crckidle2", 4.1, 1, 1, 1, 0, 0, 1);
		YaAviso[playerid2] = 0;
		SetCameraBehindPlayer(playerid2);
		EliminarHerido(playerid2);
		Sangre_(playerid2, 25);
		usandoYo[playerid2] = 0;
		colocar_estado(2, playerid2, "void", 0xBFC0C2FF);
		mensaje_bubble(playerid2, "", 0xBFC0C2FF, 1.0, 1000, 1);
		format(string, sizeof(string), "* %s ha ayudado a leventarse a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		ProxDetector(20.0, playerid, string, C_VERDE, C_VERDE, C_VERDE, C_VERDE, C_VERDE);
		_Limuerte(playerid2);
		user[playerid2][jMuerto2] = 0;
		user[playerid][jTiempos][20] = 60;
		user[playerid2][jTiempos][21] = 60;
		user[playerid2][jMuerto] = 0;
		reaparecer[playerid2] = 0;
	}
	return 1;
}

GCMD:borraranuncios(playerid)
{
	new
	    string[128]
	;
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	format(string, sizeof(string), "[Administración]{FFFFFF} %s limpió los ùltimos anuncios publicados.", nombre_pj(playerid));
	MensajeAdmin(string);
	
	for (new ad = 0; ad < MAX_ANUNCIOS; ad++)
	{
	    ad_info[ad][tiempo_ad] = 0;
		ad_info[ad][num_ad] = 0;
	}
	
	return 1;
}

GCMD:veranuncios(playerid)
{
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b0b0b0","No tienes un teléfono en ninguna mano."); return 1;}

	new
		Str[256],
		Str_[3000],
		i_ = 0
	;

	for (new ad = 0; ad < MAX_ANUNCIOS; ad++)
	{
		if (ad_info[ad][num_ad] != 0)
		{
			new mensaje2[256];
			alm(mensaje2, ad_info[ad][texto_ad]);
			strdel(mensaje2, 20, strlen(mensaje2));
			
			Formato(Str, "{cccccc}» ({00D900}Anuncio: %s...{cccccc}) hace %s\n", mensaje2, Segundos_tiempo(ad_info[ad][tiempo_ad]));
			strcat(Str_, Str);
			Formato(Str, "es_anuncie%d", i_);
			SetPVarInt(playerid, Str, ad);
			i_++;
		}
	}
	
	if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "Anuncios", "Actualmente no hay anuncios disponibles.", "Ok", "");
	ExPlayerDialog(playerid, D_Anuncios, DIALOG_STYLE_LIST, "Anuncios", Str_, ">>", "<<");

	return 1;
}

GCMD:ads(playerid,  const params[]) return cmd_anuncio(playerid, params);
GCMD:anuncio(playerid,  const params[])
{
	new string[300];
	if (Anuncios == 1) return _Mensaje(playerid, 0, "9","El comando ha sido desactivado temporalmente.");
	if (user[playerid][jEdad] < 20) return _Mensaje(playerid,-1, "b00000", "Eres menor, no puedes mandar anuncios.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
	if (user[playerid][jEncarcelado] > 0) return _Mensaje(playerid, 0, "213", "No puedes usar este comando mientras estás en prisión.");
	if (user[playerid][jTiempos][12] != 0) return decir_eltiempo(playerid, 12);
	if (!isnull(params))
	{
		if (RevisarDinero(playerid, 2))
		{
			format(string, sizeof(string), "[Anuncio] %s. Móvil: %d", params[0], user[playerid][jTelefono]);
			_MensajeSAN(0x00D900FF, string);
			Compra(playerid, 2);
			d_san += 2;
			format(string, sizeof(string), "Enviado por: {ffffff}%s [ID: %d]", nombre_pj(playerid), playerid);
			mensaje_admin(string, 0xff0000ff, 1);
			if(user[playerid][jPremium] == 0) user[playerid][jTiempos][12] = 8;
			else if (user[playerid][jPremium] == 1) user[playerid][jTiempos][12] = 3;
			else if (user[playerid][jPremium] == 2) user[playerid][jTiempos][12] = 1;
			format(string, sizeof string, "%s envió anuncio: %s", nombre_pj(playerid), params[0]);
			Log("Registros/Anuncios.log", string);
			
			registrar_anuncio(playerid, params[0]); // register anunce
			
		}
		return 1;
	} else _Mensaje(playerid, 3, "0", "/anuncio [anuncio]");
	return 1;
}

GCMD:color_general(playerid)
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (color_general != 0)
	{
		color_general = 0;
		MensajeAdmin("cmd_color_general_TAB disabled", 2);
		foreach(new p: Player)
		{
			if (user[p][jNivel] != -1)
			{
				SetPlayerColor(p, C_PLAYERBLANCO);
			}
			else SetPlayerColor(p, 0xAFAFAF00);
		}
	}
	else
	{
		color_general = 1;
		MensajeAdmin("cmd_color_general_TAB actived", 2);
		foreach(new p: Player) color_global(p);
	}
	return 1;
}

GCMD:casar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new
		string[128],
		playerid2,
		playerid3,
		si[2]
	;
	
	if (sscanf(params, "dd", playerid2, playerid3)) return _Mensaje(playerid, 3, "0", "/casar [jugador 1] [jugador 2]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "367", "ERROR: El primer jugador seleccionado no se encuentra conectado.");
	if (!IsPlayerConnected(playerid3)) return _Mensaje(playerid, 0, "367", "ERROR: El segundo jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid3)  return _Mensaje(playerid, 0, "367", "No seas down por favor, como va ser la misma id.");
	if (strcmp(user[playerid2][jCasado], "soltero", true) == 0)
	{
		si[0] = 0;
	}
	else si[0] = 1;
	if (si[0] != 0) return _Mensaje(playerid, 0, "0", "El primer jugador ya se encuentra casado.");
	
	if (strcmp(user[playerid3][jCasado], "soltero", true) == 0)
	{
		si[1] = 0;
	}
	else si[1] = 1;
	if (si[1] != 0) return _Mensaje(playerid, 0, "0", "El segundo jugador ya se encuentra casado.");

	format(string, sizeof(string), "Felicidades ahora tienes un matriominio con %s. (STAFF: %s)", nombre_pj(playerid2, 0), user[playerid2][jStaff]);
	SendClientMessage(playerid2, 0x33CCFFFF, string);
	format(string, sizeof(string), "Felicidades ahora tienes un matriominio con %s. (STAFF: %s)", nombre_pj(playerid3, 0), user[playerid3][jStaff]);
	SendClientMessage(playerid3, 0x33CCFFFF, string);

	strmid(user[playerid2][jCasado], nombre_sin(playerid3), 0, strlen(nombre_sin(playerid3)), 32);
	strmid(user[playerid3][jCasado], nombre_sin(playerid2), 0, strlen(nombre_sin(playerid2)), 32);

	format(string, sizeof(string), "[AvisoAdmin] %s casó a %s[%d] con %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2, nombre_pj(playerid3), playerid3);
	MensajeAdmin(string, 2);

	return 1;
}

GCMD:divorciar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new
		string[128],
		playerid2,
		playerid3,
		si[3]
	;

	if (sscanf(params, "dd", playerid2, playerid3)) return _Mensaje(playerid, 3, "0", "/divorciar [jugador 1] [jugador 2]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "367", "ERROR: El primer jugador seleccionado no se encuentra conectado.");
	if (!IsPlayerConnected(playerid3)) return _Mensaje(playerid, 0, "367", "ERROR: El segundo jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid3)  return _Mensaje(playerid, 0, "367", "No seas down por favor, como va ser la misma id.");
	if (strcmp(user[playerid2][jCasado], "soltero", true) == 0)
	{
		si[0] = 1;
	}
	else si[0] = 0;
	if (si[0] != 0) return _Mensaje(playerid, 0, "0", "El primer jugador no se encuentra casado.");

	if (strcmp(user[playerid3][jCasado], "soltero", true) == 0)
	{
		si[1] = 1;
	}
	else si[1] = 0;
	if (si[1] != 0) return _Mensaje(playerid, 0, "0", "El segundo jugador no se encuentra casado.");

	if (strcmp(user[playerid3][jCasado], nombre_sin(playerid2), true) == 0)
	{
		si[2] = 0;
	}
	else si[2] = 1;
	if (si[2] != 0) return _Mensaje(playerid, 0, "0", "Esos jugadores no están casados entre ellos.");
	
	format(string, sizeof(string), "Te han divorciado de %s. (STAFF: %s)", nombre_pj(playerid2, 0), user[playerid2][jStaff]);
	SendClientMessage(playerid2, 0x33CCFFFF, string);
	format(string, sizeof(string), "Te han divorciado de %s. (STAFF: %s)", nombre_pj(playerid3, 0), user[playerid3][jStaff]);
	SendClientMessage(playerid3, 0x33CCFFFF, string);

	alm(user[playerid2][jCasado], "soltero");
	alm(user[playerid3][jCasado], "soltero");

	format(string, sizeof(string), "[AvisoAdmin] %s divorció a %s[%d] de %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2, nombre_pj(playerid3), playerid3);
	MensajeAdmin(string, 2);

	return 1;
}

GCMD:qsyo(playerid,  const params[])
{
	new Float: x, Float: y, Float: z, locatziona[32];
	GetPlayerPos(playerid, x, y, z);
	Get2DZone(locatziona, MAX_ZONE_NAME, x, y, z);
	SendClientMessage(playerid, -1, locatziona);
	return 1;
}

GCMD:car(playerid,  const params[])
{
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/car [granjero, pescador]");
	if (strcmp(params[0], "granjero", true) == 0)
	{
		if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted se encuentra dentro de un vehículo.");
		new
			text_s[256],
			dialog[1024],
			id_g = 0
		;
		if (!Es_job(playerid, 6)) return _Mensaje(playerid, 0, "681", "No eres granjero.");
		if (Granjero[playerid] != 0) return _Mensaje(playerid, 1, "0", "Ya estás cosechando.");
		if (!en_pos(playerid, 30.0, -383.0549, -1438.9514, 26.3276)) return _Mensaje(playerid, 0, "0", "No estás cerca del granero.");

		for(new x = 0; x < 15; x++)
		{
			switch (GetVehicleVirtualWorld(Granjero_Veh[x]))
			{
				case 0:
				{
					format(text_s, sizeof(text_s), "ID: %d\t{007B1D}En uso\n", Granjero_Veh[x]);
					strcat(dialog, text_s);
				}
				default:
				{
					format(text_s, sizeof(text_s), "ID: %d\t{007798}Disponible\n", Granjero_Veh[x]);
					strcat(dialog, text_s);
					id_g++;
				}
			}
		}
		if (id_g != 0) ExPlayerDialog(playerid, D_vehGranjero, DIALOG_STYLE_LIST, "Tractores", dialog, "Seleccionar", "Cancelar");
		else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "Tractores", "No hay ningún vehículo disponible.", "Ok", "");
	}
	else if (strcmp(params[0], "pescador", true) == 0)
	{
		if (user[playerid][jHabilidad2][2] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene habilidad suficiente (3).");
		if (used_vehicle[playerid] != 0) return _Mensaje(playerid, 0, "0", "Ya has spawneado un barco.");
		if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted se encuentra dentro de un vehículo.");
		new
			text_s[256],
			dialog[1024],
			id_g = 0
		;
		if (!Es_job(playerid, 3)) return _Mensaje(playerid, 0, "681", "No eres pescador.");
		if (!en_pos(playerid, 30.0, 2953.7461, -1549.3822, 1.7974)) return _Mensaje(playerid, 0, "0", "No estás en el puerto de bayside.");

		for(new x = 0; x < 10; x++)
		{
			switch (GetVehicleVirtualWorld(Pescador_Veh[x]))
			{
				case 0:
				{
					format(text_s, sizeof(text_s), "ID: %d\t{007B1D}En uso\n", Pescador_Veh[x]);
					strcat(dialog, text_s);
				}
				default:
				{
					format(text_s, sizeof(text_s), "ID: %d\t{007798}Disponible\n", Pescador_Veh[x]);
					strcat(dialog, text_s);
					id_g++;
				}
			}
		}
		if (id_g != 0) ExPlayerDialog(playerid, D_vehPescador, DIALOG_STYLE_LIST, "Botes", dialog, "Seleccionar", "Cancelar");
		else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "Botes", "No hay ningún bote disponible.", "Ok", "");
	}
	else _Mensaje(playerid, 3, "0", "/car [granjero, pescador]");
	return 1;
}

GCMD:quitarveh(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new slotid;
	if (sscanf(params, "d", slotid)) return _Mensaje(playerid, 3, "0", "/quitarveh [id-vehiculo]");
	if (!GetVehicleModel(slotid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");
	if (renta_Veh[slotid][veh_renta] == 0) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no está rentado.");

	renta_Veh[slotid][veh_tiempo] = 1;

	foreach(new p: Player)
	{
		if(IsPlayerInVehicle(p, slotid))
		{
			SendClientMessage(p, 0x33AA33FF, "Un administrador cancelo la renta de este vehículo. (60 segundos)");
		}
	}
	return 1;
}

GCMD:enrenta(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128];
	_Mensaje(playerid, 4, "90C3D4", "Vehículos en renta:");
	for (new i = 0; i < MAX_VEHICLES; i++)
	{
		if (renta_Veh[i][veh_renta] != 0)
		{
			format(string, 128, "[ID: %d] %s - tiempo: {90C3D4}%d", i, renta_Veh[i][veh_dueno], renta_Veh[i][veh_tiempo]);
			_Mensaje(playerid, 4, "b0b0b0", string);
		}
	}
	return 1;
}

GCMD:rentarveh(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0xFF6347AA, "Usted no es el conductor del vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!veh_sinrentar(vehicleid)) return SendClientMessage(playerid, 0xFF6347AA, "No estás dentro de un vehículo rentable o el mismo ya está rentado.");
	if (ComprobarDineroJ(playerid) < 500) { SendClientMessage(playerid, 0xFF6347AA, "No tienes 500$ dólares."); return 1; }
	new string[128];
    for(new f=0;f<MAX_VEHICLES;f++)
	{
		if(renta_Veh[f][veh_renta])
		{
			if (strcmp(nombre_sin(playerid), renta_Veh[f][veh_dueno], true) == 0)
			{
				format(string, 128, "Ya posees un vehículo con renta, ID %d.", f);
				SendClientMessage(playerid, 0xFF6347AA, string);
				return 1;
			}
		}
	}

	DarDineroGC(playerid, -500);
	alm(renta_Veh[vehicleid][veh_dueno], nombre_sin(playerid));
	renta_Veh[vehicleid][veh_tiempo] = 30;
	renta_Veh[vehicleid][veh_renta] = 1;
	SendClientMessage(playerid, 0x90C3D4FF, "Felicidades has rentado este vehículo 30 minutos por 500$.");
	return 1;
}

GCMD:arma(playerid,  const params[]) return cmd_weapon(playerid, params);
GCMD:weapon(playerid,  const params[])
{
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/arma [colgar/ajustar/hueso/tomar]");
	if (strcmp(params[0], "colgar", true) == 0) cmd_espalda(playerid);
	else if (strcmp(params[0], "ajustar", true) == 0) cmd_pespalda(playerid);
	else if (strcmp(params[0], "hueso", true) == 0)
	{
		if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, 0xFF6347AA, "Ya estás editando un arma.");

		ExPlayerDialog(playerid, DIALOG_EDIT_BONE, DIALOG_STYLE_LIST, "Hueso", "Espina\nCabeza\nBrazo Izq\nBrazo Der\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAntebrazo Izq\nAntebrazo Der\nClavicula Izq\nClavicula Der\nCuello\nMandíbula", "Elegir", "Salir");
	}
	else if (strcmp(params[0], "tomar", true) == 0) cmd_qespalda(playerid);
	else _Mensaje(playerid, 3, "0", "/arma [colgar/ajustar/hueso/tomar]");
	return 1;
}

GCMD:espalda(playerid)
{
	new
		string[128],
		manod = user[playerid][jm_Derecha]
	;
	if (GetPVarInt(playerid, "EnCrack") == 1) return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando mientras estás herido.");
	if (Esposado[playerid] != 0) return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando ahora.");
	if (HaciendoPressBanca[playerid] == 1) return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando ahora.");
	if (GetPVarInt(playerid, "HaciendoCarga") == 1) return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando ahora.");
	if (user[playerid][jEspalda] != 0) return SendClientMessage(playerid, 0xFF6347AA, "Posees un arna colgada, debes usar (/arma tomar) para quitarla.");
	if (manod == 0) return SendClientMessage(playerid, 0xFF6347AA, "No tienes nada en tu mano derecha mano.");

	new weaponid = InfoObjeto[manod][IDArma];
	if (!weaponid) return SendClientMessage(playerid, 0xFF6347AA, "No estás sosteniendo un arma.");
	if (!IsWeaponWearable(weaponid)) return SendClientMessage(playerid, 0xFF6347AA, "Esta arma no puede ser editada.");

	update_manos(playerid);
	format(string, sizeof(string), "Te cuelgas tu ~b~%s~w~.", InfoObjeto[manod][NombreObjeto]);
	ShowPlayerFooter(playerid, string);
	user[playerid][jEspalda] = manod, user[playerid][jEspaldaCant] = user[playerid][jm_DerechaCant];
	user[playerid][jm_Derecha] = 0, user[playerid][jm_DerechaCant] = 0;
	PonerObjeto(playerid, 3, manod);
	RemovePlayerWeapon(playerid, InfoObjeto[manod][IDArma]);
	RemovePlayerAttachedObject(playerid, 7);
	return 1;
}

GCMD:pespalda(playerid)
{
	if (user[playerid][jEspalda] == 0) return SendClientMessage(playerid, 0xFF6347AA, "No tienes nada colgado en tu cuerpo.");

	new obj = user[playerid][jEspalda];
	new weaponid = InfoObjeto[obj][IDArma];
	if (!weaponid) return SendClientMessage(playerid, 0xFF6347AA, "No estás sosteniendo un arma.");
	if (!IsWeaponWearable(weaponid)) return SendClientMessage(playerid, 0xFF6347AA, "Esta arma no puede ser editada.");
	if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, 0xFF6347AA, "Ya estás editando un arma.");

	EditAttachedObject(playerid, 9);
	EditandoObjetoJ[playerid] = 2;
	Mensaje_(playerid, -1, "Mantén presionado {90C3D4}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
	return 1;
}

IsWeaponWearable(weaponid)
    return (weaponid >= 2 && weaponid <= 29309);

GCMD:qespalda(playerid)
{
	new string[128];
	if (user[playerid][jEspalda] == 0) return SendClientMessage(playerid, 0xFF6347AA, "No tienes ningún arma colgada.");
	if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, 0xFF6347AA, "No puedes tomar el arma mientras editas.");
	if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) { SendClientMessage(playerid, 0xFF6347AA, "Posees ambas manos ocupadas."); return 1; }
	new Espalda = user[playerid][jEspalda];
	if (user[playerid][jm_Derecha] == 131) return SendClientMessage(playerid, 0xFF6347AA, "Posees una caja registradora en manos, no puesde hacer esto.");

	if (user[playerid][jm_Derecha] == 0)
	{
		format(string, sizeof(string), "Agarras tu ~b~%s~w~", InfoObjeto[Espalda][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		_GiveWeapon(playerid, InfoObjeto[Espalda][IDArma], user[playerid][jEspaldaCant]);
		user[playerid][jm_Derecha] = user[playerid][jEspalda];
		user[playerid][jm_DerechaCant] = user[playerid][jEspaldaCant];
		PonerObjeto(playerid, 1, Espalda);
	}
	else if (user[playerid][jm_Izquierda] == 0)
	{
		format(string, sizeof(string), "Agarras tu ~b~%s~w~", InfoObjeto[Espalda][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		user[playerid][jm_Izquierda] = user[playerid][jEspalda];
		user[playerid][jm_IzquierdaCant] = user[playerid][jEspaldaCant];
		PonerObjeto(playerid, 2, Espalda);
	}
	user[playerid][jEspalda] = 0, user[playerid][jEspaldaCant] = 0;
	RemovePlayerAttachedObject(playerid, 9);
	return 1;
}

GCMD:letreros(playerid) return cmd_carteles(playerid);
GCMD:carteles(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], c_tel[60];
	_Mensaje(playerid, 4, "90C3D4", "Carteles:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (con_cartel[i] == 1)
			{
				GetPVarString(i, "name_cartel", c_tel, sizeof(c_tel));
				format(string, 128, "[ID: %d] %s - Texto: {90C3D4}%s", i, nombre_pj(i), c_tel);
				_Mensaje(playerid, 4, "b0b0b0", string);
			}
		}
	}
	return 1;
}

GCMD:letrero(playerid,  const params[]) return cmd_cartel(playerid, params);
GCMD:cartel(playerid,  const params[])
{
	if (user[playerid][j_Horas] < 34) return Mensaje_(playerid, 0xFF6347AA, "Debes tener al menos 35 horas de juego.");
	if (sscanf(params, "s[50]", params)) return _Mensaje(playerid, 3, "0", "/cartel [texto] ó /cartel borrar");
	if (strlen(params) > 60) { Mensaje_(playerid, 0xFF6347AA, "El máximo de carácteres es de 60."); return 1; }
	if (!strcmp(params, "borrar", true, 6))
	{
		if (con_cartel[playerid] == 0) return Mensaje_(playerid, 0xFF6347AA, "No tienes ningún cartel creado.");
	    con_cartel[playerid] = 0;
		Delete3DTextLabel(cartel[playerid]);
		DeletePVar(playerid, "name_cartel");
		cartel[playerid] = Create3DTextLabel("cartelito", -1, -1266.9980, 44.1900, 32.9023, 1.0, playerid+666, 1);
	}
	else
	{
		if (con_cartel[playerid] != 0)
		{
			Update3DTextLabelText(cartel[playerid], 0xC2A2DAFF, params);
			SetPVarString(playerid, "name_cartel", params);
		}
		else
		{
		    new Float: x, Float: y, Float: z;
		    GetPlayerPos(playerid, x, y, z);
	    	con_cartel[playerid] = 1;
			Delete3DTextLabel(cartel[playerid]);
			SetPVarString(playerid, "name_cartel", params);
			cartel[playerid] = Create3DTextLabel(params, 0xC2A2DAFF, x, y, z, 15.0, GetPlayerVirtualWorld(playerid), 1);
		}
	}
	return 1;
}

GCMD:hud(playerid,  const params[])
{
	new slotid;
	if (sscanf(params, "d", slotid)) return _Mensaje(playerid, 3, "0", "/hud [1-4]");
	if (slotid < 1 || slotid > 4) return _Mensaje(playerid, 3, "0", "/hud [1-4]");

	for(new i = 0; i < 8; i ++) PlayerTextDrawHide(playerid, Player_Hud[playerid][i]);

	user[playerid][pHud] = slotid;
	SendClientMessage(playerid, 0x90C3D4FF, "Cambiaste el estilo del HUD.");
	OnPlayerChangeHud(playerid);
	return 1;
}

GCMD:toghud(playerid) return cmd_textdraw(playerid);
GCMD:textdraw(playerid)
{
	if(user[playerid][pUseHud] == 0)
	{
		user[playerid][pUseHud] = 1;
		for(new i = 0; i < 8; i ++) PlayerTextDrawHide(playerid, Player_Hud[playerid][i]);
		SendClientMessage(playerid, 0x90C3D4FF, "Desactivaste el HUD.");
	}
	else
	{
		user[playerid][pUseHud] = 0;
		OnPlayerChangeHud(playerid);
		SendClientMessage(playerid, 0x90C3D4FF, "Activaste el HUD.");
	}
	return 1;
}

GCMD:musica(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b0b0b0","No tienes un teléfono en ninguna mano."); return 1;}

	new StationsDialog[2500];
	strcat(StationsDialog, "Número\tNombre\tGénero\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{F50000}||\t{F50000}Detener música\t{F50000}||\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}1\t{FFFFFF}54 House\t{00A2FF}Electro\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}2\t{FFFFFF}Top Latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}3\t{FFFFFF}Dubbase.FM\t{00A2FF}Dubstep\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}4\t{FFFFFF}Reggae Hits\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}5\t{FFFFFF}MBradio.FM\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}6\t{FFFFFF}Classical Weta 90.9FM\t{00A2FF}Classic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}7\t{FFFFFF}LOVE TIMES\t{00A2FF}Classic romantic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}8\t{FFFFFF}Soft Rock Cafe\t{00A2FF}Heavy Metal\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}9\t{FFFFFF}HardRadio.com\t{00A2FF}Rock\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}10\t{FFFFFF}Aural Moon\t{00A2FF}Punk\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}11\t{FFFFFF}Idobi Radio\t{00A2FF}Electronic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}12\t{FFFFFF}www.Hot108.com\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}13\t{FFFFFF}Sensacion Peru\t{00A2FF}Pop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}14\t{FFFFFF}DEEGAY RADIO\t{00A2FF}Dance Pop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}15\t{FFFFFF}PaganMetalRadio\t{00A2FF}Extreme Metal\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}16\t{FFFFFF}PulsRadio TRANCE\t{00A2FF}Electronic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}17\t{FFFFFF}The Trip\t{00A2FF}Music Usa\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}18\t{FFFFFF}Parazitii Club\t{00A2FF}Gangsta Rap\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}19\t{FFFFFF}Amor latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}20\t{FFFFFF}Hotmixradio\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}21\t{FFFFFF}RadioHot69\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}22\t{FFFFFF}Radio Hunter\t{00A2FF}Electrónica\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}23\t{FFFFFF}92.5 The River\t{00A2FF}Alternative\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00A2FF}»\t{FFFFFF}URL Internet", sizeof(StationsDialog));
	ExPlayerDialog(playerid, D_TELEFONO7, DIALOG_STYLE_TABLIST_HEADERS, "{00C200}Radios", StationsDialog, "Seleccionar", "Inicio");
	return 1;
}

GCMD:telefono(playerid,  const params[])
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b0b0b0","No tienes un teléfono en ninguna mano."); return 1;}
	if (user[playerid][j_uTelefono] == 0) { ExPlayerDialog(playerid, D_TELEFONO, DIALOG_STYLE_LIST, "{D6E1EB}Menú telefónico", "{00c200}Teléfono encendido{ffffff}\nLlamadas\nContactos\nMensajes\nMúsica\nTransferir dinero\nÙltimos anuncios", ">>", "<<"); }
	else { ExPlayerDialog(playerid, D_TELEFONO, DIALOG_STYLE_LIST, "{D6E1EB}Menú telefónico", "{ff0000}Teléfono apagado{ffffff}\nLlamadas\nContactos\nMensajes\nMúsica\nTransferir dinero\nÙltimos anuncios", ">>", "<<"); }
	return 1;
}

GCMD:phone(playerid)
{
	if(!_Telefono(playerid)) return SendClientMessage(playerid, 0xFF6347AA, "ERROR: Usted no tiene un teléfono en mano.");
	if(!user[playerid][pUseGUI])
	{
    	Phone_ShowUI(playerid);
    	Mensaje_(playerid, 0xFF6347AA, "Sistema en construcción.");
	}
	else
	{
	    Phone_HideUI(playerid);
	}
	return 1;
}
GCMD:pc(playerid)
{
	if(user[playerid][pUseGUI])
	{
    	//SelectTextDraw(playerid, 0xAFAFAFFF);
	    cmd_phone(playerid);//quitarlo cuando habilites todas las funciones con SlectTextDraw
	}
	else
	{
	    cmd_phone(playerid);
	}
    return 1;
}

stock Phone_ShowUI(playerid)
{
//	SendClientMessage(playerid, -1, "[ ! ] Nota: Para alternar el teléfono, use /phone. Para abrir el mouse, usa /pc.");
	Phone_HideUI(playerid);
	user[playerid][pUseGUI] = true;

	new
		year,
		month,
		day,
		MonthStr[40],
		str[128]
	;

	new hora_s, minuto_s, segundo_s;
	gettime(hora_s, minuto_s, segundo_s);
	format(str, sizeof(str), "%02d:%02d", hora_s, minuto_s);
    PlayerTextDrawSetString(playerid, phone_horaA[playerid], str);
    PlayerTextDrawSetString(playerid, phone_horaB[playerid], str);

	getdate(year, month, day);
	switch(month)
	{
	    case 1:  MonthStr = "Ene";
	    case 2:  MonthStr = "Feb";
	    case 3:  MonthStr = "Mar";
	    case 4:  MonthStr = "Abr";
	    case 5:  MonthStr = "May";
	    case 6:  MonthStr = "Jun";
	    case 7:  MonthStr = "Jul";
	    case 8:  MonthStr = "Ago";
	    case 9:  MonthStr = "Sep";
	    case 10: MonthStr = "Oct";
	    case 11: MonthStr = "Nov";
	    case 12: MonthStr = "Dic";
	}
	format(str, sizeof(str), "%s, %s_%d", MonthStr, GetWeekDay(), day);
    PlayerTextDrawSetString(playerid, phone_Fecha[playerid], str);

    if(user[playerid][j_uTelefono] == 1) PlayerTextDrawBoxColor(playerid, phone_Info[playerid], 255);

	for(new i = 0; i < 3; i++) PlayerTextDrawShow(playerid, phone_Marco[playerid][i]);
	PlayerTextDrawShow(playerid, phone_Logo[playerid]);
	PlayerTextDrawShow(playerid, phone_Inter[playerid]);
	PlayerTextDrawShow(playerid, phone_Info[playerid]);
	PlayerTextDrawShow(playerid, phone_Display[playerid]);
	PlayerTextDrawShow(playerid, phone_BotIz[playerid]);
	PlayerTextDrawShow(playerid, phone_BotDr[playerid]);
	PlayerTextDrawShow(playerid, phone_UP[playerid]);
	PlayerTextDrawShow(playerid, phone_Down[playerid]);
	PlayerTextDrawShow(playerid, phone_Left[playerid]);
	PlayerTextDrawShow(playerid, phone_Right[playerid]);
	PlayerTextDrawShow(playerid, phone_Menu[playerid]);
	PlayerTextDrawShow(playerid, phone_Atras[playerid]);
	PlayerTextDrawShow(playerid, phone_box1[playerid]);
	PlayerTextDrawShow(playerid, phone_box2[playerid]);
	PlayerTextDrawShow(playerid, phone_Menu[playerid]);
	PlayerTextDrawShow(playerid, phone_Atras[playerid]);
    PlayerTextDrawShow(playerid, phone_Bateria[playerid]);
    PlayerTextDrawShow(playerid, phone_horaA[playerid]);
    PlayerTextDrawShow(playerid, phone_horaB[playerid]);
    PlayerTextDrawShow(playerid, phone_Fecha[playerid]);

    //SelectTextDraw(playerid, 0xAFAFAFFF);
	return 1;
}

stock Phone_HideUI(playerid)
{
	for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, phone_Marco[playerid][i]);
	PlayerTextDrawHide(playerid, phone_Logo[playerid]);
	PlayerTextDrawHide(playerid, phone_Inter[playerid]);
	PlayerTextDrawHide(playerid, phone_Info[playerid]);
	PlayerTextDrawHide(playerid, phone_Display[playerid]);
	PlayerTextDrawHide(playerid, phone_BotIz[playerid]);
	PlayerTextDrawHide(playerid, phone_BotDr[playerid]);
	PlayerTextDrawHide(playerid, phone_UP[playerid]);
	PlayerTextDrawHide(playerid, phone_Down[playerid]);
	PlayerTextDrawHide(playerid, phone_Left[playerid]);
	PlayerTextDrawHide(playerid, phone_Right[playerid]);
	PlayerTextDrawHide(playerid, phone_Menu[playerid]);
	PlayerTextDrawHide(playerid, phone_Atras[playerid]);
	PlayerTextDrawHide(playerid, phone_box1[playerid]);
	PlayerTextDrawHide(playerid, phone_box2[playerid]);
	PlayerTextDrawHide(playerid, phone_Menu[playerid]);
	PlayerTextDrawHide(playerid, phone_Atras[playerid]);
    PlayerTextDrawHide(playerid, phone_Bateria[playerid]);
    PlayerTextDrawHide(playerid, phone_horaA[playerid]);
    PlayerTextDrawHide(playerid, phone_horaB[playerid]);
    PlayerTextDrawHide(playerid, phone_Fecha[playerid]);

    //cache_phone[playerid][current_page] = Page_None;
	user[playerid][pUseGUI] = false;
	//CancelSelectTextDraw(playerid);
	return 1;
}

GCMD:buscados(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "175", "No eres miembro de la PD.");

	new option[128];
	if (sscanf(params, "s[128]", option)) return _Mensaje(playerid, 3, "0", "/buscados [agregar - ver - borrar]");

	if (!strcmp(option, "agregar", true, 7))
	{
		if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "0", "ERROR: Debes ser superior a rango 1.");
		if (sscanf(params, "s[128]s[200]", option, params)) return _Mensaje(playerid, 3, "0", "/buscados agregar [texto]");

		for (new x=0; x<sizeof(i_Buscados); x++)
		{
			if (i_Buscados[x][b_ID] == 0)
			{
				i_Buscados[x][b_ID] = x+1;

				format(i_Buscados[x][b_string], 200, params);
				new year, month, day, hour, minute, second;
				getdate(year, month, day); gettime(hour, minute, second);
				format(i_Buscados[x][b_fecha], 128, "Fecha: %d/%d/%d - Hora: %02d:%02d:%02d", day, month, year, hour, minute, second);

				alm(i_Buscados[x][b_creador], nombre_pj(playerid));
				new string[128];
				format(string, sizeof(string), "[SISTEMA] %s agrego un nuevo informe. /buscados (%d).", nombre_pj(playerid), x);
				_MensajeRfac(1, 0x237D00FF, string);
				return 1;
			}
		}
		Mensaje_(playerid, -1, "Informes llegó a su limite, contacte con bish0p.");
	}
	else if (!strcmp(option, "ver", true, 8))
	{
		new Str[256], Str_[5000], i_ = 0;
		for (new x=0; x<sizeof(i_Buscados); x++)
		{
			if (i_Buscados[x][b_ID] != 0)
			{
				new mensaje[35];
				strmid(mensaje, i_Buscados[x][b_string], 0, 35);
				Formato(Str, "[ID: %d] {CB2700}%s{ffffff} | {90C3D4}Por:{ffffff} %s\n", x, mensaje, i_Buscados[x][b_creador]);
				strcat(Str_, Str);
				Formato(Str, "buscado_xd%d", i_);
				SetPVarInt(playerid, Str, x);
				i_++;
			}
		}
		if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}[HISTORIAL]: Buscados.", "No hay nada escrito, use /buscados agregar [texto].", "Cerrar", "");
		ExPlayerDialog(playerid, D_Buscados, DIALOG_STYLE_LIST, "[HISTORIAL]: Buscados.", Str_, "Seleccionar", "Cancelar");
	}
	else if (!strcmp(option, "borrar", true, 5))
	{
		if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "0", "ERROR: Debes ser superior a rango 1.");
		if (sscanf(params, "s[128]i", option, params[1])) return _Mensaje(playerid, 3, "0", "/buscados borrar [id]");
		if (params[1] < 0 || params[1] >= MAX_BUSCADOS) return _Mensaje(playerid, 0, "453", "ID de busqueda errónea.");
		if (!i_Buscados[params[1]][b_ID]) return _Mensaje(playerid, 0, "138", "ID Invalida.");
		i_Buscados[params[1]][b_ID] = 0;
		alm(i_Buscados[params[1]][b_string], "nada");
		alm(i_Buscados[params[1]][b_creador], "nadie");
		alm(i_Buscados[params[1]][b_fecha], "sinfecha");
		Mensaje_(playerid, -1, "Borraste el informe de busqueda indicado.");
		return 1;
	}
	else _Mensaje(playerid, 0, "612", "Opcion invalida.");
	return 1;
}

GCMD:puerta(playerid)
{
	if (en_pos(playerid, 3.0, 245.8900, 1775.8378, 699.9702))
	{
		if (!Es_Faccion(playerid, 3)) return Mensaje_(playerid, -1, "No tienes llaves para abrir esta puerta.");
		SetDynamicObjectRot(puertasan, 0.0, 0.0, -90.0);
		SetTimer("CerrarPuertaSAN", 5000, 0);
		return 1;
	}
	else if (en_pos(playerid, 3.0, 1023.0825, 2097.2563, -95.2023))
	{
		if (!Es_Faccion(playerid, 1)) return Mensaje_(playerid, -1, "No tienes llaves para abrir esta puerta.");
		SetDynamicObjectRot(puertadic, 0.0, 0.0, 180.0);
		SetTimer("CerrarPuertaDIC", 6000, 0);
		return 1;
	}
	if (user[playerid][jCasaKey] != INVALID_CASA_ID)
	{
		if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey] + 6000) OnFurnitureOptions(playerid, user[playerid][jCasaKey]);
	}
	if (user[playerid][jCasaKey2] != INVALID_CASA_ID)
	{
		if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey2] + 6000) OnFurnitureOptions(playerid, user[playerid][jCasaKey2]);
	}
	if (user[playerid][jCasaLlaves] != INVALID_CASA_ID)
	{
		if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaLlaves] + 6000) OnFurnitureOptions(playerid, user[playerid][jCasaLlaves]);
	}
	if (user[playerid][j2CasaLlaves] != INVALID_CASA_ID)
	{
		if (GetPlayerVirtualWorld(playerid) == user[playerid][j2CasaLlaves] + 6000) OnFurnitureOptions(playerid, user[playerid][j2CasaLlaves]);
	}
	return 1;
}

GCMD:afks(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	_Mensaje(playerid, 4, "b0b0b0", "  Jugadores con más de 3 minutos AFK:");
	new szNoobs[128];
	foreach(new i: Player) if (user[i][pAFKTime] > 180)
	{
		format(szNoobs, sizeof(szNoobs), "[%d] %s - AFK: {90C3D4}%s.", i, nombre_pj(i), Segundostiempo(user[i][pAFKTime]));
		_Mensaje(playerid, 4, "ffffff", szNoobs);
	}
	return 1;
}

GCMD:afk(playerid,  const params[])
{
	new string[128], playerid2;
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/afk [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return _Mensaje(playerid, 0, "9", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid][jAdmin] == 0) if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

    if (user[playerid2][pAFKTime] >= 0 && user[playerid2][pAFKTime] <= 4) return _Mensaje(playerid, 0, "9", "Ese jugador no se encuentra AFK.");

	format(string, sizeof(string), "%s tiene AFK:{90C3D4} %s.", nombre_pj(playerid2), Segundostiempo(user[playerid2][pAFKTime]));
	Mensaje_(playerid, -1, string);
	return 1;
}

GCMD:a_vehs(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "488", "Tú no tienes acceso a este comando.");
	new string[128], max_vehs = 0, max_vehs2 = 0;
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if (i_Vehiculo[vid][v_timer] != 0)
		{
		    format(string, sizeof(string), "v_timer: %d - vehID: %d - matricula: LS-%d.", i_Vehiculo[vid][v_timer], i_Vehiculo[vid][vID], i_Vehiculo[vid][vLlave]);
			Mensaje_(playerid, -1, string);
			max_vehs++;
		}
		if (i_Vehiculo[vid][vSpawned] == 1)
		{
			max_vehs2++;
		}
	}
	format(string, sizeof(string), "Vehículos a guardar: {00c200}%d{ffffff} - Vehículos spwaneados: {00c200}%d", max_vehs, max_vehs2);
	Mensaje_(playerid, -1, string);
	return 1;
}

GCMD:licencia(playerid)
{
	if(en_pos(playerid, 2.0, LicensesPoint[0][licenseX], LicensesPoint[0][licenseY], LicensesPoint[0][licenseZ]))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return 1;
		if (user[playerid][jLicencias][1] == 1) return Mensaje_(playerid, -1, "Ya posees una licencia de conducir.");
		if (user[playerid][jEdad] < 18) return Mensaje_(playerid, -1, "Eres un niño todavia, no puedo darte licencia. (edad req. 18)");
		GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
		Exam_Init(playerid, EXAM_TYPE_VEHICLES);
		return 1;
	}
	else if (en_pos(playerid, 2.0, LicensesPoint[1][licenseX], LicensesPoint[1][licenseY], LicensesPoint[1][licenseZ]))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return 1;
		if (user[playerid][jLicencias][5] == 1) return Mensaje_(playerid, -1, "Ya posees una licencia de botes.");
		if (user[playerid][jEdad] < 21) return Mensaje_(playerid, -1, "Eres un niño todavia, no puedo darte licencia. (edad req. 21)");
		GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
		Exam_Init(playerid, EXAM_TYPE_BOATS);
		return 1;
	}
	else if (en_pos(playerid, 2.0, LicensesPoint[2][licenseX], LicensesPoint[2][licenseY], LicensesPoint[2][licenseZ]))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return 1;
		if (user[playerid][jLicencias][4] == 1) return Mensaje_(playerid, -1, "Ya posees una licencia de avión.");
		if (user[playerid][jEdad] < 21) return Mensaje_(playerid, -1, "Eres un niño todavia, no puedo darte licencia. (edad req. 21)");
		GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
		Exam_Init(playerid, EXAM_TYPE_PLANES);
		return 1;
	}
	else _Mensaje(playerid, 0, "0", "No estás en ningún punto de adquirir licencia.");
	return 1;
}
GCMD:caja(playerid,  const params[])
{
	new string[256];
	if (sscanf(params, "s[20]", params[0])) return _Mensaje(playerid, 3, "0", "/caja [sacar - guardar - ver]");
	if (!strcmp(params[0], "sacar", true))
	{
		if (user[playerid][jm_Derecha] == 50 || user[playerid][jm_Izquierda] == 50)
		{
			cmd_caja(playerid, "ver");
	    }
	    else
	    {
			if (!TieneCaja(playerid, 1) && !TieneCaja(playerid, 2)) { _Mensaje(playerid, 0, "165", "No tienes una caja en ninguna mano."); return 1; }
			if (user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0) { _Mensaje(playerid, 0, "165", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1; }
			if (TieneCaja(playerid, 1))
			{
				new
					objeto = TieneCaja(playerid, 1)
				;
				user[playerid][jm_DerechaCant]--;
				user[playerid][jm_Izquierda] = objeto, PonerObjeto(playerid, 2, objeto);
				user[playerid][jm_IzquierdaCant] = capacidad_objecto(objeto);
				if(objeto == 96) format(string, sizeof(string), "%s sacó una cerveza de la caja.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
				else format(string, sizeof(string), "%s sacó %s de la caja.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
				update_manos(playerid);
				return 1;
			}
			else if (TieneCaja(playerid, 2))
			{
				new
					objeto = TieneCaja(playerid, 2)
				;
				user[playerid][jm_IzquierdaCant]--;
				user[playerid][jm_Derecha] = objeto, PonerObjeto(playerid, 1, objeto);
				if (InfoObjeto[objeto][IDArma] != 0) { _GiveWeapon(playerid, InfoObjeto[objeto][IDArma], capacidad_objecto(objeto)); }
				user[playerid][jm_DerechaCant] = capacidad_objecto(objeto);
				if(objeto == 96) format(string, sizeof(string), "%s sacó una cerveza de la caja.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
				else format(string, sizeof(string), "%s sacó %s de la caja.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
				ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
				update_manos(playerid);
				return 1;
			}
		}
	}
	else if (!strcmp(params[0], "guardar", true))
	{
		new obj = 50, manoizq = user[playerid][jm_Izquierda], manoizqcant = user[playerid][jm_IzquierdaCant];
		new mano_dC = user[playerid][jm_DerechaCant];

		if (user[playerid][jm_Derecha] != obj)
		{
			_Mensaje(playerid, 4, "b00000", "No posees una caja especial en tu mano derecha.");
			return 1;
		}

		if (manoizq == 0) return _Mensaje(playerid, 0, "9", "No tienes un objeto en tu mano izquierda.");
		if (!tiene_arma(playerid, 2) && !tiene_cargador(playerid, 2)) return _Mensaje(playerid, 4, "b0b0b0", "Sólo puedes guardar armas o cargadores.");

		if (mano_dC == 0 || mano_dC == 1)
		{
			for (new id = 0; id < MAX_CAJAS; id++)
			{
				if (!i_Caja[id][cjID])
				{
					i_Caja[id][cjID] = id+500;
					i_Caja[id][cjObjeto][0] = manoizq;
					i_Caja[id][cjObjetoCant][0] = manoizqcant;
					user[playerid][jm_Izquierda] = 0;
					user[playerid][jm_IzquierdaCant] = 0;
					user[playerid][jm_DerechaCant] = id+500;
					format(string, sizeof(string), "%s guardó %s en la caja.", nombre_pj(playerid, 0), InfoObjeto[manoizq][NombreObjeto]);
					ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
					save_caja(id, true);
					return 1;
				}
			}
			return Mensaje_(playerid, -1, "Error, informe esto a bish0p, (/caja guardar).");
		}
		else cajita(mano_dC-500, playerid);
	}
	else if (!strcmp(params[0], "ver", true))
	{
		new obj = 50;
		new mano_dC = user[playerid][jm_DerechaCant];

		if (user[playerid][jm_Derecha] != obj)
		{
			_Mensaje(playerid, 4, "b00000", "No posees una caja especial en tu mano derecha.");
			return 1;
		}
		if (mano_dC == 0 || mano_dC == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ésta caja se encuentra vacía, use /caja guardar.");
		for (new id = 0; id < MAX_CAJAS; id++)
		{
			if (mano_dC == i_Caja[id][cjID])
			{
				cajita(mano_dC-500, playerid);
				return 1;
			}
		}
		Mensaje_(playerid, -1, "Error, informe esto a bish0p, (/caja ver).");
	}
	return 1;
}

GCMD:metadona(playerid) return cmd_desintoxicar(playerid);
GCMD:desintoxicar(playerid)
{
    if(user[playerid][jm_Derecha] != 155 && user[playerid][jm_Izquierda] != 155) return _Mensaje(playerid, 0, "0", "ERROR: No tienes metadona en ninguna mano.");
    if(user[playerid][jDtipo] == 11) return _Mensaje(playerid, 0, "0", "ERROR: Ya estás bajo los efectos de la metadona.");
    if(user[playerid][jDtipo] > 0 && user[playerid][jDtipo] < 11)
    {
        if(user[playerid][jm_Derecha] == 155) user[playerid][jm_DerechaCant] --;
        if(user[playerid][jm_Izquierda] == 155) user[playerid][jm_IzquierdaCant] --;

        if(user[playerid][jAdiccion][0] >= 3) user[playerid][jAdiccion][0] -= 3;
        if(user[playerid][jAdiccion][1] >= 3) user[playerid][jAdiccion][1] -= 3;
        if(user[playerid][jAdiccion][2] >= 3) user[playerid][jAdiccion][2] -= 3;
        if(user[playerid][jAdiccion][3] >= 3) user[playerid][jAdiccion][3] -= 3;
        if(user[playerid][jAdiccion][4] >= 3) user[playerid][jAdiccion][4] -= 3;
        if(user[playerid][jAdiccion][5] >= 3) user[playerid][jAdiccion][5] -= 3;

        user[playerid][jDtipo] = 11;
        user[playerid][jDtiempo] = 4;

        SendClientMessage(playerid, 0xFFFF00FF, "Consumes metadona.");
        SendClientMessage(playerid, 0x9ACD32FF, "Haces desaparecer los efectos de droga. Te baja un poco el nivel de adicción.");
    }
	if(user[playerid][pAbstinenceEffect] == 1)
    {
        if(user[playerid][jAdiccion][0] >= 3 || user[playerid][jAdiccion][1] >= 3 || user[playerid][jAdiccion][2] >= 3 || user[playerid][jAdiccion][3] >= 3 || user[playerid][jAdiccion][4] >= 3 || user[playerid][jAdiccion][5] >= 3)
        {
            if(user[playerid][jm_Derecha] == 155) user[playerid][jm_DerechaCant] --;
            if(user[playerid][jm_Izquierda] == 155) user[playerid][jm_IzquierdaCant] --;

            if(user[playerid][jAdiccion][0] >= 3) user[playerid][jAdiccion][0] -= 3;
            if(user[playerid][jAdiccion][1] >= 3) user[playerid][jAdiccion][1] -= 3;
            if(user[playerid][jAdiccion][2] >= 3) user[playerid][jAdiccion][2] -= 3;
            if(user[playerid][jAdiccion][3] >= 3) user[playerid][jAdiccion][3] -= 3;
            if(user[playerid][jAdiccion][4] >= 3) user[playerid][jAdiccion][4] -= 3;
            if(user[playerid][jAdiccion][5] >= 3) user[playerid][jAdiccion][5] -= 3;

            user[playerid][jDtipo] = 11;
            user[playerid][jDtiempo] = 4;

            SendClientMessage(playerid, 0xFFFF00FF, "Consumes metadona.");
            SendClientMessage(playerid, 0x9ACD32FF, "Haces desaparecer los efectos de abstinencia. Te baja un poco el nivel de adicción.");
        }
        else return _Mensaje(playerid, 0, "0", "ERROR: No posees ninguna adicción, no te hace efecto.");
    }
    return 1;
}

GCMD:verstats(playerid,  const params[])
{
	new playerid2;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "488", "Tú no tienes acceso a el comando /Verstats.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/verstats [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "Jugador no conectado.");

	new coordsstring[300], coordsstring2[128], DialogStatus[3000];
	format(coordsstring, sizeof(coordsstring), "{b0b0b0}Hambre:{ffffff} %.1f\n", user[playerid2][jHambre]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{b0b0b0}Fuerza:{ffffff} %.1f\n\n", float(user[playerid2][jFuerza]/10)); strcat(DialogStatus, coordsstring);
	strcat(DialogStatus, "{b0b0b0}<ADICCIONES>\n\n");
	format(coordsstring, sizeof(coordsstring), "{AFB1B5}Cocaína:{ffffff} %d\n", user[playerid2][jAdiccion][0]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{84DEFF}Crack:{ffffff} %d\n", user[playerid2][jAdiccion][1]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{b00000}Metanfetamina:{ffffff} %d\n", user[playerid2][jAdiccion][2]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{237D00}Ketamina:{ffffff} %d\n", user[playerid2][jAdiccion][3]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{237D00}PCP:{ffffff} %d\n", user[playerid2][jAdiccion][4]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{05B1B5}Heroína:{ffffff} %d\n", user[playerid2][jAdiccion][5]); strcat(DialogStatus, coordsstring);

	format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Stats de %s", nombre_pj(playerid2));
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, coordsstring2, DialogStatus, "Cerrar", "");
	return 1;
}

GCMD:elevador(playerid) return cmd_ascensor(playerid);
GCMD:ascensor(playerid)
{
	if (!en_ascensor(playerid)) return Mensaje_(playerid, 0xb0b0b0ff, "No estás cerca del ascensor.");

	new si_no[14];
	new string[512];

	si_no[en_ascensor(playerid)-1] = 1;

	for(new i; i < sizeof(si_no); i ++)
	{
		if(si_no[i] != 0)
			strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}
	ExPlayerDialog(playerid, D_Ascensor, DIALOG_STYLE_LIST, "{b0b0b0}LS BeachSide", string, "Siguiente", "Cerrar");
	return 1;
}
GCMD:quitarvip(playerid, const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/quitarvipoff [Nombre_Apellido]");
	new qvName[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", qvName);
	new string[128];
	if(new curr = IsCharConnected(qvName) != -1){
		user[curr][jPremium] = 0;
		user[curr][jColorP] = 0;
		user[curr][jD_premium] = 0;
		user[curr][jM_premium] = 0;
		
		format(string, 128, "[Administración]{FFFFFF} %s retiró el premium de %s. [CMD_OFF]", nombre_pj(playerid), params);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s retiró el premium de %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarVIP.log", string);
	}
	yield 1;
	if (characterCheck(params))
	{
		static setZERO = 0;
		new ORM:quitarvip_orm = orm_create("characters");
		orm_addvar_string(quitarvip_orm, qvName, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(quitarvip_orm, "NombrePJ");
		orm_addvar_int(quitarvip_orm, setZERO, "Premium");
		orm_addvar_int(quitarvip_orm, setZERO, "ColorP");
		orm_addvar_int(quitarvip_orm, setZERO, "dPremium");
		orm_addvar_int(quitarvip_orm, setZERO, "mPremium");
		if( (task_await(orm_async_update(quitarvip_orm))) != _:ERROR_OK ){
			orm_destroy(quitarvip_orm);
			return _Mensaje(playerid, 0, "179", "Ocurrió un error al guardar el cambio.");
		}
		format(string, 128, "[Administración]{FFFFFF} %s retiró el premium de %s. [CMD_OFF]", nombre_pj(playerid), params);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s retiró el premium de %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarVIP.log", string);
		
		
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

GCMD:talar(playerid)
{
	if(!Es_job(playerid, 4)) return _Mensaje(playerid, 0, "0", "No eres leñador.");
	if(GetPlayerVirtualWorld(playerid) != 0) return _Mensaje(playerid, 0, "0", "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return _Mensaje(playerid, 0, "0", "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return _Mensaje(playerid, 0, "0", "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -554.0010, -1496.7751, 9.4138)) return _Mensaje(playerid, 0, "0", "No estás en el lugar adecuado.");
	if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas."); return 1;}

	if(!en_lenador[playerid])
	{
		user[playerid][pt_PLAYER_CARRYING_TREE] = false;
		user[playerid][pLenador_free] = -1;
		en_lenador[playerid] = 1;
		RemovePlayerAttachedObject(playerid, 9);
		PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
		SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

		SendClientMessage(playerid,0xCCCCCCCC,"Los árboles que puedes talar están repartidos por la zona.");
		Mensaje_(playerid, -1, "Para recibir el pago por los árboles talados, escribe /talar.");
	}
	else CancelLumberjackWork(playerid);
	return 1;
}

GCMD:panel(playerid)
{
	new dialog[550];
	format(dialog, sizeof dialog,

	"\
		- Teléfono móvil\t%s\n\
		- Animación de manos\t%s\n\
		- Mensajes privados (/MP)\t%s\n\
		- Radio portátil de civil\t%s\n\
		- Audios de música del servidor\t%s\n\
		- Anuncios de ventas, network, gob\t%s\n\
		- Ver bloqueos, baneos, sanciones\t%s\n\
		- HUD: radio info, velocimetro\t%s\n\
		- Edad del personaje\t{90C3D4}%d\n\
		- Sexo del personaje\t%s\n\
		- Idioma del servidor\t{90C3D4}Spanish\n\
		- Cambiar contraseña\n\
		- {7593F5}Cambiar personaje\
	",
		muestra(user[playerid][j_uTelefono], 1),
		muestra(user[playerid][j_uManos], 2),
		muestra(user[playerid][j_uMP], 2),
		muestra(user[playerid][j_uRadio], 1),
		muestra(user[playerid][j_uAudio], 2),
		muestra(user[playerid][j_uSAN], 2),
		muestra(user[playerid][j_uOOC], 2),
		muestra(user[playerid][pUseHud], 2),
		user[playerid][jEdad],
		muestra(user[playerid][jSexo], 3)
	);
	ExPlayerDialog(playerid, D_cmdPanel, DIALOG_STYLE_TABLIST, "{D6E1EB}Configuración del usuario", dialog, ">>", "Cerrar");
	return 1;
}



//ELIMINAR PROXIMA VERSION
GCMD:veh_patente(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Totalvehs, coordsstring[150];
	for (new vid = 0; vid < sizeof(i_Vehiculo); vid++)
	{
		if (i_Vehiculo[vid][vModelo] > 0)
		{
			i_Vehiculo[vid][vPatente] = vid+Random(-400000, 999999); //
			vehicleSave(vid);
			Totalvehs++;
		}
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Un total de vehículos con nueva patente: {009922}%i", Totalvehs);
	Mensaje_(playerid, -1, coordsstring);
	return 1;
}
GCMD:casa_patente(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Totalcasas, coordsstring[150];
	for (new cid = 0; cid < sizeof(i_Casa); cid++)
	{
		if (i_Casa[cid][cComprado] != 0)
		{
			i_Casa[cid][c_patente] = cid+Random(-400000, 999999); //
			save_Casa(cid);
			Totalcasas++;
		}
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Un total de casas con nueva patente: {009922}%i", Totalcasas);
	Mensaje_(playerid, -1, coordsstring);
	return 1;
}
GCMD:neg_patente(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Totalnegs, coordsstring[150];
	for (new id = 0; id < sizeof(i_Negocio); id++)
	{
		if (i_Negocio[id][nComprado] != 0)
		{
			i_Negocio[id][n_patente] = id+Random(-400000, 999999); //
			save_Negocio(id);
			Totalnegs++;
		}
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Un total de negocios con nueva patente: {009922}%i", Totalnegs);
	Mensaje_(playerid, -1, coordsstring);
	return 1;
}
GCMD:emp_patente(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Totalemps, coordsstring[150];
	for (new id = 0; id < sizeof(i_Empresa); id++)
	{
		if (i_Empresa[id][eComprado] != 0)
		{
			i_Empresa[id][e_patente] = id+Random(-400000, 999999); //
			save_Empresa(id);
			Totalemps++;
		}
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Un total de empresas con nueva patente: {009922}%i", Totalemps);
	Mensaje_(playerid, -1, coordsstring);
	return 1;
}
//ELIMINAR PROXIMA VERSION



GCMD:changename(playerid)
{
	new c_id = user[playerid][jCasaKey],
		c_2id = user[playerid][jCasaKey2],
		n_id = user[playerid][jNegocioKey],
		n_2id = user[playerid][jNegocioKey2],
		e_id = user[playerid][jEmpresaKey];

	new no_existe = 0, _dialog1[3000], _dialog2[128];

	if (c_id != -1 && strcmp(i_Casa[c_id][cComprador], nombre_sin(playerid), true)) //casa r: 1
	{
		strmid(i_Casa[c_id][cComprador], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
		no_existe++;

		format(_dialog2, sizeof(_dialog2), "CasaKey: %d\n", c_id);
		strcat(_dialog1, _dialog2);
	}
	if (c_2id != -1 && strcmp(i_Casa[c_2id][cComprador], nombre_sin(playerid), true)) //casa r: 2
	{
		strmid(i_Casa[c_2id][cComprador], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
		no_existe++;

		format(_dialog2, sizeof(_dialog2), "CasaKey2: %d\n", c_2id);
		strcat(_dialog1, _dialog2);
	}
	if (n_id != -1 && strcmp(i_Negocio[n_id][nDueno], nombre_sin(playerid), true)) //negocio r: 1
	{
		strmid(i_Negocio[n_id][nDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
		no_existe++;

		format(_dialog2, sizeof(_dialog2), "NegocioKey: %d\n", n_id);
		strcat(_dialog1, _dialog2);
	}
	if (n_2id != -1 && strcmp(i_Negocio[n_2id][nDueno], nombre_sin(playerid), true)) //negocio r: 2
	{
		strmid(i_Negocio[n_2id][nDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
		no_existe++;

		format(_dialog2, sizeof(_dialog2), "NegocioKey2: %d\n", n_2id);
		strcat(_dialog1, _dialog2);
	}
	if (e_id != -1 && strcmp(i_Empresa[e_id][eDueno], nombre_sin(playerid), true)) //empresa r: 1
	{
		strmid(i_Empresa[e_id][eDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
		no_existe++;

		format(_dialog2, sizeof(_dialog2), "EmpresaKey: %d\n", e_id);
		strcat(_dialog1, _dialog2);
	}
	for(new i = 0; i < 6; i++)
	{
		if (user[playerid][jLlaveCoche][i] != 0)
		{
			if (strcmp(i_Vehiculo[user[playerid][jLlaveCoche][i]-1000][vDueno], nombre_sin(playerid), true))
			{
				strmid(i_Vehiculo[user[playerid][jLlaveCoche][i]-1000][vDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
				no_existe++;

				format(_dialog2, sizeof(_dialog2), "VehicleKey: %d [%s]\n", user[playerid][jLlaveCoche][i]-1000, nombre_vehiculo[i_Vehiculo[user[playerid][jLlaveCoche][i]-1000][vModelo] - 400]);
				strcat(_dialog1, _dialog2);
			}
		}
	}
	strcat(_dialog1, "\n{ffffff}Las propiedades mencionadas ..\n.. pasaron a tu nombre actual.\n");
	if (no_existe == 0) _Mensaje(playerid, 5, "0", "Todas tus propiedades llevan tu nombre actual.");
	else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{b0b0b0}Propiedades		", _dialog1, "Cerrar", "");
	return 1;
}

GCMD:setvehhp(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/setvehhp [id vehículo] [monto]");
	if (!GetVehicleModel(params[0])) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");
	if (params[1] < 300 || params[1] >= 1000) return _Mensaje(playerid, 0, "453", "El mínimo 300 - máximo 1000.");

	new
		string[150]
	;
	SetExVehicleHealth(params[0], params[1]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido %d hp al veh: %d.", nombre_pj(playerid), params[1], params[0]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:vadmin(playerid,  const params[])
{
	new idveh;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", idveh)) return _Mensaje(playerid, 3, "0", "/vadmin [id vehiculo]");
	if (!GetVehicleModel(idveh)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");

	new _dialog[128];
	format(_dialog, sizeof(_dialog),
	"Velocidad: {ffff00}%.0f{ffffff} KM/H - Modelo: {00c200}%s", detectar_veh(idveh), NombreVehiculo(idveh));
	Mensaje_(playerid, -1, _dialog);
	return 1;
}

GCMD:controlv(playerid,  const params[])
{
	new idveh;
	if (user[playerid][jm_Derecha] != 137 && user[playerid][jm_Izquierda] != 137) { _Mensaje(playerid, 0, "9", "No tienes una cámara de velocidad en ninguna mano."); return 1;}
	if (sscanf(params, "d", idveh)) return _Mensaje(playerid, 3, "0", "/controlv [id vehiculo]");
	if (!GetVehicleModel(idveh)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");

	if (CercaDelVehiculo(playerid, idveh, 35.0))
	{
	    new _dialog[128];
		format(_dialog, sizeof(_dialog),
		"{ffffff}Velocidad: {ffff00}%.0f{ffffff} KM/H\nModelo: {00c200}%s", detectar_veh(idveh), NombreVehiculo(idveh));
		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{b0b0b0}Control de velocidad", _dialog, "Cerrar", "");
		return 1;
	}
	Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no está a tu alcance.");
	return 1;
}

GCMD:tirarllaves(playerid,  const params[])
{
	new string[128];
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/tirarllaves [casa o casa2, negocio, empresa]");
	if (strcmp(params[0], "casa", true) == 0)
	{
		if (user[playerid][jCasaLlaves] == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes llaves de ninguna casa.");

		format(string, sizeof(string), "Tiraste las llaves de la casa de %s.", i_Casa[user[playerid][jCasaLlaves]][cComprador]);
		_Mensaje(playerid, 4, "A7CE00", string);
		user[playerid][jCasaLlaves] = -1;
		user[playerid][jCasa2Llaves] = 0;
	}
	else if (strcmp(params[0], "casa2", true) == 0)
	{
		if (user[playerid][j2CasaLlaves] == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes llaves de ninguna casa (ranura 2).");

		format(string, sizeof(string), "Tiraste las llaves de la casa de %s.", i_Casa[user[playerid][j2CasaLlaves]][cComprador]);
		_Mensaje(playerid, 4, "A7CE00", string);
		user[playerid][j2CasaLlaves] = -1;
		user[playerid][j2Casa2Llaves] = 0;
	}
	else if (strcmp(params[0], "negocio", true) == 0)
	{
		if (user[playerid][jNegocioLlaves] == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes llaves de ningún negocio.");

		format(string, sizeof(string), "Tiraste las llaves del negocio de %s.", i_Negocio[user[playerid][jNegocioLlaves]][nDueno]);
		_Mensaje(playerid, 4, "A7CE00", string);
		user[playerid][jNegocioLlaves] = -1;
		user[playerid][jNegocio2Llaves] = 0;
	}
	else if (strcmp(params[0], "empresa", true) == 0)
	{
		if (user[playerid][jEmpresaLlaves] == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes llaves de ninguna empresa.");

		format(string, sizeof(string), "Tiraste las llaves del negocio de %s.", i_Empresa[user[playerid][jEmpresaLlaves]][eDueno]);
		_Mensaje(playerid, 4, "A7CE00", string);
		user[playerid][jEmpresaLlaves] = -1;
		user[playerid][jEmpresa2Llaves] = 0;
	}
	return 1;
}

GCMD:wsp(playerid,  const params[])
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b00000", "No tienes un teléfono en ninguna mano."); return 1;}
	new string[256], playerid2, text[256];
	if (sscanf(params, "ds[256]", playerid2, text)) return _Mensaje(playerid, 3, "0", "/wsp [id jugador] [texto]");
	if (user[playerid][jSaldo] < 2) return Mensaje_(playerid, 0xb00000ff, "No tienes saldo suficiente para enviar un mensaje.");
	if (!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID) { Mensaje_(playerid, 0xb00000ff, "El jugador seleccionado no se encuentra conectado."); return 1; }
	if (playerid == playerid2) return Mensaje_(playerid, 0xb00000ff, "No puedes enviarte mensajes a tí mismo.");

	new contacto = -1;
	for (new e = 0; e < 20; e++)
	{
		if(user[playerid][jContacto][e] == user[playerid2][jTelefono]) contacto = e;
	}
	if (user[playerid2][j_uTelefono] > 0) return Mensaje_(playerid, 0xb0b0b0ff, "Ese jugador tiene el teléfono apagado.");

	if(contacto == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes en contactos ese jugador.");
	else
	{
		format(string, sizeof(string), "[WhatsApp de %s]: %s", nombre_pj(playerid), text);
		Mensaje_(playerid2, 0x00AA00FF, string);

		format(string, sizeof(string), "[WhatsApp a %s]: %s", nombre_pj(playerid2), text);
		Mensaje_(playerid, 0x00D356FF, string);

		user[playerid][jSaldo] -= 1;
		textgame_player(playerid, "~g~ WSP", 3000, 1);
		PlayerAudio(playerid, 1053, 10.0);
		PlayerAudio(playerid2, 20804, 10.0);
		accion_rol(playerid, 1, "envía un mensaje por wsp.", 1);
		return 1;
	}
}

GCMD:mirilla(playerid)
{
	if(_mirilla[playerid] == -1)
	{
		for (new h; h < sizeof(i_Casa); h++) if (en_pos(playerid, 2.0, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]) && user[playerid][jVirtualWorld] == h + 6000)
		{
			SetPlayerVirtualWorld(playerid, i_Casa[h][c_VW]);
			SetPlayerInterior(playerid, i_Casa[h][c_Int]);

			SetPlayerCameraPos(playerid, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]);

			new Float:x, Float:y;
			x = i_Casa[h][cExteriorX];
			y = i_Casa[h][cExteriorY];

			GetXYInFrontOfPoint(x, y, i_Casa[h][cExteriorA], 10.0);
			SetPlayerCameraLookAt(playerid, x, y, i_Casa[h][cExteriorZ]);

			tipo_m[playerid] = 1;
			_mirilla[playerid] = h;

			SetPlayerPos(playerid, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]-7.0);
			TogglePlayerControllable(playerid, 0);
			return 1;
		}
		for (new p = 1; p < MAX_PUERTAS; p++) if (en_pos(playerid, 2.0, i_Puerta[p][pInt_X], i_Puerta[p][pInt_Y], i_Puerta[p][pInt_Z]) && user[playerid][jVirtualWorld] == i_Puerta[p][pInt_VW])
		{
			SetPlayerVirtualWorld(playerid, i_Puerta[p][pPos_VW]);
			SetPlayerInterior(playerid, i_Puerta[p][pPos_Int]);

			SetPlayerCameraPos(playerid, i_Puerta[p][pPos_X], i_Puerta[p][pPos_Y], i_Puerta[p][pPos_Z]);

			new Float:x, Float:y;
			x = i_Puerta[p][pPos_X];
			y = i_Puerta[p][pPos_Y];

			GetXYInFrontOfPoint(x, y, i_Puerta[p][pPos_A], 10.0);
			SetPlayerCameraLookAt(playerid, x, y, i_Puerta[p][pPos_Z]);

			tipo_m[playerid] = 2;
			_mirilla[playerid] = p;

			SetPlayerPos(playerid, i_Puerta[p][pPos_X], i_Puerta[p][pPos_Y], i_Puerta[p][pPos_Z]-7.0);
			TogglePlayerControllable(playerid, 0);
			return 1;
		}
	}
	else
	{
		if(tipo_m[playerid] == 1)
		{
			new h = _mirilla[playerid];
			SetPlayerPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]);
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, i_Casa[h][cInterior]);
			SetPlayerVirtualWorld(playerid, h + 6000);
			tipo_m[playerid] = 0;
			_mirilla[playerid] = -1;
		}
		else if(tipo_m[playerid] == 2)
		{
			new p = _mirilla[playerid];
			SetPlayerPos(playerid, i_Puerta[p][pInt_X], i_Puerta[p][pInt_Y], i_Puerta[p][pInt_Z]);
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, i_Puerta[p][pInt_Int]);
			SetPlayerVirtualWorld(playerid, i_Puerta[p][pInt_VW]);
			tipo_m[playerid] = 0;
			_mirilla[playerid] = -1;
		}
	}
	return 1;
}

GCMD:hablar(playerid,  const params[])
{
	new estilo, mensaje_x[128];
	if (sscanf(params, "d", estilo)) return _Mensaje(playerid, 3, "0", "/hablar [1-8]");
	if (estilo < 1 || estilo > 8) return _Mensaje(playerid, 3, "0", "/hablar [1-8]");
	user[playerid][jHablar] = estilo;
	format(mensaje_x, sizeof(mensaje_x), "Cambiaste tu estilo de hablar. ( {00BE00}%d{ffffff} )", estilo);
	Mensaje_(playerid, -1, mensaje_x);
	return 1;
}

GCMD:vehiculos(playerid) return cmd_coches(playerid);
GCMD:coches(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	new text_s[256], dialog[1024], stext[62];
	for(new i = 0; i < 6; i++)
	{
		new veh = user[playerid][jLlaveCoche][i];
		if(veh == 0) { format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
		else
		{
		    if (i_Vehiculo[veh-1000][vModelo] == 0)
			{
			    format(text_s, sizeof(text_s), "Llave ID ({00c200}%d{ffffff}) bugeada, enviar este mensaje a soporte técnico o con regular", user[playerid][jLlaveCoche][i]);
			    SendClientMessage(playerid, -1, text_s);
			    user[playerid][jLlaveCoche][i] = 0;
			    cmd_coches(playerid);
			    return 1;
			}
			switch(i_Vehiculo[veh-1000][vSpawned])
			{
				case 0: stext = "{ff0000}Guardado{ffffff}";
				case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
			}
			if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
			else format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
		}
		strcat(dialog, text_s);
	}
	ExPlayerDialog(playerid, D_VEHMENU, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, "Seleccionar", "Cancelar");
	return 1;
}

stock es_patente(patente = 0)
{
	if(patente != 0)
	{
		for(new v = 0; v < MAX_VEHICULOS; v++)
		{
			if(i_Vehiculo[v][vPatente] == patente)
			{
				return i_Vehiculo[v][vLlave];
			}
		}
	}
	return 0;
}

stock es_2patente(patente = 0)
{
	if(patente != 0)
	{
		for(new v = 0; v < MAX_VEHICULOS; v++)
		{
			if(i_Vehiculo[v][vLlave] == patente)
			{
				return v;
			}
		}
	}
	return 0;
}

GCMD:vehiculos2(playerid) return cmd_coches2(playerid);
GCMD:coches2(playerid)
{
	if (cmd_veh2 == 1) return _Mensaje(playerid, 0, "296", "El sistema esta actualmente bloqueado por un administrador.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	new text_s[256], dialog[1024], stext[62];
	for(new i = 0; i < 6; i++)
	{
		new veh = es_patente(user[playerid][j2Vehiculos][i]);
		new veh2 = es_2patente(user[playerid][j2Vehixculos][i]);
		//
		if(user[playerid][j2Vehiculos][i] != 0)
		{
			if(veh == 0) // fix #crash
			{
				user[playerid][j2Vehiculos][i] = 0;
				user[playerid][j2Vehixculos][i] = 0;
			}
			if(veh2 == 0)
			{
				user[playerid][j2Vehiculos][i] = 0;
				user[playerid][j2Vehixculos][i] = 0;
			}
			else
			{
				if(user[playerid][j2Vehiculos][i] != i_Vehiculo[veh2][vPatente]) // fix #crash
				{
					user[playerid][j2Vehiculos][i] = 0;
					user[playerid][j2Vehixculos][i] = 0;
				}
			}
		}
		//
		if(veh == 0) { format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
		else
		{
			switch(i_Vehiculo[veh-1000][vSpawned])
			{
				case 0: stext = "{ff0000}Guardado{ffffff}";
				case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
			}
			if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
			else format(text_s, sizeof(text_s), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
		}
		strcat(dialog, text_s);
	}
	ExPlayerDialog(playerid, D_VEH2MENU, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos prestados", dialog, "Seleccionar", "Cancelar");
	return 1;
}

GCMD:quitarcables(playerid,  const params[])
{
    new string[128], playerid2;
    if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "165", "No eres pd o sadoc.");
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/quitarcables [id jugador]");
    if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "0", "No te puedes hacer esto a tí mismo.");
	if (!CercaDelWeon(3.0, playerid, playerid2)) { _Mensaje(playerid, 0, "0", "Estás lejos del jugador."); return 1; }
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (Taseado[playerid2] == 0) return _Mensaje(playerid, 0, "12", "Ese jugador no tiene cables de tasér.");

	_FGomas2(playerid2);
	format(string, sizeof(string), "%s retira los cables de %s.", nombre_pj(playerid, 0), nombre_pj(playerid2, 0));
	ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
	return 1;
}

GCMD:impuestos(playerid)
{
	new coordsstring[300], DialogStatus[3000], casai = 0, negi = 0, vehi = 0, alquiler = 0;

	//- alquiler
	if(user[playerid][jAlquiler] != -1)
	{
		new al_id = user[playerid][jAlquiler];
		if (i_Casa[al_id][c_alquilado] != 0)
		{
			alquiler += i_Casa[al_id][c_alquiler];
		}
	}
	//- impuestos
	if(user[playerid][jPremium] == 0)
	{
		if(user[playerid][jCasaKey] != -1)
		{
			new c_id=user[playerid][jCasaKey];
			if (i_Casa[c_id][cEspacio] == 1) casai += 30;
			else if (i_Casa[c_id][cEspacio] == 2) casai += 50;
			else if (i_Casa[c_id][cEspacio] == 3) casai += 80;
			else if (i_Casa[c_id][cEspacio] == 4) casai += 105;
		}
		else
		{
			casai = 0;
		}
		if(user[playerid][jNegocioKey] != -1)
		{
			new n_id=user[playerid][jNegocioKey];
			if (i_Negocio[n_id][nTipo] == 1) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 2) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 3) negi += 30;
			else if (i_Negocio[n_id][nTipo] == 4) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 5) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 6) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 7) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 8) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 9) negi += 30;
			else if (i_Negocio[n_id][nTipo] == 10) negi += 12;
			else if (i_Negocio[n_id][nTipo] == 11) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 12) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 13) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 14) negi += 60;
			else if (i_Negocio[n_id][nTipo] == 15) negi += 40;
			else if (i_Negocio[n_id][nTipo] == 16) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 17) negi += 40;
			else if (i_Negocio[n_id][nTipo] == 18) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 19) negi += 20;
		}
		else
		{
			negi = 0;
		}
		if(user[playerid][jLlaveCoche][0] != 0) { vehi += 28; }
		if(user[playerid][jLlaveCoche][1] != 0) { vehi += 28; }
		if(user[playerid][jLlaveCoche][2] != 0) { vehi += 28; }
		if(user[playerid][jLlaveCoche][3] != 0) { vehi += 28; }
		if(user[playerid][jLlaveCoche][4] != 0) { vehi += 28; }
		if(user[playerid][jLlaveCoche][5] != 0) { vehi += 28; }
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Pago del estado:\t{009922}+$%i\t\n", salario_user(playerid)+dinero_e);
	strcat(DialogStatus, coordsstring);
	if(user[playerid][jCheques] != 0)
	{
		format(coordsstring, sizeof(coordsstring), "{5499D1}Cheques a cobrar:\t{009922}+$%i\t\n", user[playerid][jCheques]);
		strcat(DialogStatus, coordsstring);
	}
	if(user[playerid][jPremium] != 0)
	{
		format(coordsstring, sizeof(coordsstring), "{5499D1}Bonus premium:\t{009922}+$%i\t\n", user[playerid][jPremium]*150);
		strcat(DialogStatus, coordsstring);
	}
	format(coordsstring, sizeof(coordsstring), "{5499D1}Intereses del estado:\t{B31122}-$0.%i\t\n", d_impuestos);
	strcat(DialogStatus, coordsstring);

	strcat(DialogStatus, "                         \n");

	format(coordsstring, sizeof(coordsstring), "{5499D1}Impuestos de vehículos:\t{B31122}-$%i\t\n", vehi);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{5499D1}Impuestos de propiedades:\t{B31122}-$%i\t\n", negi+casai);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{5499D1}Impuestos de alquiler:\t{B31122}-$%i\t\n", alquiler);
	strcat(DialogStatus, coordsstring);

	strcat(DialogStatus, "                         \n");

	format(coordsstring, sizeof(coordsstring), "{5499D1}Total de ingresos:\t{009922}+$%i\t\n", salario_user(playerid)+dinero_e+(user[playerid][jPremium]*150)+user[playerid][jCheques]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{5499D1}Total de egresos:\t{B31122}-$%i\t\n", vehi+negi+alquiler+casai+d_impuestos);
	strcat(DialogStatus, coordsstring);

	strcat(DialogStatus, "                         \n");

	new xd;
	xd = (salario_user(playerid)+dinero_e+(user[playerid][jPremium]*150)+user[playerid][jCheques]) - (vehi+negi+casai+d_impuestos+alquiler);
	if (xd < 0)
	{
		format(coordsstring, sizeof(coordsstring), "{5499D1}Pago final:\t{B31122}-$%i\t\n", xd);
		strcat(DialogStatus, coordsstring);
	}
	else
	{
		format(coordsstring, sizeof(coordsstring), "{5499D1}Pago final:\t{009922}+$%i\t\n", xd);
		strcat(DialogStatus, coordsstring);
	}

	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_TABLIST, "{b0b0b0}Impuestos de tu personaje", DialogStatus, "Cerrar", "");

	return 1;
}
GCMD:alarma(playerid)
{
	if (!Es_Faccion(playerid, 2)) return _Mensaje(playerid, 0, "229", "No eres miembro de la SADOC.");
	if (d_alarma == 0)
	{
		foreach(new a: Player)
		{
			if(user[a][jEncarcelado] == 3 || en_pos(a, 50.0, 160.0098,-191.7577,342.9203))
			{
			    PlayerPlaySound(a, 6001, 0, 0, 0);
			}
		}
		d_alarma = 1;
		_Mensaje(playerid, 4, "00c200", "Encendiste la alarma.");
	}
	else
	{
		foreach(new a: Player)
		{
			if(user[a][jEncarcelado] == 3 || en_pos(a, 50.0, 160.0098,-191.7577,342.9203))
			{
			    PlayerPlaySound(a, 30803, 0.0, 0.0, 0.0);
			}
		}
	    d_alarma = 0;
		_Mensaje(playerid, 4, "00c200", "Apagaste la alarma.");
	}
	return 1;
}

GCMD:3sonido(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	foreach(new i: Player)
	{
	    PlayAudioStreamForPlayer(i, "https://a.tumblr.com/tumblr_oyi0tsxuHz1wg39qlo1.mp3");
	}
	return 1;
}

GCMD:2sonido(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/2sonido [id]");
	foreach(new i: Player)
	{
		PlayerPlaySound(i, params[0], 0, 0, 0);
	}
	return 1;
}

GCMD:sonido(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/sonido [id]");

	PlayerAudio(playerid, params[0], 20.0);
	return 1;
}

GCMD:tomar(playerid,  const params[])
{
	if (user[playerid][jEncarcelado] != 2 && user[playerid][jEncarcelado] != 3) return _Mensaje(playerid, 4, "b0b0b0", "No estás en prisión comisaría ni federal.");
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/tomar [agua, burrito]");
	if (strcmp(params[0], "burrito", true) == 0)
	{
		if (user[playerid][jTiempos][14] != 0)  return decir_eltiempo(playerid, 14);
		if (user[playerid][jm_Derecha] == 0)
		{
			user[playerid][jm_Derecha] = 101;
			user[playerid][jm_DerechaCant] = 4;
			PonerObjeto(playerid, 1, 101);
			user[playerid][jTiempos][14] = 240;
		}
		else if (user[playerid][jm_Derecha] != 0)
		{
			user[playerid][jm_Izquierda] = 101;
			user[playerid][jm_IzquierdaCant] = 4;
			PonerObjeto(playerid, 2, 101);
			user[playerid][jTiempos][14] = 240;
		}

	}
	else if (strcmp(params[0], "agua", true) == 0)
	{
		if (user[playerid][jm_Derecha] == 0)
		{
			user[playerid][jm_Derecha] = 95;
			user[playerid][jm_DerechaCant] = 2;
			PonerObjeto(playerid, 1, 95);
		}
		else if (user[playerid][jm_Derecha] != 0)
		{
			user[playerid][jm_Izquierda] = 95;
			user[playerid][jm_IzquierdaCant] = 2;
			PonerObjeto(playerid, 2, 95);
		}
	}
	return 1;
}

/*GCMD:alpr(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "0", "No eres policía.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted no se encuentra en ningún vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid), string[128];
	if (!LSPD_Veh(vehicleid)) return _Mensaje(playerid, 0, "378", "Debes estar en un vehiculo de la PD.");

	for(new vehicleid2 = 0; vehicleid2 < 500; vehicleid2++)
	{
		if (vehicleid == vehicleid2)continue;
		for(new v = 0; v < MAX_VEHICULOS; v++)
		{
			if (!CercaDelVehiculo(playerid, vehicleid2, 10.0))continue;
			if (i_Vehiculo[v][vID] == vehicleid2)
			{
				comando_pd[playerid] = v;
				format(string, sizeof(string), "[ALPR] Detectado vehículo ID %d.");
				SendClientMessage(playerid, 0xffff00ff, string);
				return 1;
			}
		}
	}
	return 1;
}*/

GCMD:patriot(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "0", "No eres policía.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted no se encuentra en ningún vehículo.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/patriot [id vehículo]");
	if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
	new vehicleid = strval(params);
	new vehicleid2 = GetPlayerVehicleID(playerid);
	if (!LSPD_Veh(vehicleid2)) return _Mensaje(playerid, 0, "378", "Debes estar en un vehiculo de la PD.");
	if (comando_pd[playerid] == 0)
	{
		for (new v = 0; v < MAX_VEHICULOS; v++)
		{
			if(i_Vehiculo[v][vID] == vehicleid)
			{
				comando_pd[playerid] = v;
	       		_Mensaje(playerid, 4, "33CCFF", "Activaste el modo patriot del vehículo indicado.");
	       		return 1;
			}
		}
		Mensaje_(playerid, 0xb0b0b0ff, "Ese id de vehículo no existe o su matricula no figura un dueño.");
	}
	else
	{
		if (user[playerid][pHud] == 4) PlayerTextDrawHide(playerid, Player_Hud[playerid][7]);
		comando_pd[playerid] = 0;
		_Mensaje(playerid, 4, "33CCFF", "Desactivaste el modo patriot.");
	}
	return 1;
}

GCMD:atenderpd(playerid) return cmd_centralita(playerid);
GCMD:centralita(playerid)
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "0", "No formas parte de la ley.");
	if (Es_Faccion(playerid, 1))
	{
		new Str[256], Str_[5000], i_ = 0;
		for (new x=1; x<sizeof(info_c); x++)
		{
			if (info_c[x][aID] != 0 && info_c[x][aTipo] == 1)
			{
				Formato(Str, "{00a2ff}%d: {DDCC72}%s, Teléfono:{00a2ff} %d\n", x, info_c[x][aNombre], info_c[x][aTelefono]);
				strcat(Str_, Str);
				Formato(Str, "Centra_Puto%d", i_);
				SetPVarInt(playerid, Str, x);
				i_++;
			}
		}
		if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}[CENTRALITA]: Llamadas recibidas.", "No hay ninguna llamada pendiente.", "Ok", "");
		ExPlayerDialog(playerid, D_Centralita, DIALOG_STYLE_LIST, "{D6E1EB}[CENTRALITA]: Llamadas recibidas.", Str_, ">>", "<<");
	}
	else if (Es_Faccion(playerid, 5))
	{
	    new Str[256], Str_[5000], i_ = 0;
		for (new x=1; x<sizeof(info_c); x++)
		{
			if (info_c[x][aID] != 0 && info_c[x][aTipo] == 2)
			{
				Formato(Str, "{00a2ff}%d: {DDCC72}%s, Teléfono:{00a2ff} %d\n", x, info_c[x][aNombre], info_c[x][aTelefono]);
				strcat(Str_, Str);
				Formato(Str, "Centra_Puto%d", i_);
				SetPVarInt(playerid, Str, x);
				i_++;
			}
		}
		if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}[CENTRALITA]: Llamadas recibidas.", "No hay ninguna llamada pendiente.", "Ok", "");
		ExPlayerDialog(playerid, D_Centralita, DIALOG_STYLE_LIST, "{D6E1EB}[CENTRALITA]: Llamadas recibidas.", Str_, ">>", "<<");
	}
	return 1;
}

GCMD:status(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new coordsstring[512];
	new DialogStatus[1028];

	format(coordsstring, sizeof(coordsstring),
	"{b0b0b0}Clima:{ffffff} (%d)\n\
	{b0b0b0}Cuentas:{ffffff} (%d)\n\
	{b0b0b0}Dinero noticias:{ffffff} ($%d)\n\
	{b0b0b0}Lotería:{ffffff} ($%d)\n\
	{b0b0b0}Fondos de estado:{ffffff} ($%d)\n\
	{b0b0b0}Impuestos:{ffffff} ($%d)\n\
	{b0b0b0}Pago peaje:{ffffff} ($%d)\n\
	{b0b0b0}Doble 2X:{ffffff} (%d)\n\n\
	{b0b0b0}Códigos restantes:{90C3D4} (%d)\n\n",
	clima, c_cuentas, d_san, d_loteria, d_estado, d_impuestos, d_peaje, d2_experiencia, c_codes);
	strcat(DialogStatus, coordsstring);

	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Status", DialogStatus, "Cerrar", "");
	return 1;
}

GCMD:gc2(playerid)
{
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	if (!strcmp(nick, "Matthew_Bishop", true))
	{
		if (EnServicioADM[playerid] == 0)
		{
			EnServicioADM[playerid] = 2;
			Mensaje_(playerid, -1, "Estás duty oculto.");
		}
		else
		{
			EnServicioADM[playerid] = 0;
			Mensaje_(playerid, -1, "Estás off-duty oculto.");
		}
	} else Mensaje_(playerid, -1, "No tienes acceso al comando {537CDB}único{ffffff}.");
	return 1;
}

GCMD:vernumero(playerid,  const params[])
{
	new numero;
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", numero)) return _Mensaje(playerid, 3, "0", "/vernumero [número telefónico]");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jTelefono] == numero)
			{
				new string[128];
				format(string, sizeof(string), " (%d) - %s: %d", i, nombre_pj(i), numero);
				_Mensaje(playerid, 4, "ffffff", string);
				return 1;
			}
		}
	}
	_Mensaje(playerid, 4, "b0b0b0", "No hay ningún usuario conectado con ese número telefónico.");
	return 1;
}

GCMD:cuerda(playerid)
{
    _Mensaje(playerid, 4, "b0b0b0","el cuerdita anda de vacaciones aun.");
	return 1;
}

GCMD:plataforma(playerid)
{
	if (!Es_Faccion(playerid, 1, 2, 5))	return _Mensaje(playerid, 0, "0", "No formas parte de la ley.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "0", "Usted no es el conductor del vehículo.");
	if (!IsAHeli(GetPlayerVehicleID(playerid)))
	{
		_Mensaje(playerid, 0, "0", "No estás dentro de un helicóptero.");
		return 1;
	}
	if (Platform[GetPlayerVehicleID(playerid)] == 0)
	{
		new Float:P[3];
		GetVehiclePos(GetPlayerVehicleID(playerid), P[0], P[1], P[2]);
		Platform1[GetPlayerVehicleID(playerid)] = CreateObject(3857, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
		Platform2[GetPlayerVehicleID(playerid)] = CreateObject(1886, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
		Platform3[GetPlayerVehicleID(playerid)] = CreateObject(1886, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
		new atach1 = Platform1[GetPlayerVehicleID(playerid)];
		new atach2 = Platform2[GetPlayerVehicleID(playerid)];
		new atach3 = Platform3[GetPlayerVehicleID(playerid)];
		new get = GetPlayerVehicleID(playerid);
		AttachObjectToVehicle(atach1, get, -0.004999, 0.454999, -1.624998, 404.011169, 272.355529, 0.000000); //Object Model: 3857 |
		AttachObjectToVehicle(atach2, get, 1.104999, 0.504999, -1.599998, 542.701843, 361.800964, 0.000000); //Object Model: 1886 |
		AttachObjectToVehicle(atach3, get, -1.139999, 0.504999, -1.599998, 542.701843, 361.800964, 0.000000); //Object Model: 1886 |
		Platform[GetPlayerVehicleID(playerid)] = 1;
		_Mensaje(playerid, 5, "0", "Colocaste la plataforma con éxito, re-escribe el comando para retirarla.");
		return 1;
	}
	if(Platform[GetPlayerVehicleID(playerid)] == 1)
	{
		DestroyObject(Platform1[GetPlayerVehicleID(playerid)]);
		DestroyObject(Platform2[GetPlayerVehicleID(playerid)]);
		DestroyObject(Platform3[GetPlayerVehicleID(playerid)]);
		Platform[GetPlayerVehicleID(playerid)] = 0;
		_Mensaje(playerid, 5, "0", "Retiraste la plataforma.");
		return 1;
	}
	return 1;
}

GCMD:team1(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	SetPlayerTeam(playerid, 2);
	return 1;
}
GCMD:team2(playerid)
{
	if (user[playerid][jAdmin] < 4000) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	SetPlayerTeam(playerid, 1);
	return 1;
}

GCMD:astaff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!sscanf(params, "ds[32]", params[0], params[1]))
	{
		if (!user[params[0]][jAdmin]) return _Mensaje(playerid, 0, "548", "ERROR: Ese jugador no forma parte de la administración.");
		format(user[params[0]][jStaff], 32, "%s", params[1]);
		accountSave(params[0]);
		_Mensaje(playerid, 4, "00c200", "Nombre del administrador editado con éxito.");
	} else _Mensaje(playerid, 3, "0", "/astaff [id jugador] [apodo]");
	return 1;
}

GCMD:aclave(playerid,  const params[])
{
	new nombre[24], clave[24];
	if (user[playerid][jAdmin] < 1337) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[24]s[24]", nombre, clave)) return _Mensaje(playerid, 3, "0", "/aclave [username] [contraseña]");
	if (accountCheck(nombre))
	{
		yield 1;
		new hash[BCRYPT_HASH_LENGTH];
		await_str(hash) bcrypt_ahash(playerid, clave);
		new check = await bcrypt_averify(playerid, clave, hash);
		if(!check) return 1;
		new string[128];
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE accounts SET Clave = '%e' WHERE Nombre = '%e'", hash, nombre);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[Administración]{FFFFFF} %s cambió la contraseña de %s.", nombre_pj(playerid), nombre);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s cambió la contraseña de %s.", nombre_pj(playerid), nombre);
		Log("Registros/Contraseñas.log", string);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

GCMD:rcar(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	new idcar = GetPlayerVehicleID(playerid);
	new Float: cvida;
	GetVehicleHealth(idcar, cvida);
	if (cvida < 900.0) return _Mensaje(playerid, 1, "0", "El vehículo debe poseer por lo menos 900.0 de DL.");
	new panels, doors, lights, tires, tires2;
	GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
	RepairExVehicle(idcar);
	SetExVehicleHealth(idcar, cvida);
	GetVehicleDamageStatus(idcar, panels, doors, lights, tires2);
	if(tires != 0)
	{
		tires = encode_tires(1, 1, 1, 1);
		UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
	}
	return 1;
}

GCMD:specs(playerid)
{
	if (user[playerid][jAdmin] < 1337) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (Spectate[i] != 999)
			{
				new string[128];
				format(string, sizeof(string), "[%d] %s está mirando a [%d] %s", i, nombre_pj(i), Spectate[i], nombre_pj(Spectate[i]));
				_Mensaje(playerid, 4, "ffffff", string);
			}
		}
	}
	return 1;
}

GCMD:informes(playerid)
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "519", "No eres miembro de la PD o SD.");

	if (Es_Faccion(playerid, 1))ExPlayerDialog(playerid, D_informes, DIALOG_STYLE_LIST, "Informes", " Llamadas (911)\n Heridos\n Robos", ">>", "<<");
	else if (Es_Faccion(playerid, 5))ExPlayerDialog(playerid, D_informes, DIALOG_STYLE_LIST, "Informes", " Llamadas (911)\n Heridos", ">>", "<<");
	return 1;
}

GCMD:robos(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "519", "No eres miembro de la PD.");
	new Str[256], Str_[3000], i_ = 0;
	for (new i = 0; i < MAX_NEGOCIOS; i++)
	{
		if (i_Negocio[i][_robado])
		{
			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, i_Negocio[i][nExteriorX], i_Negocio[i][nExteriorY], i_Negocio[i][nExteriorZ]);
			Formato(Str, "{ffffff}%s - Ubicación: {55B14E}%s{ffffff} - Hora: {33CCFF}%s{ffffff}\n", i_Negocio[i][nNombre], location, i_Negocio[i][_robado2]);
			strcat(Str_, Str);
			Formato(Str, "enfermo2_%d", i_);
			SetPVarInt(playerid, Str, i);
			i_++;
		}
	}
	if (i_ != 0)
	{
		ExPlayerDialog(playerid, D_robos, DIALOG_STYLE_LIST, "{D6E1EB}Negocios robados", Str_, ">>", "<<");
	} else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}Negocios robados", "No hay ningún robo reciente.", "Ok", "");
	return 1;
}

GCMD:heridos(playerid)
{
	new string[256], dialog[3000], cuerpos = 0, Str[128];
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "519", "No eres miembro de la PD o Emergencias.");
	foreach(new i: Player)
	{
		if(YaAviso[i])
		{
			new estado2[32];
			if(user[i][jMuerto2] == 1) estado2 = "{FFC9CF}Herida";
			else if(user[i][jMuerto2] == 2) estado2 = "{b00000}Muerta";
			new Float: xp, Float: yp, Float: zp;
			GetPlayerPos(i, xp, yp, zp);
			new location[MAX_ZONE_NAME];
			Get2DZone(location, MAX_ZONE_NAME, xp, yp, zp);
			new Float:Distancia = (GetPlayerDistanceFromPoint(playerid, xp, yp, zp) * 0.01);
			format(string, sizeof(string), "{ffffff}Persona %s{ffffff} - Ubicación: {55B14E}%s{ffffff} - {00A2FF}(Distancia: %0.2f Km)\n", estado2, location, Distancia);
			strcat(dialog, string);
			Formato(Str, "enfermo_%d", cuerpos);
			SetPVarInt(playerid, Str, i);
			cuerpos++;
		}
  	}
	if (cuerpos != 0)
	{
		ExPlayerDialog(playerid, D_Heridos, DIALOG_STYLE_LIST, "{D6E1EB}Lista de heridos", dialog, ">>", "<<");
	} else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "{D6E1EB}Lista de heridos", "No hay ningún herido o muerto en la ciudad.", "Ok", "");
	return 1;
}

is_player_spawn(playerid)
{
	new Float:distance = 99999.0,
		Float:tmp_distance,
		closest = -1;

	for(new i = 1; i < 3; i++)
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, point_muerte[i][x_spawn], point_muerte[i][y_spawn], point_muerte[i][z_spawn]);
		if (tmp_distance < distance)
		{
			distance = tmp_distance;
			closest = i;
		}
	}
	return closest;
}

GCMD:reaparecer(playerid)
{
	new string[128], time_r = 60;
	if (user[playerid][jMuerto2] == 1) time_r = 480;
	else time_r = 120;
	if (reaparecer[playerid] == 0) return _Mensaje(playerid, 0, "0", "No estás en estado herido o muerto.");
	if(!CheckTimer(time_r, r_tiempo[playerid]))
	{
	    if (user[playerid][jDtipo] != 0)
	    {
			terminardroga(playerid, user[playerid][jDtipo]);
			user[playerid][jDtiempo] = 0;
		}
		if (user[playerid][jEncarcelado] == 0)
		{
		    new id = is_player_spawn(playerid);
		    format(string, sizeof(string), "[SISTEMA] %s ha usado el comando /reaparecer.", nombre_pj(playerid));
			ProxDetector(25.0, playerid, string, 0xAFB1B5FF, 0xAFB1B5FF, 0xAFB1B5FF, 0xAFB1B5FF, 0xAFB1B5FF);
			_Limuerte(playerid);
			user[playerid][jAlcohol] = 0;
			Sangre_(playerid, 100);
			Chaleco_(playerid, 0);
			user[playerid][jBanco] -= 25;
			d_estado += 25;
			if (user[playerid][jPremium] == 2)
			{
				if (user[playerid][jCasaKey] != INVALID_CASA_ID)
				{
					new casa=user[playerid][jCasaKey];
					user[playerid][jInterior] = i_Casa[casa][c_Int];
					user[playerid][jVirtualWorld] = i_Casa[casa][c_VW];
					set_pos(playerid, i_Casa[casa][cExteriorX], i_Casa[casa][cExteriorY], i_Casa[casa][cExteriorZ], i_Casa[casa][cExteriorA], i_Casa[casa][c_Int], i_Casa[casa][c_VW]);
				}
				else
				{
					user[playerid][jInterior] = 0;
					user[playerid][jVirtualWorld] = 0;
					set_pos(playerid, point_muerte[id][x_spawn], point_muerte[id][y_spawn], point_muerte[id][z_spawn], point_muerte[id][angle_spawn], 0, 0);
				    QuitarManos(playerid);
				}
			}
			else
			{
				user[playerid][jInterior] = 0;
				user[playerid][jVirtualWorld] = 0;
				set_pos(playerid, point_muerte[id][x_spawn], point_muerte[id][y_spawn], point_muerte[id][z_spawn], point_muerte[id][angle_spawn], 0, 0);
			    QuitarManos(playerid);
			}
			limpiar_chat(playerid, 20);
			format(string, sizeof(string), "Bienvenido de vuelta, %s.", nombre_pj(playerid));
			Mensaje_(playerid, 0x537CDBFF, string);
			Mensaje_(playerid, 0x537CDBFF, "Has spawneado en el hospital más cercano.");
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			user[playerid][jMuerto2] = 0;
			user[playerid][jMuerto] = 0;
			EliminarHerido(playerid);
			format(QuienMato[playerid], 24, "Nadie");
			reaparecer[playerid] = 0;
			_Limuerte(playerid);
		}
		else
		{
			_Limuerte(playerid);
			limpiar_chat(playerid, 20);
			user[playerid][jAlcohol] = 0;
			_HERIDO(playerid);
			user[playerid][jMuerto2] = 0;
			user[playerid][jMuerto] = 0;
			EliminarHerido(playerid);
			format(QuienMato[playerid], 24, "Nadie");
			reaparecer[playerid] = 0;
		}
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(time_r, r_tiempo[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:llamar(playerid,  const params[])
{
	new numero;
	if (sscanf(params, "d", numero)) return _Mensaje(playerid, 3, "0", "/llamar [número telefónico]");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "0", "No puedes usar este comando en un evento.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "0","No tienes un teléfono en ninguna mano."); return 1;}
	if (numero != 911)
		if (user[playerid][jSaldo] < 3) return _Mensaje(playerid, 0, "0", "No tienes saldo suficiente para realizar esta llama.");
	if (user[playerid][j_uTelefono] > 0) return _Mensaje(playerid, 0, "0", "Tu teléfono se encuentra apagado, escribe /togmovil para encenderlo.");
	if (EnLlamada[playerid] != 0){_Mensaje(playerid, 0, "0", "ERROR: Te encuentras en una llamada."); return 1;}
	if(numero == 0){_Mensaje(playerid, 0, "0", "No puedes llamar al número 0."); return 1;}
	if(numero == user[playerid][jTelefono]){_Mensaje(playerid, 0, "0", "No te puedes llamar a tí mismo."); return 1;}
	accion_rol(playerid, 0, "saca su teléfono y marca unos números.");
	LlamarTelefono(playerid, numero);
	random_movil[playerid] = 0;
	registrar_l(playerid, 2, numero);
	return 1;
}


GCMD:eads(playerid,  const params[]) return cmd_eanuncio(playerid, params);
GCMD:eanuncio(playerid,  const params[])
{
	new e_id = user[playerid][jContrato], string[300];
	if (Anuncios == 1) return _Mensaje(playerid, 0, "9","El comando ha sido desactivado temporalmente.");
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
	if (user[playerid][jEncarcelado] > 0) return _Mensaje(playerid, 0, "213", "No puedes usar este comando mientras estás en prisión.");
	if (user[playerid][jTiempos][12] != 0) return decir_eltiempo(playerid, 12);
	if (!isnull(params))
	{
		if (RevisarDinero(playerid, 2))
		{
			format(string, sizeof(string), "[Anuncio] %s. Móvil: %d", params[0], i_Empresa[e_id][eTelefono]);
			_MensajeSAN(0x00D900FF, string);
			Compra(playerid, 2);
			d_san += 2;
			format(string, sizeof(string), "Enviado por: {ffffff}%s [ID: %d]", nombre_pj(playerid), playerid);
			mensaje_admin(string, 0xff0000ff, 1);
			user[playerid][jTiempos][12] = 8;
			format(string, sizeof string, "%s envió e_anuncio: %s", nombre_pj(playerid), params[0]);
			Log("Registros/Anuncios.log", string);
		}
		return 1;
	} else _Mensaje(playerid, 3, "0", "/eanuncio [anuncio]");
	return 1;
}

GCMD:atendert(playerid)
{
	new e_id = user[playerid][jContrato], string[128];
	if(user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if(EnLlamada[playerid] != 0){_Mensaje(playerid, 0, "9", "ERROR: Te encuentras en una llamada."); return 1;}
	new oyente = -1;
	for(new i; i < MAX_PLAYERS; i++)
	{
		if(EnLlamada[i] == 59)
		{
		    if(EmpresaLlamada[i] == e_id)
		    {
				oyente = i;
				break;
			}
		}
	}
	if(oyente != -1)
	{
		PersonaEnLlamada[playerid] = oyente;
		PersonaEnLlamada[oyente] = playerid;
		_Mensaje(oyente, 1, "0", "Atendieron el teléfono.");
		EnLlamada[playerid] = 2;
		EnLlamada[oyente] = 3;
		accion_rol(playerid, 0, "contesta su llamada.");
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(user[i][jContrato] == e_id)
			{
				format(string, sizeof(string), "* %s atendió la llamada del teléfono %d.", nombre_pj(playerid, 0), user[oyente][jTelefono]);
				Mensaje_(i, 0x33CCFFFF, string);
			}
		}
   		return 1;
	}
	_Mensaje(playerid, 0, "9", "Parece no haber llamadas entrantes.");
	return 1;
}

GCMD:atender(playerid) return cmd_contestar(playerid);
GCMD:contestar(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
	if (EnLlamada[playerid] != 0){_Mensaje(playerid, 0, "9", "ERROR: Te encuentras en una llamada."); return 1;}
	if (PersonaEnLlamada[playerid] > -1)//llamada normal
	{
		_Mensaje(playerid, 5, "0", "Contestas la llamada.");
		_Mensaje(PersonaEnLlamada[playerid], 4, "ffff00", "Atendieron el teléfono, se te cobrara 1$ de saldo por esta llamada.");
		EnLlamada[playerid] = 2;
		EnLlamada[PersonaEnLlamada[playerid]] = 3;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	_Mensaje(playerid, 0, "9", "Parece no haber llamadas entrantes.");
	return 1;
}

GCMD:edinson11(playerid,  const params[])
{
	if (!sscanf(params, "dd", params[0], params[1]))
	{
		if (!IsPlayerConnected(params[0])) 	return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid][jAdmin] >= 1338)
		{
			user[params[0]][jAlmacen] = params[1];
			_Mensaje(playerid, 4, "b0b0b0", "Listo, te cediste el almacen");
		} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	} else _Mensaje(playerid, 3, "0", "/edinson11 [id jugador] [id almacen]");
	return 1;
}

GCMD:edinson10(playerid,  const params[])
{
	if (!sscanf(params, "dd", params[0], params[1]))
	{
		if (!IsPlayerConnected(params[0])) 	return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid][jAdmin] >= 1338)
		{
			user[params[0]][jEmpresaKey] = params[1];
			_Mensaje(playerid, 4, "b0b0b0", "Listo, te cediste la empresa");
		} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	} else _Mensaje(playerid, 3, "0", "/edinson10 [id jugador] [id empresa]");
	return 1;
}

GCMD:quitarllavese(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarllavese [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[params[0]][jEmpresaLlaves] = INVALID_CASA_ID;
	user[params[0]][jEmpresa2Llaves] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllavese, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:tallerfd(playerid)
{
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "175", "No eres FD.");
	if (!en_pos(playerid, 4.0, 1360.0743, 1371.0730, 10.8500)) return _Mensaje(playerid, 0, "110", "No estás cerca del taller de la FD.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo.");
	new vehicleid2 = GetPlayerVehicleID(playerid);
	if (!LSFD_Veh(vehicleid2)) return _Mensaje(playerid, 0, "378", "Debes estar en un vehiculo de FD.");

	ExPlayerDialog(playerid, D_PDmecanico, DIALOG_STYLE_LIST, "{D6E1EB}Tipos de reparación", "{FFFFFF}Motor\nCarrocería\nRuedas", "Seleccionar", "Atrás");
	return 1;
}

GCMD:tallerpd(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "175", "No eres policía.");
	if (!en_pos(playerid, 4.0, 1360.0743, 1371.0730, 10.8500)) return _Mensaje(playerid, 0, "110", "No estás cerca del taller de la PD.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo.");
	new vehicleid2 = GetPlayerVehicleID(playerid);
	if (!LSPD_Veh(vehicleid2)) return _Mensaje(playerid, 0, "378", "Debes estar en un vehiculo de PD.");

	ExPlayerDialog(playerid, D_PDmecanico, DIALOG_STYLE_LIST, "{D6E1EB}Tipos de reparación", "{FFFFFF}Motor\nCarrocería\nRuedas\nCambiar matricula", "Seleccionar", "Atrás");
	return 1;
}

GCMD:dop(playerid,  const params[])
{
    if(!CheckTimer(5, Intentar2[playerid]))
	{
		new string[256];
		if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/dop {9EC73D}[Entorno o Aclaración]");
		for (new pid = 1; pid < MAX_PUERTAS; pid++) //puertas dinamicas
		{
			if (en_pos(playerid, 2, i_Puerta[pid][pPos_X], i_Puerta[pid][pPos_Y], i_Puerta[pid][pPos_Z]))
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, i_Puerta[pid][pInt_X], i_Puerta[pid][pInt_Y], i_Puerta[pid][pInt_Z], i_Puerta[pid][pInt_VW]);
				Uso_Dop(string, 0x60CD0097, 8, i_Puerta[pid][pPos_X], i_Puerta[pid][pPos_Y], i_Puerta[pid][pPos_Z], i_Puerta[pid][pPos_VW]);
				return 1;
			}
			if (en_pos(playerid, 2.0, i_Puerta[pid][pInt_X], i_Puerta[pid][pInt_Y], i_Puerta[pid][pInt_Z]) && user[playerid][jVirtualWorld] == i_Puerta[pid][pInt_VW])
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, i_Puerta[pid][pPos_X], i_Puerta[pid][pPos_Y], i_Puerta[pid][pPos_Z], i_Puerta[pid][pPos_VW]);
				Uso_Dop(string, 0x60CD0097, 8, i_Puerta[pid][pInt_X], i_Puerta[pid][pInt_Y], i_Puerta[pid][pInt_Z], i_Puerta[pid][pInt_VW]);
				return 1;
			}
		}
		for (new nid = 0; nid < MAX_NEGOCIOS; nid++) //negocios
		{
			if (en_pos(playerid, 2, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ], nid + 300);
				Uso_Dop(string, 0x60CD0097, 8, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ], 0);
				return 1;
			}
			if (en_pos(playerid, 3, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]) && user[playerid][jVirtualWorld] == nid + 300)
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ], 0);
				Uso_Dop(string, 0x60CD0097, 8, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ], nid + 300);
				return 1;
			}
		}
		for (new i = 0; i < MAX_CASAS; i++) //casas
		{
			if (en_pos(playerid, 2, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[i][c_VW])
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ], i + 6000);
				Uso_Dop(string, 0x60CD0097, 8, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ], i_Casa[i][c_VW]);
				return 1;
			}
			if (en_pos(playerid, 3, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]) && user[playerid][jVirtualWorld] == i + 6000)
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ], i_Casa[i][c_VW]);
				Uso_Dop(string, 0x60CD0097, 8, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ], i + 6000);
				return 1;
			}
		}
		for (new i = 0; i < MAX_EMPRESAS; i++) //empresas
		{
			if (en_pos(playerid, 2, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]))
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ], i + 666);
				Uso_Dop(string, 0x60CD0097, 8, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ], 0);
				return 1;
			}
			if (en_pos(playerid, 3, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]) && user[playerid][jVirtualWorld] == i + 666)
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof(string), "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ], 0);
				Uso_Dop(string, 0x60CD0097, 8, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ], i + 666);
				return 1;
			}
		}
    }
	else
	{
		new string[128];
        format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, Intentar2[playerid]));
        _Mensaje(playerid, 4, "b0b0b0", string);
    }
	return 1;
}
GCMD:negocios(playerid,  const params[])
{
	new string[128], radius;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/negocios [Radio]");
	if (radius < 1 || radius > 100) { _Mensaje(playerid, 0, "0", "El radio debe ser de 1 a 100."); return 1; }
	for (new i = 0; i < MAX_NEGOCIOS; i++)
	{
		if (en_pos(playerid, radius, i_Negocio[i][nExteriorX], i_Negocio[i][nExteriorY], i_Negocio[i][nExteriorZ]))
		{
			format(string, sizeof(string), "Negocio ID: %d - Precio: %d - Tipo: %s", i, i_Negocio[i][nPrecio], _tipoN(i_Negocio[i][nTipo]));
			Mensaje_(playerid, 0xb0b0b0ff, string);
		}
	}
    return 1;
}
GCMD:casas(playerid,  const params[])
{
	new string[128], radius;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/casas [Radio]");
	if (radius < 1 || radius > 100) { _Mensaje(playerid, 0, "0", "El radio debe ser de 1 a 100."); return 1; }
	for (new i = 0; i < MAX_CASAS; i++)
	{
		if (en_pos(playerid, radius, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[i][c_VW])
		{
		    format(string, sizeof(string), "Casa ID: %d - Precio: %d", i, i_Casa[i][cPrecio]);
			Mensaje_(playerid, 0xb0b0b0ff, string);
		}
	}
    return 1;
}

new v_conce0[] =
{
	521, 581, 461, 586, 468, 463,
	471, 448, 462, 509, 510, 481
};
new v_conce1[28] =
{
	426, 566, 445, 474, 517, 518, 543, 575,
	550, 567, 554, 576, 419, 402, 421, 466, 467,
	475, 542, 529, 551, 546, 547, 600, 458, 516, 561, 507
};
new v_conce2[12] =
{
	429, 415, 477, 555, 587, 480,
	506, 559, 560, 562, 558, 545
};
new v_conce3[19] =
{
	496, 565, 579, 535, 500, 418,
	440, 459, 482, 489, 498, 413,
	423, 404, 483, 495, 589, 508, 400
};
new v_conce4[10] =
{
	417, 469, 487, 511, 513,
	519, 553, 577, 592, 593
};
new v_conce5[22] =
{
	401, 405, 412, 436, 439, 478,
	491, 492, 516, 533, 534,
	536, 540, 604, 605, 526, 585,
	410, 419, 580, 479, 549
};
new v_conce6[8] =
{
	484, 473, 454, 453,
	452, 446, 460, 493
};

GCMD:catalogo(playerid)
{
	if(!en_Concesionaria(playerid)) return _Mensaje(playerid, 0, "89", "No estás cerca de ningún punto de venta.");
	if (en_pos(playerid, 5.0, 8727.8135,14170.5762,6.5043)) //  *   Motos
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 1)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce0, sizeof(v_conce0), "Vehiculos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 8683.3047,14367.3936,6.6591)) //	*	Clase M
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 2)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce1, sizeof(v_conce1), "Vehiculos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 555.2177, -1438.9354, 15.7073)) //	*	Clase A
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 3)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce2, sizeof(v_conce2), "Vehiculos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 942.8696, -1418.1125, 13.5469)) //	*	Camionetas
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 4)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce3, sizeof(v_conce3), "Vehiculos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 2006.0568, -2271.4482, 13.5344)) //	*	aviones
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 5)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce4, sizeof(v_conce4), "Aviones en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 2770.6709, -1628.4618, 12.1775)) //   *   Clase B
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 6)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce5, sizeof(v_conce5), "Vehiculos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, 354.5555, -2055.0317, 7.8399)) //	*	barcos
	{
	 	new i_ = 0, Str[256];
	    for (new i = 0; i != MAX_VEH_VENTA; i ++)
		{
		    if (i_Conce[i][eTipo] == 7)
			{
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, i);
				i_++;
    		}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos en venta", "No hay ningún vehículo disponible", "Cerrar", "");
		else menu_selectionEx(playerid, v_conce6, sizeof(v_conce6), "Barcos en venta", Models_cVehiculo, -16.0, 0.0, -55.0, 1.0);
	}
	else if (en_pos(playerid, 5.0, -63.0295, -1121.5996, 1.1733)) //	*	coches usados
	{
		new Str[256], Str_[3000], i_ = 0;
		for (new veh = 0; veh < MAX_VEH_USADO; veh++)
		{
			if (i_Usado[veh][uModeloVeh] > 0)
			{
				Formato(Str, "{ffffff}%s - Precio: {1CB54C}%d{ffffff}\n", nombre_vehiculo[i_Usado[veh][uModeloVeh] - 400], i_Usado[veh][uPrecioVeh], i_Usado[veh][uVida]);
				strcat(Str_, Str);
				Formato(Str, "GPS_vehC_%d", i_);
				SetPVarInt(playerid, Str, veh);
				i_++;
			}
		}
		if (i_ == 0) ExPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos usados", "No hay ningún vehículo disponible", "Cerrar", "");
		ExPlayerDialog(playerid, D_Uvehiculo1, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos usados", Str_, "Comprar", "Cancelar");
		return 1;
	}
	return 1;
}

funcion incendiar_p(playerid, tipo, id)
{
	if (tipo == 1) //casa
	{
		new location[MAX_ZONE_NAME], string[256];
		Get2DZone(location, MAX_ZONE_NAME, i_Casa[id][cExteriorX], i_Casa[id][cExteriorY], i_Casa[id][cExteriorZ]);
		format(string, sizeof(string), "CENTRAL: Informe de incendio en %s.", location);
		_MensajeRfac(5, C_COLORPOLICIA, string);
		CrearIncendioP(id, 0);
		Mensaje_(playerid, 0xff6347ff, "Has provocado un incendio, emergencias llegará dentro de poco.");
	}
	else if (tipo == 2) //negocio
	{
		new location[MAX_ZONE_NAME], string[256];
		Get2DZone(location, MAX_ZONE_NAME, i_Negocio[id][nExteriorX], i_Negocio[id][nExteriorY], i_Negocio[id][nExteriorZ]);
		format(string, sizeof(string), "CENTRAL: Informe de incendio en %s.", location);
		_MensajeRfac(5, C_COLORPOLICIA, string);
		CrearIncendioP(id, 1);
		Mensaje_(playerid, 0xff6347ff, "Has provocado un incendio, emergencias llegará dentro de poco.");
	}
	return 1;
}

GCMD:consumir(playerid,  const params[]) return cmd_usar(playerid, params);
GCMD:usar(playerid,  const params[])
{
    new
    efecto_droga = user[playerid][jDtipo], //tipo de droga
    potencia_efecto = user[playerid][jDpower]; //potencia de la droga

	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");

    if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/usar [item]"), Mensaje_(playerid, -1, "Items disponibles: billete, molotov, cocaina, crack, metanfetamina, extasis, lsd, ketamina, pcp, heroina, marihuana, hachis, esteroide");
    if (strcmp(params[0], "billete", true) == 0)
    {
        if(user[playerid][jm_Derecha] != 107 && user[playerid][jm_Izquierda] != 107 && user[playerid][jm_Derecha] != 4 && user[playerid][jm_Izquierda] != 4) { _Mensaje(playerid, 0, "9", "No tienes billetes en ninguna mano."); return 1;}
        if(user[playerid][jm_Derecha] == 107 || user[playerid][jm_Derecha] == 4){ DarDineroGC(playerid, user[playerid][jm_DerechaCant]); user[playerid][jm_DerechaCant] = 0;}
        else if(user[playerid][jm_Izquierda] == 107 || user[playerid][jm_Izquierda] == 4){ DarDineroGC(playerid, user[playerid][jm_IzquierdaCant]); user[playerid][jm_IzquierdaCant] = 0;}
        _Mensaje(playerid, 4, "b0b0b0", "Guardas el dinero en tus bolsillos.");
        update_manos(playerid);
        return 1;
    }
    else if (strcmp(params[0], "molotov", true) == 0)
    {
        if(!user[playerid][jPuntosRol][0]) return _Mensaje(playerid, 0, "9", "Debes tener al menos un punto de rol positivo.");
        if(user[playerid][jm_Derecha] != 18 && user[playerid][jm_Izquierda] != 18) { _Mensaje(playerid, 0, "9", "No tienes un molotov en ninguna mano."); return 1;}
        for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
        {
            if (en_pos(playerid, 5.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
            {
                textgame_player(playerid,"~n~~n~~n~~n~~n~~w~Alejate de la entrada...", 6000,3);
                SetTimerEx("incendiar_p", 5000, false, "iii", playerid, 2, nid);
                if(user[playerid][jm_Derecha] == 18) user[playerid][jm_DerechaCant]--;
                else if(user[playerid][jm_Izquierda] == 18) user[playerid][jm_IzquierdaCant]--;
                update_manos(playerid);
                return 1;
            }
        }
        for (new h = 0; h < sizeof(i_Casa); h++)
        {
            if (en_pos(playerid, 5.0, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[h][c_VW])
            {
                textgame_player(playerid,"~n~~n~~n~~n~~n~~w~Alejate de la entrada...", 6000,3);
                SetTimerEx("incendiar_p", 5000, false, "iii", playerid, 1, h);
                if(user[playerid][jm_Derecha] == 18) user[playerid][jm_DerechaCant]--;
                else if(user[playerid][jm_Izquierda] == 18) user[playerid][jm_IzquierdaCant]--;
                update_manos(playerid);
                return 1;
            }
        }
        Mensaje_(playerid, 0xb00000ff, "No estás en la entrada de alguna casa o negocio.");
        return 1;
    }
    //-----------
    //sistema de drogas
    else if (strcmp(params[0], "cocaina", true) == 0)
    {
        new obj = 75;
        if (user[playerid][jm_Derecha] == 110 || user[playerid][jm_Izquierda] == 110) return _Mensaje(playerid, 4, "b00000", "No puedes consumir cocaína desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees cocaína en ninguna mano."); return 1;}

        if (efecto_droga == 1 && potencia_efecto == 3) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiada cocaína.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        //resta la droga
        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        if(efecto_droga != 0 && efecto_droga != 1) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][0] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes cocaína.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más resistente. Sientes un mayor bienestar. Desarrollas paranoia, estás atento a todo tu entorno.");
        if (potencia_efecto != 0 && efecto_droga != 1) user[playerid][jDpower] = 0;

        if(efecto_droga != 1)
        {
            ContadorCuraciones[playerid] = 13;
            SetTimerEx("curacion_droga", 10000, false, "i", playerid);
        }

        if(InfoObjeto[obj][oQuality] == 1)
        {
            if(efecto_droga != 1)
            {
                user[playerid][jDtipo] = 1;
                user[playerid][jDpower] = 1;
                user[playerid][jDtiempo] = 5;
                user[playerid][jHambre] -= 2.5;
            }
            else
            {
                if(potencia_efecto == 1)
                {
                    user[playerid][jDpower] = 2;
                    user[playerid][jDtiempo] += 10;
                    user[playerid][jHambre] -= 3.5;
                }
                else if(potencia_efecto == 2)
                {
                    user[playerid][jDpower] = 3;
                    user[playerid][jDtiempo] += 10;
                    user[playerid][jHambre] -= 4.0;
                }
            }
        }
        else if(InfoObjeto[obj][oQuality] == 2)
        {
            if(efecto_droga != 1)
            {
                user[playerid][jDtipo] = 1;
                user[playerid][jDpower] = 2;
                user[playerid][jDtiempo] = 15;
                user[playerid][jHambre] -= 6.0;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 10;
                user[playerid][jHambre] -= 4.0;
            }
        }
        else if(InfoObjeto[obj][oQuality] == 3)
        {
            if(efecto_droga != 1)
            {
                user[playerid][jDtipo] = 1;
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 10;
                user[playerid][jHambre] -= 10;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] = 25;
                if(potencia_efecto == 1) user[playerid][jHambre] -= 7.5;
                else if(potencia_efecto == 2) user[playerid][jHambre] -= 4.0;
            }
        }
        if(user[playerid][jAdiccion][0] == 0)
        {
            if(user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][0] = 5;
            else user[playerid][jAdiccion][0] = 3;
        }
        else
        {
            new addiction = random(6);
            if(user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][0] += 5+addiction;
            else user[playerid][jAdiccion][0] += 3+addiction;
        }
        if(user[playerid][jAdiccion][0] > 100) user[playerid][jAdiccion][0] = 100;
    }
    else if (strcmp(params[0], "crack", true) == 0)
    {
        new obj = 76;
        if (user[playerid][jm_Derecha] == 112 || user[playerid][jm_Izquierda] == 112) return _Mensaje(playerid, 4, "b00000", "No puedes consumir crack desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees crack en ninguna mano."); return 1;}
        if (efecto_droga == 2 && potencia_efecto == 3) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiado crack.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        if(efecto_droga != 0 && efecto_droga != 2) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][1] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes crack.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más resistente. Sientes un mayor bienestar. Desarrollas paranoia, estás atento a todo tu entorno.");
        if (potencia_efecto != 0 && efecto_droga != 2) user[playerid][jDpower] = 0;

        if(efecto_droga != 2)
        {
            ContadorCuraciones[playerid] = 6;
            SetTimerEx("curacion_droga", 5000, false, "i", playerid);
        }

        if(InfoObjeto[obj][oQuality] == 1)
        {
            if(efecto_droga != 2)
            {
                user[playerid][jDtipo] = 2;
                user[playerid][jDpower] = 1;
                user[playerid][jDtiempo] = 10;
                user[playerid][jHambre] -= 1.5;
            }
            else
            {
                if(potencia_efecto == 1)
                {
                    user[playerid][jDpower] = 2;
                    user[playerid][jDtiempo] += 10;
                    user[playerid][jHambre] -= 2.5;
                }
                else if(potencia_efecto == 2)
                {
                    user[playerid][jDpower] = 3;
                    user[playerid][jDtiempo] += 10;
                    user[playerid][jHambre] -= 3.0;
                }
            }
        }
        else if(InfoObjeto[obj][oQuality] == 2)
        {
            if(efecto_droga != 2)
            {
                user[playerid][jDtipo] = 2;
                user[playerid][jDpower] = 2;
                user[playerid][jDtiempo] = 20;
                user[playerid][jHambre] -= 4.0;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 10;
                user[playerid][jHambre] -= 3.0;
            }
        }
        else if(InfoObjeto[obj][oQuality] == 3)
        {
            if(efecto_droga != 2)
            {
                user[playerid][jDtipo] = 2;
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 10;
                user[playerid][jHambre] -= 7.0;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] = 30;
                if(potencia_efecto == 1) user[playerid][jHambre] -= 5.5;
                else if(potencia_efecto == 2) user[playerid][jHambre] -= 3.0;
            }
        }
        if(user[playerid][jAdiccion][1] == 0)
        {
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][1] = 7;
            else user[playerid][jAdiccion][1] = 4;
        }
        else
        {
            new addiction = random(6);
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][1] += 7+addiction;
            else user[playerid][jAdiccion][1] += 4+addiction;
        }
        if(user[playerid][jAdiccion][1] > 100) user[playerid][jAdiccion][1] = 100;
    }
    else if (strcmp(params[0], "metanfetamina", true) == 0)
    {
        new obj = 78;
        if (user[playerid][jm_Derecha] == 114 || user[playerid][jm_Izquierda] == 114) return _Mensaje(playerid, 4, "b00000", "No puedes consumir metanfetamina desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees metanfetamina en ninguna mano."); return 1;}
        if (efecto_droga == 3 && potencia_efecto == 3) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiada metanfetamina.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        if(efecto_droga != 0 && efecto_droga != 3) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][2] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes metanfetamina.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más enérgico y con mayor confianza. Aumenta tu concentración. Desarrollas paranoia y agresividad.");
        if (potencia_efecto != 0 && efecto_droga != 3) user[playerid][jDpower] = 0;

        if(efecto_droga != 3)
        {
            ContadorCuraciones[playerid] = 9;
            SetTimerEx("curacion_droga", 13000, false, "i", playerid);
        }

        if(InfoObjeto[obj][oQuality] == 1)
        {
            if(efecto_droga != 3)
            {
                user[playerid][jDtipo] = 3;
                user[playerid][jDpower] = 1;
                user[playerid][jDtiempo] = 5;
                user[playerid][jHambre] -= 1.5;
            }
            else
            {
                if(potencia_efecto == 1)
                {
                    user[playerid][jDpower] = 2;
                    user[playerid][jDtiempo] += 5;
                    user[playerid][jHambre] -= 2.5;
                }
                else if(potencia_efecto == 2)
                {
                    user[playerid][jDpower] = 3;
                    user[playerid][jDtiempo] += 10;
                    user[playerid][jHambre] -= 3.0;
                }
            }
        }
        else if(InfoObjeto[obj][oQuality] == 2)
        {
            if(efecto_droga != 3)
            {
                user[playerid][jDtipo] = 3;
                user[playerid][jDpower] = 2;
                user[playerid][jDtiempo] = 10;
                user[playerid][jHambre] -= 4.0;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 5;
                user[playerid][jHambre] -= 3.0;
            }
        }
        else if(InfoObjeto[obj][oQuality] == 3)
        {
            if(efecto_droga != 3)
            {
                user[playerid][jDtipo] = 3;
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] += 10;
                user[playerid][jHambre] -= 7.0;
            }
            else
            {
                user[playerid][jDpower] = 3;
                user[playerid][jDtiempo] = 20;
                if(potencia_efecto == 1) user[playerid][jHambre] -= 5.5;
                else if(potencia_efecto == 2) user[playerid][jHambre] -= 3.0;
            }
        }
        if(user[playerid][jAdiccion][2] == 0)
        {
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][2] = 5;
            else user[playerid][jAdiccion][2] = 3;
        }
        else
        {
            new addiction = random(3);
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][2] += 5+addiction;
            else user[playerid][jAdiccion][2] += 3+addiction;
        }
        if(user[playerid][jAdiccion][2] > 100) user[playerid][jAdiccion][2] = 100;
    }
    else if (strcmp(params[0], "extasis", true) == 0)
    {
        new obj = 138;
        if (user[playerid][jm_Derecha] == 144 || user[playerid][jm_Izquierda] == 144) return _Mensaje(playerid, 4, "b00000", "No puedes consumir éxtasis desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees éxtasis en ninguna mano."); return 1;}

        if(efecto_droga == 4) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiado éxtasis.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(efecto_droga != 0) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes éxtasis.");
        SendClientMessage(playerid, 0x9ACD32AA, "Sientes que estás flotando. Tienes una conducta irracional. Pierdes la vergüenza y te apegas hasta con extraños.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        ContadorCuraciones[playerid] = 17;
        SetTimerEx("curacion_droga", 8000, false, "i", playerid);

        user[playerid][jDtipo] = 4;
        user[playerid][jDtiempo] = random(7)+10;
        user[playerid][jHambre] -= 10.0;
    }
    else if (strcmp(params[0], "lsd", true) == 0)
    {
        new obj = 139;
        if (user[playerid][jm_Derecha] == 144 || user[playerid][jm_Izquierda] == 144) return _Mensaje(playerid, 4, "b00000", "No puedes consumir lsd desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees lsd en ninguna mano."); return 1;}

        if(efecto_droga == 5 && potencia_efecto == 2) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiado LSD.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(efecto_droga != 0 && efecto_droga != 5) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes LSD.");
        SendClientMessage(playerid, 0x9ACD32AA, "La realidad se distorsiona. Desarrollas inestabilidad emocional. Ves y oyes cosas que no están en el lugar.");
        if (potencia_efecto != 0 && efecto_droga != 5) user[playerid][jDpower] = 0;

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

		new hora_s, minuto_s, segundo_s;
		gettime(hora_s, minuto_s, segundo_s);
        if(efecto_droga != 5)
        {
            ContadorCuraciones[playerid] = 43;
            SetTimerEx("curacion_droga", 4000, false, "i", playerid);

            user[playerid][jDtipo] = 5;
            user[playerid][jDpower] = 1;
            user[playerid][jDtiempo] = random(11)+5;
            user[playerid][jHambre] += 5.0;
            if(hora_s > 5 && hora_s < 20) SetPlayerTime(playerid, 7, 0), SetPlayerWeather(playerid, 250);
            else if(hora_s <= 5 && hora_s >= 20) SetPlayerTime(playerid, 6, 0), SetPlayerWeather(playerid, 250);
        }
        else
        {
            if(potencia_efecto == 1)
            {
                user[playerid][jDpower] = 2;
                if(hora_s > 5 && hora_s < 20) SetPlayerTime(playerid, 9, 0), SetPlayerWeather(playerid, -66);
                else if(hora_s <= 5 && hora_s >= 20) SetPlayerTime(playerid, 21, 0), SetPlayerWeather(playerid, -66);
            }
        }
    }
    else if (strcmp(params[0], "ketamina", true) == 0)
    {
        new obj = 140;
        if (user[playerid][jm_Derecha] == 144 || user[playerid][jm_Izquierda] == 144) return _Mensaje(playerid, 4, "b00000", "No puedes consumir ketamina desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees ketamina en ninguna mano."); return 1;}

        if(efecto_droga == 6) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiada ketamina.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(efecto_droga != 0) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][3] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes ketamina.");
        SendClientMessage(playerid, 0x9ACD32AA, "Tienes una experiencia de desdoblamiento. La realidad se distorsiona. Dejas de sentir dolor.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        ContadorCuraciones[playerid] = 13;
        SetTimerEx("curacion_droga", 20000, false, "i", playerid);

        user[playerid][jDtipo] = 6;
        user[playerid][jDtiempo] = random(10)+10;
        user[playerid][jHambre] -= 3.0;

        if(user[playerid][jAdiccion][3] == 0)
        {
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][3] = 3;
            else user[playerid][jAdiccion][3] = 2;
        }
        else
        {
            new addiction = random(3);
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][4] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][3] += 2+addiction;
            else user[playerid][jAdiccion][3] += 1+addiction;
        }
        if(user[playerid][jAdiccion][3] > 100) user[playerid][jAdiccion][3] = 100;
    }
    else if (strcmp(params[0], "pcp", true) == 0)
    {
        new obj = 141;
        if (user[playerid][jm_Derecha] == 144 || user[playerid][jm_Izquierda] == 144) return _Mensaje(playerid, 4, "b00000", "No puedes consumir pcp desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees pcp en ninguna mano."); return 1;}

        if(efecto_droga == 7) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiado PCP.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        if(efecto_droga != 0) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][4] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes PCP.");
        SendClientMessage(playerid, 0x9ACD32AA, "Tienes experiencias de desdoblamiento, te desorientas y sientes temor. Estás más agresivo, y dejas de sentir dolor.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        ContadorCuraciones[playerid] = 9;
        SetTimerEx("curacion_droga", 20000, false, "i", playerid);

        user[playerid][jDtipo] = 7;
        user[playerid][jDtiempo] = random(10)+10;
        user[playerid][jHambre] -= 5.0;

		new hora_s, minuto_s, segundo_s;
		gettime(hora_s, minuto_s, segundo_s);
        switch(hora_s)
        {
            case 0..5: SetPlayerTime(playerid, 0, 0), SetPlayerWeather(playerid, 44);
            case 6..8: SetPlayerTime(playerid, 7, 0), SetPlayerWeather(playerid, 44);
            case 9..19: SetPlayerTime(playerid, 20, 0), SetPlayerWeather(playerid, 44);
            case 20..23: SetPlayerTime(playerid, 1, 0), SetPlayerWeather(playerid, 44);
        }
        if(user[playerid][jAdiccion][4] == 0)
        {
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][4] = 4;
            else user[playerid][jAdiccion][4] = 3;
        }
        else
        {
            new addiction = random(3);
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][5] > 0) user[playerid][jAdiccion][4] += 3+addiction;
            else user[playerid][jAdiccion][4] += 2+addiction;
        }
        if(user[playerid][jAdiccion][4] > 100) user[playerid][jAdiccion][4] = 100;
    }
    else if (strcmp(params[0], "heroina", true) == 0)
    {
        new obj = 77;
        if (user[playerid][jm_Derecha] == 113 || user[playerid][jm_Izquierda] == 113) return _Mensaje(playerid, 4, "b00000", "No puedes consumir heroína desde el fardo, crea un paquete.");
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees heroína en ninguna mano."); return 1;}

        if(efecto_droga == 8) return _Mensaje(playerid, 4, "b00000", "Ya consumiste demasiada heroína.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        new double_experience = random(2);
        if(double_experience == 0) if(user[playerid][jDbonus][0]) user[playerid][jDbonus][0] = 1;

        if(efecto_droga != 0) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(user[playerid][jAdiccion][5] > 0 && user[playerid][pAbstinenceEffect] == 1) user[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes heroína.");
        SendClientMessage(playerid, 0x9ACD32AA, "Sientes un placer intenso y una poderosa sensación de bienestar que te hace olvidar el dolor. Pierdes tu apetencia sexual.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        ContadorCuraciones[playerid] = 17;
        SetTimerEx("curacion_droga", 12000, false, "i", playerid);

        user[playerid][jDtipo] = 8;
        user[playerid][jDtiempo] = random(11)+10;
        user[playerid][jHambre] -= 10.0;
        if(user[playerid][jAdiccion][5] == 0)
        {
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0) user[playerid][jAdiccion][5] = 5;
            else user[playerid][jAdiccion][5] = 3;
        }
        else
        {
            new addiction = random(4);
            if(user[playerid][jAdiccion][0] > 0 || user[playerid][jAdiccion][1] > 0 || user[playerid][jAdiccion][2] > 0 || user[playerid][jAdiccion][3] > 0 || user[playerid][jAdiccion][4] > 0) user[playerid][jAdiccion][5] += 5+addiction;
            else user[playerid][jAdiccion][5] += 3+addiction;
        }
        if(user[playerid][jAdiccion][5] > 100) user[playerid][jAdiccion][5] = 100;
    }
    else if (strcmp(params[0], "marihuana", true) == 0)
    {
        Mensaje_(playerid, -1, "Para consumir marihuana utiliza /fumar [canuto | blunt]");
    }
    else if (strcmp(params[0], "hachis", true) == 0)
    {
        Mensaje_(playerid, -1, "Para consumir hachís utiliza /fumar [canuto | blunt]");
    }
    else if (strcmp(params[0], "esteroide", true) == 0)
    {
        new obj = 143;
        if (user[playerid][jm_Derecha] != obj && user[playerid][jm_Izquierda] != obj){ _Mensaje(playerid, 4, "b00000", "No posees esteroides en ninguna mano."); return 1;}

        if(user[playerid][jDbonus][1]) return _Mensaje(playerid, 4, "b0b0b0", "Ya usaste un esteroide recientemente, entrena antes de usar otro.");
        if (efecto_droga == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes esteroides.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes motivado y con ganas de entrenar. De vez en cuando te pones un poco agresivo.");

        if(user[playerid][jm_Derecha] == obj){user[playerid][jm_DerechaCant] --;}
        else if(user[playerid][jm_Izquierda] == obj){user[playerid][jm_IzquierdaCant] --;}

        user[playerid][jDbonus][1] = 1;
        user[playerid][jHambre] += 5.0;
    }
    return 1;
}

funcion curacion_droga(playerid)
{
	if (user[playerid][jMuerto] != 0) return 1, ContadorCuraciones[playerid] = 0;
    if(user[playerid][jDtipo] > 0)
    {
        if(ContadorCuraciones[playerid] != 0)
        {
            new
                tiempo,
                Float:curacion,
                Float:sangre=user[playerid][jSangre]
            ;
            switch(user[playerid][jDtipo])
            {
                case 1: curacion = 7.0, tiempo = 10000;
                case 2: curacion = 15.0, tiempo = 5000;
                case 3: curacion = 10.0, tiempo = 13000;
                case 4: curacion = 5.0, tiempo = 8000;
                case 5: curacion = 2.0, tiempo = 4000;
                case 6: curacion = 7.0, tiempo = 20000;
                case 7: curacion = 10.0, tiempo = 20000;
                case 8: curacion = 5.0, tiempo = 12000;
                case 9: curacion = 3.0, tiempo = 15000;
                case 10: curacion = 6.0, tiempo = 15000;
            }
            if(curacion+sangre > 100.0) Sangre_(playerid, 100.0), ContadorCuraciones[playerid] = 0;
            else
            {
                Sangre_(playerid, sangre+curacion);
                ContadorCuraciones[playerid] --;
                if(ContadorCuraciones[playerid] > 0) SetTimerEx("curacion_droga", tiempo, false, "i", playerid);
            }
        }
    }
    else ContadorCuraciones[playerid] = 0;
    return 1;
}

GCMD:taller(playerid)
{
	if(!is_player_taller(playerid)) return _Mensaje(playerid, 0, "89", "No estás cerca de ningún taller dinámico.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");

	new idcoche = GetPlayerVehicleID(playerid);
	new Float:X, Float:Y, Float:Z, Float:Angulo, string[128];

	GetVehiclePos(idcoche, X, Y, Z);
	GetVehicleZAngle(idcoche, Angulo);
	TallerX[idcoche] = X; TallerY[idcoche] = Y; TallerZ[idcoche] = Z; TallerAngulo[idcoche] = Angulo;

	new Float: cvida;
	GetVehicleHealth(idcoche, cvida);
	new pagar, Percent_damage = floatround(cvida);
	if (Percent_damage >= 920) return _Mensaje(playerid, 0, "0", "DL (HP del vehículo) es mayor a 920.");
	pagar = (920-Percent_damage);
	if(ComprobarDineroJ(playerid) < pagar*2) { format(string, sizeof(string), "No tienes suficiente dinero ($%d).", pagar*2); _Mensaje(playerid, 0, "0", string); return 1; }

	if (IsPlayerInVehicle(playerid, idcoche))
	{
		if (used_taller[is_player_taller(playerid)-1] != 0) return _Mensaje(playerid, 0, "0", "Este taller se encuentra en uso.");
		used_taller[is_player_taller(playerid)-1] = 1;
		EnTaller[playerid] = idcoche;
		textgame_player(playerid,"~n~~n~~n~~w~en ~r~reparacion...", 7000,3);
		SetTimerEx("repair_taller", 6000, false, "dddd", idcoche, playerid, pagar*2, used_taller[is_player_taller(playerid)-1]);
		SetTimer("desbug_taller", 7000, false);
		
		switch (is_player_taller(playerid))
		{
			case 1: //dillimore
			{
				SetVehiclePos(idcoche, 720.0357, -458.5607, 8.3668);
				SetVehicleZAngle(idcoche, 0.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, 727.8065, -474.5116, 23.6823);
						SetPlayerCameraLookAt(p, 727.3044, -473.6483, 23.1873);
					}
				}
			}
			//
			case 2: //vinewood
			{
				SetVehiclePos(idcoche, 1025.7784, -1023.2740, 25.0991);
				SetVehicleZAngle(idcoche, 0.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, 1040.3243, -1037.1627, 44.3097);
						SetPlayerCameraLookAt(p, 1039.5372, -1036.5486, 43.8447);
					}
				}
			}
			//
			case 3: //sf transfer 1
			{
				SetVehiclePos(idcoche, -1904.6440, 282.5728, 29.1481);
				SetVehicleZAngle(idcoche, 0.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, -1892.7368, 265.8196, 47.2109);
						SetPlayerCameraLookAt(p, -1893.1355, 266.7351, 46.9509);
					}
				}
			}
			//
			case 4: //sf transfer 2
			{
				SetVehiclePos(idcoche, -2722.2532, 217.5284, -7.4352);
				SetVehicleZAngle(idcoche, 90.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, -2704.6260, 225.3991, 12.1179);
						SetPlayerCameraLookAt(p, -2705.4602, 224.8486, 11.7329);
					}
				}
			}
			//
			case 5: //lv transfer
			{
				SetVehiclePos(idcoche, 2386.9407, 1046.3706, 1.8465);
				SetVehicleZAngle(idcoche, 0.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, 2392.8813, 1031.8748, 18.8384);
						SetPlayerCameraLookAt(p, 2392.4512, 1032.7756, 18.3384);
					}
				}
			}
			//
	    	case 6: //idlewood
			{
				SetVehiclePos(idcoche, 2069.4211, -1829.3500, 5.8000);
				SetVehicleZAngle(idcoche, 90.0000);
				foreach(new p: Player)
				{
					if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
					{
					    IsTaller[playerid] = idcoche;
						TogglePlayerControllable(p, 0);
						SetPlayerCameraPos(p, 2081.3096, -1839.8691, 19.8587);
						SetPlayerCameraLookAt(p, 2080.5188, -1839.2605, 19.4187);
					}
				}
			}
			//
		}
	}
	return 1;
}

funcion desbug_taller()
{
	if (used_taller[0] != 0) used_taller[0] = 0;
	if (used_taller[1] != 0) used_taller[1] = 0;
	if (used_taller[2] != 0) used_taller[2] = 0;
	if (used_taller[3] != 0) used_taller[3] = 0;
	if (used_taller[4] != 0) used_taller[4] = 0;
	if (used_taller[5] != 0) used_taller[5] = 0;
	
	return 1;
}

funcion repair_taller(idcoche, playerid, pagar, taller)
{
	used_taller[taller] = 0;
	if (!IsPlayerConnected(playerid)) return 1;
	RepairExVehicle(idcoche);
	SetExVehicleHealth(idcoche, 920.0);
	Compra(playerid, pagar);
	EnTaller[playerid] = 0;
	if (IsPlayerInVehicle(playerid, idcoche))
	{
		SetVehiclePos(idcoche, TallerX[idcoche], TallerY[idcoche], TallerZ[idcoche]);
		SetVehicleZAngle(idcoche, TallerAngulo[idcoche]);
		foreach(new p: Player)
		{
			if (IsPlayerInVehicle(p, idcoche))
			{
				SetCameraBehindPlayer(p);
				TogglePlayerControllable(p, 1);
				DeletePVar(p, "Congelado");
 				IsTaller[p] = 0;
			}
		}
	}
	return 1;
}

GCMD:tirardni(playerid)
{
	if(user[playerid][jf_Dni] == 0) return _Mensaje(playerid, 0, "89", "No posees un documento falso.");
	user[playerid][jf_Dni] = 0;
	user[playerid][jf_Edad] = 0;
	strmid(user[playerid][jf_Nombre], "Ninguno", 0, strlen("Ninguno"), 12);
	DarDineroGC(playerid, 500);
	_Mensaje(playerid, 4, "b0b0b0", "Tiraste tu documento falso.");
	return 1;
}


GCMD:edinson(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new
		nombre_viejo[24],
		nombre_nuevo[24]
	;

	if (sscanf(params, "s[24]s[24]", nombre_viejo, nombre_nuevo)) return _Mensaje(playerid, 3, "0", "/edinson [Nombre_Apellido (viejo)] [Nombre_Apellido (nuevo)]");

	yield 1;
	if(characterCheck(nombre_nuevo)) return Mensaje_(playerid, -1, "El personaje nuevo está existente.");
	
	// detecta si existe el personaje, y toma información del username
	if(!characterCheck(nombre_viejo)) return Mensaje_(playerid, -1, "Ese personaje no existe.");
	// detecta si existe la cuenta
	return 1;
}


GCMD:secambio(playerid,  const params[])
{
    new nombre[24], edad;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[24]d", nombre, edad)) return _Mensaje(playerid, 3, "0", "/secambio [Nombre_Apellido] [Edad]");
	yield 1;
	if (characterCheck(nombre))
	{
		
		new string[128];
		/*foreach(new iterated: Player){
			if(strequal(nombre, user[iterated][jNombrePJ])){
				Kick(iterated);
				wait_ms(500);
			}
		}
		
		new documento = Random(100000, 499999);
		new secEdad = edad,
			secFuerza = 50,
			secTrabajo1 = 0,
			secTrabajo2 = 0,
			secTrabajo3 = 0,
			secHambre = -10
		;
		for(new i = 0; i < 10; i++)
		{
			user[target][jHabilidad][i] = 0;
			user[target][jHabilidad2][i] = 1;
			user[target][jAdiccion][i] = 0;
		}
		user[playerid][jArrestos] = 0;
		user[playerid][jDocumento] = documento;
		alm(p_delito[target][0], "Ninguno");
		alm(p_delito[target][1], "Ninguno"); 
		alm(p_delito[target][2], "Ninguno"); 
		alm(p_delito[target][3], "Ninguno"); 
		alm(p_delito[target][4], "Ninguno"); 
		alm(p_delito[target][5], "Ninguno"); 
		alm(p_delito[target][6], "Ninguno"); 
		alm(p_delito[target][7], "Ninguno"); 
		alm(p_delito[target][8], "Ninguno"); 
		alm(p_delito[target][9], "Ninguno");
		user[target][jDelito][0] = 0;
		user[target][jDelito][1] = 0;
		user[target][jDelito][2] = 0;
		user[target][jDelito][3] = 0;
		user[target][jDelito][4] = 0;
		user[target][jDelito][5] = 0;
		user[target][jDelito][6] = 0;
		user[target][jDelito][7] = 0;
		user[target][jDelito][8] = 0;
		user[target][jDelito][9] = 0;
		for(new i = 0; i < 6; i++)
		{
			user[target][j2Vehiculos][i] = 0;
		}
		characterSave(target);
		unloadEmulatedPlayer();*/
		format(string, 128, "[Administración]{FFFFFF} %s activó el cambio de nombre de %s.", nombre_pj(playerid), nombre);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s activó el cambio de nombre de %s.", nombre_pj(playerid), nombre);
		Log("Registros/CambiosNombres.log", string);
	} else _Mensaje(playerid, 0, "179", "Ese personaje no existe.");
	return 1;
}

GCMD:muebles(playerid)
{
	if (user[playerid][jVirtualWorld] == 0) return _Mensaje(playerid, 0, "580", "No estás en ningún interior.");
    for (new n_id = 0; n_id < MAX_NEGOCIOS; n_id++) //negocios
	{
		if (user[playerid][jVirtualWorld] == n_id + 300)
		{
			if (user[playerid][jNegocioKey] != n_id && user[playerid][jNegocioKey2] != n_id && user[playerid][jNegocioLlaves] != n_id) return _Mensaje(playerid, 0, "580", "No tienes las llaves de este negocio.");

			user_Mueble(playerid, 1);
			DentroNegocio[playerid] = n_id;
		}
	}
    for (new c_id = 0; c_id < MAX_CASAS; c_id++) //casas
	{
		if (user[playerid][jVirtualWorld] == c_id + 6000)
		{
			if (user[playerid][jCasaKey] != c_id && user[playerid][jCasaKey2] != c_id && user[playerid][jCasaLlaves] != c_id && user[playerid][j2CasaLlaves] != c_id) return _Mensaje(playerid, 0, "580", "No tienes las llaves de esta casa.");

			user_Mueble(playerid, 2);
			DentroCasa[playerid] = c_id;
		}
	}
    for (new g_id = 0; g_id < MAX_GARAJES; g_id++) //garajes dañado
	{
		if (user[playerid][jVirtualWorld] == g_id + 100)
		{
		    if(strcmp(nombre_sin(playerid), i_Casa[i_Garaje[DentroGarage[playerid]][gIDCasa]][cComprador])) return _Mensaje(playerid, 0, "580", "No tienes las llaves de este garaje.");

			user_Mueble(playerid, 3);
		}
	}
	for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++) //empresas
	{
		if (user[playerid][jVirtualWorld] == e_id + 666)
		{
			if (user[playerid][jEmpresaKey] != e_id && user[playerid][jEmpresaLlaves] != e_id) return _Mensaje(playerid, 0, "580", "No tienes las llaves de esta empresa.");

			user_Mueble(playerid, 4);
			DentroEmpresa[playerid] = e_id;
		}
	}
	return 1;
}

//comandos de empresas

GCMD:serviciotaxi(playerid)
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 3) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa de transportes.");
	if (!EnServicioTaxi[playerid])
	{
	    // entra en servicio
	}
	else
	{
	    // sale de servicio
	}
	return 1;
}

GCMD:ecoches(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	new string[256], dialog[1024], e_id = user[playerid][jEmpresaKey];
	if (e_id == -1) return _Mensaje(playerid, 0, "647", "No tienes ninguna empresa.");
	for(new i = 0; i < 10; i++)
	{
  		if(InfoVehEmp[e_id][i][vID] == 0) { format(string, sizeof(string), "\n{b0b0b0}Ranura vacía"); }
		else {
			format(string, sizeof(string), "\n{ffffff}Modelo: %s - Matricula: {F8D48C}LS-%d", nombre_vehiculo[InfoVehEmp[e_id][i][vModelo] - 400], InfoVehEmp[e_id][i][vID]);
		}
		strcat(dialog, string);
	}
	ExPlayerDialog(playerid, D_empresa_O4, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, "Seleccionar", "Cancelar");
	return 1;
}

GCMD:editare(playerid,  const params[])
{
	new e_id, string[256], input;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editare [nombre] [empresa] [codigo]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}exterior - precio - dinero - interior.");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, e_id)) return _Mensaje(playerid, 3, "0", "/editarn exterior [empresa]");
		if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		GetPlayerPos(playerid, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
		_EmpresaP(e_id);
		Mensaje_(playerid, -1, "Editaste el exterior de la empresa.");
		format(string, sizeof(string), "Registros: %s ha cambiado el exterior de la empresa ID %d.", nombre_pj(playerid), e_id);
		Log("Registros/Empresas.log", string);
	}
	else if (!strcmp(params, "precio", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, e_id, input)) return _Mensaje(playerid, 3, "0", "/editarn precio [empresa] [monto]");
		if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		i_Empresa[e_id][ePrecio] = input;
		save_Empresa(e_id);
		Mensaje_(playerid, -1, "Editaste el precio de la empresa.");
		format(string, sizeof(string), "Registros: %s ha puesto el empresa ID %d precio $%d.", nombre_pj(playerid), e_id, input);
		Log("Registros/Empresas.log", string);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, e_id)) return _Mensaje(playerid, 3, "0", "/editarn interior [empresa]");
		if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		GetPlayerPos(playerid, i_Empresa[e_id][eInteriorX], i_Empresa[e_id][eInteriorY], i_Empresa[e_id][eInteriorZ]);
		GetPlayerFacingAngle(playerid, i_Empresa[e_id][eInteriorR]);
		i_Empresa[e_id][eInterior] = GetPlayerInterior(playerid);
		_EmpresaP(e_id);
		Mensaje_(playerid, -1, "Editaste el interior de la empresa.");
		format(string, sizeof(string), "Registros: %s ha cambiado el exterior de la empresa ID %d.", nombre_pj(playerid), e_id);
		Log("Registros/Empresas.log", string);
	}
	else if (!strcmp(params, "dinero", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, e_id, input)) return _Mensaje(playerid, 3, "0", "/editarn dinero [empresa] [monto]");
		if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "Id empresa invalida.");
		i_Empresa[e_id][eDinero] = input;
		_EmpresaP(e_id);
		Mensaje_(playerid, -1, "Editaste el dinero de la empresa.");
		format(string, sizeof(string), "Registros: %s ha cambiado el dinero ($%d) de la empresa ID %d.", nombre_pj(playerid), input, e_id);
		Log("Registros/Empresas.log", string);
	}
	save_Empresa(e_id);
	return 1;
}

GCMD:empresa(playerid) return cmd_miempresa(playerid);
GCMD:miempresa(playerid)
{
	new tDialogo[300];
	if(user[playerid][jEmpresaKey] == -1 && user[playerid][jEmpresaLlaves] == -1) return _Mensaje(playerid, 0, "580", "No tienes ninguna empresa o llaves de una.");
	new e_id = user[playerid][jEmpresaKey], e_id2 = user[playerid][jEmpresaLlaves];
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jEmpresaKey] + 666)
	{
		format(tDialogo, sizeof(tDialogo), "{ffffff}Nombre: {0095B5}%s{ffffff}\nDinero: {00C200}$%d{ffffff}\nTeléfono: {0095B5}%d\nMuebles", i_Empresa[e_id][eNombre], i_Empresa[e_id][eDinero], i_Empresa[e_id][eTelefono]);
		ExPlayerDialog(playerid, D_empresa_O, DIALOG_STYLE_LIST, "{D6E1EB}Menú de empresa", tDialogo, "Seleccionar", "Cancelar");
		DentroEmpresa[playerid] = e_id;
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jEmpresaLlaves] + 666)
	{
		format(tDialogo, sizeof(tDialogo), "{ffffff}Nombre: {0095B5}%s{ffffff}\nDinero: {00C200}$%d{ffffff}\nTeléfono: {0095B5}%d\nMuebles", i_Empresa[e_id2][eNombre], i_Empresa[e_id2][eDinero], i_Empresa[e_id][eTelefono]);
		ExPlayerDialog(playerid, D_empresa_O, DIALOG_STYLE_LIST, "{D6E1EB}Menú de empresa", tDialogo, "Seleccionar", "Cancelar");
		DentroEmpresa[playerid] = e_id2;
	} else _Mensaje(playerid, 0, "580", "No estás en ninguna empresa.");
	return 1;
}

GCMD:colorcoche(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");
	if (!en_pos(playerid, 100.0, 1881.0397, -2196.4153, 12.5398) || (GetPlayerVirtualWorld(playerid) < 665)) return _Mensaje(playerid, 4, "b0b0b0", "No te encuentras dentro del taller.");
	new playerid2, color[2];
	if (sscanf(params, "iii", playerid2, color[0], color[1])) { return _Mensaje(playerid, 3, "0", "/colorcoche [id jugador] [color 1] [color 2]."); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (m_operacion[playerid2][3] != -1) return _Mensaje(playerid, 0, "130", "Ese jugador ya está en otra operación.");
	if (!(0 <= color[0] <= 255 && 0 <= color[1] <= 255)) { return _Mensaje(playerid, 0, "359", "Color inválido, elige entre 0 al 255"); }
	new iVeh = GetPlayerVehicleID(playerid2), Str[256];

	m_operacion[playerid2][0] = 3;
	m_operacion[playerid2][1] = iVeh;
	m_operacion[playerid2][2] = e_id;
	m_operacion[playerid2][3] = playerid;
	m_operacion[playerid2][4] = color[0];
	m_operacion[playerid2][5] = color[1];
	Formato(Str, "Mecánico te ofrece color %d/%d ($32). Escribe '/aceptar' para proceder con la operación.", color[0], color[1]);
	_Mensaje(playerid2, 5, "0", Str);
	return 1;
}

GCMD:paintcoche(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");
	if (!en_pos(playerid, 100.0, 1881.0397, -2196.4153, 12.5398) || (GetPlayerVirtualWorld(playerid) < 665)) return _Mensaje(playerid, 4, "b0b0b0", "No te encuentras dentro del taller.");
	new playerid2, color;
	if (sscanf(params, "ii", playerid2, color)) { return _Mensaje(playerid, 3, "0", "/paintcoche [id jugador] [paint 0/2]."); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (m_operacion[playerid2][3] != -1) return _Mensaje(playerid, 0, "130", "Ese jugador ya está en otra operación.");
	if (!(0 <= color <= 3)) { return _Mensaje(playerid, 0, "361", "Pintura debe ser del ID 0 al 3."); }
	new iVeh = GetPlayerVehicleID(playerid2), Str[256];

	m_operacion[playerid2][0] = 2;
	m_operacion[playerid2][1] = iVeh;
	m_operacion[playerid2][2] = e_id;
	m_operacion[playerid2][3] = playerid;
	m_operacion[playerid2][4] = color;
	Formato(Str, "Mecánico te ofrece paintjob %d ($35). Escribe '/aceptar' para proceder con la operación.", color);
	_Mensaje(playerid2, 5, "0", Str);
	return 1;
}

GCMD:reparar(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");

	new playerid2, string[128];
	if (sscanf(params, "i", playerid2)) { return _Mensaje(playerid, 3, "0", "/reparar [id jugador]."); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (m_operacion[playerid2][3] != -1) return _Mensaje(playerid, 0, "130", "Ese jugador ya está en otra operación.");
	new iVeh = GetPlayerVehicleID(playerid2);

	new Float: cvida;
	GetVehicleHealth(iVeh, cvida);
	new pagar, Percent_damage = floatround(cvida);
	if (Percent_damage >= 1000) return _Mensaje(playerid, 0, "0", "DL (HP del vehículo) es mayor a 1000.");
	pagar = (1000-Percent_damage);
	if(ComprobarDineroJ(playerid2) < pagar) { format(string, sizeof(string), "%s no tiene suficiente dinero ($%d).", nombre_pj(playerid2, 0), pagar); _Mensaje(playerid, 0, "0", string); return 1; }

	m_operacion[playerid2][0] = 1;
	m_operacion[playerid2][1] = iVeh;
	m_operacion[playerid2][2] = e_id;
	m_operacion[playerid2][3] = playerid;
	
	format(string, sizeof(string), "Mecánico te ofrece reparación completa ($%d). Escribe '/aceptar' para proceder con la operación.");
	_Mensaje(playerid2, 5, "0", string);
	_Mensaje(playerid, 5, "0", "Has ofrecido reparación completa.");
	return 1;
}

GCMD:gasolina(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");

	new playerid2;
	if (sscanf(params, "i", playerid2)) { return _Mensaje(playerid, 3, "0", "/gasolina [id jugador]."); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (m_operacion[playerid2][3] != -1) return _Mensaje(playerid, 0, "130", "Ese jugador ya está en otra operación.");
	new iVeh = GetPlayerVehicleID(playerid2);

	m_operacion[playerid2][0] = 6;
	m_operacion[playerid2][1] = iVeh;
	m_operacion[playerid2][2] = e_id;
	m_operacion[playerid2][3] = playerid;
	_Mensaje(playerid2, 5, "0", "Mecánico te ofrece gasolina ($100). Escribe '/aceptar' para proceder con la operación.");
	_Mensaje(playerid, 5, "0", "Has ofrecido gasolina.");
	return 1;
}

GCMD:tuneo(playerid)
{
	if (veh_tune[playerid] == 0) return _Mensaje(playerid, 4, "b0b0b0", "Nadie te ha ofrecido tuneo.");
	Menu_Tuneo(playerid);
	return 1;
}
GCMD:tunear(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");
	if (!en_pos(playerid, 100.0, 1881.0397, -2196.4153, 12.5398) || (GetPlayerVirtualWorld(playerid) < 665)) return _Mensaje(playerid, 4, "b0b0b0", "No te encuentras dentro del taller.");
	new playerid2;
	if (sscanf(params, "i", playerid2)) { return _Mensaje(playerid, 3, "0", "/tunear [id jugador]"); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (id_tune[playerid2] != -1) return _Mensaje(playerid, 0, "130", "Ya le ofreciste o ofrecieron el menú de tuneo.");

	_Mensaje(playerid2, 5, "0", "Mecánico te ofrece menú de tuneo. Escribe '/aceptar' para proceder con la operación.");
	_Mensaje(playerid, 5, "0", "Has ofrecido tunning.");
	id_tune[playerid2] = playerid;
	e_tune[playerid2] = e_id;
	return 1;
}
GCMD:vertuneo(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");
	if (!en_pos(playerid, 100.0, 1881.0397, -2196.4153, 12.5398) || (GetPlayerVirtualWorld(playerid) < 665)) return _Mensaje(playerid, 4, "b0b0b0", "No te encuentras dentro del taller.");
	new playerid2;
	if (sscanf(params, "i", playerid2)) { return _Mensaje(playerid, 3, "0", "/vertuneo [id jugador]"); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!IsPlayerInAnyVehicle(playerid2)) { return _Mensaje(playerid, 0, "130", "Ese jugador no está en ningún vehículo."); }
	if (id_tune[playerid2] == -1) return _Mensaje(playerid, 0, "130", "Ese jugador no le han ofrecido tuneo.");
	new Str2[256], i_ = 0;
	for (new i = 0; i < 11; i++) { if (pieza_tune[playerid2][i] > 0) { i_++; } }
	Formato(Str2, "Piezas actuales ({33CCFF}%d{ffffff}), Total a pagar: {00c200}%d$", i_, pago_tune[playerid2]);
	Mensaje_(playerid, 0xffffffff, Str2);
	return 1;
}

GCMD:precios(playerid,  const params[])
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 2) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa mecánica.");
	new playerid2;
	if (sscanf(params, "i", playerid2)) { return _Mensaje(playerid, 3, "0", "/precios [id jugador]"); }
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	Mensaje_(playerid2, 0xffffffff, "Gasolina: {00c200}100${ffffff} - Pintura: {00c200}32$");
	Mensaje_(playerid, 0xffffffff, "Ya le mostraste los precios, espera repuesta.");
	return 1;
}

GCMD:eseguro(playerid)
{
	new e_id = user[playerid][jEmpresaKey], e_id2 = user[playerid][jContrato];
    if (e_id != -1 && (en_pos(playerid, 3.0, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]) || en_pos(playerid, 3.0, i_Empresa[e_id][eInteriorX], i_Empresa[e_id][eInteriorY], i_Empresa[e_id][eInteriorZ])))
	{
		if (!i_Empresa[e_id][eSeguro])
		{
            i_Empresa[e_id][eSeguro] = 1;
            accion_rol(playerid, 0, "saca sus llaves de empresa y la abre.");
            textgame_player(playerid, "~g~Empresa abierta", 3500, 1);
        }
		else if (i_Empresa[e_id][eSeguro])
		{
            i_Empresa[e_id][eSeguro] = 0;
            accion_rol(playerid, 0, "saca sus llaves de empresa y la cierra.");
            textgame_player(playerid, "~r~Empresa Cerrada", 3500, 1);
        }
        save_Empresa(e_id);
    } else if (e_id2 != -1 && (en_pos(playerid, 3.0, i_Empresa[e_id2][eExteriorX], i_Empresa[e_id2][eExteriorY], i_Empresa[e_id2][eExteriorZ]) || en_pos(playerid, 3.0, i_Empresa[e_id2][eInteriorX], i_Empresa[e_id2][eInteriorY], i_Empresa[e_id2][eInteriorZ]))) {
        if (!i_Empresa[e_id2][eSeguro])
		{
            i_Empresa[e_id2][eSeguro] = 1;
            accion_rol(playerid, 0, "saca sus llaves de empresa y la abre.");
            textgame_player(playerid, "~g~Empresa abierta", 3500, 1);
        }
		else if (i_Empresa[e_id2][eSeguro])
		{
            i_Empresa[e_id2][eSeguro] = 0;
            accion_rol(playerid, 0, "saca sus llaves de empresa y la cierra.");
            textgame_player(playerid, "~r~Empresa Cerrada", 3500, 1);
        }
        save_Empresa(e_id2);
    } else _Mensaje(playerid, 0, "560", "No tienes una empresa o no estás cerca de la puerta para hacer esto.");
    return 1;
}

GCMD:mercancia(playerid)
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa de repartos.");
	if (r_negocio[playerid] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No te encuentras en ningún pedido, usa /repartos o /repartosbot.");
	if (r_vehiculo[playerid] == 0) return _Mensaje(playerid, 4, "b0b0b0", "No has cargado ningún vehículo con mercancía.");
	if (r_vehiculo[playerid] != GetPVarInt(playerid, "veh_bajo")) return _Mensaje(playerid, 4, "b0b0b0", "No bajaste del vehículo que cargaste la mercancía, búscalo.");
	new n_id = r_negocio[playerid];
	if (!en_pos(playerid, 3.0, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ])) return _Mensaje(playerid, 4, "b0b0b0", "No estás en la puerta del negocio.");
	if(tipo_reparto[playerid] == 0)
	{
		i_Negocio[n_id][nProductos] += 1005;
		i_Negocio[n_id][nPedido]--;
		i_Empresa[e_id][eDinero] += floatround(dinero_productos(n_id)*0.7);
		DarDineroGC(playerid, floatround(dinero_productos(n_id)*0.3));
	}
	else
	{
		i_Empresa[e_id][eDinero] += floatround(dinero_productos(n_id)*0.7)/2;
		DarDineroGC(playerid, floatround(dinero_productos(n_id)*0.3)/2);
		user[playerid][jTiempos][9]++;
	}
	_Mensaje(playerid, 4, "84C000", "Recibiste el 30 por ciento del dinero, el resto fue a la empresa.");
	save_Negocio(r_negocio[playerid]);
	save_Empresa(e_id);
	i_Negocio[r_negocio[playerid]][EnPedido] = 0;
	r_negocio[playerid] = -1;
	r_vehiculo[playerid] = 0;
	tipo_reparto[playerid] = 0;
	return 1;
}

GCMD:repartosbot(playerid)
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa de repartos.");
	if (user[playerid][jTiempos][9] == 8) return _Mensaje(playerid, 0, "0", "Ya has realizado 8 entregas, espera el próximo pago diario.");
	if (!en_pos(playerid, 3.0, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ])) return _Mensaje(playerid, 4, "b0b0b0", "No estás cerca del punto de la empresa.");
	new i = -1;

	for (new xd = 0; xd < MAX_NEGOCIOS; xd++)
	{
		if (i_Negocio[xd][nTipo] != 0)
		{
			if (i_Negocio[xd][EnPedido] != 1)
			{
				i = xd;
			}
		}
	}
	if(i == -1) return _Mensaje(playerid, 4, "b0b0b0", "Pedidos en espera, intenta más tarde o escribe de nuevo /repartosbot.");
	TogglePlayerAllDynamicCPs(playerid, false);
	new cajas = random(3);
	switch(cajas)
	{
		case 0: set_checkpoint(playerid, -114.8255, -330.7507, 0.9912, 12);
		case 1: set_checkpoint(playerid, -183.9354, -277.5449, 1.0257, 12);
		case 2: set_checkpoint(playerid, 65.1676, -273.5888, 1.1238, 12);
	}
	SetPVarInt(playerid, "EnCheckPoint", 3);
	_Mensaje(playerid, 4, "A7CE00", "Busca la mercancía que debes llevar al negocio, se marcó en el radar la ubicación.");
	_Mensaje(playerid, 4, "A7CE00", "Recuerda ir en un vehículo con espacio, ten cuidado con chocarlo podrían despedirte.");
	r_negocio[playerid] = i;
	i_Negocio[i][EnPedido] = 1;
	tipo_reparto[playerid] = 1;
	return 1;
}

GCMD:repartos(playerid)
{
	new e_id = user[playerid][jContrato];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa.");
	if (i_Empresa[e_id][eTipo] != 1) return _Mensaje(playerid, 4, "b0b0b0", "No trabajas en ninguna empresa de repartos.");
	if (!en_pos(playerid, 3.0, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ])) return _Mensaje(playerid, 4, "b0b0b0", "No estás cerca del punto de la empresa.");
	new Str[256], Str_[3000], i_ = 0;
	for (new i = 0; i < MAX_NEGOCIOS; i++)
	{
		if (i_Negocio[i][nPedido] > 0)
		{
			Formato(Str, "» {FFEA5F}(%s)\n", i_Negocio[i][nNombre]);
			strcat(Str_, Str);
			Formato(Str, "GPS_Puto_%d", i_);
			SetPVarInt(playerid, Str, i);
			i_++;
		}
	}
	if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Repartos", "No hay negocios con solicitud de productos.", "Cerrar", "");
	ExPlayerDialog(playerid, D_Repartos, DIALOG_STYLE_LIST, "{D6E1EB}Repartir productos", Str_, "Seleccionar", "Cancelar");
	return 1;
}

GCMD:quitarempresa(playerid,  const params[])
{
	new string[256];
	if (!sscanf(params, "d", params[0]))
	{
		if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid][jAdmin] >= 10)
		{
            user[params[0]][jEmpresaKey] = INVALID_NEGOCIO_ID;
            format(string, 128, "[Administración]{FFFFFF} %s utilizó /quitarempresa, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
            MensajeAdmin(string);
        } else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
    } else _Mensaje(playerid, 3, "0", "/quitarempresa [id jugador]");
    return 1;
}

GCMD:irempresa(playerid,  const params[])
{
	new e_id, string[128];
    if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", e_id)) return _Mensaje(playerid, 3, "0", "/irempresa [id empresa]");
    if (e_id < 0 || e_id >= MAX_EMPRESAS) return _Mensaje(playerid, 0, "453", "ID de empresa errónea.");
    if (!i_Empresa[e_id][eTipo]) return _Mensaje(playerid, 0, "548", "ID empresa inválida.");
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPos(playerid, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
    format(string, sizeof(string), " Usted se teletransporto a la empresa ID %d.", e_id);
    _Mensaje(playerid, 4, "ffffff", string);
    return 1;
}

GCMD:venderempresa(playerid)
{
	new string[128], e_id = user[playerid][jEmpresaKey];
	if (e_id == -1) return _Mensaje(playerid, 0, "736", "No tienes ninguna empresa.");

	if (en_pos(playerid, 3.0, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]))
	{
		if (e_id != -1 && strcmp(nombre_sin(playerid), i_Empresa[e_id][eDueno], true) == 0)
		{
			new precio = i_Empresa[e_id][ePrecio];
			Ganancia(playerid, precio);
			format(string, sizeof(string), "Vendiste tu empresa. Recuperaste %d$", precio);
			Mensaje_(playerid, -1, string);
			i_Empresa[e_id][eSeguro] = 1;
			i_Empresa[e_id][eComprado] = 0;
			i_Empresa[e_id][e_patente] = e_id+Random(-400000, 999999);
			i_Empresa[e_id][eSeguro] = 0;
			format(i_Empresa[e_id][eDueno], 32, "enventa");
			_EmpresaP(e_id);
			save_Empresa(e_id);

			user[playerid][jEmpresaKey] = -1;
		} else _Mensaje(playerid, 0, "737", "Esta empresa no está a tu nombre.");
	} else _Mensaje(playerid, 0, "738", "Debes estar cerca de tu empresa para venderla.");
	return 1;
}

GCMD:comprarempresa(playerid)
{
	new string[128];
	if (user[playerid][j_Mascara] == 1) return _Mensaje(playerid, 0, "0", "No puedes comprar una propiedad con /mascara.");
	for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
	{
		if (en_pos(playerid, 2.0, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]))
		{
			if (i_Empresa[e_id][eComprado] == 1) return _Mensaje(playerid, 0, "553", "Esta empresa ya tiene dueño.");
			if (user[playerid][jEmpresaKey] != -1) return _Mensaje(playerid, 0, "553", "Ya posees una empresa.");
			if (ComprobarDineroJ(playerid) >= i_Empresa[e_id][ePrecio])
			{
				DarDineroGC(playerid, -i_Empresa[e_id][ePrecio]);
				d_estado += i_Empresa[e_id][ePrecio];
				user[playerid][jEmpresaKey] = e_id;
				i_Empresa[e_id][eComprado] = 1;
				i_Empresa[e_id][e_patente] = e_id+Random(-400000, 999999);
				strmid(i_Empresa[e_id][eDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
				_EmpresaP(e_id);
				_Mensaje(playerid, 4, "b0b0b0", "¡Felicitaciones!, has comprado esta empresa.");
				format(string, sizeof(string), "Registros: %s ha comprado la empresa id %d.", nombre_pj(playerid), e_id);
				Log("Registros/Empresas.log", string);
				new randphone = 913 + random(9080);
				i_Empresa[e_id][eTelefono] = randphone;
				save_Empresa(e_id);
				characterSave(playerid);
				return 1;
			} else _Mensaje(playerid, 0, "555", "No tienes fondos suficientes para comprarte este negocio.");
		}
	}
	return 1;
}

GCMD:comprarcoches(playerid)
{
	if (user[playerid][jEmpresaKey] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No eres dueño de ninguna empresa.");
	new e_id = user[playerid][jEmpresaKey];
	if (i_Empresa[e_id][eTipo] == 1)
	{
		ExPlayerDialog(playerid, D_VehEmpresa, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "\n\
		{ffffff}Bobcat - {A7CE00}9,500$\n\
		{ffffff}Securicar - {A7CE00}11,300$\n\
		{ffffff}Rumpo - {A7CE00}8,200$\n\
		{ffffff}Sanchez - {A7CE00}8,700$\n\
		{ffffff}Burrito - {A7CE00}18,000$\n\
		{ffffff}Boxville - {A7CE00}22,400$\n\
		{ffffff}Benson - {A7CE00}16,700$\n\
		{ffffff}Towtruck - {A7CE00}20,000$", "Seleccionar", "Cancelar");
	}
	else if (i_Empresa[e_id][eTipo] == 2)
	{
		ExPlayerDialog(playerid, D_VehEmpresa, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "\n\
		{ffffff}Utility Van - {A7CE00}18,500$\n\
		{ffffff}Towtruck - {A7CE00}20,000$\n\
		{ffffff}Sanchez - {A7CE00}8,700$\n\
		{ffffff}Premier - {A7CE00}20,000$", "Seleccionar", "Cancelar");
	}
	else if (i_Empresa[e_id][eTipo] == 3)
	{
		ExPlayerDialog(playerid, D_VehEmpresa, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", "\n\
		{ffffff}Cabbie - {A7CE00}17,000$\n\
		{ffffff}Taxi - {A7CE00}20,000$\n\
		{ffffff}Bus - {A7CE00}58,600$\n\
		{ffffff}Club - {A7CE00}12,000$", "Seleccionar", "Cancelar");
	}
	return 1;
}

GCMD:darempleo(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jEmpresaKey] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No eres dueño de ninguna empresa.");
	if (i_Empresa[user[playerid][jEmpresaKey]][eMiembros] >= MAX_MEMBERS-1) return _Mensaje(playerid, 4, "b0b0b0", "Ya alcanzaste el máximo de empleados en tu empresa.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/darempleo [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "367", "Jugador desconectado.");
	if (user[params[0]][jContrato] != -1) return _Mensaje(playerid, 0, "367", "Ese jugador ya posee un contrato con una empresa.");
	if (TomandoTrabajo[params[0]] != -1) return _Mensaje(playerid, 0, "368", "Este jugador está en otra tarea, espera.");

	NumeroEmpresa[params[0]] = user[playerid][jEmpresaKey];
	TomandoTrabajo[params[0]] = playerid;
	format(string, sizeof(string), "\n{b0b0b0}{FFFFFF} %s te ofreció empleo en {b0b0b0}'%s'\n\n{b0b0b0}{FFFFFF} ¿Aceptas la propuesta?", nombre_pj(playerid, 0), i_Empresa[user[playerid][jEmpresaKey]][eNombre]);
	ExPlayerDialog(params[0], D_Iempresa, DIALOG_STYLE_MSGBOX, "{D6E1EB}Contrato", string, "Aceptar", "Rechazar");
	format(string, sizeof(string), "* Ofreciste empleo a %s en tu empresa, espera la respuesta de él.", nombre_pj(params[0], 0));
	_Mensaje(playerid, 4, "33CCFF", string);

	return 1;
}

GCMD:infoempresa(playerid)
{
	if (user[playerid][jEmpresaKey] == -1) return _Mensaje(playerid, 0, "367", "No eres dueño de ninguna empresa.");
	new pathpro[60];
	format(pathpro, sizeof(pathpro), "Empresas/iEmpresa_%d.pro",  user[playerid][jEmpresaKey]);
	if(!fexist(pathpro)) return _Mensaje(playerid, 0, "367", "No se encontró el archivo de información de la empresa, tienes que tener almenos un miembro.");
	new string[35], idusuarios = 0, nombre[25], horasjugadas, asco[55], dialogo[45*MAX_MEMBERS] = "Nombre\tHoras\tEstado\n", andaconectado;
	new File:llavesita = fopen(pathpro ,io_read);
	while(fread(llavesita, string))
	{
		strdel(string, strlen(string)-4, strlen(string));
        if (sscanf(string, "s[25]d", nombre, horasjugadas))
        {
			format(asco,sizeof(asco),"miembroinfo%d",idusuarios);
			SetPVarString(playerid,asco,string);
			idusuarios++;
			sscanf(nombre, "u", andaconectado);
			if (IsPlayerConnected(andaconectado))
			{
				format(asco, sizeof(asco), "%s\t%d\t{00c200}Conectado\n", nombre, user[andaconectado][jHorasE]);
			}
			else
			{
				format(asco, sizeof(asco), "%s\t%d\t{b00000}Desconectado\n", nombre, horasjugadas);
			}
			strcat(dialogo, asco);
		}
	}
	if(idusuarios == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Información de la empresa", "No se encontaron miembros", "Salir", "");
	else ExPlayerDialog(playerid, DIALOGO_EMPRESA, DIALOG_STYLE_TABLIST_HEADERS, "Información de la empresa", dialogo, "Opciones", "Salir");
	fclose(llavesita);
	return 1;
}

GCMD:salirempleo(playerid)
{
	new string[158];
	if (user[playerid][jContrato] == -1) return _Mensaje(playerid, 4, "b0b0b0", "No eres empleado de ninguna empresa.");
	foreach(new i: Player) if (IsPlayerConnected(i))
		if (user[i][jEmpresaKey] == user[playerid][jContrato])
		{
			format(string, sizeof(string), "* Pidió su renuncia hace poco de tu empresa.", nombre_pj(playerid, 0));
			_Mensaje(i, 4, "33CCFF", string);
		}

	i_Empresa[user[playerid][jContrato]][eMiembros]--;
	format(string, sizeof(string), "* Ahora ya no trabajas para la empresa '%s'.", i_Empresa[user[playerid][jContrato]][eNombre]);
	_Mensaje(playerid, 4, "b0b0b0", string);

	new linea = 0, siono = -1, string2[60];
	format(string2, sizeof(string2), "Empresas/iEmpresa_%d.pro", user[playerid][jContrato]);
	new File:llavesita = fopen(string2 ,io_read);
	if(llavesita)
	{
		while(fread(llavesita, string))
		{
			linea++;
			if(strfind(string, nombre_pj(playerid), true) != -1)
			{
				siono = linea;
				break;
			}
		}
		if(siono != -1) fdeleteline(string2, siono);
	}
	fclose(llavesita);

	user[playerid][jContrato] = -1;
	user[playerid][jHorasE] = 0;
	return 1;
}

fdeleteline(const filename[], line)
{
	new count, string[256], File:file, File:temp;
	file= fopen(filename, io_read);
	temp = fopen("tmpfile.tmp", io_write);
	while (fread(file, string)){
		if (++count != line)
			fwrite(temp, string);
	}	
	fclose(file);
	fclose(temp);
	file= fopen(filename, io_write);
	temp = fopen("tmpfile.tmp", io_read);
	while (fread(temp, string)){
		fwrite(file, string);
	}
	fclose(file);
	fclose(temp);
	fremove("tmpfile.tmp");
}

GCMD:crearempresa(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "iii", params[0], params[1], params[2]))
	{
		_Mensaje(playerid, 3, "0", "/crearempresa [tipo] [precio] [espacio]");
		_Mensaje(playerid, 1, "0", "Tipos: 1) Reparto | 2) Mecánica | 3) Transportes");
		return 1;
	}
	new tipo = params[0], precio = params[1], espacio = params[2];
	if (tipo < 1 || tipo > 3) return _Mensaje(playerid, 4, "b0b0b0", "Las empresas están entre 1 - 3.");
	if (espacio < 1 || espacio > 3) return _Mensaje(playerid, 4, "b0b0b0", "Las mecánica están entre 1 - 3.");
	for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
	{
		if (!i_Empresa[e_id][eTipo])
		{
			new randphone = 913 + random(9080);
			i_Empresa[e_id][eTipo] = tipo;
			i_Empresa[e_id][eSeguro] = 0;
			i_Empresa[e_id][ePrecio] = precio;
			format(i_Empresa[e_id][eDueno], 32, "enventa");
			i_Empresa[e_id][eComprado] = 0;
			i_Empresa[e_id][eTelefono] = randphone;

			if (tipo == 1) // reparto
			{
				GetPlayerPos(playerid, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
				GetPlayerFacingAngle(playerid, i_Empresa[e_id][eExteriorR]);

				i_Empresa[e_id][eInteriorX] = 1033.6868;
				i_Empresa[e_id][eInteriorY] = 1204.3094;
				i_Empresa[e_id][eInteriorZ] = 10.8488;
				i_Empresa[e_id][eInteriorR] = 357.1075;
				i_Empresa[e_id][eInterior] = 15;
				format(i_Empresa[e_id][eNombre], 32, "Empresa de reparto");
			}
			else if (tipo == 2) // mecánica
			{
				GetPlayerPos(playerid, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
				GetPlayerFacingAngle(playerid, i_Empresa[e_id][eExteriorR]);
				GetPosInFrontOfPlayer(playerid, i_Empresa[e_id][eExteriorX_V], i_Empresa[e_id][eExteriorY_V], 2);

				format(i_Empresa[e_id][eNombre], 32, "Taller mecánico");
				if (espacio == 1) //
				{
				    i_Empresa[e_id][eEspacio] = 1;
					i_Empresa[e_id][eInterior] = 22;
					i_Empresa[e_id][eInteriorX] = 1874.7659;
					i_Empresa[e_id][eInteriorY] = -2203.8647;
					i_Empresa[e_id][eInteriorZ] = 13.2516;
					i_Empresa[e_id][eInteriorR] = 0.6926;
				}
				else if (espacio == 2) //
				{
				    i_Empresa[e_id][eEspacio] = 2;
					i_Empresa[e_id][eInterior] = 21;
					i_Empresa[e_id][eInteriorX] = 1893.3794;
					i_Empresa[e_id][eInteriorY] = -2203.5474;
					i_Empresa[e_id][eInteriorZ] = 13.2516;
					i_Empresa[e_id][eInteriorR] = 357.4664;
				}
				else if (espacio == 3) //
				{
				    i_Empresa[e_id][eEspacio] = 3;
					i_Empresa[e_id][eInterior] = 20;
					i_Empresa[e_id][eInteriorX] = 1879.5406;
					i_Empresa[e_id][eInteriorY] = -2216.0437;
					i_Empresa[e_id][eInteriorZ] = 13.2514;
					i_Empresa[e_id][eInteriorR] = 4.1174;
				}
            }
            else if (tipo == 3)
            {
				GetPlayerPos(playerid, i_Empresa[e_id][eExteriorX], i_Empresa[e_id][eExteriorY], i_Empresa[e_id][eExteriorZ]);
				GetPlayerFacingAngle(playerid, i_Empresa[e_id][eExteriorR]);
				GetPosInFrontOfPlayer(playerid, i_Empresa[e_id][eExteriorX_V], i_Empresa[e_id][eExteriorY_V], 2);
				i_Empresa[e_id][eInteriorX] = 1033.6868;
				i_Empresa[e_id][eInteriorY] = 1204.3094;
				i_Empresa[e_id][eInteriorZ] = 10.8488;
				i_Empresa[e_id][eInteriorR] = 357.1075;
				i_Empresa[e_id][eInterior] = 15;
				format(i_Empresa[e_id][eNombre], 32, "Transportes");
            }
            _EmpresaP(e_id);
            format(string, sizeof(string), "Registros: %s ha creado la empresa ID %d.", nombre_pj(playerid), e_id);
            Log("Registros/Empresas.log", string);
            save_Empresa(e_id);
            e_id = MAX_EMPRESAS;
        }
    }
    return 1;
}

GCMD:borrarempresa(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/borrarempresa [id empresa]");
	new id = params[0];
	if (!i_Empresa[id][eTipo]) return _Mensaje(playerid, 0, "548", "ID empresa inválida.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jEmpresaKey] == id)
			{
				user[i][jEmpresaKey] = -1;
				format(string, sizeof(string), "* %s ha borrado tu empresa (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b0b0b0", string);
			}
		}
	}
	format(i_Empresa[id][eNombre], 32, "nada");
	format(i_Empresa[id][eDueno], 32, "enventa");
	i_Empresa[id][eTipo] = 0;
	i_Empresa[id][eSeguro] = 0;
	i_Empresa[id][eComprado] = 0;
	i_Empresa[id][eTelefono] = 0;
	i_Empresa[id][eExteriorX] = 0.0;
	i_Empresa[id][eExteriorY] = 0.0;
	i_Empresa[id][eExteriorZ] = 0.0;
	i_Empresa[id][eExteriorR] = 0.0;
	i_Empresa[id][eExteriorX_V] = 0.0;
	i_Empresa[id][eExteriorY_V] = 0.0;
	i_Empresa[id][eInteriorX] = 0.0;
	i_Empresa[id][eInteriorY] = 0.0;
	i_Empresa[id][eInteriorZ] = 0.0;
	i_Empresa[id][eInteriorR] = 0.0;
	i_Empresa[id][eDinero] = 0;
	i_Empresa[id][ePrecio] = 0;
	i_Empresa[id][eInterior] = 0;
	i_Empresa[id][eMiembros] = 0;
	i_Empresa[id][e_patente] = 0;
	DestroyDynamicPickup(i_Empresa[id][eIcono]);
	_Empresa2P(id);

	new elban[128];
	format(elban, 128, DATOS_EMPRESAS, id);
	fremove(elban);

	return 1;
}

GCMD:expulsarfaccion(playerid, const params[])
{
	if (user[playerid][jLider] != 1) return _Mensaje(playerid, 4, "b0b0b0", "No eres líder de la PD.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/expulsarfaccion [Nombre_Apellido]");
	new nomExFacc[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", nomExFacc);
	yield 1;
	if (characterCheck(nomExFacc))
	{
		new string[128];
		new ORM:ex_fac = orm_create("characters");
		orm_addvar_string(ex_fac, nomExFacc, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(ex_fac, "NombrePJ");
		static val_ZERO = 0;
		new
			exMiembro
		;
		orm_addvar_int(ex_fac, exMiembro, "Miembro");
		yield 1;
		if((task_await(orm_async_select(ex_fac))) != _:ERROR_OK){
			_Mensaje(playerid, 4, "b0b0b0", "Ocurrió un error al recuperar los datos del personaje.");
			orm_destroy(ex_fac);
			return 1;
		}
		orm_addvar_int(ex_fac, val_ZERO, "Lider");
		orm_addvar_int(ex_fac, val_ZERO, "Rango");
		for(new i = 0; i < 10; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Bolsillo%d", i);
			orm_addvar_int(ex_fac, val_ZERO, sql);
			format(sql, sizeof(sql), "BolsilloCant%d", i);
			orm_addvar_int(ex_fac, val_ZERO, sql);
		}
		orm_addvar_int(ex_fac, val_ZERO, "Izquierda");
		orm_addvar_int(ex_fac, val_ZERO, "IzquierdaCant");
		orm_addvar_int(ex_fac, val_ZERO, "Derecha");
		orm_addvar_int(ex_fac, val_ZERO, "DerechaCant");
		orm_addvar_int(ex_fac, val_ZERO, "Espalda");
		orm_addvar_int(ex_fac, val_ZERO, "EspaldaCant");
		for(new i = 0; i < 6; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Cinturon%d", i);
			orm_addvar_int(ex_fac, val_ZERO, sql);
			format(sql, sizeof(sql), "CinturonCant%d", i);
			orm_addvar_int(ex_fac, val_ZERO, sql);
		}
		
		if(exMiembro != user[playerid][jMiembro]) return _Mensaje(playerid, 4, "b0b0b0", "Ese jugador no es de tu facción.");
		if((task_await(orm_async_update(ex_fac))) == _:ERROR_OK){
			format(string, sizeof(string), "Líder %s expulsó de la facción a %s. (OFF)", nombre_pj(playerid), nomExFacc);
			mensaje_faccion(user[playerid][jMiembro], C_LIGHTBLUE, string);
		}
		else _Mensaje(playerid, 4, "b0b0b0", "Ocurrió un error al recuperar los datos del personaje.");
		orm_destroy(ex_fac);
	} else _Mensaje(playerid, 4, "b0b0b0", "Ese personaje no existe.");
	return 1;
}

GCMD:transmisionmusica(playerid)
{
    if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
    if (user[playerid][jRango] < 4) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 4.");
	if(SanMusic == 0)
	{
        _MensajeSAN(0x00DC76FF, "[INN] Inicio de transmisión de música por INN MUSIC. ((/sintonizar))");
        SanMusic = 1;
        return 1;
	}
	if(SanMusic == 1)
	{
        _MensajeSAN(0x00DC76FF, "[INN] Termina transmisión de música por INN MUSIC.");
        SanMusic = 0;
        return 1;
	}
	return 1;
}

GCMD:musicacnn(playerid,  const params[])
{
    if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
    if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 2.");
	if(SanMusic == 0) _Mensaje(playerid, 0, "200", "No hay una transmision de música activa. ");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/musicacnn [url .pm3]");
    foreach(new a: Player)
	{
        if(B_SANMUSIC[a] == 1)
        {
            StopAudioStreamForPlayer(a);
            EscucharMusica(a, params);
            if(user[a][j_uAudio] == 0) Mensaje_(a, 0x00DC76FF, "[INN] Sonando actualmente una canción.");
        }
    }
	return 1;
}

GCMD:sintonizar(playerid)
{
    if(user[playerid][j_uAudio] == 1) return Mensaje_(playerid, -1, "Posees los audios deshabilitados, configura con /panel.");
	if(B_SANMUSIC[playerid] == 0)
	{
	    _Mensaje(playerid, 4, "A7CE00", "Sintonizas a la transmisión de música de INN MUSIC.");
	    B_SANMUSIC[playerid] = 1;
	    return 1;
	}
	if(B_SANMUSIC[playerid] == 1)
	{
	    _Mensaje(playerid, 4, "A7CE00", "Dejaste de sintonizar a INN MUSIC.");
   		B_SANMUSIC[playerid] = 0;
   		StopAudioStreamForPlayer(playerid);
   		return 1;
	}
	return 1;
}

GCMD:altavoz(playerid)
{
	if(Altavoz[playerid] == 0)
	{
		Altavoz[playerid] = 1;
		_Mensaje(playerid, 4, "A7CE00", "Altavoz activado.");
	} else {
		Altavoz[playerid] = 0;
		_Mensaje(playerid, 4, "A7CE00", "Altavoz desactivado.");
	}
	return 1;
}

GCMD:robarlocal(playerid)
{
	if (!Es_job(playerid, 2)) return _Mensaje(playerid, 0, "681", "No eres delicuente.");
	if (limitarobo[playerid] == 1) return _Mensaje(playerid, 5, "0", "No puedes usar el comando ahora.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
	if (user[playerid][jHabilidad][3] < 19) return _Mensaje(playerid, 4, "b00000", "Habilidad mínima para este comando (20).");
	if (GetPlayerVirtualWorld(playerid) < 300) return _Mensaje(playerid, 0, "545", "No estás dentro de un negocio.");
	new n_id = GetPlayerVirtualWorld(playerid) - 300;
	if (!en_pos(playerid, 5.0, i_Negocio[n_id][nCompraX], i_Negocio[n_id][nCompraY], i_Negocio[n_id][nCompraZ])) return _Mensaje(playerid, 4, "b00000", "No estás cerca de la caja registradora.");
	if (user[playerid][jTiempos][16] != 0) return decir_eltiempo(playerid, 16);

	if(user[playerid][jDtipo] == 3 && user[playerid][jDpower] == 3)
    {
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~g~dinero...",6000,3);
		SetTimerEx("_robocaja", 5000, false, "iii", playerid, n_id, 2);
	}
	else
	{
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~g~dinero...",11000,3);
		SetTimerEx("_robocaja", 10000, false, "iii", playerid, n_id, 2);
	}

	limitarobo[playerid] = 1;
	ApplyAnimation(playerid, "ped", "gang_gunstand", 4.0, 1, 0, 1, 0, 3000, 1);
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Congelado", 1);
	new location[MAX_ZONE_NAME], string[256];
	Get2DZone(location, MAX_ZONE_NAME, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ]);
	format(string, sizeof(string), "CENTRAL: Informe de robo en el negocio %s en %s. (/robos)", i_Negocio[n_id][nNombre], location);
	_MensajeRfac(1, C_COLORPOLICIA, string);
	format(string, sizeof(string), "[Atención]{FFFFFF} %s está robando el negocio %s [%d].", nombre_pj(playerid), i_Negocio[n_id][nNombre], n_id);
	MensajeAdmin(string);
	i_Negocio[n_id][_robado] = 1;
	new time[3];
	gettime(time[0], time[1], time[2]);
	if(time[0] >= 12) format(i_Negocio[n_id][_robado2], 32, "%02d:%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1], time[2]);
	else if(time[0] < 12) format(i_Negocio[n_id][_robado2], 32, "%02d:%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1], time[2]);
	return 1;
}

GCMD:robarcaja(playerid)
{
	if (!Es_job(playerid, 2)) return _Mensaje(playerid, 0, "681", "No eres delicuente.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
	if (user[playerid][jHabilidad][3] < 29) return _Mensaje(playerid, 4, "b00000", "Habilidad mínima para este comando (30).");
	if (GetPlayerVirtualWorld(playerid) < 300) return _Mensaje(playerid, 0, "545", "No estás dentro de un negocio.");
	new n_id = GetPlayerVirtualWorld(playerid) - 300;
	if (!en_pos(playerid, 5.0, i_Negocio[n_id][nCompraX], i_Negocio[n_id][nCompraY], i_Negocio[n_id][nCompraZ])) return _Mensaje(playerid, 4, "b00000", "No estás cerca de la caja registradora.");
	if (user[playerid][jm_Derecha] != 128 && user[playerid][jm_Izquierda] != 128){ _Mensaje(playerid, 0, "9", "No tienes una palanca en ninguna mano."); return 1;}
	if (user[playerid][jTiempos][16] != 0) return decir_eltiempo(playerid, 16);
    QuitarManos(playerid);

	if(user[playerid][jDtipo] == 3 && user[playerid][jDpower] == 3)
	{
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~g~caja de dinero...", 8000,3);
		SetTimerEx("_robocaja", 7000, false, "iii", playerid, n_id, 1);
	}
	else
	{
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~g~caja de dinero...",16000,3);
		SetTimerEx("_robocaja", 15000, false, "iii", playerid, n_id, 1);
	}

	ApplyAnimation(playerid, "SHOP", "SHP_Gun_Threat", 4.0, 0, 0, 1, 0, 0, 1);
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Congelado", 1);
	new location[MAX_ZONE_NAME], string[256];
	Get2DZone(location, MAX_ZONE_NAME, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ]);
	format(string, sizeof(string), "CENTRAL: Informe de robo en el negocio %s en %s. (/robos)", i_Negocio[n_id][nNombre], location);
	_MensajeRfac(1, C_COLORPOLICIA, string);
	format(string, sizeof(string), "[Atención]{FFFFFF} %s está robando el negocio %s [%d].", nombre_pj(playerid), i_Negocio[n_id][nNombre], n_id);
	MensajeAdmin(string);
	i_Negocio[n_id][_robado] = 1;
	new time[3];
	gettime(time[0], time[1], time[2]);
	if(time[0] >= 12) format(i_Negocio[n_id][_robado2], 32, "%02d:%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1], time[2]);
	else if(time[0] < 12) format(i_Negocio[n_id][_robado2], 32, "%02d:%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1], time[2]);
	return 1;
}

GCMD:rcaja(playerid,  const params[])
{
	new money[32];
	if (sscanf(params, "s[20]", params)) return _Mensaje(playerid, 3, "0", "/rcaja [sacar - guardar]");
	if (user[playerid][jm_Derecha] != 131){ _Mensaje(playerid, 0, "9", "No tienes ninguna caja registradora en manos."); return 1;}
	if (!strcmp(params, "sacar", true, 5))
	{
		if (sscanf(params, "s[20]s[20]", params, money)) return _Mensaje(playerid, 3, "0", "/rcaja [sacar] [monto]");
		if (!IsNumeric(money)) return _Mensaje(playerid, 3, "0", "/rcaja [sacar] [monto]");
		new dinero = strval(money);
		if (dinero > user[playerid][jm_DerechaCant]) return _Mensaje(playerid, 4, "b0b0b0", "No posee ese dinero la caja registradora.");
		DarDineroGC(playerid, dinero);
		user[playerid][jm_DerechaCant] -= dinero;
		update_manos(playerid);
		characterSave(playerid);
		new string[128];
		format(string, sizeof(string), "Sacas de la caja %d$ dólares.", dinero);
		_Mensaje(playerid, 4, "b0b0b0", string);
    }
	else if (!strcmp(params, "guardar", true, 7))
	{
		if (sscanf(params, "s[20]s[20]", params, money)) return _Mensaje(playerid, 3, "0", "/rcaja [guardar] [monto]");
		if (!IsNumeric(money)) return _Mensaje(playerid, 3, "0", "/rcaja [guardar] [monto]");
        new dinero = strval(money);
		if (dinero > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 4, "b0b0b0", "No posees esa cantidad.");
		if (dinero < 1 || dinero > 1000) return _Mensaje(playerid, 4, "b0b0b0", "Máximo: $1.000.");
		if (user[playerid][jm_DerechaCant] > 7999) return _Mensaje(playerid, 4, "b0b0b0", "No puedes guardar tanto dinero (8,000$).");

		DarDineroGC(playerid, -dinero);
		user[playerid][jm_DerechaCant] += dinero;
		update_manos(playerid);
		characterSave(playerid);
		new string[128];
		format(string, sizeof(string), "Guardas en la caja %d$ dólares.", dinero);
		_Mensaje(playerid, 4, "b0b0b0", string);
	}
	return 1;
}

funcion _robocaja(playerid, nid, tipo)
{
	new dinero = i_Negocio[nid][nDinero];
	if (tipo == 1)
	{
	    if(user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0)
		{
			DeletePVar(playerid, "Congelado");
			TogglePlayerControllable(playerid, 1);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);

		    PonerObjeto(playerid, 1, 131); user[playerid][jm_Derecha] = 131, user[playerid][jm_DerechaCant] = dinero;
			update_manos(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			if (user[playerid][jHabilidad][3] < 60) user[playerid][jHabilidad][3] += 3;
			user[playerid][jTiempos][16] = 360;

			Mensaje_(playerid, 0xA7CE00FF, "Cogiste la caja registradora (/rcaja).");

	        i_Negocio[nid][nDinero] -= user[playerid][jm_DerechaCant];
		} else return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	}
	else if (tipo == 2)
	{
		new money = Random(400, 1500), string[90];
		DeletePVar(playerid, "Congelado");
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);

		if (user[playerid][jHabilidad][3] < 60) user[playerid][jHabilidad][3] += 1;
		Formato(string, "Lograste robar $%d, vete del local.", money);
		Mensaje_(playerid, 0xA7CE00FF, string);
		user[playerid][jTiempos][16] = 180;
		DarDineroGC(playerid, money);
		i_Negocio[nid][nDinero] -= money;
		limitarobo[playerid] = 0;
	}
	return 1;
}

GCMD:a_objetos(playerid,  const params[])
{
	new string[128], radius;
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/a_objetos [Radio]");
	if (radius < 1 || radius > 100) { _Mensaje(playerid, 0, "0", "El radio debe ser de 1 a 100."); return 1; }
	for (new i = 0; i < MAX_POBJETOS; i++)
	{
		if (en_pos(playerid, radius, cObjeto[i][pPosX], cObjeto[i][pPosY], cObjeto[i][pPosZ]))
		{
			format(string, sizeof(string), "ID: %d - Modelo: %d", i, cObjeto[i][pOID]);
			Mensaje_(playerid, 0xb0b0b0ff, string);
		}
	}
    return 1;
}
GCMD:irobjeto(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/irobjeto [id objeto]");
	if (params[0] < 0 || params[0] >= MAX_POBJETOS) return _Mensaje(playerid, 0, "453", "ID de objeto admin inválido.");
	if (!cObjeto[params[0]][pPosX]) return _Mensaje(playerid, 0, "138", "ID Invalida.");
	SetPlayerPos(playerid, cObjeto[params[0]][pPosX], cObjeto[params[0]][pPosY], cObjeto[params[0]][pPosZ]);
	_Mensaje(playerid, 2, "0", "Teleportado.");
	return 1;
}

GCMD:aborrarobjeto(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/aborrarobjeto [id objeto]");
	if (params[0] < 0 || params[0] >= MAX_POBJETOS) return _Mensaje(playerid, 0, "453", "ID de objeto admin inválido.");
	if (!cObjeto[params[0]][pPosX]) return _Mensaje(playerid, 0, "138", "ID Invalida.");
	DestroyDynamicObject(cObjeto[params[0]][pObjeto]);
	cObjeto[params[0]][pPosX] = 0.0;
	cObjeto[params[0]][pPosY] = 0.0;
	cObjeto[params[0]][pPosZ] = 0.0;
	cObjeto[params[0]][pPosRX] = 0.0;
	cObjeto[params[0]][pPosRY] = 0.0;
	cObjeto[params[0]][pPosRZ] = 0.0;
	cObjeto[params[0]][pVw] = 0;
	cObjeto[params[0]][pInt] = 0;
	cObjeto[params[0]][pOID] = 0;
	GuardarObjetosAdmin();
	return 1;
}

GCMD:borrarobjetoadmin(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	for(new a = 0; a < MAX_POBJETOS; a++)
	{
		if(cObjeto[a][pOID] > 0)
		{
			if(en_pos(playerid, 3.0, cObjeto[a][pPosX], cObjeto[a][pPosY], cObjeto[a][pPosZ]))
			{
			    DestroyDynamicObject(cObjeto[a][pObjeto]);
			    cObjeto[a][pPosX] = 0.0;
			    cObjeto[a][pPosY] = 0.0;
			    cObjeto[a][pPosZ] = 0.0;
			    cObjeto[a][pPosRX] = 0.0;
			    cObjeto[a][pPosRY] = 0.0;
			    cObjeto[a][pPosRZ] = 0.0;
			    cObjeto[a][pVw] = 0;
			    cObjeto[a][pInt] = 0;
			    cObjeto[a][pOID] = 0;
			    GuardarObjetosAdmin();
			    return 1;
			}
		}
	}
	return 1;
}

GCMD:objetosadmin(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new pro[300], pro2[3000], tobjects;
	for(new a = 0; a < MAX_POBJETOS; a++)
	{
		if(cObjeto[a][pOID] > 0)
		{
			tobjects++;
			format(pro, sizeof(pro), "ID: %d | OBJETO: %d |\n", a, cObjeto[a][pOID]);
			strcat(pro2, pro);
		}
	}
	if(tobjects > 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Objetos admin", pro2, "Aceptar", "");
	else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Objetos admin", "Ninguno", "Aceptar", "");
	return 1;
}

GCMD:editar_objeto(playerid,  const params[])
{
	new objeto;
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", objeto)) return _Mensaje(playerid, 3, "0", "/editar_objeto [id]");
	if (objeto < 0 || objeto >= MAX_POBJETOS) return _Mensaje(playerid, 0, "453", "ID de objeto admin inválido.");
	if (!cObjeto[objeto][pPosX]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	if(en_pos(playerid, 3.0, cObjeto[objeto][pPosX], cObjeto[objeto][pPosY], cObjeto[objeto][pPosZ]))
	{
		EditDynamicObject(playerid, cObjeto[objeto][pObjeto]);
		user[playerid][pEditingMode] = 4;
		return 1;
	}
	Mensaje_(playerid, -1, "no estás cerca del objeto.");
	return 1;
}
GCMD:crearobjetoadmin(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if(isnull(params))
	{
		new OA[20];
    	OA[0] = 2636; OA[1] = 2121; OA[2] = 1811; OA[3] = 2748; OA[4] = 2763; OA[5] = 2644; OA[6] = 2188; OA[7] = 11691; OA[8] = 2111; OA[9] = 1824; OA[10] = 1896;
    	OA[11] = 1516; OA[12] = 15037; OA[13] = 2636; OA[14] = 3039; OA[15] = 3862; OA[16] = 3040; OA[17] = 3860; OA[18] = 8572; OA[19] = 19470;
    	menu_selectionEx(playerid, OA, 20, "Objetos	", D_OBJETOSADMIN);
	}
	else
	{
	    new modelid, vw, int;
	    if (sscanf(params, "iii", modelid, vw, int)) return _Mensaje(playerid, 3, "0", "/crearobjetoadmin IDOBJETO VW INT");
	    new objeto = -1;
 		for(new a = 0; a < MAX_POBJETOS;a++)
	    {
			if(cObjeto[a][pOID] == 0)
			{
				objeto = a;
				break;
		    }
		}
  		if(objeto == -1) return _Mensaje(playerid, 4, "b00000", "Se alcanzó el límite de objetos admin.");
		GetPlayerPos(playerid, cObjeto[objeto][pPosX], cObjeto[objeto][pPosY], cObjeto[objeto][pPosZ]);
		cObjeto[objeto][pOID] = modelid;
		cObjeto[objeto][pObjeto]  = CreateDynamicObject(modelid, cObjeto[objeto][pPosX]-2.0, cObjeto[objeto][pPosY]-1.0, cObjeto[objeto][pPosZ], 0.0, 0.0, 0.0, vw, int, -1, MAX_RADIO_STREAM_MIN);
		cObjeto[objeto][pInt] = int;
		cObjeto[objeto][pVw] = vw;
		EditDynamicObject(playerid, cObjeto[objeto][pObjeto]);
		user[playerid][pEditingMode] = 4;
	}
	return 1;
}

GCMD:multicuenta(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/multicuenta [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "367", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new autoip[32]; GetPlayerIp(playerid2, autoip, 32);
	if (user[playerid2][jMulticuenta] == 0)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s autorizó la multicuenta a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s autorizó la multicuenta a %s [IP: %s].", nombre_pj(playerid), nombre_pj(playerid2), autoip);
		Log("Registros/multicuentas.log", string);
		user[playerid2][jMulticuenta] = 1; // Multicuenta Autorizada.
	}
	else
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s rechazó la multicuenta a %s. Sólo puede tener una cuenta.", nombre_pj(playerid), nombre_pj(playerid2));
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s rechazó la multicuenta a %s [IP: %s].", nombre_pj(playerid), nombre_pj(playerid2), autoip);
		Log("Registros/multicuentas.log", string);
		user[playerid2][jMulticuenta] = 0; // Mlticuenta No Autorizada.
	}
	return 1;
}

GCMD:antibalas(playerid)
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (AntiG[Balas])
	{
		mensaje_admin("Anticheat de balas deshabilitado.", 0xb0ffb0ff);
		AntiG[Balas] = false;
	}
	else
	{
		mensaje_admin("Anticheat de balas habilitado.", 0xb0ffb0ff);
		AntiG[Balas] = true;
	}
	return 1;
}

GCMD:antireparacion(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (AntiG[reparacion])
	{
		mensaje_admin("Anticheat de reparacion deshabilitado.", 0xb0ffb0ff);
		AntiG[reparacion] = false;
	}
	else
	{
		mensaje_admin("Anticheat de reparacion habilitado.", 0xb0ffb0ff);
		AntiG[reparacion] = true;
	}
	return 1;
}

GCMD:antiteleport(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (AntiG[teleport])
	{
		mensaje_admin("Anticheat de teleport deshabilitado.", 0xb0ffb0ff);
		AntiG[teleport] = false;
	}
	else
	{
		mensaje_admin("Anticheat de teleport habilitado.", 0xb0ffb0ff);
		AntiG[teleport] = true;
	}
	return 1;
}

GCMD:cambios(playerid)
{
	new DialogStatus[2000];
	strcat(DialogStatus, "Ninguno por ahora.\n");
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{587B95}Versión "#beta_version"", DialogStatus, "Cerrar", "");
	return 1;
}

GCMD:miembros(playerid)
{
	new miembro = user[playerid][jMiembro];

	if (user[playerid][jMiembro] == 0) return _Mensaje(playerid, 0, "687", "No perteneces a ninguna facción.");
	new conteo = 0, text[70];
	foreach(new i: Player)
	{
		new _members[128];
		if (IsPlayerConnectedEx(i))
		{

			if (user[i][jMiembro] == miembro) format(_members, sizeof(_members), "[ID: %d] %s - Rango: %d", i, nombre_pj(i), user[i][jRango]), conteo++;
			if (strlen(_members) > 0) _Mensaje(playerid, 4, "b0b0b0", _members);
		}
	}
	format(text, sizeof(text), "Actualmente hay ({1EB032}%d{ffffff}) miembros conectados.", conteo);
	_Mensaje(playerid, 4, "ffffff", text);
	return 1;
}

GCMD:invitar(playerid,  const params[])
{
	new ID_PFac = user[playerid][jLider],
	ID_PFam = user[playerid][jLiderFam];
	new string[256];
	if (!ID_PFac && !ID_PFam) return _Mensaje(playerid, 0, "367", "No eres lider de ninguna familia/facción.");
	if (sscanf(params, "ds[32]", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/invitar [id jugador] [faccion ó familia]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "367", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (IsNumeric(params[1])) return _Mensaje(playerid, 0, "476", "No puedes colocar números (faccion ó familia).");
	if (TomandoTrabajo[params[0]] != -1) return _Mensaje(playerid, 0, "368", "Este jugador está en otra tarea, espera.");
	if (strlen(params[1]) > 20 || strlen(params[1]) < 6) { _Mensaje(playerid, 0, "476", "Escribe bien la invitación (faccion ó familia)."); return 1; }

	if (!strcmp(params[1], "faccion", true))
	{
		if (!ID_PFac) return _Mensaje(playerid, 0, "367", "No eres lider de ninguna facción.");
		if (user[params[0]][jLider]) return _Mensaje(playerid, 0, "367", "Ese jugador es lider.");
		if (user[params[0]][jMiembro]) return _Mensaje(playerid, 0, "367", "Ese jugador ya es miembro de una facción.");
		switch (user[playerid][jLider])
		{
			//legales
			case 1: NombreFaccion[params[0]] = "Policía";
			case 2: NombreFaccion[params[0]] = "SADOC";
			case 3: NombreFaccion[params[0]] = "Network";
			case 4: NombreFaccion[params[0]] = "Alcaldía";
			case 5: NombreFaccion[params[0]] = "Emergencias";
		}
		NumeroFaccion[params[0]] = ID_PFac;
		TomandoTrabajo[params[0]] = playerid;
		format(string, sizeof(string), "\n{b0b0b0}{FFFFFF} %s te invitó a {00C200}'%s'\n\n{b0b0b0}{FFFFFF} ¿Aceptas la propuesta?", nombre_pj(playerid, 0), NombreFaccion[params[0]]);
		ExPlayerDialog(params[0], D_Ifaccion, DIALOG_STYLE_MSGBOX, "{D6E1EB}Ingreso", string, "Aceptar", "Rechazar");
		format(string, sizeof(string), "* Invitaste a %s a tu facción, espera la respuesta de él.", nombre_pj(params[0], 0));
		_Mensaje(playerid, 4, "33CCFF", string);
		return 1;
	}
	else if (!strcmp(params[1], "familia", true))
	{
		if (!ID_PFam) return _Mensaje(playerid, 0, "367", "No eres lider de ninguna familia.");
		if (user[params[0]][jLiderFam]) return _Mensaje(playerid, 0, "367", "Ese jugador es lider de una familia.");
		if (user[params[0]][jMiembroFam]) return _Mensaje(playerid, 0, "367", "Ese jugador ya es miembro de una familia.");
		NumeroFamilia[params[0]] = ID_PFam;
		TomandoTrabajo[params[0]] = playerid;
		format(string, sizeof(string), "\n{b0b0b0}{FFFFFF} %s te invitó a {00C200}'%s'\n\n{b0b0b0}{FFFFFF} ¿Aceptas la invitación?", nombre_pj(playerid, 0), i_Familia[ID_PFam][fNombre]);
		ExPlayerDialog(params[0], D_Ifamilia, DIALOG_STYLE_MSGBOX, "{D6E1EB}Ingreso", string, "Aceptar", "Rechazar");
		format(string, sizeof(string), "* Invitaste a %s a tu facción, espera la respuesta de él.", nombre_pj(params[0], 0));
		_Mensaje(playerid, 4, "33CCFF", string);
		return 1;
	}
	return _Mensaje(playerid, 3, "0", "/invitar [id jugador] [faccion ó familia]");
}
GCMD:despedir(playerid,  const params[])
{
	if (user[playerid][jLider] == 0) return _Mensaje(playerid, 0, "370", "Usted no es lider de facción.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/despedir [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid][jLider] == user[params[0]][jMiembro])
	{
	    new string[128];
	    format(string, sizeof(string), "Líder %s expulsó de la facción a %s.", nombre_pj(playerid), nombre_pj(params[0]));
		mensaje_faccion(user[playerid][jMiembro], C_LIGHTBLUE, string);
		max_miembros[user[playerid][jMiembro]]--;
		save_stuff();
		user[params[0]][jLider] = 0;
		user[params[0]][jMiembro] = 0;
		if (user[playerid][jMiembro] == 2) sadocs--;
		if (user[playerid][jMiembro] == 5) members_fd--;
		user[params[0]][jRango] = 0;
		Skin_(params[0], 155);

	} else _Mensaje(playerid, 0, "371", "El jugador no pertenece a tu facción.");
	return 1;
}

GCMD:darrango(playerid,  const params[])
{
	if (user[playerid][jLider] == 0) return _Mensaje(playerid, 0, "370", "No eres lider de facción.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darrango [id jugador] [rango]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "370", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid][jLider] != user[params[0]][jMiembro]) return _Mensaje(playerid, 0, "370", "Ese jugador no es de tu facción.");

	if (Es_Faccion(playerid, 1))
	{
		if (params[1] > 12 || params[1] < 0) { _Mensaje(playerid, 0, "0", "El máximo de rangos en LSPD es de 12."); return 1; }
	}
	else if (Es_Faccion(playerid, 2))
	{
		if (params[1] > 12 || params[1] < 0) { _Mensaje(playerid, 0, "0", "En (SADOC) el máximo de rangos es de 11."); return 1; }
	}
	else if (Es_Faccion(playerid, 3))
	{
		if (params[1] > 7 || params[1] < 0) { _Mensaje(playerid, 0, "0", "En (Noticias) el máximo de rangos es de 7."); return 1; }
	}
	else if (Es_Faccion(playerid, 4))
	{
		if (params[1] > 5 || params[1] < 0) { _Mensaje(playerid, 0, "0", "En (Alcaldía) el máximo de rangos es de 5."); return 1; }
	}
	else if (Es_Faccion(playerid, 5))
	{
		if (params[1] > 8 || params[1] < 0) { _Mensaje(playerid, 0, "0", "En (LSFD) el máximo de rangos es de 8."); return 1; }
	}

	user[params[0]][jRango] = params[1];
	new
		faccion[64],
		rango[64],
		string[128]
	;
	_infoFaccion(params[0], rango, faccion);
	format(string, sizeof(string), "Líder %s asignó rango %s(%d) al miembro %s.", nombre_pj(playerid), rango, params[1], nombre_pj(params[0]));
	mensaje_faccion(user[playerid][jMiembro], C_LIGHTBLUE, string);

	return 1;
}

GCMD:botiquin(playerid)
{
	if(user[playerid][jSangre] >= 80) return _Mensaje(playerid, 0, "229", "No necesitas el botiquin ahora mismo.");
	if(user[playerid][jm_Derecha] != 130 && user[playerid][jm_Izquierda] != 130) return _Mensaje(playerid, 0, "229", "No tienes ningún botiquin en alguna mano.");
	if(user[playerid][jm_Derecha] == 130) user[playerid][jm_DerechaCant]--;
	else user[playerid][jm_IzquierdaCant]--;
	CongelarEx(playerid, 15);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 1, 1, 1, 1, 1);
	accion_rol(playerid, 0, "toma su botiquin de primeros auxilios y comienza a aplicarlo.");
	SetTimerEx("CurarBotiquin", 15000, false, "i", playerid);
	update_manos(playerid);
	return 1;
}

funcion CurarBotiquin(playerid)
{
    ClearAnimations(playerid);
	new Float: health = user[playerid][jSangre];
	if (health >= 50)
		Sangre_(playerid, 100);
	else
		Sangre_(playerid, health + 50.0);
}
GCMD:taclear(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 2)) return _Mensaje(playerid, 0, "229", "No eres miembro de la SADOC.");
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/taclear [id jugador].");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "229", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, params[0])) return _Mensaje(playerid, 4, "b00000", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if(params[0] == playerid) return _Mensaje(playerid, 0, "229", "No te puedes taclear a ti mismo.");

	CongelarEx(params[0], 10);
	ApplyAnimation(params[0], "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 1, 1);
	_Mensaje(params[0], 5, "0", "Has sido tacleado");
	new pro[144];
	format(pro, sizeof(pro), "Has tacleado a %s.", nombre_pj(params[0], 0));
	_Mensaje(playerid, 5, "0", pro);
	return 1;
}

GCMD:altavozpf(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 2)) return _Mensaje(playerid, 0, "229", "No eres miembro de la SADOC.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/altavozpf [texto].");

	new texto[144];
	format(texto, sizeof(texto), "[Altavoz PF: [ID]:%d] %s o< %s]", playerid, nombre_pj(playerid, 0), params);
	foreach(new a: Player)
	{
		if(user[a][jEncarcelado] == 3 || en_pos(a, 50.0, 160.0098,-191.7577,342.9203))
		{
			Mensaje_(a, 0xFF9B6AFF, texto);
		}
	}
	return 1;
}

GCMD:drivebug(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "229", "Usted no se encuentra en ningún vehículo.");
	if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return _Mensaje(playerid, 0, "229", "Usted no se encuentra como pasajero.");
	ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
	SetPlayerArmedWeapon(playerid, 0);
    SetTimerEx("desbugdrive", 500, false, "ii", playerid, GetPlayerWeapon(playerid));
    return 1;
}

funcion desbugdrive(playerid, arma)
{
    SetPlayerArmedWeapon(playerid, arma);
}

GCMD:botondepanico(playerid) return cmd_bp(playerid);
GCMD:botonpanico(playerid) return cmd_bp(playerid);
GCMD:bp(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No eres de la PD.");
	if (SolicitaRefuerzos[playerid] == 1 || BotonPanico[playerid] == 1) return _Mensaje(playerid, 0, "229", "Ya tienes un pedido de ayuda.");
	if (user[playerid][jMuerto2] == 2) return _Mensaje(playerid, 0, "229", "No puedes usar este comando muerto.");
	if (InfoHeridas[playerid][Cabezar] != 0) return _Mensaje(playerid, 0, "229", "No puedes usar este comando muerto.");

	new Float: px, Float: py, Float: pz, string[128];
	GetPlayerPos(playerid, px, py, pz);
	BotonPanico[playerid] = 1;
	accion_rol(playerid, 0, "pulsó el botón de pánico.");
	format(string, sizeof(string), "CENTRAL: %s ha pulsado el botón de pánico, se requiere asistencia urgente en su posición.", nombre_pj(playerid, 0));
	_MensajeRfac(1, C_COLORRADIO, string);
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (Es_Faccion(i, 1) && EnServicioPD[i] == 1)
			{
			    SetPlayerMarkerForPlayer(i, playerid, 0xFFB400FF);
			}
		}
	}
	_Mensaje(playerid, 4, "b0b0b0", "/noref, para cancelar los refuerzos.");
	return 1;
}

GCMD:bpc(playerid) return cmd_bkc(playerid);
GCMD:norefuerzos(playerid) return cmd_bkc(playerid);
GCMD:noref(playerid) return cmd_bkc(playerid);
GCMD:bkc(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (SolicitaRefuerzos[playerid] == 0 && BotonPanico[playerid] == 0) return _Mensaje(playerid, 0, "165", "No estás solicitando refuerzos.");
	if (SolicitaRefuerzos[playerid] == 1) SolicitaRefuerzos[playerid] = 0;
	else BotonPanico[playerid] = 0;
	_MensajeRfac(1, C_COLORRADIO, "CENTRAL: A todas las unidades que están de apoyo, se ha cancelado el pedido.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (Es_Faccion(i, 1) && EnServicioPD[i] == 1)
			{
				DisablePlayerCheckpoint(i);
				DeletePVar(i, "EnCheckPoint");
				SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
			}
		}
	}
	return 1;
}
llaves_faccion(playerid, vehicleid)
{
	if (LSPD_Veh(vehicleid))
		if (user[playerid][jMiembro] == 1) return 1;
		else return 0;
	else if (SADOC_Veh(vehicleid))
		if (user[playerid][jMiembro] == 2) return 1;
		else return 0;
	else if (SAN_Vehicle(vehicleid))
		if (user[playerid][jMiembro] == 3) return 1;
		else return 0;
	else if (ALS_Veh(vehicleid))
		if (user[playerid][jMiembro] == 4) return 1;
		else return 0;
	else if (LSFD_Veh(vehicleid))
		if (user[playerid][jMiembro] == 5) return 1;
		else return 0;
	
	return 0;
}
GCMD:mal(playerid,  const params[])
{
	if(isnull(params)) //para abrir o cerrar, llamada al /maletero
	{
		cmd_maletero(playerid);
	}
	else
	{
		if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/mal [ver - abrir - cerrar]");
		if (strcmp(params[0], "abrir", true) == 0) cmd_maletero(playerid);
		else if (strcmp(params[0], "cerrar", true) == 0) cmd_maletero(playerid);
    	else if (strcmp(params[0], "ver", true) == 0)
		{
			new
				car,
				Float:distancia = 4.5,
				Float:vX,
				Float:vY,
				Float:vZ,
				vw_player=GetPlayerVirtualWorld(playerid)
			;
			for(new x=0; x <= MAX_VEHICLES; x++)
			{
				GetVehiclePos(x, vX, vY, vZ);
				if(en_pos(playerid, 4.5, vX, vY, vZ) && !EstaEnBicis(x))
				{
					if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
					new vw_veh = GetVehicleVirtualWorld(car);
					if (vw_veh == vw_player) break;
					else car = 0;
				}
			}
			if(car == 0) return _Mensaje(playerid, 0, "391", "No se ha detectado ningún vehículo a tu alrededor.");
			if (LSPD_Veh(car) || SADOC_Veh(car) || SAN_Vehicle(car) || ALS_Veh(car) || LSFD_Veh(car) || veh_Pescador(car) || veh_Granjero(car))
			{
				cmd_maleterover(playerid); //facciones
	   		}
			else
			{
				cmd_vermaletero(playerid); //users
			}
		}
		else _Mensaje(playerid, 3, "0", "/mal [ver - abrir - cerrar]");
	}
	return 1;
}
GCMD:maletero(playerid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
		if (EstaEnBicis(vehicleid)) return _Mensaje(playerid, 0, "388", "No puedes usar este comando si estás en este tipo de vehiculos.");
		if (LSPD_Veh(vehicleid) || SADOC_Veh(vehicleid) || SAN_Vehicle(vehicleid) || ALS_Veh(vehicleid) || LSFD_Veh(vehicleid) ||
		veh_Pescador(vehicleid) || veh_Granjero(vehicleid))
		{
			if (!llaves_faccion(playerid, vehicleid)) return SendClientMessage(playerid, 0xccccccff, "No tienes las llaves de este vehículo (facción o trabajo).");
			VehiculoMaletero(vehicleid, playerid);
		}
		else
		{
			for (new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vID] == vehicleid)
				{
					if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
					VehiculoMaletero(vehicleid, playerid);
				}
			}
		}
	}
	else
	{
		new
			car,
			Float:distancia = 4.5,
			Float:vX,
			Float:vY,
			Float:vZ,
			vw_player=GetPlayerVirtualWorld(playerid)
		;
		for(new x=0; x <= MAX_VEHICLES; x++)
		{
			GetVehiclePos(x, vX, vY, vZ);
			if(en_pos(playerid, 4.5, vX, vY, vZ) && !EstaEnBicis(x))
			{
				if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
				new vw_veh = GetVehicleVirtualWorld(car);
				if (vw_veh == vw_player) break;
				else car = 0;
			}
		}
		if(car == 0) return _Mensaje(playerid, 0, "391", "No se ha detectado ningún vehículo a tu alrededor.");
		if (LSPD_Veh(car) || SADOC_Veh(car) || SAN_Vehicle(car) || ALS_Veh(car) || LSFD_Veh(car) || veh_Pescador(car) || veh_Granjero(car))
		{
			if (!llaves_faccion(playerid, car)) return SendClientMessage(playerid, 0xccccccff, "No tienes las llaves de este vehículo (facción o trabajo).");
			VehiculoMaletero(car, playerid);
	   	}
		else
		{
			for (new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vID] == car)
				{
					if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
					VehiculoMaletero(car, playerid);
				}
			}
		}

	}
	return 1;
}

GCMD:palcohol(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (EnServicioPD[playerid] == 0) return _Mensaje(playerid, 0, "166", "No estas en servicio.");
 	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/palcohol [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	if (!CercaDelWeon(2.0, playerid, params[0])) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (user[playerid][jm_Derecha] != 129 && user[playerid][jm_Izquierda] != 129) { _Mensaje(playerid, 0, "9", "No tienes un alcoholimetro en ninguna mano."); return 1;}

	new string[150];
	alcoholemia[params[0]] = playerid;
	format(string, sizeof(string), "* Has pedido a %s que acepte la prueba. Espera una respuesta.", nombre_pj(params[0], 0));
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "* %s te ha pedido que aceptes la prueba de alcoholemia. (/aceptar)", nombre_pj(playerid, 0));
	_Mensaje(params[0], 4, "33CCFF", string);
	return 1;
}

//trabajo de pescador

GCMD:puntos(playerid)
{
	if (!Es_job(playerid, 3)) return _Mensaje(playerid, 0, "681", "No eres pescador.");
	new coordsstring[300], DialogStatus[3000];
	new Float:Distancia[4], location[4][MAX_ZONE_NAME];
	Distancia[0] = (GetPlayerDistanceFromPoint(playerid, 8470.9131, 14471.0557, 4.3955) * 0.01);
	Distancia[1] = (GetPlayerDistanceFromPoint(playerid, 8470.8008, 14507.8643, 4.4209) * 0.01);
	Distancia[2] = (GetPlayerDistanceFromPoint(playerid, 8465.4512, 14491.3350, 4.5447) * 0.01);
	Distancia[3] = (GetPlayerDistanceFromPoint(playerid, 8482.2891, 14495.5928, 4.6008) * 0.01);
	Get2DZone(location[0], MAX_ZONE_NAME, 8470.9131, 14471.0557, 4.3955);
	Get2DZone(location[1], MAX_ZONE_NAME, 8470.8008, 14507.8643, 4.4209);
	Get2DZone(location[2], MAX_ZONE_NAME, 8465.4512, 14491.3350, 4.5447);
	Get2DZone(location[3], MAX_ZONE_NAME, 8482.2891, 14495.5928, 4.6008);

	strcat(DialogStatus, "Dirección\tDistancia\n", sizeof(DialogStatus));
	format(coordsstring, sizeof(coordsstring), "{ffffff}%s\t{b0b0b0}%0.2f Km\n", location[0], Distancia[0]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}%s\t{b0b0b0}%0.2f Km\n", location[1], Distancia[1]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}%s\t{b0b0b0}%0.2f Km\n", location[2], Distancia[2]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}%s\t{b0b0b0}%0.2f Km", location[3], Distancia[3]); strcat(DialogStatus, coordsstring);
	ExPlayerDialog(playerid, D_PuntosP, DIALOG_STYLE_TABLIST_HEADERS, "{b0b0b0}Puntos de pesca", DialogStatus, "Buscar", "Cancelar");
	return 1;
}

GCMD:pescar(playerid)
{
	if (!Es_job(playerid, 3)) return _Mensaje(playerid, 0, "681", "No eres pescador.");
	if (!en_muelle(playerid)) return _Mensaje(playerid, 0, "126", "No estás en un punto de pesca. (/puntos)");

	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "148", "Ya estás pescando.");

	if (user[playerid][jm_Derecha] != 85 && user[playerid][jm_Izquierda] != 85) { _Mensaje(playerid, 0, "9", "No tienes una caña de pesca en ninguna mano."); return 1;}
	if (user[playerid][jm_Derecha] != 133 && user[playerid][jm_Izquierda] != 133) { _Mensaje(playerid, 0, "9", "No tienes una lata de carnadas en ninguna mano."); return 1;}
	if (user[playerid][jPescados] < 101)
	{
		if(user[playerid][jm_Derecha] == 133){user[playerid][jm_DerechaCant] --;}
		else if(user[playerid][jm_Izquierda] == 133){user[playerid][jm_IzquierdaCant] --;}
		ClearAnimations(playerid);
		SetPVarInt(playerid, "HaciendoMueble", 1);
		textgame_player(playerid, "~g~Pescando...", 21000, 3);
		SetTimerEx("TerminarPesca", 20000, 0, "%d", playerid);
		ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 1, 0, 1);

	} else return _Mensaje(playerid, 0, "2", "Has alcanzado el máximo de peces (100), vendelos en un restaurante.");
	return 1;
}
funcion TerminarPesca(playerid)
{
	new string[200], alean = Random(1, 2), peces = Random(3, 7);
	if (alean == 1)
	{
		user[playerid][jPescados] += peces;
		if (user[playerid][jHabilidad2][2] < 4)
		{
			if (user[playerid][jPremium] != 0) user[playerid][jHabilidad][2]+=2;
			else user[playerid][jHabilidad][2]++;
		}
		format(string, sizeof(string), "Llevas la cantidad de %d peces, atrapaste esta vez %d.", user[playerid][jPescados], peces);
		_Mensaje(playerid, 4, "F8D48C", string);
		update_manos(playerid);
	}
	else if (alean == 2)
	{
		_Mensaje(playerid, 4, "ff0000", "La línea se rompió.");
		update_manos(playerid);
	}
	TogglePlayerControllable(playerid, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	SetPVarInt(playerid, "HaciendoMueble", 0);
	return 1;
}
GCMD:puerto(playerid)
{
	if (!en_pos(playerid, 2.0, 8571.8350, 14494.7344, 5.7692)) return _Mensaje(playerid, 0, "0", "No estás en el puerto de fort carson.");

	ExPlayerDialog(playerid, D_PUERTO, DIALOG_STYLE_LIST, "{D6E1EB}Pescador", "{FFFFFF}Lata de carnadas\nCaña de pesca\nVender peces", "Comprar", "Cancelar");
	return 1;
}
GCMD:venderpeces(playerid)
{
	if (!en_pos(playerid, 30.0, -785.9495, 500.0739, 1371.7422) && !en_pos(playerid, 40.0, 457.304748,-88.428497,999.554687) || (GetPlayerVirtualWorld(playerid) < 300)) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un restaurante.");

	new string[200], pago = user[playerid][jHabilidad2][2];

	if (user[playerid][jPescados] > 10)
	{
		format(string, sizeof(string), "* Vendiste %d peces al restaurante y sumaste $%i a tu bolsillo.", user[playerid][jPescados], user[playerid][jPescados] * pago);
		_Mensaje(playerid, 4, "33CCFF", string);
		DarDineroGC(playerid, user[playerid][jPescados] * pago);
		d_estado -= user[playerid][jPescados] * pago;
		user[playerid][jPescados] = 0;
		return 1;
	} else _Mensaje(playerid, 0, "423", "Lo mínimo para vender son diez peces.");
	return 1;
}
GCMD:barco(playerid)
{
	if (!Es_job(playerid, 3)) return _Mensaje(playerid, 0, "681", "No eres pescador.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "No estás dentro de ningún barco.");

	new vehiculo = GetPlayerVehicleID(playerid);
	if (!EstaEnBote(vehiculo)) return _Mensaje(playerid, 0, "378", "Debes estar en un barco.");

	SetPlayerMapIcon(playerid, 99, 3445.34155, 349.29059, -3.04175, 9, 0, MAPICON_GLOBAL);

    _Mensaje(playerid, 4, "b0b0b0", "Se marcó en el mapa las zonas de pesca.");
    _Mensaje(playerid, 4, "b0b0b0", "Cuando llegues con el barco, escribe /arpon.");

	return 1;
}

stock GetPlayerNearestVehicle(playerid)
{
	new nearest[2] = {-1, -1};
	for(new v=0; v < MAX_VEHICLES; v++)
	{
		if(GetVehicleModel(v) == 453)
		{
			if(nearest[0] == -1)
			{
				nearest[0] = v;
				nearest[1] = floatround(GetPlayerDistanceToVehicle(playerid, v));
			}
			else
			{
				if(floatround(GetPlayerDistanceToVehicle(playerid, v)) < nearest[1])
				{
					nearest[0] = v;
					nearest[1] = floatround(GetPlayerDistanceToVehicle(playerid, v));
				}
			}
		}
	}
	return nearest[0];
}
GCMD:arpon(playerid)
{
	if (!Es_job(playerid, 3)) return _Mensaje(playerid, 0, "681", "No eres pescador.");

	if (!en_pos(playerid, 50.0, 3445.34155, 349.29059, -3.04175)) return _Mensaje(playerid, 0, "0", "Los arpones se pueden lanzar únicamente en zonas de pesca.");

	if (user[playerid][jm_Derecha] != 85 && user[playerid][jm_Izquierda] != 85) { _Mensaje(playerid, 0, "9", "No tienes una caña de pesca en ninguna mano."); return 1;}

	if (pescando[playerid] == 1) return _Mensaje(playerid, 0, "681", "Ya te encuentras pescando algo.");

	new vehch = GetPlayerNearestVehicle(playerid), Float:Pos[3];

	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return _Mensaje(playerid, 0, "681", "No estás en la cubierta de un barco pesquero.");

	if(GetVehicleDistanceFromPoint(vehch, Pos[0], Pos[1], Pos[2]) < 4.0)
	{
		switch(user[playerid][jHabilidad2][2])
		{
			case 3:
			{
				new pes = random(2);
				_PesArpon(playerid, pes);
			}
			case 4:
			{
				new pes = random(3);
				_PesArpon(playerid, pes);
			}
			case 5:
			{
				new pes = random(4);
				_PesArpon(playerid, pes);
			}
		}
	}
	else _Mensaje(playerid, 0, "681", "No estás en la cubierta de un barco pesquero.");
	return 1;
}

_PesArpon(playerid, modelid)
{
	switch(modelid)
	{
		case 0: // Tortuga
		{
			pescando[playerid] = 1;
			textgame_player(playerid, "~g~Pescando...", 8000, 3);
			ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
			SetTimerEx("arpon1",7000,false,"d", playerid);
		}
		case 1: // Tortuga
		{
			pescando[playerid] = 1;
			textgame_player(playerid, "~g~Pescando...", 8000, 3);
			ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
			SetTimerEx("arpon1",7000,false,"d", playerid);
		}
		case 2: // Delfin
		{
			pescando[playerid] = 1;
			textgame_player(playerid, "~g~Pescando...", 8000, 3);
			ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
			SetTimerEx("arpon2", 7000,false,"d", playerid);
		}
		case 3: // Tiburon
		{
			pescando[playerid] = 1;
			textgame_player(playerid, "~g~Pescando...", 8000, 3);
			ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
			SetTimerEx("arpon3",7000,false,"d", playerid);
		}
	}
	return 1;
}

GCMD:habilidad(playerid)
{
	new habilidad[300], habilidad2[2000];

	strcat(habilidad2, "Trabajo\tNivel\tProgreso\n", sizeof(habilidad2));

	if (user[playerid][jHabilidad2][1] == 5) format(habilidad, sizeof(habilidad), "{E20000}Granjero{FFFFFF}\t(%d)\t({00c200}MÁXIMO{ffffff})\n", user[playerid][jHabilidad2][1]);
	else format(habilidad, sizeof(habilidad), "{648B19}Granjero{FFFFFF}\t(%d)\t(%d / 450)\n", user[playerid][jHabilidad2][1], user[playerid][jHabilidad][1]);
	strcat(habilidad2, habilidad);

	if (user[playerid][jHabilidad2][4] == 5) format(habilidad, sizeof(habilidad), "{37BD5B}Carguero{FFFFFF}\t(%d)\t({00c200}MÁXIMO{ffffff})\n", user[playerid][jHabilidad2][4]);
	else format(habilidad, sizeof(habilidad), "{68AFA6}Carguero{FFFFFF}\t(%d)\t(%d / 300)\n", user[playerid][jHabilidad2][4], user[playerid][jHabilidad][4]);
	strcat(habilidad2, habilidad);

	if (user[playerid][jHabilidad2][2] == 5) format(habilidad, sizeof(habilidad), "{37BD5B}Pescador{FFFFFF}\t(%d)\t({00c200}MÁXIMO{ffffff})\n", user[playerid][jHabilidad2][2]);
	else format(habilidad, sizeof(habilidad), "{1DAFD7}Pescador{FFFFFF}\t(%d)\t(%d / 400)\n", user[playerid][jHabilidad2][2], user[playerid][jHabilidad][2]);
	strcat(habilidad2, habilidad);

	if (user[playerid][jHabilidad2][7] == 5) format(habilidad, sizeof(habilidad), "{E20000}Carpintero{FFFFFF}\t(%d)\t({00c200}MÁXIMO{ffffff})\n", user[playerid][jHabilidad2][7]);
	else format(habilidad, sizeof(habilidad), "{648B19}Carpintero{FFFFFF}\t(%d)\t(%d / 300)\n", user[playerid][jHabilidad2][7], user[playerid][jHabilidad][7]);
	strcat(habilidad2, habilidad);

	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_TABLIST_HEADERS, "Habilidades", habilidad2, "Cerrar", "");
	return 1;
}
GCMD:mejorar(playerid,  const params[])
{
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/mejorar [carguero, carpintero, granjero, pescador]");
    new habilidad[300];
	if (strcmp(params[0], "carguero", true) == 0)
	{
		if (user[playerid][jHabilidad2][4] == 5) return _Mensaje(playerid, 0, "0", "Ya eres nivel máximo carguero.");
        if (user[playerid][jHabilidad][4] > 299)
		{
            user[playerid][jHabilidad2][4]++;
            user[playerid][jHabilidad][4] -= 300;

			format(habilidad, sizeof(habilidad), "Ahora eres nivel %d de carguero.", user[playerid][jHabilidad2][4]);
			_Mensaje(playerid, 4, "33CCFF", habilidad);

        } else _Mensaje(playerid, 4, "b0b0b0", "No tienes el progreso necesario, revisa /habilidad.");
	}
	else if (strcmp(params[0], "carpintero", true) == 0)
	{
		if (user[playerid][jHabilidad2][7] == 5) return _Mensaje(playerid, 0, "0", "Ya eres nivel máximo de carpintero.");
        if (user[playerid][jHabilidad][7] > 299)
		{
            user[playerid][jHabilidad2][7]++;
            user[playerid][jHabilidad][7] -= 300;

			format(habilidad, sizeof(habilidad), "Ahora eres nivel %d de carpintero.", user[playerid][jHabilidad2][7]);
			_Mensaje(playerid, 4, "33CCFF", habilidad);

		} else _Mensaje(playerid, 4, "b0b0b0", "No tienes el progreso necesario, revisa /habilidad.");
	}
	else if (strcmp(params[0], "granjero", true) == 0)
	{
		if (user[playerid][jHabilidad2][1] == 5) return _Mensaje(playerid, 0, "0", "Ya eres nivel máximo de granjero.");
        if (user[playerid][jHabilidad][1] > 449)
		{
            user[playerid][jHabilidad2][1]++;
            user[playerid][jHabilidad][1] -= 450;

			format(habilidad, sizeof(habilidad), "Ahora eres nivel %d de granjero.", user[playerid][jHabilidad2][1]);
			_Mensaje(playerid, 4, "33CCFF", habilidad);

		} else _Mensaje(playerid, 4, "b0b0b0", "No tienes el progreso necesario, revisa /habilidad.");
	}
	else if (strcmp(params[0], "pescador", true) == 0)
	{
		if (user[playerid][jHabilidad2][2] == 5) return _Mensaje(playerid, 0, "0", "Ya eres nivel máximo de pescador.");
        if (user[playerid][jHabilidad][2] > 399)
		{
            user[playerid][jHabilidad2][2]++;
            user[playerid][jHabilidad][2] -= 400;

			format(habilidad, sizeof(habilidad), "Ahora eres nivel %d de pescador.", user[playerid][jHabilidad2][2]);
			_Mensaje(playerid, 4, "33CCFF", habilidad);

        } else _Mensaje(playerid, 4, "b0b0b0", "No tienes el progreso necesario, revisa /habilidad.");
	}
	return 1;
}

GCMD:fseguro(playerid)
{
	if (!Es_job(playerid, 5)) return _Mensaje(playerid, 0, "681", "No eres ladrón de coches.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
	if (user[playerid][jTiempos][18] != 0) return decir_eltiempo(playerid, 18);
	new Float: x, Float: y, Float: z;
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if (i_Vehiculo[v][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[v][vID], x, y, z);
		if (en_pos(playerid, 3.0, x, y, z))
		{
			if (i_Vehiculo[v][vUSeguro] == 0) return _Mensaje(playerid, 0, "411", "Este vehículo ya está abierto.");
			else if (i_Vehiculo[v][vUSeguro] == 1)
			{
				if(user[playerid][jm_Derecha] == 128 || user[playerid][jm_Izquierda] == 128)
				{
					new a = random(10);
					if (a == 0 || a == 1)
					{
						_Mensaje(playerid, 0, "399", "Intentaste forzar la cerradura del vehículo pero tu palanca se ha roto en el intento.");
						if(user[playerid][jm_Izquierda] == 128) user[playerid][jm_IzquierdaCant] --;
						else user[playerid][jm_DerechaCant] --;
						return 1;
					}
					else
					{
						textgame_player(playerid, "~w~~h~~h~Vehiculo ~g~Abierto", 5000, 1);
						PlayerPlaySoundEx(24600, x, y, z);
						i_Vehiculo[v][vUSeguro] = 0;
						VehSeguro[i_Vehiculo[v][vID]] = 0;
						vehicle_unlock_doors(i_Vehiculo[v][vID]);
						accion_rol(playerid, 0, "toma su palanca y comenzó a forzar la cerradura del vehículo, después de unos segundos consigue abrirlo.");
						vehicleSave(v);
						user[playerid][jTiempos][18] = 5;
						return 1;
					}
				}
				_Mensaje(playerid, 0, "411", "No tienes una palanca en alguna mano.");
				return 1;
			}
		}
	}
	_Mensaje(playerid, 0, "399", "No estás cerca de un vehiculo.");
	return 1;
}

GCMD:tbanoff(playerid,  const params[])
{
    if(user[playerid][jEncargado][3] == 1)
    {
        new pID, tiempo, razon[128], nombrexdd[50];
        if (sscanf(params, "s[24]ds[128]", nombrexdd, tiempo, razon)) return _Mensaje(playerid, 3, "0", "/tbanoff [Nombre_Apellido] [tiempo] [razón]");
        if (sscanf(params, "uds[128]", pID, tiempo, razon)) return Mensaje_(playerid, -1, "Algo ocurrió.");
	    if (IsPlayerConnected(pID)) return _Mensaje(playerid, 0, "75", "Ese jugador está conectado.");
		if (tiempo == 0) return cmd_a(playerid, "Pero q retraso, intenté banear a uno temporalmente 0 horas XD");
		yield 1;

		if(!characterCheck(nombrexdd)) return _Mensaje(playerid, 0, "75", "El personaje no existe.");
		new ORM:tbanorm = orm_create("characters");
		orm_addvar_string(tbanorm, nombrexdd, sizeof(nombrexdd), "NombrePJ");
		orm_setkey(tbanorm, "NombrePJ");
		orm_addvar_int(tbanorm, tiempo, "bTiempo");
		orm_addvar_string(tbanorm, el_tiempo(), 96, "bMomento");
		orm_addvar_string(tbanorm, razon, sizeof(razon),"bRazon");
		orm_addvar_string(tbanorm, nombre_pj(playerid), MAX_PLAYER_NAME, "bCulpable");
		new ban_type = 10;
		orm_addvar_int(tbanorm, ban_type, "Baneado");
		
		new ret = await orm_async_update(tbanorm);
		orm_destroy(tbanorm);
		if(ret == _:ERROR_OK){
			new fcuenta[128];
			format(fcuenta, 128, "Administración: %s ha sido bloqueado por %s, Razón:[%s], Tiempo:[%d horas] (OFFLINE)", nombrexdd, nombre_pj(playerid), razon, tiempo/3600);
			_MensajeOOC(0xFF6347FF, fcuenta);
		}
    }
	else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

IsAccountConnected(const account[]){
	foreach(new playerid: Player){
		if(strequal(account, user[playerid][jNombre]))
			return playerid;
	}
	return -1;
}
IsCharConnected(const character[]){
	foreach(new playerid: Player){
		if(strequal(character, user[playerid][jNombrePJ]))
			return playerid;
	}
	return -1;
}

GCMD:estaban(playerid, const params[])
{
	if(user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new nomban[MAX_PLAYER_NAME];
	sscanf(params, "s[32]", nomban);
	yield 1;
	if (!characterCheck(nomban)) return _Mensaje(playerid, 0, "75", "Ese personaje no existe.");
	if (IsCharConnected(nomban)) return _Mensaje(playerid, 0, "75", "Ese jugador está conectado.");
	new fcuenta[256];
	new ORM:esta_ban = orm_create("characters");
	new _ban[2], ban1[32], ban2[128], ban3[150];
	orm_addvar_string(esta_ban, nomban, MAX_PLAYER_NAME, "NombrePJ");
	orm_setkey(esta_ban, "NombrePJ");
	orm_addvar_int(esta_ban, _ban[0], "Baneado");
	orm_addvar_int(esta_ban, _ban[1], "bTiempo");
	orm_addvar_string(esta_ban, ban1, 32, "bCulpable");
	orm_addvar_string(esta_ban, ban2, 128, "bRazon");
	orm_addvar_string(esta_ban, ban3, 150, "bMomento");
	
	new check = await orm_async_select(esta_ban);
	orm_destroy(esta_ban);
	if(check != _:ERROR_OK) return _Mensaje(playerid, 0, "0", "No se pudo cargar la información de ese personaje.");
	if(_ban[0] == 0) return Mensaje_(playerid, C_UGRP, "Ese personaje no está baneado/bloqueado.");
	if(_ban[0] == 10)
	{
		SendClientMessage(playerid, 0xccccccff, "Bloqueo temporal");
		format(fcuenta, sizeof(fcuenta), "Tiempo: %s", Segundostiempo(_ban[1] - gettime()));
		SendClientMessage(playerid, 0xffffffff, fcuenta);
		format(fcuenta, sizeof(fcuenta), "Responsable: %s - Razón: %s - Fecha del baneo: %s", ban1, ban2, ban3);
		SendClientMessage(playerid, 0xffffffff, fcuenta);
	}
	else if(_ban[0] == 20)
	{
		SendClientMessage(playerid, 0xccccccff, "Bloqueo");
		format(fcuenta, sizeof(fcuenta), "Responsable: %s - Razón: %s - Fecha del baneo: %s", ban1, ban2, ban3);
		SendClientMessage(playerid, 0xffffffff, fcuenta);
	}
	else SendClientMessage(playerid, 0xffffffff, "un bloqueo no existente... na, usa /unban boboXD1");
	return 1;
}


GCMD:estajail(playerid,  const params[])
{
	if(user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		pID,
		nomban[MAX_PLAYER_NAME],
		ban1[51],
		ejJail,
		ejJailTime,
		ejTiempito,
		ban2[51],
		fcuenta[256]
	;
	sscanf(params, "s[32]", nomban);
	if (!characterCheck(params)) return _Mensaje(playerid, 0, "75", "Ese personaje no existe.");
	if ((pID = IsCharConnected(nomban)) != -1){
		alm(ban1, user[pID][jJculpable]);
		alm(ban2, user[pID][jJrazon]);
		ejJail = user[pID][jEncarcelado];
		ejJailTime = user[pID][jTiempoCarcel];
		ejTiempito = user[pID][jtiempito];
	}
	else{
		new ORM:esta_jail = orm_create("characters");
		orm_addvar_string(esta_jail, nomban, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(esta_jail, "NombrePJ");
		orm_addvar_string(esta_jail, ban1, 50, "jCulpable");
		orm_addvar_int(esta_jail, ejJail, "Encarcelado");
		orm_addvar_int(esta_jail, ejJailTime, "TiempoCarcel");
		orm_addvar_int(esta_jail, ejTiempito, "tiempito");
		orm_addvar_string(esta_jail, ban2, 50, "jRazon");
		yield 1;
		if((task_await(orm_async_select(esta_jail))) != _:ERROR_OK) _Mensaje(playerid, 0, "0", "No se pudo cargar la información del jail.");
		orm_destroy(esta_jail);
	}
	switch (ejJail)
	{
		case 1:
		{
			format(fcuenta, sizeof(fcuenta), "OOC: Tiempo %d minutos - Responsable: %s - Razón: %s", ejJailTime, ban1, ban2);
			SendSplitMessage(playerid, 0xffffffff, fcuenta);
		}
		case 2:
		{
			format(fcuenta, sizeof(fcuenta), "Comisaría: Tiempo %d minutos.", ejJailTime);
			SendClientMessage(playerid, 0xffffffff, fcuenta);
		}
		case 3:
		{
			format(fcuenta, sizeof(fcuenta), "PF: Tiempo %s.", tiempo_minuto(playerid, ejTiempito - gettime(), 1));
			SendClientMessage(playerid, 0xffffffff, fcuenta);
		}
		default:
		{
			Mensaje_(playerid, C_UGRP, "Ese personaje no está sancionado.");
		}
	}
	return 1;
}


GCMD:desbug(playerid)
{
	if (user[playerid][jEncarcelado] > 0) return _Mensaje(playerid, 0, "213", "No puedes usar este comando mientras estás en prisión.");
	if (IsPlayerConnected(playerid))
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		user[playerid][jInterior] = 0;
		user[playerid][jVirtualWorld] = 0;
		Mensaje_(playerid, 0x537CDBFF, "DESBUG con éxito, si continua el error utilice /re.");
	} else _Mensaje(playerid, 0, "137", "Usted necesita estar conectado para poder utilzar cualquier comando.");
	return 1;
}

GCMD:desbugear(playerid,  const params[])
{
	if(user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new dbgName[MAX_PLAYER_NAME];
	if(sscanf(params, "s[25]", dbgName)) return _Mensaje(playerid, 0, "0", "USO: /desbugear [Nombre_Apellido]");
	yield 1;
	if(characterCheck(dbgName)) return _Mensaje(playerid, 0, "0", "Ese personaje no existe.");
	new fcuenta[120];
	new ORM:desbugero = orm_create("characters");
	orm_addvar_string(desbugero, dbgName, MAX_PLAYER_NAME, "NombrePJ");
	orm_setkey(desbugero, "NombrePJ");
	static val_ZERO = 0;
	new
		Float:dbgPosX = 1679.3351,
		Float:dbgPosY = -1657.1349,
		Float:dbgPosZ = 13.5395,
		Float:dbgPosR = 318.4477
	;
	
	orm_addvar_float(desbugero, dbgPosX, "Posicion_X" );
	orm_addvar_float(desbugero, dbgPosY, "Posicion_Y" );
	orm_addvar_float(desbugero, dbgPosZ, "Posicion_Z" );
	orm_addvar_float(desbugero, dbgPosR, "Posicion_R" );
	orm_addvar_int(desbugero, val_ZERO, "Interior");
	orm_addvar_int(desbugero, val_ZERO, "VirtualWorld");
	if( (task_await(orm_async_update(desbugero))) == _:ERROR_OK)
		format(fcuenta, sizeof(fcuenta), "Desbugeaste a %s.", dbgName);
	else
		format(fcuenta, sizeof(fcuenta), "Ocurrió un error al desbugear a %s.", dbgName);


	Mensaje_(playerid, -1, fcuenta);
	orm_destroy(desbugero);
	return 1;
}

GCMD:apedido(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new p_id, doorname[32];
	if (sscanf(params, "ds[32]", p_id, doorname)) return _Mensaje(playerid, 3, "0", "/apedido [tipo] [día]");
	format(d_pedidos[p_id], 32, "%s", doorname);
	if(p_id==0)_Mensaje(playerid, 1, "0", "Cambiaste la fecha de los pedidos de drogas.");
	else if(p_id==1)_Mensaje(playerid, 1, "0", "Cambiaste la fecha de los pedidos de armas.");
	save_stuff();
	return 1;
}

new info_robo[MAX_PLAYERS][128];

GCMD:pedido(playerid,  const params[])
{
	if (!sscanf(params, "s[32]", params[0]))
	{
		if (strcmp(params[0], "drogas", true) == 0)
		{
			if (user[playerid][jMiembroFam] == 0) return _Mensaje(playerid, 0, "180", "No perteneces a una facción.");
			if (user[playerid][jRangoFam] < 3) return _Mensaje(playerid, 0, "607", "ERROR: Debes ser superior a rango 3.");

			if (p_drogas[playerid] != -1) return _Mensaje(playerid, 0, "180", "Ya te encuentras en un pedido (/pedido cancelar).");
			new year, month, day;
			getdate(year, month, day);
			if (user[playerid][jTiempos][10] == day) return _Mensaje(playerid, 4, "b0b0b0", "El traficante ya no está, vuelve otro día.");

			switch(i_Familia[user[playerid][jMiembroFam]][fTipo])
			{
				case 2: //mafia
				{
					new StationsDialog[2500];
					strcat(StationsDialog, "Producto\tUnidades\tCosto\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Cocaína\t500\t$6,250\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Crack\t500\t$3,125\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de LSD\t500\t$2,500\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Éxtasis\t500\t$5,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Heroína\t500\t$4,375\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de PCP\t500\t$6,875\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Ketamina\t500\t$6,250\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Marihuana\t500\t$3,750\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Fardo de Hachis\t500\t$4,250\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Esteroides\t50\t$500", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_CAMELLO, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Drogas", StationsDialog, "Pedir", "Cancelar");
				}
				case 3: //legal
				{
					Mensaje_(playerid, -1, "Comando inválido para facciones legales.");
					return 1;
				}
				default:
				{
					new StationsDialog[2500];
					strcat(StationsDialog, "Producto\tUnidades\tCosto\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Ziploc de Cocaína\t50\t$1,250\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Crack\t50\t$625\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de LSD\t50\t$500\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Éxtasis\t50\t$1,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Heroína\t50\t$875\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de PCP\t50\t$1,375\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Ketamina\t50\t$1,250\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Marihuana\t50\t$750\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Paquete de Hachis\t50\t$850\n", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_CAMELLO, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Drogas", StationsDialog, "Pedir", "Cancelar");
				}
			}

			return 1;
		}
		else if (strcmp(params[0], "armas", true) == 0)
		{
			if (user[playerid][jMiembroFam] == 0) return _Mensaje(playerid, 0, "180", "No perteneces a una facción.");
			if (p_armas[playerid] != 0) return _Mensaje(playerid, 0, "180", "Ya te encuentras en un pedido (/pedido cancelar).");

			if (user[playerid][jTiempos][13] != 0)
			{
				new string[128];
				format(string, sizeof(string), "Necesitas esperar %i minuto(s) para volver a traficar.", user[playerid][jTiempos][13]);
				return _Mensaje(playerid, 4, "b0b0b0", string);
			}
			switch(i_Familia[user[playerid][jMiembroFam]][fTipo])
			{
				case 2: //mafia
				{
				    if (user[playerid][jRangoFam] < 4) return _Mensaje(playerid, 0, "607", "ERROR: Debes ser superior a rango 4.");
				    new StationsDialog[2500];
					strcat(StationsDialog, "Producto\tCantidad\tCosto\n", sizeof(StationsDialog));
					strcat(StationsDialog, "Molotov\t5 usos\t$1,200\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Colts\t4 armas\t$2,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Eagles\t4 armas\t$8,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Tecs\t4 armas\t$7,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Uzis\t4 armas\t$7,200\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Escopetas\t4 armas\t$18,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Colts\t15 unidades\t$1,600\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Eagles\t15 unidades\t$2,400\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Tecs\t15 unidades\t$2,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Uzis\t15 unidades\t$2,100\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Escopetas\t8 unidades\t$3,400\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Colts + C. Cargas de Colts\t3 unidades c/u\t$2,500\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Tecs + C. Cargas de Tecs\t3 unidades c/u\t$7,200\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Ak47\t3 armas\t$28,800\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Ak47\t8 unidades\t$6,400", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_CAMELLO2, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Armamento", StationsDialog, "Pedir", "Cancelar");
				}
				case 3: //legal
				{
					Mensaje_(playerid, -1, "Comando inválido para facciones legales.");
					return 1;
				}
				default:
				{
					if (!user[playerid][jLiderFam]) return _Mensaje(playerid, 0, "621", "No eres líder de la facción.");
					new StationsDialog[2500];
					strcat(StationsDialog, "Producto\tCantidad\tCosto\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Colts\t4 armas\t$2,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Tecs\t4 armas\t$7,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Uzis\t4 armas\t$7,200\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Eagles\t4 armas\t$8,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Colts\t15 unidades\t$1,600\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Tecs\t15 unidades\t$2,000\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Uzis\t15 unidades\t$2,100\n", sizeof(StationsDialog));
					strcat(StationsDialog, "C. Cargadores Eagles\t15 unidades\t$2,400", sizeof(StationsDialog));
					ExPlayerDialog(playerid, D_CAMELLO2, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Armamento", StationsDialog, "Pedir", "Cancelar");
					return 1;
				}
			}
		}
		else if (strcmp(params[0], "camion", true) == 0)
		{
			if (!Es_job(playerid, 5)) return _Mensaje(playerid, 0, "681", "No eres ladrón de coches.");
			if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
			if (checkcoche[playerid] != 0) return _Mensaje(playerid, 0, "39", "Posees un pedido pendiente, utiliza /pedido cancelar.");

			if (user[playerid][jTiempos][17] != 0) return decir_eltiempo(playerid, 17);

			new
			d_ran = random(3),
			string[128],
			numer = Random(2222, 9999),
			zone[MAX_ZONE_NAME];

			switch(d_ran)
			{
				case 0:
				{
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, i, 8756.5576,14185.7002,6.4942)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehículos disponibles, intenta de nuevo más tarde."); return 1; } }
					new Coche = CreateVehicle(440, 8756.5576,14185.7002,6.4942, 266.2282, -1, -1, -1);
					random_veh[Coche] = Coche + random(899999);
					cocherobo[playerid] = Coche;
					SetVehicleVirtualWorld(Coche, 0);
					LinkVehicleToInterior(Coche, 0);
					GetCar3DZone(Coche, zone, sizeof(zone));
					format(string, sizeof(string), "[SMS: 00%d]: Necesitamos el %s cuanto antes, última vez visto en %s.", numer, NombreVehiculo(Coche), zone);
					_Mensaje(playerid, 4, "FFEA5F", string);
					format(string, sizeof(string), "El vehículo solicitado fue un %s, última vez visto en %s.", NombreVehiculo(Coche), zone);
					alm(info_robo[playerid], string);
					DarMatricula(Coche, Coche+4666);
					SetPlayerCheckpoint(playerid, 8756.5576,14185.7002,6.4942, 8.0);
					checkcoche[playerid] = 440;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 1:
				{
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, i, 8708.3516,13994.9238,3.0037)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehículos disponibles, intenta de nuevo más tarde."); return 1; } }
					new Coche = CreateVehicle(459, 8708.3516,13994.9238,3.0037, 181.1132, -1, -1, -1);
					random_veh[Coche] = Coche + random(899999);
					cocherobo[playerid] = Coche;
					SetVehicleVirtualWorld(Coche, 0);
					LinkVehicleToInterior(Coche, 0);
					GetCar3DZone(Coche, zone, sizeof(zone));
					format(string, sizeof(string), "[SMS: 00%d]: Necesitamos el %s cuanto antes, última vez visto en %s.", numer, NombreVehiculo(Coche), zone);
					_Mensaje(playerid, 4, "FFEA5F", string);
					format(string, sizeof(string), "El vehículo solicitado fue un %s, última vez visto en %s.", NombreVehiculo(Coche), zone);
					alm(info_robo[playerid], string);
					DarMatricula(Coche, Coche+4666);
					SetPlayerCheckpoint(playerid, 8708.3516,13994.9238,3.0037, 8.0);
					checkcoche[playerid] = 459;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 2:
				{
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, i, 8445.1650,14238.6104,6.7309)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehículos disponibles, intenta de nuevo más tarde."); return 1; } }
					new Coche = CreateVehicle(401, 8445.1650,14238.6104,6.7309, 2.9505, -1, -1, -1);
					random_veh[Coche] = Coche + random(899999);
					cocherobo[playerid] = Coche;
					SetVehicleVirtualWorld(Coche, 0);
					LinkVehicleToInterior(Coche, 0);
					GetCar3DZone(Coche, zone, sizeof(zone));
					format(string, sizeof(string), "[SMS: 00%d]: Necesitamos el %s cuanto antes, última vez visto en %s.", numer, NombreVehiculo(Coche), zone);
					_Mensaje(playerid, 4, "FFEA5F", string);
					format(string, sizeof(string), "El vehículo solicitado fue un %s, última vez visto en %s.", NombreVehiculo(Coche), zone);
					alm(info_robo[playerid], string);
					DarMatricula(Coche, Coche+4666);
					SetPlayerCheckpoint(playerid, 8445.1650,14238.6104,6.7309, 8.0);
					checkcoche[playerid] = 401;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
			}
		}
		else if (strcmp(params[0], "coche", true) == 0)
		{
			if (!Es_job(playerid, 5)) return _Mensaje(playerid, 0, "681", "No eres ladrón de coches.");
			if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }

			if (checkcoche[playerid] != 0) return _Mensaje(playerid, 0, "39", "Posees un pedido pendiente, utiliza /pedido cancelar.");
			if (user[playerid][jTiempos][17] != 0)  return decir_eltiempo(playerid, 17);


			for (new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vSpawned] == 1 || i_Vehiculo[v][v_timer] > 15 && i_Vehiculo[v][v_robo] == 0)
				{
					if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID]))
					{
						new
						vehiculo = 0,
						string[128],
						numer = Random(2222, 9999),
						zone[MAX_ZONE_NAME];

						vehiculo = i_Vehiculo[v][vID];
						if (GetVehicleVirtualWorld(vehiculo) == 0 && i_Vehiculo[v][vNeon] == 0 && i_Vehiculo[v][vPrecio] >= 5000)
						{
							GetCar3DZone(vehiculo, zone, sizeof(zone));
							format(string, sizeof(string), "[SMS: 00%d]: Necesitamos un vehículo modelo %s, su matricula LS-%d, última vez visto en %s.", numer, NombreVehiculo(vehiculo), i_Vehiculo[v][vLlave], zone);
							_Mensaje(playerid, 4, "FFEA5F", string);
							format(string, sizeof(string), "El vehículo solicitado fue un %s, su matricula LS-%d, última vez visto en %s.", NombreVehiculo(vehiculo), i_Vehiculo[v][vLlave], zone);
							alm(info_robo[playerid], string);
							if (i_Vehiculo[v][v_timer] != 0) format(string, sizeof(string), "Tienes menos de %d minutos para entregar el vehículo.", i_Vehiculo[v][v_timer]), _Mensaje(playerid, 4, "90C3D4", string);
							else _Mensaje(playerid, 4, "90C3D4", "Tienes menos de 15 minutos para entregar el vehículo."), veh_robo[playerid] = 22;

							checkcoche[playerid] = v+666;
							i_Vehiculo[v][v_robo] = 1;
							return 1;
						}
					}
				}
			}
			_Mensaje(playerid, 4, "b00000", "No se encuentran vehículos disponibles, intenta de nuevo más tarde.");
			return 1;
		}
		else if (strcmp(params[0], "cancelar", true) == 0)
		{
		    if (checkcoche[playerid] != 0)
			{
				if (cocherobo[playerid] != 0) DestroyVehicle(cocherobo[playerid]);

				random_veh[cocherobo[playerid]] = 0;
				cocherobo[playerid] = 0;
		    	checkcoche[playerid] = 0;
		    	veh_robo[playerid] = 0;

				_Mensaje(playerid, 5, "0", "Misión fallida, perdiste un punto de delincuente.");

				user[playerid][jHabilidad][3]--;

				DeletePVar(playerid, "EnCheckPoint");
				DisablePlayerCheckpoint(playerid);
				TogglePlayerAllDynamicCPs(playerid, true);

				return 1;
			}
			if (p_drogas[playerid] != -1)
			{
				_Mensaje(playerid, 5, "0", "Cancelaste el pedido de drogas.");
				p_drogas[playerid] = -1;
				return 1;
			}
			if (p_armas[playerid] != 0)
			{
				_Mensaje(playerid, 5, "0", "Cancelaste el pedido de armamento.");
				p_armas[playerid] = 0;
				return 1;
			}
			_Mensaje(playerid, 0, "126", "No te encuentras en ningún pedido.");
		}
	} else _Mensaje(playerid, 3, "0", "/pedido [coche - camion - drogas - armas]");
	return 1;
}
GCMD:inforobo(playerid)
{
	if (!Es_job(playerid, 5)) return _Mensaje(playerid, 0, "681", "No eres ladrón de coches.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }

	if (checkcoche[playerid] == 0) return _Mensaje(playerid, 0, "39", "No tienes ningún pedido.");

	_Mensaje(playerid, 5, "0", info_robo[playerid]);
	return 1;
}
GCMD:puente(playerid)
{
	new string[256], encendio = random(6), vehicleid = GetPlayerVehicleID(playerid);
	if(user[playerid][jm_Derecha] != 134 && user[playerid][jm_Izquierda] != 134){ _Mensaje(playerid, 0, "9", "No tienes unas ganzúas en ninguna mano."); return 1;}
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "126", "Usted no se encuentra en ningún vehículo.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "126", "No puedes usar ganzúas en este modelo.");
	if(!CheckTimer(10, IntentarD[playerid]))
	{
		if(user[playerid][jm_Derecha] == 134){user[playerid][jm_DerechaCant] --;}
		else if(user[playerid][jm_Izquierda] == 134){user[playerid][jm_IzquierdaCant] --;}

		IntentarD[playerid] = gettime();
		new si_robo = 0;

		switch (encendio)
		{
			case 0: textgame_player(playerid, "~p~ganzuas inservibles...", 2500, 5);
			case 1: si_robo = 2;
			case 2: textgame_player(playerid, "~p~ganzuas rotas...", 2500, 5);
			case 3: si_robo = 1;
			case 4: si_robo = 1;
			case 5: textgame_player(playerid, "~p~ganzuas rotas...", 2500, 5);
		}
		if (si_robo != 0)
		{
			new zone[MAX_ZONE_NAME];
			GetCar3DZone(vehicleid, zone, sizeof(zone));
			textgame_player(playerid, "~p~haciendo puente...", 2500, 5);
			accion_rol(playerid, 0, "utiliza sus ganzúas, cruzando los cables de encendido.");
			SetTimerEx("EncenderVehiculo", 2500, 0, "dd", vehicleid, playerid);
			if (si_robo == 2) format(string, sizeof(string), "CENTRAL: Informe reciente en %s, robo de un vehículo %s.", zone, NombreVehiculo(vehicleid)), _MensajeRfac(1, C_COLORPOLICIA, string);
			if (checkcoche[playerid] != 0)
			{
				new randomize = random(sizeof(pos_entrega));
				if (checkcoche[playerid] == 401 || checkcoche[playerid] == 440 || checkcoche[playerid] == 459)
				{
					if (GetVehicleModel(vehicleid) == 401 || GetVehicleModel(vehicleid) == 440 || GetVehicleModel(vehicleid) == 459)
					{
						TogglePlayerAllDynamicCPs(playerid, false);
						SetPVarInt(playerid, "EnCheckPoint", 6);
						set_checkpoint(playerid, pos_entrega[randomize][0], pos_entrega[randomize][1], pos_entrega[randomize][2], 8.0);
						_Mensaje(playerid, 4, "0ED39E", "Ahora que posees el camión, ve directo al punto de entrega sin llamar la atención.");
					}
				}
				else
				{
				    new v_id = checkcoche[playerid]-666;

					if (i_Vehiculo[v_id][vID] == vehicleid)
					{
						TogglePlayerAllDynamicCPs(playerid, false);
						SetPVarInt(playerid, "EnCheckPoint", 31);
						set_checkpoint(playerid, pos_entrega[randomize][0], pos_entrega[randomize][1], pos_entrega[randomize][2], 8.0);
						_Mensaje(playerid, 4, "0ED39E", "Ahora que posees el vehículo, ve directo al punto de entrega sin llamar la atención.");
					}
				}
			}
		}
		update_manos(playerid);
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(10, IntentarD[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:apagarincendio(playerid)
{
    if(Es_Faccion(playerid, 5))
    {
        new FireID = CercaIncendio(playerid);
        if (FireID != -1)
        {
            if(Incendios[FireID][pIntensidad]!=0) return SendClientMessage(playerid, -1, "Este incendio aún no puede ser apagado, usa más el extintor.");
			DestroyFire(FireID);
        	save_incendios();
        	DarDineroGC(playerid, 150);
        	d_estado -= 150;
            _Mensaje(playerid, 5, "0", "Has obtenido 150$ por apagar el incendio.");
        }
        else SendClientMessage(playerid, -1, "No estás cerca de un incendio.");
    }
	return 1;
}

GCMD:coff(playerid,  const params[])
{
	if(user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if(isnull(params)) return Mensaje_(playerid, -1, "/coff [Nombre_Apellido]");
	new charCheck[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", charCheck);
	yield 1;
	if(!characterCheck(charCheck)) return Mensaje_(playerid, -1, "Esta cuenta no existe.");
	new ORM:c_off = orm_create("characters");
	orm_addvar_string(c_off, charCheck, MAX_PLAYER_NAME, "NombrePJ");
	orm_setkey(c_off, "NombrePJ");
	new cuenta_[9];
	orm_addvar_int(c_off, cuenta_[0], "Nivel");
	orm_addvar_int(c_off, cuenta_[1], "Horas");
	orm_addvar_int(c_off, cuenta_[2], "Dinero");
	orm_addvar_int(c_off, cuenta_[3], "Banco");
	orm_addvar_int(c_off, cuenta_[4], "Casa");
	orm_addvar_int(c_off, cuenta_[5], "Casa2");
	orm_addvar_int(c_off, cuenta_[6], "Negocio");
	orm_addvar_int(c_off, cuenta_[7], "Negocio2");
    orm_addvar_int(c_off, cuenta_[8], "Experiencia");

	
	if( (task_await(orm_async_select(c_off))) != _:ERROR_OK) return _Mensaje(playerid, 0, "0", "Ocurrió un error al recuperar los datos del personaje.");

	new proximonvl = cuenta_[0] + 1, cantidadexp = proximonvl * nivelexp;
	new fcuenta[200];
	format(fcuenta, sizeof(fcuenta), "%s - Nivel: %d (%d/%d) | Horas de juego: %d | Dinero: %d | Banco: %d | Casas: %d / %d | Negocios: %d / %d", params,
	cuenta_[0], cuenta_[8], cantidadexp, cuenta_[1], cuenta_[2], cuenta_[3],
	cuenta_[4], cuenta_[5], cuenta_[6], cuenta_[7]);
	_Mensaje(playerid, 4, "ffffff", fcuenta);
	return 1;
}

funcion CargarCuentaOff(playerid, name[], value[])
{
	
	return 1;
}

GCMD:ultimac(playerid,  const params[]) return cmd_ultimaconexion(playerid, params);
GCMD:ultimaconexion(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return Mensaje_(playerid, -1, "/ultimaconexion [Nombre_Apellido]");
	yield 1;
	if(!characterCheck(params)) return _Mensaje(playerid, 0, "0", "Ese personaje no existe.");
	new
		pjName[MAX_PLAYER_NAME],
		fcuenta[120],
		xDias,
	 	xMes,
	 	xAno
	;
	new ORM:cmd_ultima_conexion = orm_create("characters");
	orm_addvar_string(cmd_ultima_conexion, pjName, MAX_PLAYER_NAME, "NombrePJ");
	orm_setkey(cmd_ultima_conexion, "NombrePJ");
	orm_addvar_int(cmd_ultima_conexion, xDias, "uDia");
	orm_addvar_int(cmd_ultima_conexion, xMes, "uMes");
	orm_addvar_int(cmd_ultima_conexion, xAno, "uAno");
	
	if((task_await(orm_async_select(cmd_ultima_conexion))) != _:ERROR_OK) return _Mensaje(playerid, 0, "0", "Hubo un error cargando los datos del personaje.");
	orm_destroy(cmd_ultima_conexion);
	format(fcuenta, sizeof(fcuenta), "%s última conexión: %d de %s del %d.", pjName, xDias, GetMonth(xMes), xAno);
	_Mensaje(playerid, 4, "ffffff", fcuenta);

	return 1;
}


GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) // funcion x jorge el matematico
{
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

GCMD:optiwand(playerid)
{
    if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "0", "No eres policía.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "0", "ERROR: Debes ser superior a rango 1.");
	if(UsandoOptiwand[playerid] == -1)
    {
		if(user[playerid][jm_Derecha] != 109) return _Mensaje(playerid, 0, "9", "No tienes el optiwand en tu mano derecha.");
	    for (new h; h < sizeof(i_Casa); h++) if (en_pos(playerid, 3.0, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ])) {
            SetPlayerVirtualWorld(playerid, h+6000);
			foreach(new i: Player) if (GetPlayerVirtualWorld(i) == h+6000 && GetPlayerInterior(i) == i_Casa[h][cInterior]) textgame_player(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Escuchas un ruido muy raro en la puerta", 4000, 3);
	        accion_rol(playerid, 0, "colocó el optiwand en la puerta de la casa y comenzó a manipularla.");

			SetPlayerInterior(playerid, i_Casa[h][cInterior]);

			SetPlayerCameraPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]);

			new Float:x, Float:y;
			x = i_Casa[h][cInteriorX];
			y = i_Casa[h][cInteriorY];

            GetXYInFrontOfPoint(x, y, i_Casa[h][cInteriorA], 10.0);
			SetPlayerCameraLookAt(playerid, x, y, i_Casa[h][cInteriorZ]);

			TipoOptiwand[playerid] = 1;
			UsandoOptiwand[playerid] = h;

			SetPlayerPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]-7.0);
			TogglePlayerControllable(playerid, 0);
			return 1;
	    }
        for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
		{
            if (en_pos(playerid, 2, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
			{
				foreach(new i: Player) if (GetPlayerVirtualWorld(i) == nid+300 && GetPlayerInterior(i) == i_Negocio[nid][nInterior]) textgame_player(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Escuchas un ruido muy raro en la puerta", 4000, 3);

                SetPlayerPos(playerid, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]-7.00);

                SetPlayerVirtualWorld(playerid, nid+300);

				SetPlayerCameraPos(playerid, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]);

				SetPlayerInterior(playerid, i_Negocio[nid][nInterior]);

				new Float:x, Float:y;
				x = i_Negocio[nid][nInteriorX];
				y = i_Negocio[nid][nInteriorY];

	            GetXYInFrontOfPoint(x, y, i_Negocio[nid][nInteriorR], 10.0);
				SetPlayerCameraLookAt(playerid, x, y, i_Negocio[nid][nInteriorZ]);

				TipoOptiwand[playerid] = 2;
				UsandoOptiwand[playerid] = nid;

                return 1;
            }
        }

    }
    else
    {
        if(TipoOptiwand[playerid] == 1)
        {
 	   		SetPlayerPos(playerid, i_Casa[UsandoOptiwand[playerid]][cExteriorX], i_Casa[UsandoOptiwand[playerid]][cExteriorY], i_Casa[UsandoOptiwand[playerid]][cExteriorZ]);
    		TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			UsandoOptiwand[playerid] = -1;
			SetPlayerInterior(playerid, 0);
			TipoOptiwand[playerid] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
		else if(TipoOptiwand[playerid] == 2)
		{
		    SetPlayerPos(playerid, i_Negocio[UsandoOptiwand[playerid]][nExteriorX], i_Negocio[UsandoOptiwand[playerid]][nExteriorY], i_Negocio[UsandoOptiwand[playerid]][nExteriorZ]);
    		TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 0);
			UsandoOptiwand[playerid] = -1;
			TipoOptiwand[playerid] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
    }
    return 1;
}

GCMD:pdr(playerid,  const params[]) return cmd_puntosderol(playerid, params);
GCMD:mpdr(playerid,  const params[]) return cmd_puntosderol(playerid, params);
GCMD:puntosderol(playerid,  const params[])
{
	if (EnServicioADM[playerid] == 0)
	{
		if(sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/mpdr [id jugador]");
		if(!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (!CercaDelWeon(3.5, playerid, params[0])) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		new p[90];
		format(p, sizeof(p), "Puntos de rol de %s: [+%d | -%d]", nombre_pj(playerid), user[playerid][jPuntosRol][0], user[playerid][jPuntosRol][1]);
		Mensaje_(params[0], 0x00c200ff, p);
	}
	else
	{
		if(sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/mpdr [id jugador]");
		if(!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		new p[90];
		format(p, sizeof(p), "Puntos de rol de %s: [+%d | -%d]", nombre_pj(params[0]), user[params[0]][jPuntosRol][0], user[params[0]][jPuntosRol][1]);
		Mensaje_(playerid, 0x00c200ff, p);
	}
	return 1;
}

GCMD:darencrol(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencrol [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[playerid2][jEncargado][4] = 1;
	accountSave(playerid2);
	format(string, sizeof(string), " %s lo ha asignado encargado de rol.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha asignado encargado de rol a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	Log("Registros/DarEncargado.log", string);
	return 1;
}


GCMD:apdrn(playerid,  const params[])
{
	if (user[playerid][jEncargado][4] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string2[40];
	if (sscanf(params, "us[40]", params[0], string2)) return _Mensaje(playerid, 3, "0", "/apdrn [id jugador] [razón]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new string[128];
	user[params[0]][jPuntosRol][1]++;
 	format(string, sizeof(string), "[AvisoAdmin] %s ha dado un punto de rol negativo a %s. ({ffffff}%s{FFFF00})", user[playerid][jStaff], nombre_pj(params[0]), string2);
 	MensajeAdmin(string, 2);
 	format(string, sizeof(string), " %s te dio un punto de rol negativo, razón: %s", user[playerid][jStaff], string2);
 	Mensaje_(params[0], 0x33CCFFFF, string);
	format(string, sizeof(string), "Registros: %s dió un punto de rol negativo a %s. Razón: %s.", user[playerid][jStaff], nombre_pj(params[0]), string2);
	Log("Registros/PuntosDeRol.log", string);
	format(string, sizeof(string), "%s ahora tiene %d puntos negativos de rol.", nombre_pj(params[0]), user[params[0]][jPuntosRol][1]);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;
}

GCMD:rpdrn(playerid,  const params[])
{
	if (user[playerid][jEncargado][4] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/rpdrn [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new string[128];
	user[params[0]][jPuntosRol][1]--;
 	format(string, sizeof(string), "[AvisoAdmin] %s ha removido un punto de rol negativo a %s.", user[playerid][jStaff], nombre_pj(params[0]));
 	MensajeAdmin(string, 2);
 	format(string, sizeof(string), " %s te removió un punto de rol negativo.", user[playerid][jStaff]);
 	Mensaje_(params[0], 0x33CCFFFF, string);
	format(string, sizeof(string), "Registros: %s ha removido un punto de rol negativo a %s", user[playerid][jStaff], nombre_pj(params[0]));
	Log("Registros/PuntosDeRol.log", string);
	format(string, sizeof(string), "%s ahora tiene %d puntos negativos de rol.", nombre_pj(params[0]), user[params[0]][jPuntosRol][1]);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;
}

GCMD:darpdr(playerid,  const params[]) return cmd_darpuntorol(playerid, params);
GCMD:darpuntorol(playerid,  const params[])
{
	if (user[playerid][jEncargado][4] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string2[40];
	if (sscanf(params, "us[40]", params[0], string2)) return _Mensaje(playerid, 3, "0", "/darpuntorol [id jugador] [razón]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new string[128];
	user[params[0]][jPuntosRol][0]++;
 	format(string, sizeof(string), "[AvisoAdmin] %s ha dado un punto de rol a %s. ({ffffff}%s{FFFF00})", user[playerid][jStaff], nombre_pj(params[0]), string2);
 	MensajeAdmin(string, 2);
 	format(string, sizeof(string), " %s te dio un punto de rol, razón: %s", user[playerid][jStaff], string2);
 	Mensaje_(params[0], 0x33CCFFFF, string);
	format(string, sizeof(string), "Registros: %s dió un punto de rol a %s. Razón: %s.", user[playerid][jStaff], nombre_pj(params[0]), string2);
	Log("Registros/PuntosDeRol.log", string);
	format(string, sizeof(string), "%s ahora tiene %d puntos de rol.", nombre_pj(params[0]), user[params[0]][jPuntosRol][0]);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;
}

GCMD:quitarpdr(playerid,  const params[]) return cmd_quitarpuntorol(playerid, params);
GCMD:quitarpuntorol(playerid,  const params[])
{
	if (user[playerid][jEncargado][4] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/quitarpuntorol [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new string[128];
	user[params[0]][jPuntosRol][0]--;
 	format(string, sizeof(string), "[AvisoAdmin] %s ha removido un punto de rol a %s.", user[playerid][jStaff], nombre_pj(params[0]));
 	MensajeAdmin(string, 2);
 	format(string, sizeof(string), " %s te removió un punto de rol.", user[playerid][jStaff]);
 	Mensaje_(params[0], 0x33CCFFFF, string);
	format(string, sizeof(string), "Registros: %s ha removido un punto de rol a %s", user[playerid][jStaff], nombre_pj(params[0]));
	Log("Registros/PuntosDeRol.log", string);
	format(string, sizeof(string), "%s ahora tiene %d puntos de rol.", nombre_pj(params[0]), user[params[0]][jPuntosRol][0]);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;
}

GCMD:tban(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new text_[128], jugador, variable2[190], variable1;
		if (sscanf(params, "iis[128]", jugador, variable1, variable2)) return _Mensaje(playerid, 3, "0", "/tban [id jugador] [horas] [razón]");
		if(!IsPlayerConnectedEx(jugador)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (variable1 == 0) return cmd_a(playerid, "Pero q retraso, intenté banear a uno temporalmente 0 horas XD");
		if (user[jugador][jAdmin] > user[playerid][jAdmin])
		{
			format(text_, sizeof(text_), "[Administración]{FFFFFF} %s ha sido auto-baneado. {E00000}Razón: Intento de baneo al staff.", nombre_pj(playerid));
			MensajeAdmin(text_);
			user[playerid][jBaneado] = 20;
			Kick(playerid);
			return 1;
		}
		else
		{
			banipA(jugador, variable2, nombre_pj(playerid), variable1);
			format(text_, sizeof(text_), "Administración: %s fue expulsado %d horas por %s, Razón:[%s]", nombre_pj(jugador), variable1, nombre_pj(playerid), variable2);
			_MensajeOOC(0xFF6347FF, text_);
			return 1;
		}
	}
	return 1;
}

stock banipA(playerid, const razon[] = "x razón", const baneador[] = "x baneador", worth = -1)
{
	if (IsPlayerConnected(playerid))
	{
		new directorio[200], namepj[MAX_PLAYER_NAME];
		GetPlayerName(playerid, namepj, sizeof(namepj));

		if (characterCheck(namepj)) {

			_Mensaje(playerid, 0, "0", "No puedes hacer esto con un usuario no registrado.");

		} else {
			if (worth != 0 && worth != -1) {
				new k = gettime(), elpru[30];
				worth *= 3600;
				k += worth;
				user[playerid][jBaneado] = 10;
				format(elpru, sizeof(elpru), "%d", k);
				mysql_format(mainDatabase, directorio, sizeof(directorio), "UPDATE characters SET bTiempo = '%e' WHERE NombrePJ = '%e'", elpru, namepj);
				mysql_tquery(mainDatabase, directorio);
			}
			else user[playerid][jBaneado] = 20;
			alm(user[playerid][jBmomento], el_tiempo());
			alm(user[playerid][jBculpable], baneador);
			alm(user[playerid][jBrazon], razon);

			format(directorio, sizeof(directorio), "%s - Tiempo: %s", razon, el_tiempo());
			_Expulsar(playerid, 0, directorio);
		}
	}
}

stock _Dban(playerid)
{
	if(user[playerid][jBaneado] == 20)
	{
		new InfoMjs[200];
		format(InfoMjs, sizeof(InfoMjs), "{CB2700}{FFFFFF} Responsable: %s\n{CB2700}{FFFFFF} Razón: %s\n{CB2700}{FFFFFF} Fecha del baneo: %s\n", user[playerid][jBculpable], user[playerid][jBrazon], user[playerid][jBmomento]);
		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{B00000}Bloqueo de cuenta", InfoMjs, "Cerrar", "");
		Expulsar(playerid, 2);
		return 1;
	}
	else if (user[playerid][jBaneado] == 10)
	{
		if (user[playerid][jBtiempo] < gettime()) {
			Mensaje_(playerid, 0xb0b0b0ff, " Tu baneo ha terminado.. ¡A JUGAR!");
			user[playerid][jBtiempo] = 0;
			user[playerid][jBaneado] = 0;
			return 1;
		} else {
		    new InfoMjs[220];
		    format(InfoMjs, sizeof(InfoMjs), "{CB2700}{FFFFFF} Tiempo: %s\n{CB2700}{FFFFFF} Responsable: %s\n{CB2700}{FFFFFF} Razón: %s\n{CB2700}{FFFFFF} Fecha del baneo: %s\n", Segundostiempo(user[playerid][jBtiempo] - gettime()), user[playerid][jBculpable], user[playerid][jBrazon], user[playerid][jBmomento]);
     		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{B00000}Bloqueo temporal", InfoMjs, "Cerrar", "");
     		Expulsar(playerid, 2);
			return 0;
		}
	}
	return 1;
}

#define informe_tiempo(%0) tiempo_minuto(%0, user[%0][jtiempito] - gettime())

stock tiempo_minuto(playerid, segundos, tipo = 0)
{
    new estoes[150];
	new minutos,horitas,dias;
	if(segundos > 59)
	{
		minutos = segundos / 60;
		segundos = segundos - (minutos * 60);
	}
	if(minutos > 59)
	{
		horitas = minutos / 60;
		minutos = minutos - (horitas * 60);
	}
	if(horitas > 23)
	{
		dias = horitas / 24;
		horitas = horitas - (dias * 24);
	}
	// mensaje
	if (tipo == 0)
	{
	    if (user[playerid][jtiempito] == 0) format(estoes,sizeof(estoes),"%d min",user[playerid][jTiempoCarcel]);
	    else format(estoes,sizeof(estoes),"%d min",(horitas*60)+minutos+user[playerid][jTiempoCarcel]);
	}
	else
	{
		if (algomas[playerid] == 0) format(estoes,sizeof(estoes),"%d minutos",xMeses[playerid]);
		else format(estoes,sizeof(estoes),"%d minutos",(horitas*60)+minutos+xMeses[playerid]);
	}
	#pragma unused segundos
	//
	return estoes;
}

stock Segundos_tiempo(segundos)
{
    new tiempito[150];
    new minutos,horitas,dias;
    if(segundos > 59)
    {
        minutos = segundos / 60;
        segundos = segundos - (minutos * 60);
    }
    if(minutos > 59)
    {
        horitas = minutos / 60;
        minutos = minutos - (horitas * 60);
    }
    if(horitas > 23)
    {
        dias = horitas / 24;
        horitas = horitas - (dias * 24);
    }
    if(dias > 0)
    {
        format(tiempito,sizeof(tiempito),"%d días, %d hrs, %d mins, %d segs",dias,horitas,minutos,segundos);
    }
    else if(horitas > 0)
    {
        format(tiempito,sizeof(tiempito),"%d hrs, %d mins, %d segs",horitas,minutos,segundos);
    }
    else if(minutos > 0)
    {
        format(tiempito,sizeof(tiempito),"%d mins, %d segs",minutos,segundos);
    }
    else
    {
        format(tiempito,sizeof(tiempito),"%d segs",segundos);
    }
    return tiempito;
}

stock Segundostiempo(segundos)
{
    new tiempito[150];
    new minutos,horitas,dias;
    if(segundos > 59)
    {
        minutos = segundos / 60;
        segundos = segundos - (minutos * 60);
    }
    if(minutos > 59)
    {
        horitas = minutos / 60;
        minutos = minutos - (horitas * 60);
    }
    if(horitas > 23)
    {
        dias = horitas / 24;
        horitas = horitas - (dias * 24);
    }
    if(dias > 0)
    {
        format(tiempito,sizeof(tiempito),"%d días, %d horas, %d minutos, %d segundos",dias,horitas,minutos,segundos);
    }
    else if(horitas > 0)
    {
        format(tiempito,sizeof(tiempito),"%d horas, %d minutos, %d segundos",horitas,minutos,segundos);
    }
    else if(minutos > 0)
    {
        format(tiempito,sizeof(tiempito),"%d minutos, %d segundos",minutos,segundos);
    }
    else
    {
        format(tiempito,sizeof(tiempito),"%d segundos",segundos);
    }
    return tiempito;
}
stock Mins_time(minutos)
{
    new tiempito[150];
    new horitas,dias;
    if(minutos > 59)
    {
        horitas = minutos / 60;
        minutos = minutos - (horitas * 60);
    }
    if(horitas > 23)
    {
        dias = horitas / 24;
        horitas = horitas - (dias * 24);
    }
    if(dias > 0)
    {
        format(tiempito,sizeof(tiempito),"%d días, %d horas, %d minutos",dias,horitas,minutos);
    }
    else if(horitas > 0)
    {
        format(tiempito,sizeof(tiempito),"%d horas, %d minutos",horitas,minutos);
    }
    else
    {
        format(tiempito,sizeof(tiempito),"%d minutos",minutos);
    }
    return tiempito;
}

stock GetMonth(Month)
{
    new MonthStr[15];
    switch(Month)
    {
        case 1:  MonthStr = "Enero";
        case 2:  MonthStr = "Febrero";
        case 3:  MonthStr = "Marzo";
        case 4:  MonthStr = "Abril";
        case 5:  MonthStr = "Mayo";
        case 6:  MonthStr = "Junio";
        case 7:  MonthStr = "Julio";
        case 8:  MonthStr = "Agosto";
        case 9:  MonthStr = "Septiembre";
        case 10: MonthStr = "Octubre";
        case 11: MonthStr = "Noviembre";
        case 12: MonthStr = "Diciembre";
    }
    return MonthStr;
}

GetWeekDay(day=0, month=0, year=0)
{
    if (!day)
    getdate(year, month, day);
    new weekday_str[12],j,e;
    if (month <= 2)
    {
        month += 12;
        --year;
    }
    j = year % 100;
    e = year / 100;
    switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
    {
        case 0: weekday_str = "Sabado";
        case 1: weekday_str = "Domingo";
        case 2: weekday_str = "Lunes";
        case 3: weekday_str = "Martes";
        case 4: weekday_str = "Miercoles";
        case 5: weekday_str = "Jueves";
        case 6: weekday_str = "Viernes";
    }
    return weekday_str;
}

//-
funcion _robo(playerid, tipo, d_ran)
{
	if (tipo == 1)
	{
	    switch(d_ran)
		{
			case 0:
			{
				new _obj=121;
				if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, _obj); user[playerid][jm_Derecha] = _obj, user[playerid][jm_DerechaCant] = 1;}
				else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, _obj); user[playerid][jm_Izquierda] = _obj, user[playerid][jm_IzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", "Lograste tomar un teléfono, sal rápido del local.");
			}
			case 1:
			{
				new _obj=95;
				if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, _obj); user[playerid][jm_Derecha] = _obj, user[playerid][jm_DerechaCant] = 1;}
				else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, _obj); user[playerid][jm_Izquierda] = _obj, user[playerid][jm_IzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", "Lograste tomar una botella de agua, sal rápido del local.");
			}
			case 2:
			{
				new _obj=91;
				if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, _obj); user[playerid][jm_Derecha] = _obj, user[playerid][jm_DerechaCant] = 1;}
				else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, _obj); user[playerid][jm_Izquierda] = _obj, user[playerid][jm_IzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", "Lograste tomar una bolsa de patatas, sal rápido del local.");
			}
			case 3:
			{
				new _obj=83;
				if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, _obj); user[playerid][jm_Derecha] = _obj, user[playerid][jm_DerechaCant] = 1;}
				else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, _obj); user[playerid][jm_Izquierda] = _obj, user[playerid][jm_IzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", "Lograste tomar unos dados, sal rápido del local.");
			}
			case 4:
			{
				new _obj=92;
				if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, _obj); user[playerid][jm_Derecha] = _obj, user[playerid][jm_DerechaCant] = 1;}
				else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, _obj); user[playerid][jm_Izquierda] = _obj, user[playerid][jm_IzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", "Lograste tomar una bolsa de nachos, sal rápido del local.");
			}
		}
	}
	if (user[playerid][jHabilidad][3] < 12) user[playerid][jHabilidad][3]++;
	user[playerid][jTiempos][16] = 60;
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	limitarobo[playerid] = 0;
	return 1;
}

GCMD:hurtar(playerid)
{
	new _txt[128];
	if (!Es_job(playerid, 2)) return _Mensaje(playerid, 0, "681", "No eres delicuente.");
	if (limitarobo[playerid] == 1) return _Mensaje(playerid, 5, "0", "No puedes usar el comando ahora.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
	if (GetPlayerVirtualWorld(playerid) < 300) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7.");
	new n_id = GetPlayerVirtualWorld(playerid) - 300, d_ran = random(5);
	if (i_Negocio[n_id][nTipo] != 1) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7.");
	if (en_pos(playerid, 7.0, i_Negocio[n_id][nInteriorX], i_Negocio[n_id][nInteriorY], i_Negocio[n_id][nInteriorZ])) return _Mensaje(playerid, 4, "b0b0b0", "Estás a simple vista, intenta tomar un objeto desde otro punto.");
	if (user[playerid][jTiempos][16] != 0) return decir_eltiempo(playerid, 16);
    limitarobo[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Congelado", 1);

	if(user[playerid][jDtipo] == 3 && user[playerid][jDpower] == 3)
    {
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~p~objeto...",3000,3);
		SetTimerEx("_robo", 2000, false, "iii", playerid, i_Negocio[n_id][nTipo], d_ran);
	}
	else
	{
		textgame_player(playerid,"~n~~n~~n~~n~~n~~w~tomando ~p~objeto...",5000,3);
		SetTimerEx("_robo", 4000, false, "iii", playerid, i_Negocio[n_id][nTipo], d_ran);
	}
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 1, 0, 0, 1);
	if (d_ran == 0)
	{
		new location[70];
		Get2DZone(location, MAX_ZONE_NAME, i_Negocio[n_id][nExteriorX], i_Negocio[n_id][nExteriorY], i_Negocio[n_id][nExteriorZ]);
		_Mensaje(playerid, 4, "FFEA5F", "Una persona te ha visto robar y ha llamado a la Policía.");
		format(_txt, sizeof(_txt), "CENTRAL: Un anónimo ha denunciado que se está cometiendo un robo a una tienda en %s.", location);
		_MensajeRfac(1, C_COLORPOLICIA, _txt);
		format(_txt, sizeof(_txt), "[Atención]{FFFFFF} %s está robando el negocio %s [%d].", nombre_pj(playerid), i_Negocio[n_id][nNombre], n_id);
		MensajeAdmin(_txt);
	}
	return 1;
}

GCMD:cachear(playerid,  const params[]) return cmd_revisar(playerid, params);
GCMD:revisar(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 2) && (user[playerid][jHabilidad][3] < 3)) return _Mensaje(playerid, 0, "0", "Debes ser PD o habilidad mínima de delincuente (3).");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/revisar [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(3.0, playerid, params[0])) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (playerid == params[0]) return _Mensaje(playerid, 3, "0", "/revisar [id jugador]");

	new accion_me[MAX_TEXT_CHAT];

	if (GetPVarInt(params[0], "EnCrack") == 0) //no_esta_herido
	{
	    if (Esposado[params[0]] != 0)
		{
			R_Inventario(playerid, params[0]);
			format(accion_me, sizeof(accion_me), "revisa a %s para encontrar algo.", nombre_pj(params[0], 0));
			cmd_me(playerid, accion_me);
		}
		else
		{
			format(accion_me, sizeof(accion_me), "%s intenta revisar tus bolsillos ¿estás de acuerdo?", nombre_pj(playerid, 0));
			ExPlayerDialog(params[0], D_Cacheo, DIALOG_STYLE_MSGBOX, "Revisión:", accion_me, "Mostrar", "Negarse");
			SetPVarInt(params[0], "en_cacheo", playerid);
		}
	}
	else //esta_herido
	{
		R_Inventario(playerid, params[0]);
		format(accion_me, sizeof(accion_me), "revisa a %s para encontrar algo.", nombre_pj(params[0], 0));
		cmd_me(playerid, accion_me);
	}
	return 1;
}

GCMD:fuerza(playerid,  const params[])
{
	new _txt[128];
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/fuerza [id jugador]");
	if (IsPlayerConnected(params[0]) && CercaDelWeon(2.0, playerid, params[0]))
	{
		if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		new fuerza = user[playerid][jFuerza];
		format(_txt, sizeof(_txt), "Fuerza de %s: {b00000}%.2f{b0b0b0}.", nombre_pj(playerid), float(fuerza) / 10);
		_Mensaje(params[0], 4, "b0b0b0", _txt);
	} else _Mensaje(playerid, 0, "76", "Estás lejos del jugador o no se encuentra conectado.");
	return 1;
}

GCMD:delincuente(playerid,  const params[])
{
	new _txt[128];
	if (!Es_job(playerid, 2, 5)) return _Mensaje(playerid, 0, "681", "No eres delincuente.");
	if (user[playerid][jPuntosRol][0] < 1) { limpiar_p(playerid); return 1; }
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/delincuente [id jugador]");
	if (IsPlayerConnected(params[0]) && CercaDelWeon(2.0, playerid, params[0])) {
		if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		format(_txt, sizeof(_txt), "%s - Habilidad de delincuente: {b00000}%d{b0b0b0}.", nombre_pj(playerid, 0), user[playerid][jHabilidad][3]);
		_Mensaje(params[0], 4, "b0b0b0", _txt);
	} else _Mensaje(playerid, 0, "76", "Estás lejos del jugador o no se encuentra conectado.");
	return 1;
}

GCMD:staff(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	set_pos(playerid, 8301.9980, 13680.3301, 33.5163, 0, 0, 0);
	return 1;
}

GCMD:camionero(playerid)
{
	Mensaje_(playerid, -1, "Trabajo eliminado, próximamente uno nuevo.");
	return 1;
}

GCMD:darpd(playerid,  const params[])
{
	if (!Es_Lider(playerid, 1)) return _Mensaje(playerid, 0, "222", "No eres líder de la PD.");
	new string[256];
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/darpd [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "222", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[params[0]][jMiembro] == 1)
	{
		if (user[params[0]][jNivel] == 0)
		{
			user[params[0]][jNivel] = 1;
			user[params[0]][j_Horas] = 10;
			format(string, sizeof(string), "%s le ha retirado la restricción al miembro %s.", nombre_pj(playerid), nombre_pj(params[0]));
			mensaje_faccion(1, 0xADC3E7FF, string);
		} else _Mensaje(playerid, 0, "221", "Ese jugador no es nivel 0.");
	} else _Mensaje(playerid, 0, "221", "Ese jugador no pertenece a la PD.");
	return 1;
}

GCMD:transferir(playerid,  const params[])
{
	if(!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
    if(user[playerid][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes transferir debido a tu restricción de dos horas de juego.");
    if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
	ExPlayerDialog(playerid, D_BANCOT, DIALOG_STYLE_INPUT, "Transferir", "Ingrese la ID del jugador", "Siguiente", "Cancelar");
    return 1;
}

GCMD:borrar(playerid)
{
	if (user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0) { _Mensaje(playerid, 0, "9", "No tienes nada en ninguna mano."); return 1; }
	if (!en_pos(playerid, 4.0, 866.7289, 2294.6890, 1910.3156)) return _Mensaje(playerid, 0, "0", "No estás en el lugar de borrado.");
	QuitarManos(playerid);
	_Mensaje(playerid, 4, "A7CE00", "Has incautado los objetos que tenías en manos.");
    return 1;
}

GCMD:depositar(playerid,  const params[])
{
	if (GetPlayerVirtualWorld(playerid) < 300) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7 o gasolinera.");
	new n_id = GetPlayerVirtualWorld(playerid) - 300;
	if (i_Negocio[n_id][nTipo] != 1 && i_Negocio[n_id][nTipo] != 10) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7 o gasolinera.");
	if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
	if (user[playerid][jm_Derecha] != 84 && user[playerid][jm_Izquierda] != 84){ _Mensaje(playerid, 0, "9", "Necesitas tener tu tarjeta de débito en la mano."); return 1;}
	new string[128], dinero;
	if (!sscanf(params, "d", dinero)) {
		if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
		if (dinero > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 0, "187", "No posees esa cantidad.");
		if (dinero < 1 || dinero > 10000) return _Mensaje(playerid, 0, "188", "Máximo: $10.000.");
		Compra(playerid, dinero);
		user[playerid][jBanco] += dinero;
		format(string, sizeof(string), "Depositaste a tu cuenta $%d, total de dinero $%d.", dinero, user[playerid][jBanco]);
		_Mensaje(playerid, 4, "D7D7D4", string);
		format(string, sizeof(string), "Registros: %s depósito $%d.", nombre_pj(playerid), dinero);
		Log("Registros/D_bank.log", string);
	} else _Mensaje(playerid, 3, "0", "/depositar [monto]");
	return 1;
}

GCMD:retirar(playerid,  const params[])
{
	if (GetPlayerVirtualWorld(playerid) < 300) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7 o gasolinera.");
	new n_id = GetPlayerVirtualWorld(playerid) - 300;
	if (i_Negocio[n_id][nTipo] != 1 && i_Negocio[n_id][nTipo] != 10) return _Mensaje(playerid, 0, "0", "No te encuentras dentro de un 24/7 o gasolinera.");
	if (user[playerid][jDebito] == -1) return _Mensaje(playerid, 0, "245", "No posees una cuenta bancaria.");
	if (user[playerid][jm_Derecha] != 84 && user[playerid][jm_Izquierda] != 84){ _Mensaje(playerid, 0, "9", "Necesitas tener tu tarjeta de débito en la mano."); return 1;}
	new string[128], dinero;
	if (!sscanf(params, "d", dinero)) {
		if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
		if(dinero > user[playerid][jBanco] || dinero < 1) return _Mensaje(playerid, 0, "72", "Cantidad de dinero incorrecta.");
  		if(dinero < 0) return _Mensaje(playerid, 0, "73", "No puedes retirar menos de 0.");
    	Ganancia(playerid, dinero);
     	user[playerid][jBanco] -= dinero;
		format(string, sizeof(string), "Retiraste de tu cuenta $%d, total de dinero $%d.", dinero, user[playerid][jBanco]);
		_Mensaje(playerid, 4, "FAE800", string);
		format(string, sizeof(string), "Registros: %s retiró $%d.", nombre_pj(playerid), dinero);
		Log("Registros/R_bank.log", string);
	} else {
		_Mensaje(playerid, 3, "0", "/retirar [monto]");
        format(string, sizeof(string), "Tienes $%d en tu cuenta.", user[playerid][jBanco]);
		_Mensaje(playerid, 4, "D7D7D4", string);
	}
	return 1;
}

GCMD:padelantar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(en_pos(playerid, 2, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2]))
		{
			if (GetPlayerVirtualWorld(playerid) == InfoMaria[f][sVirtualWorld] && GetPlayerInterior(playerid) == InfoMaria[f][sInterior])
			{
				if(InfoMaria[f][sSlot])
				{
					InfoMaria[f][sTime] = 1;
					_Mensaje(playerid, 4, "A7CE00", "Bajaste el tiempo de la planta 1 minuto.");
					ActualizarMaria(f);
					return 1;
				}
			}
		}
	}
	return _Mensaje(playerid, 0, "1", "No estás en cerca de una planta.");
}

GCMD:fardo(playerid,  const params[])
{
	new string[128];
	if (sscanf(params, "s[10]", params)) return _Mensaje(playerid, 3, "0", "/fardo [crear - sacar - guardar]");

	if (!strcmp(params, "crear", true, 5))
	{
		if(!tiene_droga(playerid, 1) && !tiene_droga(playerid, 2)) { _Mensaje(playerid, 4, "b0b0b0", "No tienes droga en ninguna mano."); return 1; }
		if(tiene_droga(playerid, 1)) //mano derecha
		{
			new fardo = tiene_droga(playerid, 1);
			user[playerid][jm_Derecha] = fardo;
			RemovePlayerAttachedObject(playerid, 7);
			PonerObjeto(playerid, 1, fardo);
			format(string, sizeof(string), "Creaste un %s (%d) en tu mano derecha.", InfoObjeto[fardo][NombreObjeto], user[playerid][jm_DerechaCant]);
			_Mensaje(playerid, 4, "F8D48C", string);
			accion_rol(playerid, 0, "crea un fardo de droga.");
			return 1;
		}
		else if(tiene_droga(playerid, 2)) //mano izquierda
		{
			new fardo = tiene_droga(playerid, 2);
			user[playerid][jm_Izquierda] = fardo;
			RemovePlayerAttachedObject(playerid, 8);
			PonerObjeto(playerid, 2, fardo);
			format(string, sizeof(string), "Creaste un %s (%d) en tu mano izquierda.", InfoObjeto[fardo][NombreObjeto], user[playerid][jm_IzquierdaCant]);
			_Mensaje(playerid, 4, "F8D48C", string);
			accion_rol(playerid, 0, "crea un fardo de droga.");
			return 1;
		}
	}
	else if (!strcmp(params, "sacar", true, 5))
	{
	    new cantidad;
		if (!tiene_fardo(playerid, 1) && !tiene_fardo(playerid, 2)) { _Mensaje(playerid, 4, "b0b0b0", "No tienes un fardo de droga en ninguna mano."); return 1; }
		if (user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0) { _Mensaje(playerid, 0, "0", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.."); return 1; }
		if (sscanf(params, "s[32]i", params, cantidad)) return _Mensaje(playerid, 3, "0", "/fardo sacar [cantidad]");
		if (cantidad < 1 || cantidad > 50){_Mensaje(playerid, 4, "b0b0b0", "La cantidad debe estar entre 1 y 50."); return 1;}
		if (tiene_fardo(playerid, 1))
		{
			if(cantidad > user[playerid][jm_DerechaCant]){_Mensaje(playerid, 4, "b0b0b0", "No hay tanta cantidad en el fardo."); return 1;}
			new objeto = tiene_fardo(playerid, 1);
			user[playerid][jm_DerechaCant] -= cantidad;
			user[playerid][jm_Izquierda] = objeto, PonerObjeto(playerid, 2, objeto);
			user[playerid][jm_IzquierdaCant] = cantidad;
			format(string, sizeof(string), "%s sacó %s del fardo.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
			ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			return 1;
		}
		else if (tiene_fardo(playerid, 2))
		{
			if(cantidad > user[playerid][jm_IzquierdaCant]){_Mensaje(playerid, 4, "b0b0b0", "No hay tanta cantidad en el fardo."); return 1;}
			new objeto = tiene_fardo(playerid, 2);
			user[playerid][jm_IzquierdaCant] -= cantidad;
			user[playerid][jm_Derecha] = objeto, PonerObjeto(playerid, 1, objeto);
			user[playerid][jm_DerechaCant] = cantidad;
			format(string, sizeof(string), "%s sacó %s del fardo.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
			ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			return 1;
		}
	}
	else if (!strcmp(params, "guardar", true, 7))
	{
		if (!tiene_fardo(playerid, 1) && !tiene_fardo(playerid, 2)) { _Mensaje(playerid, 4, "b0b0b0", "No tienes un fardo de droga en ninguna mano."); return 1; }
		if (tiene_fardo(playerid, 1))
		{
			new objeto = tiene_fardo(playerid, 1);
			if(user[playerid][jm_Derecha] != objeto && user[playerid][jm_Izquierda] != objeto){ _Mensaje(playerid, 0, "9", "Tienes una droga diferente del fardo."); return 1;}
			if (user[playerid][jm_DerechaCant]+user[playerid][jm_IzquierdaCant] > 500) return _Mensaje(playerid, 4, "b0b0b0", "Sólo entran 500 unidades en el fardo.");
			user[playerid][jm_DerechaCant] += user[playerid][jm_IzquierdaCant];
			user[playerid][jm_Izquierda] = 0;
			user[playerid][jm_IzquierdaCant] = 0;
			format(string, sizeof(string), "%s guardó %s en el fardo.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
			ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			return 1;
		}
		else if (tiene_fardo(playerid, 2))
		{
			new objeto = tiene_fardo(playerid, 2);
			if(user[playerid][jm_Derecha] != objeto && user[playerid][jm_Izquierda] != objeto){ _Mensaje(playerid, 0, "9", "Tienes una droga diferente del fardo."); return 1;}
			if (user[playerid][jm_IzquierdaCant]+user[playerid][jm_DerechaCant] > 500) return _Mensaje(playerid, 4, "b0b0b0", "Sólo entran 500 unidades en el fardo.");
			user[playerid][jm_IzquierdaCant] += user[playerid][jm_DerechaCant];
			user[playerid][jm_Derecha] = 0;
			user[playerid][jm_DerechaCant] = 0;
			format(string, sizeof(string), "%s guardó %s en el fardo.", nombre_pj(playerid, 0), InfoObjeto[objeto][NombreObjeto]);
			ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			return 1;
		}
	}
	return 1;
}

GCMD:limpiarmaletero(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!sscanf(params, "ds[64]", params[0]))
	{
		if (!i_Vehiculo[params[0]][vModelo]) return _Mensaje(playerid, 0, "548", "Id vehículo invalida.");
		_LimpiarM(params[0]);
		_Mensaje(playerid, 4, "00ABAE", "Maletero indicado ha sido limpiado con éxito.");
	} else _Mensaje(playerid, 3, "0", "/limpiarmaletero [id veh]");
	return 1;
}

GCMD:v_guardar(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/v_guardar [matricula] // sin el LS-");

	if (!i_Vehiculo[params[0]-1000][vModelo]) return _Mensaje(playerid, 0, "0", "Id vehículo invalida.");
	if (!i_Vehiculo[params[0]-1000][vSpawned]) return _Mensaje(playerid, 0, "0", "Vehículo se encuentra guardado.");
	if (IsVehicleBusy(i_Vehiculo[params[0]-1000][vID])) return _Mensaje(playerid, 0, "0", "ERROR: El vehículo posee jugadores dentro de el, no puede ser guardado.");

	format(string, sizeof(string), "Vehículo LS-%d - Dueño %s, fue guardado con éxito", params[0], i_Vehiculo[params[0]-1000][vDueno]);
	VehiculoGuardar(params[0]-1000);
	_Mensaje(playerid, 4, "00ABAE", string);

	return 1;
}

GCMD:editarv(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!sscanf(params, "ds[64]", params[0], params[1]))
	{
		if (!i_Vehiculo[params[0]][vModelo]) return _Mensaje(playerid, 0, "548", "Id vehículo invalida.");
		format(i_Vehiculo[params[0]][vDueno], 64, "%s", params[1]);
		vehicleSave(params[0]);
		_Mensaje(playerid, 4, "00ABAE", "Vehículo indicado ha sido cambiado de dueño con éxito.");
	} else _Mensaje(playerid, 3, "0", "/editarv [id veh] [nombre apellido]");
	return 1;
}

GCMD:quitarllave(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/quitarllave [id jugador] [ranura]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] == 0) return _Mensaje(playerid, 0, "458", "Ranura 0 no existe.");
	if (params[1] < 1 || params[1] > 6) { _Mensaje(playerid, 0, "0", "La ranura debe estar entre 1 y 6."); return 1; }

	user[params[0]][jLlaveCoche][params[1]-1] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllave, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarllavep(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/quitarllavep [id jugador] [ranura]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] == 0) return _Mensaje(playerid, 0, "458", "Ranura 0 no existe.");
	if (params[1] < 1 || params[1] > 5) { _Mensaje(playerid, 0, "0", "La ranura debe estar entre 1 y 5."); return 1; }

	user[params[0]][j2Vehiculos][params[1]-1] = 0;
	user[params[0]][j2Vehixculos][params[1]-1] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllavep, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

funcion _ordenador(playerid)
{
	new _dialog1[3000], _dialog2[300];
	strcat(_dialog1, "{ffffff}1. Identificar una persona (Nombre o ID)\n\
	2. Informes y registros de búsqueda\n\
	3. Identificar un vehículo\n\
	4. Atender buzón de llamadas (911)\n\
	5. Comprobar lista de sospechosos\n\
	6. Localización de vivienda\n\
	7. Solicitud de refuerzos a posición", sizeof(_dialog1));
	format(_dialog2, sizeof(_dialog2), "{b0b0b0}Ordenador policial - Sesión iniciada: %s		", nombre_pj(playerid, 0));
	ExPlayerDialog(playerid, D_Computador1, DIALOG_STYLE_LIST, _dialog2, _dialog1, ">", "Salir");
	return 1;
}

GCMD:computador(playerid)
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "381", "No formas parte de la PD.");
	if (IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!LSPD_Veh(vehicleid) && !SADOC_Veh(vehicleid)) return _Mensaje(playerid, 0, "378", "Debes estar en un vehiculo de la PD.");
		_ordenador(playerid);
	}
	else
	{
		if(!en_pos(playerid,4.0,861.3701, 2306.4800, 1910.4048) && !en_pos(playerid, 4.0, 338.6380,857.9088,1004.4059)) return _Mensaje(playerid, 0, "126", "No estás en la oficina de la PD.");
		_ordenador(playerid);
	}
	return 1;
}

GCMD:entrarfd(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la FD.");
	if (!en_pos(playerid, 10.0, 1179.0082,-1308.5184,13.6091)) return _Mensaje(playerid, 0, "0", "No estás en la entrada del garaje FD.");
	new vw_pd = 55;
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		SetPlayerPos(playerid, 1351.2368,1382.4231,10.8500);
		SetPlayerFacingAngle(playerid, 273.8729);
		SetPlayerInterior(playerid, 12);
		SetPlayerVirtualWorld(playerid, vw_pd);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(IsPlayerInVehicle(playerid, tmpcar))
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerVirtualWorld(playerid, vw_pd);
				SetPlayerInterior(playerid, 12);
				SetVehicleVirtualWorld(tmpcar, vw_pd);
				LinkVehicleToInterior(tmpcar, 12);
				SetVehiclePos(tmpcar, 1354.2236,1381.9771,10.5555);
				SetVehicleZAngle(tmpcar, 269.2012);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
					{
						SetPlayerInterior(p, 12);
						SetPlayerVirtualWorld(p, vw_pd);
					}
				}
				return 1;
			}
		}
	}
	return 1;
}
GCMD:salirfd(playerid)
{
	if (!en_pos(playerid, 10.0, 1354.2236,1381.9771,10.5555)) return _Mensaje(playerid, 0, "0", "No estás en la salida del garaje FD.");
	if (GetPlayerVirtualWorld(playerid) != 55) return SendClientMessage(playerid, 0xccccccff, "No estás en ningún interior del garaje FD.");
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		SetPlayerPos(playerid, 1174.5990,-1313.1893,13.9867);
		SetPlayerFacingAngle(playerid, 259.2689);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			for(new i=0; i <= MAX_VEHICLES; i++)
			{
				if (VehicleToPoint(5.0, i, 1179.0082,-1308.5184,13.6091))
				{
					_Mensaje(playerid, 0, "540", "Hay un vehículo cerca del portón, espera a que se mueva.");
					return 1;
				}
			}
			if(IsPlayerInVehicle(playerid, tmpcar))
			{
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				SetVehiclePos(tmpcar, 1179.0082,-1308.5184,13.6091);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehicleZAngle(tmpcar, 269.1404);
				SetCameraBehindPlayer(playerid);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p,tmpcar))
					{
						SetPlayerInterior(p,0);
						SetPlayerVirtualWorld(p,0);
					}
				}
				return 1;
			}
		}
	}
	return 1;
}

GCMD:entrarpd(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (!en_pos(playerid, 10.0, 8834.0713,14108.4082,6.8737) && !en_pos(playerid, 10.0, 1243.9065,-1730.1232,13.2867)) return _Mensaje(playerid, 0, "0", "No estás en la entrada del garaje PD o DIC.");
	new interior, vw_pd = 77;
	if (sscanf(params, "i", interior)) return _Mensaje(playerid, 3, "0", "/entrarpd [opción] (1 - Unidandes ordinarias) (2 - Unidades unmarked)");
	switch (interior)
	{
		case 1:
		{
		   	if (!en_pos(playerid, 10.0, 8834.0713,14108.4082,6.8737)) return _Mensaje(playerid, 0, "0", "No estás en la entrada del garaje PD.");
			vw_pd = 77;
		}
		case 2:
		{
		    if (!en_pos(playerid, 10.0, 1243.9065,-1730.1232,13.2867)) return _Mensaje(playerid, 0, "0", "No estás en la entrada del garaje DIC.");
			vw_pd = 88;
		}
		default: return _Mensaje(playerid, 3, "0", "/entrarpd [opción] (1 - Unidandes ordinarias) (2 - Unidades unmarked)");
	}
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		SetPlayerPos(playerid, 1351.2368,1382.4231,10.8500);
		SetPlayerFacingAngle(playerid, 273.8729);
		SetPlayerInterior(playerid, 12);
		SetPlayerVirtualWorld(playerid, vw_pd);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(IsPlayerInVehicle(playerid, tmpcar))
			{
				SetPlayerVirtualWorld(playerid, vw_pd);
				SetPlayerInterior(playerid, 12);
				SetVehicleVirtualWorld(tmpcar, vw_pd);
				LinkVehicleToInterior(tmpcar, 12);
				SetVehiclePos(tmpcar, 1354.2236,1381.9771,10.5555);
				SetVehicleZAngle(tmpcar, 269.2012);
				SetCameraBehindPlayer(playerid);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
					{
						SetPlayerInterior(p, 12);
						SetPlayerVirtualWorld(p, vw_pd);
					}
				}
				return 1;
			}
		}
	}
	return 1;
}
GCMD:salirpd(playerid)
{
	if (!en_pos(playerid, 15.0, 1354.2236,1381.9771,10.5555)) return _Mensaje(playerid, 0, "0", "No estás en la salida del garaje PD.");
	if (GetPlayerVirtualWorld(playerid) != 77 && GetPlayerVirtualWorld(playerid) != 88) return SendClientMessage(playerid, 0xccccccff, "No estás en ningún interior del garaje PD.");
	new vw=GetPlayerVirtualWorld(playerid);
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(vw==77)//lspd
		{
			SetPlayerPos(playerid, 8834.0713,14108.4082,6.8737);
			SetPlayerFacingAngle(playerid, 3.7639);
		}
		else if(vw==88)//dic
		{
			SetPlayerPos(playerid, 1250.7279,-1735.2748,13.5970);
			SetPlayerFacingAngle(playerid, 355.9466);
		}
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new
				tmpcar = GetPlayerVehicleID(playerid),
				Float: x,
				Float: y,
				Float: z,
				Float: r
			;
			if(vw==77)//lspd
			{
			    x= 8836.7754;
			    y= 14110.1318;
			    z= 6.8737;
			    r= 10.8335;
			}
			else if(vw==88)//dic
			{
			    x= 1243.9065;
			    y= -1730.1232;
			    z= 13.2867;
			    r= 21.8199;
			}
			for(new i=0; i <= MAX_VEHICLES; i++)
			{
				if (VehicleToPoint(5.0, i, x,y,z))
				{
					_Mensaje(playerid, 0, "540", "Hay un vehículo cerca del portón, espera a que se mueva.");
					return 1;
				}
			}
			if(IsPlayerInVehicle(playerid, tmpcar))
			{
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				SetVehiclePos(tmpcar, x,y,z);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehicleZAngle(tmpcar, r);
				SetCameraBehindPlayer(playerid);
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p,tmpcar))
					{
						SetPlayerInterior(p,0);
						SetPlayerVirtualWorld(p,0);
					}
				}
				return 1;
			}
		}
	}
	return 1;
}



GCMD:darhorasoff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], name[MAX_PLAYER_NAME], dinero;
	if (sscanf(params, "s[50]d", name, dinero)) return _Mensaje(playerid, 3, "0", "/darhorasoff [Nombre_Apellido] [monto]");
	if (characterCheck(name))
	{
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Horas = Horas+%d WHERE NombrePJ = '%e'", dinero, name);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[AvisoAdmin] %s cedió las horas de juego %d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		MensajeAdmin(string, 2);
		format(string, sizeof(string), "Registros: %s cedió las horas de juego %d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		Log("Registros/DarStats.log", string);
	} else _Mensaje(playerid, 0, "179", "Ese personaje no existe.");
	return 1;
}

GCMD:darniveloff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], name[MAX_PLAYER_NAME], dinero;
	if (sscanf(params, "s[50]d", name, dinero)) return _Mensaje(playerid, 3, "0", "/darniveloff [Nombre_Apellido] [monto]");
	if (characterCheck(name))
	{
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Nivel = %d WHERE NombrePJ = '%e'", dinero, name);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[AvisoAdmin] %s cedió el nivel %d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		MensajeAdmin(string, 2);
		format(string, sizeof(string), "Registros: %s cedió el nivel %d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		Log("Registros/DarStats.log", string);
	} else _Mensaje(playerid, 0, "179", "Ese personaje no existe.");
	return 1;
}

GCMD:darbancooff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], name[MAX_PLAYER_NAME], dinero;
	if (sscanf(params, "s[50]d", name, dinero)) return _Mensaje(playerid, 3, "0", "/darbancooff [Nombre_Apellido] [monto]");
	if (characterCheck(name))
	{
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Banco = Banco+(%d) WHERE NombrePJ = '%e'", dinero, name);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[AvisoAdmin] %s ha otorgado la cantidad banco de $%d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		MensajeAdmin(string, 2);
		format(string, sizeof(string), "Registros: %s le cedio la cantidad banco de $%d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		Log("Registros/DarDinero.log", string);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

GCMD:dardinerooff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], name[MAX_PLAYER_NAME], dinero;
	if (sscanf(params, "s[50]d", name, dinero)) return _Mensaje(playerid, 3, "0", "/dardinerooff [Nombre_Apellido] [monto]");
	if (characterCheck(name))
	{
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Dinero = Dinero+(%d) WHERE NombrePJ = '%e'", dinero, name);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[AvisoAdmin] %s ha otorgado la cantidad de $%d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		MensajeAdmin(string, 2);
		format(string, sizeof(string), "Registros: %s le cedio la cantidad de $%d a %s. (OFF)", nombre_pj(playerid), dinero, name);
		Log("Registros/DarDinero.log", string);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

GCMD:heridas(playerid,  const params[])
{
	new NooSi[8][30], a1NooSi[30], a2NooSi2[30],  a3NooSi3[30], a4NooSi4[30], a5NooSi5[30], a6NooSi6[30], a7NooSi7[30], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/heridas [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 4, "b0b0b0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (Spectando[playerid] == 0) if (!CercaDelWeon(5.0, playerid, playerid2)) { _Mensaje(playerid, 0, "0", "Estás lejos del jugador."); return 1; }
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (IsPlayerInAnyVehicle(playerid)) { _Mensaje(playerid, 0, "0", "No puedes ver las heridas desde un vehículo."); return 1; }

	if (InfoHeridas[playerid2][Cabezar] == 0) NooSi[0] = "No";
	else if (InfoHeridas[playerid2][Cabezar] > 0) { format(a1NooSi, sizeof(a1NooSi), "Si(%d)", InfoHeridas[playerid2][Cabezar]); NooSi[0] = a1NooSi; }
	if (InfoHeridas[playerid2][Torsor] == 0) NooSi[1] = "No";
	else if (InfoHeridas[playerid2][Torsor] > 0) { format(a2NooSi2, sizeof(a2NooSi2), "Si(%d)", InfoHeridas[playerid2][Torsor]); NooSi[1] = a2NooSi2; }
	if (InfoHeridas[playerid2][BrazoDr] == 0) NooSi[2] = "No";
	else if (InfoHeridas[playerid2][BrazoDr] > 0) { format(a3NooSi3, sizeof(a3NooSi3), "Si(%d)", InfoHeridas[playerid2][BrazoDr]); NooSi[2] = a3NooSi3; }
	if (InfoHeridas[playerid2][BrazoIr] == 0) NooSi[3] = "No";
	else if (InfoHeridas[playerid2][BrazoIr] > 0) { format(a4NooSi4, sizeof(a4NooSi4), "Si(%d)", InfoHeridas[playerid2][BrazoIr]); NooSi[3] = a4NooSi4; }
	if (InfoHeridas[playerid2][EntrePr] == 0) NooSi[4] = "No";
	else if (InfoHeridas[playerid2][EntrePr] > 0) { format(a5NooSi5, sizeof(a5NooSi5), "Si(%d)", InfoHeridas[playerid2][EntrePr]); NooSi[4] = a5NooSi5; }
	if (InfoHeridas[playerid2][PiernaDr] == 0) NooSi[5] = "No";
	else if (InfoHeridas[playerid2][PiernaDr] > 0) { format(a6NooSi6, sizeof(a6NooSi6), "Si(%d)", InfoHeridas[playerid2][PiernaDr]); NooSi[5] = a6NooSi6; }
	if (InfoHeridas[playerid2][PiernaIr] == 0) NooSi[6] = "No";
	else if (InfoHeridas[playerid2][PiernaIr] > 0) { format(a7NooSi7, sizeof(a7NooSi7), "Si(%d)", InfoHeridas[playerid2][PiernaIr]); NooSi[6] = a7NooSi7; }
	if (InfoHeridas[playerid2][Lesionesr] == 0) NooSi[7] = "No";
	else if (InfoHeridas[playerid2][Lesionesr] > 0) NooSi[7] = "Si";

	new coordsstring[300], DialogStatus[3000], coordsstring2[300];

	strcat(DialogStatus, "Lugar o tipo\tHeridas (disparos)\tDetalles (arma)\n", sizeof(DialogStatus));

	format(coordsstring, sizeof(coordsstring), "{ffffff}Cabeza\t%s\t%s\n",NooSi[0],InfoHeridas[playerid2][Cabeza]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Torso\t%s\t%s\n",NooSi[1],InfoHeridas[playerid2][Torso]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Brazo derecho\t%s\t%s\n",NooSi[2],InfoHeridas[playerid2][BrazoD]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Brazo izquierdo\t%s\t%s\n",NooSi[3],InfoHeridas[playerid2][BrazoI]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Entrepierna\t%s\t%s\n",NooSi[4],InfoHeridas[playerid2][EntreP]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Pierna derecha\t%s\t%s\n",NooSi[5],InfoHeridas[playerid2][PiernaD]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Pierna izquierda\t%s\t%s\n",NooSi[6],InfoHeridas[playerid2][PiernaI]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Indiferente\t%s\t%d Puñetazo(s)\n",NooSi[7],InfoHeridas[playerid2][Lesionesr]);
	strcat(DialogStatus, coordsstring);
	format(coordsstring2, sizeof(coordsstring2), "{b0b0b0}Heridas de %s", nombre_pj(playerid2));

	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_TABLIST_HEADERS, coordsstring2, DialogStatus, "Cerrar", "");
	return 1;
}

GCMD:limpiartodooff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/limpiartodooff [Nombre_Apellido]");
	new nomlt_off[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", nomlt_off);
	new string[128];
	yield 1;
	if (characterCheck(nomlt_off))
	{
		static val_ZERO = 0;
		new ORM:lt_orm = orm_create("characters");
		orm_addvar_string(lt_orm, nomlt_off, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(lt_orm, "NombrePJ");
		for(new i = 0; i < 10; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Bolsillo%d", i);
			orm_addvar_int(lt_orm, val_ZERO, sql);
			format(sql, sizeof(sql), "BolsilloCant%d", i);
			orm_addvar_int(lt_orm, val_ZERO, sql);
		}
		orm_addvar_int(lt_orm, val_ZERO, "Izquierda");
		orm_addvar_int(lt_orm, val_ZERO, "IzquierdaCant");
		orm_addvar_int(lt_orm, val_ZERO, "Derecha");
		orm_addvar_int(lt_orm, val_ZERO, "DerechaCant");
		orm_addvar_int(lt_orm, val_ZERO, "Espalda");
		orm_addvar_int(lt_orm, val_ZERO, "EspaldaCant");
		for(new i = 0; i < 6; i++)
		{
			new sql[100];
			format(sql, sizeof(sql), "Cinturon%d", i);
			orm_addvar_int(lt_orm, val_ZERO, sql);
			format(sql, sizeof(sql), "CinturonCant%d", i);
			orm_addvar_int(lt_orm, val_ZERO, sql);
		}
		
		if( (task_await(orm_async_update(lt_orm))) == _:ERROR_OK ){
			format(string, 128, "[Administración]{FFFFFF} %s limpio el sistema de inventarios de %s. (CMD OFF)", nombre_pj(playerid), params);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s limpio el sistema de inventarios de %s. (CMD OFF)", nombre_pj(playerid), params);
			Log("Registros/LimpiarInventario.log", string);
		}
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

funcion SlotVehLibre()
{
	Loop(i,MAX_VEH_USADO,0)
	{
		if(!i_Usado[i][uModeloVeh]) return i;
	}
	return -1;
}

GCMD:venderveh(playerid,  const params[])
{
	if(!en_pos(playerid, 40, -63.0295, -1121.5996, 1.1733)) return _Mensaje(playerid, 0, "126", "No estás en la concesionaria de segunda mano (/gps concesionarias).");
	new id;
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/venderveh [id llave]");
	if (id < 1 || id > 6) { _Mensaje(playerid, 0, "0", "La ranura debe estar entre 1 y 6."); return 1; }
	if (user[playerid][jLlaveCoche][id-1] == 0) { _Mensaje(playerid, 0, "0", "No tienes ningún vehículo en esa ranura."); return 1; }
	if (id == 0) return _Mensaje(playerid, 0, "458", "Ranura 0 no existe.");
	if (user[playerid][jLlaveCoche][id-1] != 0 && strcmp(nombre_sin(playerid), i_Vehiculo[user[playerid][jLlaveCoche][id-1]-1000][vDueno], true) == 0)
	{
		if (GetPVarInt(playerid, "VenderConfirmado") == 0)
		{
			SetPVarInt(playerid, "VenderConfirmado", 1);
			_Mensaje(playerid, 4, "b0b0b0", "Recuerda que al vender el vehículo recibes la mitad de su precio original, re-escribe /venderveh.");
			_Mensaje(playerid, 4, "ff0000", "IMPORTANTE:{ffffff} Coloca el vehículo en algún espacio vacío de la zona, si es bote es en el agua.");
		}
		else
		{
			DeletePVar(playerid, "VenderConfirmado");
			new vid = user[playerid][jLlaveCoche][id-1]-1000, vehiculo = i_Vehiculo[vid][vID], vehid = SlotVehLibre();
			if (IsPlayerInVehicle(playerid, vehiculo))
			{
				if(vehid < 0) return _Mensaje(playerid, 0, "0", "Ya no hay más espacio, se podrán crear máximo 200 vehículos usados.");
				new Float: x,Float: y,Float: z,Float: angle,Float: health;
				GetVehicleHealth(vehiculo, health);
				GetVehicleDamageStatus(vehiculo, i_Vehiculo[vid][vDanioSuperficie], i_Vehiculo[vid][vDanioPuertas], i_Vehiculo[vid][vDanioLuces], i_Vehiculo[vid][vDanioRuedas]);
				GetVehiclePos(vehiculo, x, y, z);
				GetVehicleZAngle(vehiculo, angle);
				i_Usado[vehid][uModeloVeh] = i_Vehiculo[vid][vModelo];
				i_Usado[vehid][uPrecioVeh] = i_Vehiculo[vid][vPrecio] / 4 * 2;
				DarDineroGC(playerid, i_Vehiculo[vid][vPrecio] / 4 * 2);
				d_estado -= i_Vehiculo[vid][vPrecio] / 4 * 2;
				i_Usado[vehid][uSeguro] = i_Vehiculo[vid][vPatente];
				i_Usado[vehid][uPaintJob] = i_Vehiculo[vid][vPaintJob];
				i_Usado[vehid][uColor_1] = i_Vehiculo[vid][vColor_1];
				i_Usado[vehid][uColor_2] = i_Vehiculo[vid][vColor_2];
				i_Usado[vehid][uDanioSuperficie] = i_Vehiculo[vid][vDanioSuperficie];
				i_Usado[vehid][uDanioPuertas] = i_Vehiculo[vid][vDanioPuertas];
				i_Usado[vehid][uDanioLuces] = i_Vehiculo[vid][vDanioLuces];
				i_Usado[vehid][uDanioRuedas] = i_Vehiculo[vid][vDanioRuedas];
				i_Usado[vehid][uVida] = health;
				i_Usado[vehid][uGasolina] = 150;
				i_Usado[vehid][uStereo] = i_Vehiculo[vid][vStereo];
				i_Usado[vehid][uNeon] = i_Vehiculo[vid][vNeon];
				for (new m = 0; m < MAX_MODVEHICULOS; m++)
				{
					i_Usado[vehid][uModificaciones][m] = i_Vehiculo[vid][vModificaciones][m];
				}

				RemovePlayerFromVehicle(playerid);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetPlayerPos(playerid, X, Y, Z+2);
				VehiculoBorrar(vid);
				user[playerid][jLlaveCoche][id-1] = 0;
				characterSave(playerid);
				_Mensaje(playerid, 5, "0", "Su vehículo ha sido vendido a mitad de precio.");
				coches_usados+=1;
			} else return _Mensaje(playerid, 0, "327", "No estás dentro del vehículo que escogiste a vender.");
		}
	} else return _Mensaje(playerid, 0, "580", "No tienes este vehículo a tu nombre.");
	return 1;
}

GCMD:avisarpd(playerid)
{
	if(GetPVarInt(playerid, "EnCrack") == 0) return _Mensaje(playerid, 0, "12", "No puedes usar este comando sino estás herido.");
	if(YaAviso[playerid] == 1) return _Mensaje(playerid, 0, "12", "Ya usaste este comando, muere de nuevo y lo podrás usar.");
    ExPlayerDialog(playerid, D_AvisoMuerto, DIALOG_STYLE_MSGBOX, "{cccccc}Responde según tu situación", "Considerando el rol de entorno, ¿deseas alertar a los departamentos de emergencias (PD/FD)?", "Avisar", "Cancelar");
	YaAviso[playerid] = 1;
	return 1;
}

GCMD:destruir(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	new string[128];
	if (!sscanf(params, "d", params[1]))
	{
		if (!IsPlayerConnected(params[1])) return _Mensaje(playerid, 0, "165", "Ese jugador no esta conectado.");
		if (!CercaDelWeon(5.0, playerid, params[1])) return _Mensaje(playerid, 0, "165", "Estás lejos del jugador.");
		if (Spectando[params[1]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		if (!Es_Faccion(params[1], 1)) return _Mensaje(playerid, 0, "165", "Ese jugador no forma parte de la Ley.");
		QuitarManos(params[1]);
		format(string, sizeof(string), "* %s limpió las manos de %s.", nombre_pj(playerid), nombre_pj(params[1]));
		mensaje_faccion(user[playerid][jMiembro], C_LIGHTBLUE, string);
	} else _Mensaje(playerid, 3, "0", "/destruir [id jugador]");
	return 1;
}

GCMD:estadoc(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/estadoc [id vehículo]");
	if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
	new vehicleid = strval(params);
	new engine, lights, alarm, doors, bonnet, boot, objective, enginestatus[15], lightstatus[15], string[128];
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "657", "Este vehiculo no necesita gasolina.");
	if (engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "Apagado");
	else format(enginestatus, sizeof(enginestatus), "Prendido");
	if (lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "Apagadas");
	else format(lightstatus, sizeof(lightstatus), "Prendidas");
	format(string, sizeof(string), "%d | Motor: %s | Luces: %s | Gasolina: %d", vehicleid, enginestatus, lightstatus, veh_gasolina[vehicleid]);
	_Mensaje(playerid, 4, "b0b0b0", string);
	return 1;
}

GCMD:vercoche(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/vercoche [id vehículo]");
	if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
	new string[128], vehicleid = strval(params);
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			format(string, sizeof(string), "* ID: %d | Modelo: %s | Dueño: %s | Matricula: LS-%d", i_Vehiculo[v][vID], NombreVehiculo(i_Vehiculo[v][vID]), i_Vehiculo[v][vDueno], i_Vehiculo[v][vLlave]);
			_Mensaje(playerid, 4, "33CCFF", string);
			return 1;
		}
	}
	return 1;
}

GCMD:vercoches(playerid,  const params[])
{
    if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
    new string[256], dialog[1024], stext[62];
    if (sscanf(params, "d", params[1])) return _Mensaje(playerid, 3, "0", "/vercoches [id jugador]");
    if (!IsPlayerConnected(params[1])) return _Mensaje(playerid, 0, "165", "ERROR: El jugador seleccionado no se encuentra conectado.");
	for(new i = 0; i < 6; i++)
	{
		new veh = user[params[1]][jLlaveCoche][i];
		if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
		else
		{
			switch(i_Vehiculo[veh-1000][vSpawned])
			{
				case 0: stext = "{ff0000}Guardado{ffffff}";
				case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
			}
			if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
			else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
		}
		strcat(dialog, string);
	}
	new text_s[128];
	format(text_s, sizeof(text_s), "{D6E1EB}Vehículos de %s", nombre_pj(params[1]));
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, text_s, dialog, "Cerrar", "");
    return 1;
}

GCMD:vercoches2(playerid,  const params[])
{
    if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
    new string[256], dialog[1024], stext[62];
    if (sscanf(params, "d", params[1])) return _Mensaje(playerid, 3, "0", "/vercoches2 [id jugador]");
    if (!IsPlayerConnected(params[1])) return _Mensaje(playerid, 0, "165", "ERROR: El jugador seleccionado no se encuentra conectado.");
	for(new i = 0; i < 6; i++)
	{
		new veh = es_patente(user[params[1]][j2Vehiculos][i]);
		new veh2 = es_2patente(user[params[1]][j2Vehixculos][i]);
		//
		if(user[params[1]][j2Vehiculos][i] != 0)
		{
			if(veh == 0) // fix #crash
			{
				user[params[1]][j2Vehiculos][i] = 0;
				user[params[1]][j2Vehixculos][i] = 0;
			}
			if(veh2 == 0)
			{
				user[params[1]][j2Vehiculos][i] = 0;
				user[params[1]][j2Vehixculos][i] = 0;
			}
			else
			{
				if(user[params[1]][j2Vehiculos][i] != i_Vehiculo[veh2][vPatente]) // fix #crash
				{
					user[params[1]][j2Vehiculos][i] = 0;
					user[params[1]][j2Vehixculos][i] = 0;
				}
			}
		}
		//
		if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
		else
		{
			switch(i_Vehiculo[veh-1000][vSpawned])
			{
				case 0: stext = "{ff0000}Guardado{ffffff}";
				case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
			}
			if(i_Vehiculo[veh-1000][vEnDeposito] == 1) format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
			else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext);
		}
		strcat(dialog, string);
	}
	new text_s[128];
	format(text_s, sizeof(text_s), "{D6E1EB}Vehículos prestados de %s", nombre_pj(params[1]));
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, text_s, dialog, "Cerrar", "");
    return 1;
}
/*
GCMD:aoa(playerid,  const params[])
{
	new Str[128];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/aoa [texto]");
	foreach(new i: Player)
	{
		StopAudioStreamForPlayer(i);
		format(Str, sizeof(Str), "http://audio1.spanishdict.com/audio?lang=es&voice=Ximena&speed=25&text=%s", params);
		EscucharMusica(i, Str);
	}
	return 1;
}
*/
GCMD:entercar(playerid,  const params[])
{
	new vehicleid, string[256];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (!sscanf(params, "d", vehicleid))
	{
		PutPlayerInVehicle(playerid, vehicleid, 0);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /entercar, Vehículo ID: %d.", nombre_pj(playerid), vehicleid);
		if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	} else _Mensaje(playerid, 3, "0", "/entercar [id vehículo]");
	return 1;
}

GCMD:darlicencia(playerid,  const params[])
{
	new string[128];

	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 10) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 10.");
	if (sscanf(params, "d", params[1])) return _Mensaje(playerid, 3, "0", "/darlicencia [id jugador]");
	if (!IsPlayerConnected(params[1])) return _Mensaje(playerid, 0, "165", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, params[1])) return _Mensaje(playerid, 0, "165", "Estás lejos del jugador.");
	if (Spectando[params[1]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	user[params[1]][jLicencias][0] = 1;
	format(string, sizeof(string), "%s cede una licencia de armas a %s.", nombre_pj(playerid, 0), nombre_pj(params[1], 0));
	ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
	return 1;
}

GCMD:derribarpuerta(playerid) return cmd_ram(playerid);
GCMD:ram(playerid)
{
	if (Es_Faccion(playerid, 1, 5))
	{
		for (new i = 0; i < sizeof(i_Casa); i++)
		{
			if (en_pos(playerid, 1, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[i][c_VW])
			{
				CargarObjetos(playerid);
				SetPlayerInterior(playerid, i_Casa[i][cInterior]);
				user[playerid][jInterior] = i_Casa[i][cInterior];
				user[playerid][jVirtualWorld] = i + 6000;
				SetPlayerVirtualWorld(playerid, i + 6000);
				SetPlayerPos(playerid, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Casa[i][cInteriorA]);
				SetCameraBehindPlayer(playerid);
				textgame_player(playerid, "~r~Has forzado la puerta", 5000, 1);
				EnCasaID[playerid] = i;
			}
			if (en_pos(playerid, 3, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]) && user[playerid][jVirtualWorld] == i + 6000)
			{
				SetPlayerPos(playerid, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]);
				SetPlayerFacingAngle(playerid, i_Casa[i][cExteriorA]);
				SetPlayerVirtualWorld(playerid, i_Casa[i][c_VW]);
				user[playerid][jVirtualWorld] = i_Casa[i][c_VW];
				SetPlayerInterior(playerid, i_Casa[i][c_Int]);
				user[playerid][jInterior] = i_Casa[i][c_Int];
				EnCasaID[playerid] = INVALID_CASA_ID;
				KillTimer(VisitaTimer[playerid]);
				return 1;
			}
		}
		for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
		{
			if (en_pos(playerid, 2, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
			{
				CargarObjetos(playerid);
				SetPlayerPos(playerid, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Negocio[nid][nInteriorR]);
				SetCameraBehindPlayer(playerid);
				SetPlayerVirtualWorld(playerid, nid + 300);
				user[playerid][jVirtualWorld] = nid + 300;
				SetPlayerInterior(playerid, i_Negocio[nid][nInterior]);
				user[playerid][jInterior] = i_Negocio[nid][nInterior];
				textgame_player(playerid, "~r~Has forzado la puerta", 5000, 1);
			}
			if (en_pos(playerid, 3, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]) && user[playerid][jVirtualWorld] == nid + 300)
			{
				SetPlayerPos(playerid, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
				SetPlayerFacingAngle(playerid, i_Negocio[nid][nExteriorR]);
				SetPlayerInterior(playerid, 0);
	            user[playerid][jInterior] = 0;
				SetPlayerVirtualWorld(playerid, 0);
	            user[playerid][jVirtualWorld] = 0;
				return 1;
			}
		}
	} else _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	return 1;
}

GCMD:verarmarios(playerid) return cmd_verarmario(playerid);
GCMD:verarmario(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No eres policía.");
	if (EnCasaID[playerid]!= INVALID_CASA_ID)
	{
		if (en_pos(playerid, 5.0, i_Casa[EnCasaID[playerid]][cArmarioPos][0], i_Casa[EnCasaID[playerid]][cArmarioPos][1], i_Casa[EnCasaID[playerid]][cArmarioPos][2]))
		{
			_PDArmario(playerid, EnCasaID[playerid]);
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario o la casa no posee armario.");
	} else _Mensaje(playerid, 0, "580", "No estás dentro de una casa.");
	return 1;
}

GCMD:armariog(playerid) return cmd_verarmariog(playerid);
GCMD:verarmariog(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No eres policía.");
	if (EnGarajeID[playerid]!= INVALID_CASA_ID)
	{
		if (en_pos(playerid, 5.0, i_Garaje[EnGarajeID[playerid]][gArmarioPos][0], i_Garaje[EnGarajeID[playerid]][gArmarioPos][1], i_Garaje[EnGarajeID[playerid]][gArmarioPos][2]))
		{
			_PDgArmario(playerid, EnGarajeID[playerid]);
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario o el garaje no posee armario.");
	} else _Mensaje(playerid, 0, "580", "No estás dentro de un garaje.");
	return 1;
}

GCMD:maleterover(playerid)
{
	new
		car,
		Float:distancia = 4.0,
		Float:vX,
		Float:vY,
		Float:vZ,
		vw_player=GetPlayerVirtualWorld(playerid)
	;

	for(new x=0; x <= MAX_VEHICLES; x++)
	{
		GetVehiclePos(x, vX, vY, vZ);
		if(en_pos(playerid, 4.0, vX, vY, vZ) && !EstaEnBicis(x))
		{
			if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
			new vw_veh = GetVehicleVirtualWorld(car);
			if (vw_veh == vw_player) break;
			else car = 0;
		}
	}

	if(car == 0) return _Mensaje(playerid, 4, "b00000", "No estás cerca de un vehículo con maletero abierto.");

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
	if (boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return _Mensaje(playerid, 4, "b0b0b0", "El maletero está cerrado.");
	if (!llaves_faccion(playerid, car)) return SendClientMessage(playerid, 0xccccccff, "No tienes las llaves de este vehículo (facción o trabajo).");

	ver_MaleteroF(playerid, car);
	VehMaleteroPlayer[playerid] = car;
	return 1;
}

GCMD:vermaletero(playerid)
{
	if (IsPlayerInAnyVehicle(playerid)) { _Mensaje(playerid, 0, "389", "No puedes hacer esto mientras estar en el interior del vehículo!"); return 1; }
	new
		pvid = -1,
		Float: x,
		Float: y,
		Float: z,
		vw_player=GetPlayerVirtualWorld(playerid)
	;
	for (new d = 0; d < MAX_VEHICULOS; d++)
	{
		if (i_Vehiculo[d][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[d][vID], x, y, z);
		if (en_pos(playerid, 4.0, x, y, z))
		{
			new vw_veh = GetVehicleVirtualWorld(i_Vehiculo[d][vID]);
			if (vw_veh == vw_player) pvid = d;
			break;
		}
	}
	if (pvid == -1) return _Mensaje(playerid, 0, "391", "No estás cerca de un vehículo que sea tuyo.");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(i_Vehiculo[pvid][vID], engine, lights, alarm, doors, bonnet, boot, objective);
	if (boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return Mensaje_(playerid, -1, "Necesitas tener el maletero abierto! ({00C200}/maletero{FFFFFF})");
	if (EstaEnBicis(i_Vehiculo[pvid][vID])) return _Mensaje(playerid, 0, "397", "Este vehículo no tiene maletero.");
	if (EnMotos_Bicis(i_Vehiculo[pvid][vID])) i_Vehiculo[pvid][vMaxMaletero] = 2+user[playerid][jPremium];
	else if (EstaEnAvion(i_Vehiculo[pvid][vID])) i_Vehiculo[pvid][vMaxMaletero] = 12+user[playerid][jPremium];
	else if (EstaEnBote(i_Vehiculo[pvid][vID])) i_Vehiculo[pvid][vMaxMaletero] = 7+user[playerid][jPremium];
	else if (Veh_MaleteroGrande(i_Vehiculo[pvid][vID])) i_Vehiculo[pvid][vMaxMaletero] = 15;
	else i_Vehiculo[pvid][vMaxMaletero] = 9+user[playerid][jPremium];
	ver_Maletero(playerid, pvid);
	VehMaleteroPlayer[playerid] = pvid;
	if(InfoObjeto[user[playerid][jm_Derecha]][IDArma] > 0)
	{
		ResetPlayerWeapons(playerid);
		_GiveWeapon(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma], user[playerid][jm_DerechaCant]);
	}
	return 1;
}

GCMD:matricula(playerid,  const params[]) return cmd_callsign(playerid, params);
GCMD:callsign(playerid,  const params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "0", "Usted no es el conductor del vehículo.");
	new result[128], veh = GetPlayerVehicleID(playerid), string[200];
	if (GetVehicleModel(veh) == 481 || GetVehicleModel(veh) == 509 || GetVehicleModel(veh) == 510) return _Mensaje(playerid, 4, "b0b0b0", "No puedes usar este comando si estás en este tipo de vehiculos.");
	if (LSPD_Veh(veh) || SADOC_Veh(veh) || SAN_Vehicle(veh) || ALS_Veh(veh) || LSFD_Veh(veh) || veh_Pescador(veh) || veh_Granjero(veh))
	{
		if (!Es_Faccion(playerid, 1, 2, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
		if (sscanf(params, "s[128]", result)) return _Mensaje(playerid, 3, "0", "/callsign [texto]");
		if (strlen(result) > 15) { _Mensaje(playerid, 0, "165", "El callsign solo puede tener 15 caracteres."); return 1; }
		if (!VehCallSign[veh])
		{
			Delete3DTextLabel(TextCallSign[veh]);
			format(string, sizeof(string), "%s", result);
			TextCallSign[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			if(EnMotos_Bicis(veh)) { Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.3, -1.0, -0.4); }
			else Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.7, -1.9, -0.3);
			VehCallSign[veh] = 1;
			_Mensaje(playerid, 4, "00a2f0", "Re-escribe (/callsign) para retirarlo.");
		}
		else
		{
			Delete3DTextLabel(TextCallSign[veh]);
			VehCallSign[veh] = 0;
			return 1;
		}
	}
	else
	{
		for (new v = 0; v < MAX_VEHICULOS; v++)
		{
			if(i_Vehiculo[v][vID] == veh)
			{
				if (i_Vehiculo[v][vEnDeposito] == 1) return _Mensaje(playerid, 0, "148", "Este vehículo se encuentra embargado, paga la multa en la Policía o en el ayuntamiento.");
				if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
				if (sscanf(params, "s[128]", result)) return _Mensaje(playerid, 3, "0", "/callsign [texto]");
				if (strlen(result) > 15) { _Mensaje(playerid, 0, "165", "El callsign solo puede tener 15 caracteres."); return 1; }
				if (!VehCallSign[veh])
				{
				    Delete3DTextLabel(TextCallSign[veh]);
					format(string, sizeof(string), "%s", result);
					TextCallSign[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
					if(EnMotos_Bicis(veh)) { Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.3, -1.0, -0.4); }
					else Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.7, -1.9, -0.3);
					VehCallSign[veh] = 1;
					_Mensaje(playerid, 4, "00a2f0", "Re-escribe (/callsign) para retirarlo.");
				}
				else
				{
					Delete3DTextLabel(TextCallSign[veh]);
					VehCallSign[veh] = 0;
					return 1;
				}
			}
		}
		for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
		{
  			new v = veh_Empresa(e_id, veh);
			if (v != -1)
			{
				if (user[playerid][jEmpresaKey] == e_id || user[playerid][jContrato] == e_id)
				{
					if (sscanf(params, "s[128]", result)) return _Mensaje(playerid, 3, "0", "/callsign [texto]");
					if (strlen(result) > 15) { _Mensaje(playerid, 0, "165", "El callsign solo puede tener 15 caracteres."); return 1; }
					if (!VehCallSign[veh])
					{
					    Delete3DTextLabel(TextCallSign[veh]);
						format(string, sizeof(string), "%s", result);
						TextCallSign[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
						if(EnMotos_Bicis(veh)) { Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.3, -1.0, -0.4); }
						else Attach3DTextLabelToVehicle(TextCallSign[veh], veh, -0.7, -1.9, -0.3);
						VehCallSign[veh] = 1;
						_Mensaje(playerid, 4, "00a2f0", "Re-escribe (/callsign) para retirarlo.");
					}
					else
					{
						Delete3DTextLabel(TextCallSign[veh]);
						VehCallSign[veh] = 0;
						return 1;
					}
				}
				else
				{
					_Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo.");
					return 1;
				}
			}
		}
	}
	return 1;
}

GCMD:ven(playerid,  const params[]) return cmd_windows(playerid, params);
GCMD:ventanilla(playerid,  const params[]) return cmd_windows(playerid, params);
GCMD:ventana(playerid,  const params[]) return cmd_windows(playerid, params);
GCMD:windows(playerid,  const params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF6347AA, "Usted no se encuentra en ningún vehículo.");

	new
		vehicle = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicle)) return SendClientMessage(playerid, 0xFF6347AA, "Este vehículo no tiene ventanas.");

	new
		ven_1,
		ven_2,
		ven_3,
		ven_4,
		ab_cr[20],
		name_ven[32],
		string[128];

	GetVehicleParamsCarWindows(vehicle, ven_1, ven_2, ven_3, ven_4);

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new slotid;
		if (sscanf(params, "d", slotid)) return _Mensaje(playerid, 3, "0", "/windows [1] Tu ventana - [2] Todas las ventanas");
		if (slotid < 1 || slotid > 2) return _Mensaje(playerid, 3, "0", "/windows [1] Tu ventana - [2] Todas las ventanas");

		switch (slotid)
		{
		    case 1:
		    {
			    if(ven_1 != 0) SetVehicleParamsCarWindows(vehicle, 0, ven_2, ven_3, ven_4), ab_cr = "baja";
				else SetVehicleParamsCarWindows(vehicle, 1, ven_2, ven_3, ven_4), ab_cr = "sube";
				name_ven = "del conductor";
				format(string, sizeof(string), "%s la ventana %s del %s.", ab_cr, name_ven, NombreVehiculo(vehicle));
				cmd_me(playerid, string);
		    }
		    case 2:
		    {
				if (VehicleWindows[vehicle] == 0)
				{
					SetVehicleParamsCarWindows(vehicle, 0, 0, 0, 0);
					format(string, sizeof(string), "baja las ventanas del %s.", NombreVehiculo(vehicle));
					cmd_me(playerid, string);
				}
				else
				{
					SetVehicleParamsCarWindows(vehicle, 1, 1, 1, 1);
					format(string, sizeof(string), "sube las ventanas del %s.", NombreVehiculo(vehicle));
					cmd_me(playerid, string);
				}
			}
			default: return _Mensaje(playerid, 3, "0", "/windows [1] Tu ventana - [2] Todas las ventanas");
		}

	}
	else
	{
		new asiento = GetPlayerVehicleSeat(playerid);
		switch (asiento)
		{
			case 0: //conductor
			{
			    if(ven_1 != 0) SetVehicleParamsCarWindows(vehicle, 0, ven_2, ven_3, ven_4), ab_cr = "baja";
				else SetVehicleParamsCarWindows(vehicle, 1, ven_2, ven_3, ven_4), ab_cr = "sube";
				name_ven = "del conductor";
			}
			case 1: //pasajero
			{
			    if(ven_2 != 0) SetVehicleParamsCarWindows(vehicle, ven_1, 0, ven_3, ven_4), ab_cr = "baja";
				else SetVehicleParamsCarWindows(vehicle, ven_1, 1, ven_3, ven_4), ab_cr = "sube";
				name_ven = "de pasajero";
			}
			case 2: //trasera izquierda
			{
			    if(ven_3 != 0) SetVehicleParamsCarWindows(vehicle, ven_1, ven_2, 0, ven_4), ab_cr = "baja";
				else SetVehicleParamsCarWindows(vehicle, ven_1, ven_2, 1, ven_4), ab_cr = "sube";
				name_ven = "trasera izquierda";
			}
			case 3: //trasera derecha
			{
			    if(ven_4 != 0) SetVehicleParamsCarWindows(vehicle, ven_1, ven_2, ven_3, 0), ab_cr = "baja";
				else SetVehicleParamsCarWindows(vehicle, ven_1, ven_2, ven_3, 1), ab_cr = "sube";
				name_ven = "trasera derecha";
			}
		}

		format(string, sizeof(string), "%s la ventana %s del %s.", ab_cr, name_ven, NombreVehiculo(vehicle));
		cmd_me(playerid, string);
	}
	VehicleWindows[vehicle] = IsWindowOpened(vehicle);
	return 1;
}

IsWindowedVehicle(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid);

    if (400 <= model <= 611)
    {
        static const g_WindowInfo[] = {
		    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
		    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
		    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
		    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
			1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
		};

		return g_WindowInfo[model - 400];
	}
	return 0;
}

IsWindowOpened(vehicleid)
{
	new
		ven_1,
		ven_2,
		ven_3,
		ven_4;

	GetVehicleParamsCarWindows(vehicleid, ven_1, ven_2, ven_3, ven_4);
	if (ven_1 == 0) return 1;
	else if (ven_2 == 0) return 1;
	else if (ven_3 == 0) return 1;
	else if (ven_4 == 0) return 1;
	return 0;
}

GCMD:dobleexp(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (d2_experiencia == 0)
	{
		d2_experiencia = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha activado el sistema de doble experiencia.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	else
	{
		d2_experiencia = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha desactivado el sistema de doble experiencia.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	return 1;
}

GCMD:jetpack(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	JetPack[playerid] = 1;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /jetpack.", nombre_pj(playerid));
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:fianza(playerid)
{
	if (user[playerid][jEncarcelado] != 2 && user[playerid][jEncarcelado] != 3) return _Mensaje(playerid, 4, "b0b0b0", "No estás en prisión comisaría ni federal.");
	if (user[playerid][jFianza] == 0) return _Mensaje(playerid, 4, "b0b0b0", "En tu condena no hay fianza, espera el tiempo de condena.");
	if (user[playerid][jBanco] > user[playerid][jFianza])
	{
		new
			string[128]
		;
		format(string, sizeof(string), "{cccccc}* ¿Estás seguro que quieres pagar la fianza de $%d?", user[playerid][jFianza]);
		ExPlayerDialog(playerid, D_fianza, DIALOG_STYLE_MSGBOX, "Pago de libertad", string, "Sí", "No");
	} else _Mensaje(playerid, 4, "b0b0b0", "No tienes el dinero sufiente en el banco para la fianza.");
	return 1;
}

GCMD:estado(playerid,  const params[]) return cmd_yo(playerid, params);
GCMD:yo(playerid,  const params[])
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 4, "b0b0b0", "No puedes usar este comando mientras estás herido.");
	if (usandoYo[playerid] == 2) return _Mensaje(playerid, 4, "b0b0b0", "No puedes cambiar la descripción, ya que posees /heridas.");
	if (usandoYo[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ya posees una descripción, escribe /qyo.");
	if (sscanf(params, "s[128]", params[0])) return _Mensaje(playerid, 3, "0", "/yo [descripción]");
	if (strlen(params[0]) > 49) { _Mensaje(playerid, 4, "b00000", " El máximo de carácteres es de 49."); return 1; }

	new variablepro[50];
	format(variablepro, 50, "%s", params[0]);
	mensaje_bubble(playerid, variablepro, 0xFF6347FF, 15.0);
	alm(user[playerid][jEstado], variablepro);
	format(user[playerid][jEstado], 60, "%s", params[0]);
	_Mensaje(playerid, 4, "FF6347", params[0]);
	usandoYo[playerid] = 1;
	return 1;
}

GCMD:esconderyo(playerid)
{
	if(usandoYo[playerid] == 2) return _Mensaje(playerid, 4, "b0b0b0", "No puedes cambiar la descripción, ya que posees /heridas.");
	if(usandoYo[playerid] == 1)
	{
		mensaje_bubble(playerid, "", 0xBFC0C2FF, 1.0, 1000, 1);
		usandoYo[playerid] = 0;
		_Mensaje(playerid, 4, "b0b0b0", "Has ocultado tu descripción.");
	}
	else
	{
		mensaje_bubble(playerid, user[playerid][jEstado], 0xFF6347FF, 15.0);
		usandoYo[playerid] = 1;
		_Mensaje(playerid, 4, "b0b0b0", "Has activado tu descripción.");
	}
	return 1;
}

GCMD:sinestado(playerid) return cmd_qyo(playerid);
GCMD:qyo(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 4, "b0b0b0", "No puedes usar este comando mientras estás herido.");
	if (usandoYo[playerid] == 2) return _Mensaje(playerid, 4, "b0b0b0", "No puedes cambiar la descripción, ya que posees /heridas.");
	if (usandoYo[playerid] == 0) return _Mensaje(playerid, 4, "b0b0b0", "No posees ninguna descripción.");
	mensaje_bubble(playerid, "", 0xBFC0C2FF, 1.0, 1000, 1);
	alm(user[playerid][jEstado], "Alegre");
	usandoYo[playerid] = 0;
    return 1;
}

GCMD:revive(playerid,  const params[]) return cmd_revivir(playerid, params);
GCMD:acurar(playerid,  const params[]) return cmd_revivir(playerid, params);
GCMD:revivir(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], playerid2, vida;
	if (sscanf(params, "dd", playerid2, vida)) return _Mensaje(playerid, 3, "0", "/revivir [id jugador] [hp]");
	if (vida < 5 || vida >= 101) return _Mensaje(playerid, 0, "453", "El mínimo 5 - máximo 100.");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (GetPVarInt(playerid2, "EnCrack") == 1)
	{
		_arma[playerid2] = -1;
		format(QuienMato[playerid2], 24, "Nadie");
		asesino[playerid2] = -1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /revivir %d, Jugador: %s[%d].", nombre_pj(playerid), vida, nombre_pj(playerid2),playerid2);
		MensajeAdmin(string);
		_Mensaje(playerid2, 2, "0", "Fuiste revivido por un administrador.");
		RemovePlayerFromVehicle(playerid2);
		SetCameraBehindPlayer(playerid2);
		EliminarHerido(playerid2);
		YaAviso[playerid2] = 0;
		ClearAnimations(playerid2);
		user[playerid2][jMuerto2] = 0;
		user[playerid2][jMuerto] = 0;
		reaparecer[playerid2] = 0;
		Sangre_(playerid2, vida);
		usandoYo[playerid2] = 0;
		colocar_estado(2, playerid2, "void", 0xBFC0C2FF);
		TogglePlayerControllable(playerid2, 1);
		mensaje_bubble(playerid2, "", 0xBFC0C2FF, 1.0, 1000, 1);
		_Limuerte(playerid2);
	} else _Mensaje(playerid, 0, "0", "Este jugador no necesita ser reanimado.");
	return 1;
}

GCMD:reanimar(playerid,  const params[])
{
	new string[128], playerid2;
    if (!Es_Faccion(playerid, 1, 2, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de LSFD.");
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/reanimar [id jugador]");
    if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "0", "No te puedes reanimar a tí mismo.");
	if (!CercaDelWeon(3.0, playerid, playerid2)) { _Mensaje(playerid, 0, "0", "Estás lejos del jugador."); return 1; }
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (IsPlayerInAnyVehicle(playerid)) { _Mensaje(playerid, 0, "0", "No puedes reanimar a alguien desde un vehículo."); return 1; }
	if (user[playerid2][jMuerto2] == 2) return _Mensaje(playerid, 0, "12", "No puedes reanimar a los muertos.");
	if (user[playerid2][jMiembro] == user[playerid][jMiembro]) return _Mensaje(playerid, 0, "12", "No puedes reanimar a los de tu facción.");
	if (GetPVarInt(playerid2, "EnCrack") == 1)
	{
		_arma[playerid2] = -1;
		format(QuienMato[playerid2], 24, "Nadie");
		asesino[playerid2] = -1;
		TogglePlayerControllable(playerid, 0);
		TogglePlayerControllable(playerid2, 0);
		SetTimerEx("Descongelar", 8000, false, "i", playerid);
		SetTimerEx("Descongelar", 8000, false, "i", playerid2);
		ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid2, "CRACK", "crckidle2", 4.1, 1, 1, 1, 0, 0, 1);
		YaAviso[playerid2] = 0;
		SetCameraBehindPlayer(playerid2);
		EliminarHerido(playerid2);
		Sangre_(playerid2, 80);
		usandoYo[playerid2] = 0;
		colocar_estado(2, playerid2, "void", 0xBFC0C2FF);
		mensaje_bubble(playerid2, "", 0xBFC0C2FF, 1.0, 1000, 1);
		format(string, sizeof(string), "* %s ha reanimado a %s mediante primeros auxilios.", nombre_pj(playerid), nombre_pj(playerid2));
		ProxDetector(20.0, playerid, string, C_VERDE, C_VERDE, C_VERDE, C_VERDE, C_VERDE);
		format(string, sizeof(string), "Has reanimado a %s.", nombre_pj(playerid2));
		_Mensaje(playerid, 2, "0", string);
		_Mensaje(playerid, 2, "0", "Te han reanimado.");
		_Limuerte(playerid2);
		user[playerid2][jMuerto2] = 0;
		user[playerid2][jMuerto] = 0;
		reaparecer[playerid2] = 0;
	}
	return 1;
}

GCMD:listaobjeto(playerid) return cmd_listaobjetos(playerid);
GCMD:listaobjetos(playerid)
{
	new DComandosAdmin[3500], as2[60], i = 0;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	for(new a = 1; a < sizeof(InfoObjeto); a++)
	{
		i++;
		format(as2, sizeof(as2), "%d - %s | ", a, InfoObjeto[a][NombreObjeto]);
		strcat(DComandosAdmin, as2);
		if(i == 5)
		{
			i = 0;
			strcat(DComandosAdmin, "\n");
		}
	}
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista del /crearobjeto", DComandosAdmin, "Continuar", "");
	return 1;
}

GCMD:ah(playerid) return cmd_adminayuda(playerid);
GCMD:adminayuda(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new DComandosAdmin[2300];
	if (Admin(1, playerid))
	{
		strcat(DComandosAdmin, "{00C38E} 1{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/dudas /reportes /ad /rd /ar /rr /qfa /ir /traer /togprivados\n");
		strcat(DComandosAdmin, "{FFFFFF}/staff /nuevos /revivir /golpear /darvida /respawncar /condinero\n");
		strcat(DComandosAdmin, "{FFFFFF}/ultimac /llevar /spec /traercar /ircar /enmascarados /darskin\n");
		strcat(DComandosAdmin, "{FFFFFF}/kick /liberar /jailtipo /jailcuenta /enjail /estaban /estajail\n");
		strcat(DComandosAdmin, "{FFFFFF}/vercuenta /verct /verbolsillos /vercoches /congelar /descongelar\n\n");
	}
	if (Admin(2, playerid))
	{
		strcat(DComandosAdmin, "{008A49} 2{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/setvehhp /editarint /editarvw /jetpack /irempresa /unbanip\n");
		strcat(DComandosAdmin, "{FFFFFF}/darchaleco /respawncars /ircasa /enmascaradospd /fixvid /unban\n");
		strcat(DComandosAdmin, "{FFFFFF}/irnegocio /irpuerta /desbugear /limpiartodooff /bloquearprivados\n");
		strcat(DComandosAdmin, "{FFFFFF}/limpiartodo /limpiarmanos /limpiarbol /limpiarct /limpiarespalda\n\n");
	}
	if (Admin(3, playerid))
	{
		strcat(DComandosAdmin, "{7362A6} 3{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/ao /racall /limpiarchat /fixveh /bloquearreportes /crearincendio /incendios\n");
		strcat(DComandosAdmin, "{FFFFFF}/v_guardar /obanear /banear /banip /verip /bloquearip /limpiarant /quitardnifalso\n");
		strcat(DComandosAdmin, "{FFFFFF}/vernumero /objetosadmin /irobjeto /crearobjetoadmin /borrarobjetoadmin\n");
		strcat(DComandosAdmin, "{FFFFFF}/coff /tban /entercar /bloqueardudas /bloquearreportes\n\n");

	}
	if (Admin(4, playerid))
	{
		strcat(DComandosAdmin, "{B00000} 4{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/crearregalo /fuelcars /fuelcarsno /anuncios /activartest\n");
		strcat(DComandosAdmin, "{FFFFFF}/loteria /bugentrenar /fixvehall /registro /ircordenada\n");
		strcat(DComandosAdmin, "{FFFFFF}/cpantalla /listaobjetos /borrardudas /borrarreportes /iicasa\n");
		strcat(DComandosAdmin, "{FFFFFF}/daredad /creartelf /borrartelf /crearalmacen /borraralmacen /editara\n\n");
	}
	if (Admin(5, playerid))
	{
		strcat(DComandosAdmin, "{D373B1} 5{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/rellenarnegocios /adminevento\n");
		strcat(DComandosAdmin, "{FFFFFF}/guardarservidor /aguardar /dejarfondos /robobanco\n");
		strcat(DComandosAdmin, "{FFFFFF}/aoa /quitarllavese /multicuenta /darencrol\n");
		strcat(DComandosAdmin, "{FFFFFF}/padelantar /limpiarmaletero /editarv\n");
		strcat(DComandosAdmin, "{FFFFFF}/darencban /diadepaga /reiniciarregalo /regaloatodos\n\n");
	}/*
	if (Admin(10, playerid))
	{
		strcat(DComandosAdmin, "{004F00} 10{ffffff}:\n");
		strcat(DComandosAdmin, "/casas /secambio /editare /darvip /borrarauto /editarn /crearnegocio\n");
		strcat(DComandosAdmin, "/cambiarclima /editarcasa /crearcasa /borrarcasa /avecasa /quitarempresa\n");
		strcat(DComandosAdmin, "/dardinerooff /editarp /editarp2 /crearauto /darstat /avenegocio /borrarnegocio\n");
		strcat(DComandosAdmin, "/crearempresa /borrarempresa /quitarfamiliac /quitarfamilia /creargarage\n");
		strcat(DComandosAdmin, "/creargasolinera /borrargasolinera /creartelefono /borrartelefono /editarcoche\n");
		strcat(DComandosAdmin, "/antibalas /antireparacion /quitarcasa /quitarcasa2 /quitarllavesn /quitarllavesc\n");
		strcat(DComandosAdmin, "/quitarnegocio /quitarnegocio2 /darencfac /darencfam /darencstaff /quitarfamiliaoff\n");
		strcat(DComandosAdmin, "/antiteleport /quitarllave /quitarllavep /quitarcasaoff /quitarnegociooff /borrargarage\n\n");
	}*/
	if (user[playerid][jEncargado][4])
	{
		strcat(DComandosAdmin, "{E8B63A} ROL{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/darpdr /quitarpdr /darpdroff /quitarpdroff\n");
	}
	if (user[playerid][jEncargado][3])
	{
		strcat(DComandosAdmin, "{E8B63A} BAN{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/banear /desbanear /banip /unbanip\n");
	}
	if (user[playerid][jEncargado][0])
	{
		strcat(DComandosAdmin, "{E8B63A} STAFF{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/daradmin /admins\n");
	}
	if (user[playerid][jEncargado][1])
	{
		strcat(DComandosAdmin, "{E8B63A} FACCIÓN{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/darliderfac /facciones\n");
	}
	if (user[playerid][jEncargado][2])
	{
		strcat(DComandosAdmin, "{E8B63A} FAMILIA{ffffff}\n");
		strcat(DComandosAdmin, "{FFFFFF}/darliderfam /darmiembrofam /feditar\n");
		strcat(DComandosAdmin, "{FFFFFF}/crearfamilia /borrarfam /feditar2\n");
		strcat(DComandosAdmin, "{FFFFFF}/crearautofam /borrarautofam /familias\n");
	}
	ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{ADC3E7}Comandos", DComandosAdmin, "Cerrar", "");
	return 1;
}

GCMD:colorpremium(playerid) return cmd_colorvip(playerid);
GCMD:colorvip(playerid)
{
	if (user[playerid][jPremium] == 0) return _Mensaje(playerid, 0, "39", "No eres usuario premium.");
	if (color_general != 1) return _Mensaje(playerid, 0, "0", "color_TAB disabled");
	if (user[playerid][jColorP] == 0)
	{
		_Mensaje(playerid, 4, "C93CCE", "Activaste el color VIP en tu nombre!");
		user[playerid][jColorP] = 1;
	}
	else
	{
		_Mensaje(playerid, 4, "C93CCE", "Desactivaste el color VIP en tu nombre!");
		user[playerid][jColorP] = 0;
	}
	return 1;
}

GCMD:hora(playerid)
{
	new Ano, Mes, Dia, Hora, Minutos, Segundos, string[128];
	getdate(Ano, Mes, Dia);
	gettime(Hora, Minutos, Segundos);
	if(Hora >= 12) format(string, sizeof(string), "~h~%02d %s~n~~g~Hora:~w~ %02d:%02d PM", Dia, GetMonth(Mes), (Hora == 12) ? (12) : (Hora - 12), Minutos);
	else if(Hora < 12) format(string, sizeof(string), "~h~%02d %s~n~~g~Hora:~w~ %02d:%02d AM", Dia, GetMonth(Mes), (Hora == 0) ? (12) : (Hora), Minutos);
	textgame_player(playerid, string, 5000, 1);
	return 1;
}

GCMD:reloj(playerid)
{
	new hora_s, minuto_s, segundo_s;
	gettime(hora_s, minuto_s, segundo_s);
	new string[128];
	if (user[playerid][jTiempoCarcel] > 0)
	{
		if(hora_s >= 12) format(string, sizeof(string), "~g~Hora:~w~ %02d:%02d PM~n~~r~%s", (hora_s == 12) ? (12) : (hora_s - 12), minuto_s, informe_tiempo(playerid));
		else if(hora_s < 12) format(string, sizeof(string), "~g~Hora:~w~ %02d:%02d AM~n~~r~%s", (hora_s == 0) ? (12) : (hora_s), minuto_s, informe_tiempo(playerid));
	}
	else
	{
		if(hora_s >= 12) format(string, sizeof(string), "~g~Hora:~w~ %02d:%02d PM", (hora_s == 12) ? (12) : (hora_s - 12), minuto_s);
		else if(hora_s < 12) format(string, sizeof(string), "~g~Hora:~w~ %02d:%02d AM", (hora_s == 0) ? (12) : (hora_s), minuto_s);
	}
	textgame_player(playerid, string, 5000, 1);
	return 1;
}

GCMD:hambre(playerid)
{
	new string[60];
	format(string, sizeof(string), "HAMBRE: {ffffff}%.0f", user[playerid][jHambre]);
	Mensaje_(playerid, 0x1B48AFFF, string);
	return 1;
}

GCMD:b(playerid,  const params[])
{
	new string[200];
	if(!CheckTimer(30, Intentar[playerid]))
	{
		if (sscanf(params, "s[200]", params[0])) { _Mensaje(playerid, 3, "0", "/b [texto]"); return 1; }
		else
		{
			if (EnServicioADM[playerid] == 1)
			{
				format(string, sizeof(string), "(( {b00000}[%d] %s:{b0b0b0} %s ))", playerid, nombre_pj(playerid), params[0]);
				ProxDetector(15.0, playerid, string, C_GRIS, C_GRIS, C_GRIS, C_GRIS, C_GRIS);
			}
			else
			{
				format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, nombre_pj(playerid), params[0]);
				ProxDetector(15.0, playerid, string, C_GRIS, C_GRIS, C_GRIS, C_GRIS, C_GRIS);
				if(EnServicioADM[playerid] == 0)Intentar[playerid] = gettime();
			}
		}
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(30, Intentar[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:me(playerid,  const params[])
{
	if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/me {C57BBB}[Acción larga]");
	accion_rol(playerid, 0, params[0], 1);
	return 1;
}

/*	new Text3D:estadod[MAX_PLAYERS];
GCMD:xd(playerid,  const params[])
{

	new text[150], Float:xdd, Float:ydd, Float:zdd;
	GetPlayerPos(playerid, xdd, ydd, zdd);
	if (sscanf(params, "s[128]", text)) return Mensaje_(playerid, -1, "/xd {C57BBB}[Acción corta]");

		estadod[playerid] = Create3DTextLabel(text, -1, xdd, ydd, zdd, 15.0, 0, 0);

			if(strlen(text) > 90)
			{
				new MensajeAR[256];
				format(MensajeAR, sizeof(MensajeAR), "%.30s\n%.30s\n%.30s\n%s", text, text[90], text[60], text[30]);
				Update3DTextLabelText(estadod[playerid], -1, MensajeAR);
			}
			else if(strlen(text) > 60)
			{
				new MensajeAR[256];
				format(MensajeAR, sizeof(MensajeAR), "%.30s\n%.30s\n%s", text, text[60], text[30]);
				Update3DTextLabelText(estadod[playerid], -1, MensajeAR);
			}
			else if(strlen(text) > 30)
			{
				new MensajeAR[256];
				format(MensajeAR, sizeof(MensajeAR), "%.30s\n%s", text, text[30]);
				Update3DTextLabelText(estadod[playerid], -1, MensajeAR);
			}
			else
			{
				Update3DTextLabelText(estadod[playerid], -1, text);
			}
	return 1;
}
*/
GCMD:ame(playerid,  const params[])
{

	new MensajeAR[150];
	if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/ame {C57BBB}[Acción corta]");
	format(MensajeAR, sizeof(MensajeAR), "* %s", params[0]);
	colocar_estado(1, playerid, MensajeAR, 0xC2A2DAFF, 3000);
	format(MensajeAR, sizeof(MensajeAR), "> %s", params[0]);
	Mensaje_(playerid, AccionesColors[1], MensajeAR);
	return 1;
}

GCMD:do(playerid,  const params[])
{
	if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/do {9EC73D}[Entorno o Aclaración]");
	accion_rol(playerid, 2, params[0]);
	return 1;
}

GCMD:gritar(playerid,  const params[]) return cmd_g(playerid, params);
GCMD:gr(playerid,  const params[]) return cmd_g(playerid, params);
GCMD:g(playerid,  const params[])
{
	if (sscanf(params, "s[256]", params[0])) return Mensaje_(playerid, -1, "/g {ffff00}[Gritar]");
	accion_rol(playerid, 3, params[0]);
	return 1;
}

GCMD:whisper(playerid,  const params[]) return cmd_sus(playerid, params);
GCMD:w(playerid,  const params[]) return cmd_sus(playerid, params);
GCMD:sus(playerid,  const params[])
{
	new string[256], mensaje[200];
	if (sscanf(params, "ds[200]", params[0], mensaje)) return _Mensaje(playerid, 3, "0", "/sus [id jugador] [texto]");
	if (!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID) { _Mensaje(playerid, 0, "75", "ID inválida."); return 1; }
	if (playerid == params[0]) return _Mensaje(playerid, 0, "75", "No puedes hablarte a ti mismo.");
	if (!CercaDelWeon(2.0, playerid, params[0])) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	format(string, sizeof(string), "%s susurra: %s", nombre_pj(playerid, 0), mensaje);
	SendSplitMessage(params[0], 0xFFFF00AA, string);
	format(string, sizeof(string), "%s susurra: %s", nombre_pj(playerid, 0), mensaje);
	SendSplitMessage(playerid, 0xFFFF00AA, string);
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "* %s susurra algo al oído de %s.", nombre_pj(playerid, 0), nombre_pj(params[0], 0));
	colocar_estado(1, playerid, MsgCheckMe, 0xC2A2DAFF, 3000);
	return 1;
}
GCMD:susurrar(playerid,  const params[]) return cmd_s(playerid, params);
GCMD:s(playerid,  const params[])
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		if (VehicleWindows[tmpcar] == 0) return Mensaje_(playerid, 0xb0b0b0ff, "No puedes utilizar este comando con las ventanas cerradas.");
	}
	if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/s {E600FF}[Susurrar]");
	accion_rol(playerid, 4, params[0]);
	return 1;
}

GCMD:c(playerid,  const params[])
{
	if (EnLlamada[playerid] == 0) _Mensaje(playerid, 0, "755", "No te encuentras en una llamada.");
	if (sscanf(params, "s[128]", params[0])) return _Mensaje(playerid, 3, "0", "/c [texto]");
	new string[256];
	format(string, sizeof(string), "%s dice: %s", nombre_pj(playerid, 0), params[0]);
	ProxDetector(10.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	return 1;
}

GCMD:megafono(playerid,  const params[]) return cmd_m(playerid, params);
GCMD:m(playerid,  const params[])
{
	if (Es_Faccion(playerid, 1, 2, 5))
	{
		new
			car,
			Float:distancia = 5.0,
			Float:vX,
			Float:vY,
			Float:vZ,
			vw_player=GetPlayerVirtualWorld(playerid)
		;

		for(new x=0; x <= MAX_VEHICLES; x++)
		{
			GetVehiclePos(x, vX, vY, vZ);
			if(en_pos(playerid, distancia , vX, vY, vZ) && !EstaEnBicis(x))
			{
				if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
				new vw_veh = GetVehicleVirtualWorld(car);
				if (vw_veh == vw_player) break;
				else car = 0;
			}
		}
		if(car == 0) return _Mensaje(playerid, 0, "391", "No se ha detectado ningún vehículo a tu alrededor.");
		if(LSPD_Veh(car) || SADOC_Veh(car) || LSFD_Veh(car))
		{
			if (sscanf(params, "s[128]", params[0])) return Mensaje_(playerid, -1, "/m {FF9B6A}[Megáfono]");
			accion_rol(playerid, 5, params[0]);
		} else _Mensaje(playerid, 0, "165", "No estás cerca de un vehículo de la PD o Emergencias.");
	} else _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	return 1;
}

GCMD:ao(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/ao [texto]");

	new string[180];
	format(string, sizeof(string), "[STAFF %s]: %s", user[playerid][jStaff], params);
	_MensajeOOC(0x90C3D4FF, string);
	return 1;
}

GCMD:editarint(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/editarint [id jugador] [interior]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	SetPlayerInterior(params[0], params[1]);
	format(string, sizeof(string), "Interior de %s es ahora %d", nombre_pj(params[0]), params[1]);
	_Mensaje(playerid, 4, "33CCFF", string);
	_Mensaje(params[0], 4, "33CCFF", string);
	return 1;
}

GCMD:editarvw(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/editarvw [id jugador] [virtuaworld]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	SetPlayerVirtualWorld(params[0], params[1]);
	format(string, sizeof(string), "VirtualWorld de %s ahora es %d", nombre_pj(params[0]), params[1]);
	_Mensaje(playerid, 4, "33CCFF", string);
	_Mensaje(params[0], 4, "33CCFF", string);
	return 1;
}

GCMD:salirfaccion(playerid)
{
	if (user[playerid][jMiembro] != 0)
	{
		if (user[playerid][jMiembro] == 2) sadocs--;
		if (user[playerid][jMiembro] == 5) members_fd--;
		new string[100];
		format(string, sizeof(string), "%s se ha salido de la facción voluntariamente.", nombre_pj(playerid));
		mensaje_faccion(user[playerid][jMiembro], 0xADC3E7FF, string);
		max_miembros[user[playerid][jMiembro]]--;
		save_stuff();
		user[playerid][jRango] = 0;
		user[playerid][jMiembro] = 0;
		user[playerid][jLider] = 0;
		EnServicio[playerid] = 0;
		EnServicioPD[playerid] = 0;
		characterSave(playerid);
	} else _Mensaje(playerid, 0, "218", "No estás en una facción.");
	return 1;
}

GCMD:darliderfac(playerid,  const params[])
{
	if (user[playerid][jEncargado][1] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darliderfac [id jugador] [facción]");
	if (params[1] < 0 || params[1] > MAX_FACCIONES) return _Mensaje(playerid, 0, "511", "ID facción incorrecta.");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new ftext[256];
	switch (params[1])
	{
		case 0: { user[params[0]][jRango] = 0; ftext = "Ninguna"; }
		case 1: { user[params[0]][jRango] = 12; ftext = "Policía"; }
		case 2: { user[params[0]][jRango] = 11; ftext = "SADOC"; }
		case 3: { user[params[0]][jRango] = 7; ftext = "Network"; }
		case 4: { user[params[0]][jRango] = 5; ftext = "Alcaldía"; }
		case 5: { user[params[0]][jRango] = 8; ftext = "Emergencias"; }
		default: return _Mensaje(playerid, 0, "512", "La ID de facción es incorrecta [1/5].");
	}
	new string[128];
	user[params[0]][jLider] = params[1];
	user[params[0]][jMiembro] = params[1];
	format(string, sizeof(string), "* %s te asignó el líder de la facción %s.", nombre_pj(playerid), ftext);
	_Mensaje(params[0], 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s asigno lider de la facción %s a %s.", nombre_pj(playerid), ftext, nombre_pj(params[0]));
	MensajeAdmin(string);
	return 1;
}

GCMD:golpear(playerid,  const params[])
{
	new playerid2, Float: slx, Float: sly, Float: slz, string[128];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/golpear [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	GetPlayerPos(playerid2, slx, sly, slz);
	SetPlayerPos(playerid2, slx, sly, slz + 5);
	PlayerPlaySound(playerid2, 1130, slx, sly, slz + 5);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s golpeó a %s.", nombre_pj(playerid), nombre_pj(playerid2));
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:daredad(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/daredad [id jugador] [edad]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] < 15 || params[1] >= 75) return _Mensaje(playerid, 0, "453", "El mínimo 15 - máximo 75.");

	new string[150];
	user[params[0]][jEdad] = params[1];
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ajusto la edad de %s a %d años.", nombre_pj(playerid), nombre_pj(params[0]), params[1]);
	MensajeAdmin(string);
	return 1;
}

GCMD:sethp(playerid,  const params[]) return cmd_darvida(playerid, params);
GCMD:darvida(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darvida [id jugador] [monto]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] < 5 || params[1] >= 101) return _Mensaje(playerid, 0, "453", "El mínimo 5 - máximo 100.");

	switch (params[1])
	{
		case 50..60:
		{
		usandoYo[params[0]] = 0;
		colocar_estado(2, params[0], "void", 0xBFC0C2FF);
		mensaje_bubble(params[0], "", 0xBFC0C2FF, 1.0, 1000, 1);
		}
		case 61..70:
		{
		usandoYo[params[0]] = 0;
		colocar_estado(2, params[0], "void", 0xBFC0C2FF);
		mensaje_bubble(params[0], "", 0xBFC0C2FF, 1.0, 1000, 1);
		}
		case 71..100:
		{
		usandoYo[params[0]] = 0;
		colocar_estado(2, params[0], "void", 0xBFC0C2FF);
		mensaje_bubble(params[0], "", 0xBFC0C2FF, 1.0, 1000, 1);
		}
	}
	new string[150];
	Sangre_(params[0], params[1]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido a %s %d de vida.", nombre_pj(playerid), nombre_pj(params[0]), params[1]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:setchaleco(playerid,  const params[]) return cmd_darchaleco(playerid, params);
GCMD:darchaleco(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darchaleco [id jugador] [monto]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] < 0 || params[1] >= 101) return _Mensaje(playerid, 0, "453", "El máximo de monto de chaleco es de 100.");

	new string[150];
	Chaleco_(params[0], params[1]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido a %s %d de chaleco.", nombre_pj(playerid), nombre_pj(params[0]), params[1]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:vercuenta(playerid,  const params[])
{
	new string[150];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/vercuenta [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	_panelJ(playerid, params[0]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /vercuenta, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:verct(playerid,  const params[])
{
	new string[150];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/verct [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!Es_Faccion(params[0], 1)) return _Mensaje(playerid, 0, "9", "Ese jugador no tiene un cinturón táctico");

	ver_Cinturon(playerid, params[0]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /verct, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:verbolsillos(playerid,  const params[])
{
	new string[150];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/verbolsillos [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	R_Inventario(playerid, params[0]);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /verbolsillos, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:dios2000(playerid)
{
	new elpro[MAX_PLAYER_NAME];
	GetPlayerName(playerid, elpro, sizeof(elpro));
	if (!strcmp(elpro, "Matthew_Bishop", true))
	{
		if(chat_log == 1)
		{
			chat_log = 0;
		}
		else
		{
			chat_log = 1;
		}
	}
}

GCMD:dardinero(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/dardinero [id jugador] [$]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new pro[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pro, sizeof(pro));

	new string[128];
	DarDineroGC(params[0], params[1]);
	format(string, 128, "[AvisoAdmin] %s ha otorgado la cantidad de %d$ a %s. (ON)", nombre_pj(playerid), params[1], nombre_pj(params[0]));
	MensajeAdmin(string, 2);
	format(string, 128, "* %s te ha otorgado la cantidad de %d$", nombre_pj(playerid), params[1]);
	_Mensaje(params[0], 4, "b0b0b0", string);
	format(string, sizeof(string), "Registros: %s le cedio la cantidad de %d$ a %s. (ON)", nombre_pj(playerid), params[1], nombre_pj(params[0]));
	Log("Registros/DarDinero.log", string);
	return 1;
}

GCMD:quitarcasa(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new quitarName[MAX_PLAYER_NAME];
	if (sscanf(params, "s[25]", quitarName)) return _Mensaje(playerid, 3, "0", "/quitarcasa [Nombre_Apellido]");
	if(new target = IsCharConnected(quitarName) != -1){
		user[target][jCasaKey] = INVALID_CASA_ID;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarcasa, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(target), target);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarCasa.log", string);
	}
	else{
		if(characterCheck(quitarName))
		{
			mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Casa = %d WHERE NombrePJ = '%e'", INVALID_CASA_ID, quitarName);
			mysql_tquery(mainDatabase, string);
			format(string, 128, "[Administración]{FFFFFF} %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
			Log("Registros/QuitarCasa.log", string);
		} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	}
	return 1;
}

GCMD:quitarcasa2(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new quitarName[MAX_PLAYER_NAME];
	if (sscanf(params, "s[25]", quitarName)) return _Mensaje(playerid, 3, "0", "/quitarcasa [Nombre_Apellido]");
	if(new target = IsCharConnected(quitarName) != -1){
		user[target][jCasaKey2] = INVALID_CASA_ID;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarcasa, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(target), target);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarCasa.log", string);
	}
	else{
		if(characterCheck(quitarName))
		{
			mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Casa2 = %d WHERE NombrePJ = '%e'", INVALID_CASA_ID, quitarName);
			mysql_tquery(mainDatabase, string);
			format(string, 128, "[Administración]{FFFFFF} %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s le quitó la casa que tenía %s.", nombre_pj(playerid), params);
			Log("Registros/QuitarCasa.log", string);
		} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	}
	return 1;
}

GCMD:quitarllavesn(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "728", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarllavesn [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[params[0]][jNegocioLlaves] = INVALID_CASA_ID;
	user[params[0]][jNegocio2Llaves] = INVALID_CASA_ID;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllavesn, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarllavesc(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "728", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarllavesc [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[params[0]][jCasaLlaves] = INVALID_CASA_ID;
	user[params[0]][jCasa2Llaves] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllavesc, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarllavesc2(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "728", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarllavesc2 [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[params[0]][j2CasaLlaves] = INVALID_CASA_ID;
	user[params[0]][j2Casa2Llaves] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitarllavesc2, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarnegocio(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "728", "Usted no tiene acceso a este comando.");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new quitarName[MAX_PLAYER_NAME];
	if (sscanf(params, "s[25]", quitarName)) return _Mensaje(playerid, 3, "0", "/quitarnegocio [Nombre_Apellido]");
	if(new target = IsCharConnected(quitarName) != -1){
		user[target][jNegocioKey] = INVALID_NEGOCIO_ID;
		characterSave(target);
		format(string, 128, "[Administración]{FFFFFF} %s le quitó el negocio que tenía %s.", nombre_pj(playerid), quitarName);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó el negocio que tenía %s.", nombre_pj(playerid), quitarName);
		Log("Registros/QuitarNegocio.log", string);
	}
	
	if (characterCheck(quitarName))
	{ 
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Negocio = %d WHERE NombrePJ = '%e'", INVALID_NEGOCIO_ID, quitarName);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[Administración]{FFFFFF} %s le quitó el negocio que tenía %s.", nombre_pj(playerid), params);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó el negocio que tenía %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarNegocio.log", string);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	format(string, 128, "[Administración]{FFFFFF} %s utilizó /quitarnegocio, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarnegocio2(playerid,  const params[])
{
	new string[200];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "728", "Usted no tiene acceso a este comando.");
	new quitarName[MAX_PLAYER_NAME];
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/quitarnegocio2 [id jugador]");
	sscanf(params, "s[25]", quitarName);
	if(new target = IsCharConnected(quitarName) != -1){
		user[target][jNegocioKey2] = INVALID_NEGOCIO_ID;
		characterSave(target);
		format(string, 128, "[Administración]{FFFFFF} %s le quitó el negocio que tenía %s.", nombre_pj(playerid), quitarName);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó el negocio que tenía %s.", nombre_pj(playerid), quitarName);
		Log("Registros/QuitarNegocio.log", string);
	}
	if (characterCheck(params))
	{ 
		mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET NegocioLlaves = %d WHERE NombrePJ = '%e'", INVALID_NEGOCIO_ID, quitarName);
		mysql_tquery(mainDatabase, string);
		format(string, 128, "[Administración]{FFFFFF} %s utilizó /quitarnegocio2, Jugador: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]),params[0]);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: %s le quitó el negocioLl que tenía %s.", nombre_pj(playerid), params);
		Log("Registros/QuitarNegocio.log", string);
	}
	else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	
	return 1;
}


GCMD:daradmin(playerid,  const params[])
{
	if (user[playerid][jEncargado][0] == 0 && user[playerid][jAdmin] < 1338) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	new target[32], level;
	if(sscanf(params, "s[32]d", target, level)) return _Mensaje(playerid, 3, "0", "USO: /darmod [Cuenta] [Nivel de Rango Administrativo]");
	if (params[1] < 0 || params[1] > 5) return _Mensaje(playerid, 1, "0", "Rangos admins desde 1 a 5.");
	new string[128];
	if(!accountCheck(target)){
		new err[64];
		format(err, sizeof(err), "¡La cuenta %s no existe!", target);
		return _Mensaje(playerid, 3, "0", err);
	}
	new id = IsAccountConnected(target);
	if(IsPlayerConnected(id)){
		if(user[id][jAdmin] >= user[playerid][jAdmin]) return _Mensaje(playerid, 1, "0", "¡No puedes cambiar el rango de un superior o un usuario de tu mismo rango!");
		format(string, sizeof(string), "* El administrador %s te otorgo un puesto en el Staff nivel %d", nombre_pj(playerid), level);
		_Mensaje(id, 4, "33CCFF", string);
		user[id][jAdmin] = level;
		if (!level){
			user[id][jEncargado][0] = 0;
			user[id][jEncargado][1] = 0;
			user[id][jEncargado][2] = 0;
			user[id][jEncargado][3] = 0;
			user[id][jEncargado][4] = 0;
		}
        accountSave(id);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s le otorgo a %s un puesto en el Staff nivel %d.", nombre_pj(playerid), nombre_pj(id), level);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: El administrador %s le otorgo a %s un puesto en el Staff nivel %d.",  username[playerid], username[id], level);
		if (playerid != id) Log("Registros/DarAdmin.log", string);
		return 1;
	}
	yield 1;
	new ORM:dar_admin = orm_create("accounts");
	orm_addvar_string(dar_admin, target, MAX_PLAYER_NAME, "Nombre");
	new rank;
	orm_setkey(dar_admin, "Nombre");
	orm_addvar_int(dar_admin, rank, "Admin");
	if((task_await(orm_async_select(dar_admin))) != _:ERROR_OK)
		return _Mensaje(playerid, 1, "0", "Ocurrió un error al cargar los datos de la cuenta.");
	if(rank >= user[playerid][jAdmin]) return _Mensaje(playerid, 1, "0", "¡No puedes cambiar el rango de un superior o un usuario de tu mismo rango!");
	rank = level;
	if (!level){
		static val_ZERO = 0;
		orm_addvar_int(dar_admin, val_ZERO, "Encargado1");
    	orm_addvar_int(dar_admin, val_ZERO, "Encargado2");
    	orm_addvar_int(dar_admin, val_ZERO, "Encargado3");
    	orm_addvar_int(dar_admin, val_ZERO, "Encargado4");
    	orm_addvar_int(dar_admin, val_ZERO, "Encargado5");
	}
	if((task_await(orm_async_update(dar_admin))) == _:ERROR_OK){
		format(string, sizeof(string), "[Administración]{FFFFFF} %s le otorgo a %s un puesto en el Staff nivel %d.", nombre_pj(playerid), target, rank);
		MensajeAdmin(string);
		format(string, sizeof(string), "Registros: El administrador %s le otorgo a %s un puesto en el Staff nivel %d.",  username[playerid], target, rank);
		if (playerid != id) Log("Registros/DarAdmin.log", string);
	}
	orm_destroy(dar_admin);
	return 1;
}


/*GCMD:soyadmin(playerid,  const params[])
{
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	if (!strcmp(nick, "Matthew_Bishop", true))
	{
		new playerid2, level;
		if (sscanf(params, "dd", playerid2, level)) return _Mensaje(playerid, 3, "0", "/soyadmin [id jugador] [nivel]");
		if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		new string[128];
		user[playerid2][jAdmin] = level;
		accountSave(playerid2);
		format(string, sizeof(string), "* %s te otorgo un puesto en el Staff nivel %d.", nombre_pj(playerid), level);
		_Mensaje(playerid2, 4, "33CCFF", string);
		format(string, sizeof(string), "Registros: El administrador %s le otorgo a %s un puesto en el Staff nivel %d. (/soyadmin)",  username[playerid], username[playerid2], level);
		if (playerid != playerid2) Log("Registros/DarAdmin.log", string);
	} else _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	return 1;
}

GCMD:soytoy(playerid,  const params[])
{
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	if (!strcmp(nick, "Matthew_Bishop", true))
	{
		if (sscanf(params, "dddd", params[0], params[1], params[2], params[3])) return _Mensaje(playerid, 3, "0", "/soytoy [id jugador] [slot] [modelo] [parte]");
		if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		new string[128];
		InfoAccesorio[params[0]][params[1]][aModelo] = params[2];
		InfoAccesorio[params[0]][params[1]][aParte] = params[3];
		InfoAccesorio[params[0]][params[1]][aPosicionX] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aPosicionY] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aPosicionZ] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aRotacionX] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aRotacionY] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aRotacionZ] = 0.000000;
		InfoAccesorio[params[0]][params[1]][aEscalaX] = 1.000000;
		InfoAccesorio[params[0]][params[1]][aEscalaY] = 1.000000;
		InfoAccesorio[params[0]][params[1]][aEscalaZ] = 1.000000;
		format(string, sizeof(string), "* %s te otorgo un objeto modelo %d.", nombre_pj(playerid), params[2]);
		_Mensaje(params[0], 4, "33CCFF", string);
		return 1;
	} else _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	return 1;
}*/

GCMD:darencfac(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencfacciones [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[playerid2][jEncargado][1] = 1;
	accountSave(playerid2);
	format(string, sizeof(string), "* %s lo ha asignado moderador de facciones.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha asignado moderador de facciones a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	Log("Registros/DarEncargado.log", string);
	return 1;
}

GCMD:darencfam(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencfamilias [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[playerid2][jEncargado][2] = 1;
	accountSave(playerid2);
	format(string, sizeof(string), "* %s lo ha asignado moderador de familias.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha asignado moderador de familias a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	Log("Registros/DarEncargado.log", string);
	return 1;
}

GCMD:darencban(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencban [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[playerid2][jEncargado][3] = 1;
	accountSave(playerid2);
	format(string, sizeof(string), "* %s lo ha asignado moderador de ban.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha asignado moderador de ban a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	Log("Registros/DarEncargado.log", string);
	return 1;
}

GCMD:darencstaff(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencstaff [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	user[playerid2][jEncargado][0] = 1;
	accountSave(playerid2);
	format(string, sizeof(string), "* %s lo ha asignado moderador del staff.", nombre_pj(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha asignado moderador del staff a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	Log("Registros/DarEncargado.log", string);
	return 1;
}


GCMD:quitarfaccionoff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/quitarfaccionoff [Nombre_Apellido]");
	new qfName[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", qfName);
	if (characterCheck(params))
	{
		static intZERO = 0;
		new string[128],
		ORM:qform = orm_create("characters");
		orm_addvar_string(qform, qfName, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(qform, "NombrePJ");
		orm_addvar_int(qform, intZERO,"Lider");
		orm_addvar_int(qform, intZERO,"Miembro");
		orm_addvar_int(qform, intZERO,"Rango");
		yield 1;
		if( (task_await(orm_async_update(qform))) == _:ERROR_OK ){
			format(string, 128, "[Administración]{FFFFFF} %s fue sacado de la facción en la que estaba por %s.", params, nombre_pj(playerid));
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s fue sacado de la facción en la que estaba por %s.", params, nombre_pj(playerid));
			Log("Registros/QuitarFaccion.log", string);
		}
		orm_destroy(qform);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

GCMD:quitarfamiliaoff(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "514", "Usted no tiene acceso a este comando.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/quitarfamiliaoff [Nombre_Apellido]");
	new qfName[MAX_PLAYER_NAME];
	sscanf(params, "s[25]", qfName);
	if (characterCheck(params))
	{
		static intZERO = 0;
		new string[128],
		ORM:qfmorm = orm_create("characters");
		orm_addvar_string(qfmorm, qfName, MAX_PLAYER_NAME, "NombrePJ");
		orm_setkey(qfmorm, "NombrePJ");
		orm_addvar_int(qfmorm, intZERO,"Lider2");
		orm_addvar_int(qfmorm, intZERO,"Miembro2");
		orm_addvar_int(qfmorm, intZERO,"Rango2");
		yield 1;
		if( (task_await(orm_async_update(qfmorm))) == _:ERROR_OK ){
			format(string, 128, "[Administración]{FFFFFF} %s fue sacado de la familia en la que estaba por %s.", params, nombre_pj(playerid));
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s fue sacado de la familia en la que estaba por %s.", params, nombre_pj(playerid));
			Log("Registros/QuitarFamilia.log", string);
		}
		orm_destroy(qfmorm);
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}


GCMD:duda(playerid,  const params[])
{
	new string[256];
	if(!CheckTimer(60, DudaTimer[playerid]))
	{
		if (StaffEnLinea() == 0) return Mensaje_(playerid, -1, "Su duda {E11509}no fue enviada{ffffff} debido a que no se encuentran administradores conectados.");
		if (DudaB[playerid] == 1) return _Mensaje(playerid, 0, "472", "El /duda ha sido bloqueado para ti por mal uso.");
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/duda [texto]");
		if (IsNumeric(params)) return _Mensaje(playerid, 0, "476", "No se puede enviar números por este canal.");
		DudaA[playerid] = 1;
		DudaTimer[playerid] = gettime();
		format(string, sizeof(string), "{00c200}%s [ID: %d]:{ffffff} %s", nombre_pj(playerid), playerid, params[0]);
		mensaje_admin(string, 0xffffffff);
		format(DudaT[playerid], 256, "%s", params);
		_Mensaje(playerid, 4, "ffffff", "Su duda fue enviada {188201}correctamente{ffffff} al equipo administrativo en servicio.");
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas enviar otra duda.", CheckTimer(60, DudaTimer[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:ad(playerid,  const params[]) return cmd_aduda(playerid, params);
GCMD:aduda(playerid,  const params[])
{
	new
		string[128],
		playerid2,
		respuesta[200]
	;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ds[200]", playerid2, respuesta)) return _Mensaje(playerid, 3, "0", "/aduda [id jugador] [respuesta]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (DudaA[playerid2] == 0) return _Mensaje(playerid, 0, "477", "Ese usuario no envió ninguna duda o su duda ya fue aceptada o rechazada.");

	format(string, sizeof(string), "{ffffff}%s respondió la duda de %s [ID: {188201}%d{ffffff}].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	format(string, sizeof(string), "Duda respondida por %s (ID: %d): %s", user[playerid][jStaff], playerid, respuesta);
	SendSplitMessage(playerid2, 0x8FB2D1ff, string);
	format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(playerid2), playerid2, respuesta);
	SendSplitMessage(playerid, 0xfce80cff, string);
	DudaA[playerid2] = 0;
	DudaT[playerid2] = "Nada";
	return 1;
}

GCMD:rduda(playerid,  const params[]) return cmd_rd(playerid, params);
GCMD:rd(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/rd [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (DudaA[playerid2] == 0) return _Mensaje(playerid, 0, "477", "Ese usuario no envió ninguna duda o su duda ya fue aceptada o rechazada.");

	format(string, sizeof(string), "{ffffff}%s rechazó la duda de %s [ID: {188201}%d{ffffff}].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	format(string, sizeof(string), "Su duda fue rechazada por %s (ID: %d), seguramente no tiene relación con el modo de juego.", user[playerid][jStaff], playerid);
	SendClientMessage(playerid2, 0x8FB2D1ff, string);
	DudaA[playerid2] = 0;
	DudaT[playerid2] = "Nada";
	return 1;
}

GCMD:bloquearprivados(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloquearprivados [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (PrivadosB[playerid2] == 0)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] bloqueo los permisos de mandar privados a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "%s te ha bloqueado los permisos de mandar privados.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		PrivadosB[playerid2] = 1;
	}
	else
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] desbloqueo los permisos de mandar privados a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "%s te ha desbloqueado el permiso de mandar privados. Utilizelo bien esta vez.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		PrivadosB[playerid2] = 0;
	}
	return 1;
}

GCMD:bloqueardudas(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloqueardudas [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (DudaB[playerid2] == 0)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] bloqueo el canal de dudas a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "%s te ha bloqueado el canal de dudas por mal uso.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		DudaA[playerid2] = 0;
		DudaT[playerid2] = "Nada";
		DudaB[playerid2] = 1;
	}
	else
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] desbloqueo el canal de dudas a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "%s te ha desbloqueado el canal de dudas. Utilizelo bien esta vez.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		DudaA[playerid2] = 0;
		DudaT[playerid2] = "Nada";
		DudaB[playerid2] = 0;
	}
	return 1;
}

GCMD:dudas(playerid)
{
	new string[200];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "00c200", "» {ffffff}Dudas:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i) && DudaA[i] == 1)
		{
			format(string, sizeof(string), "{00c200}%s [ID: %i]:{ffffff} %s", nombre_pj(i), i, DudaT[i]);
			if (strlen(string) > 0) SendSplitMessage(playerid, 0xffffffff, string);
		}
	}
	return 1;
}

GCMD:borrardudas(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i) && DudaA[i] == 1)
		{
			DudaA[i] = 0;
			DudaT[i] = "Nada";
		}
	}
	format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] a borrado todas las dudas activas.", nombre_pj(playerid), playerid);
	MensajeAdmin(string);
	return 1;
}

GCMD:irpuerta(playerid,  const params[])
{
	new p_id, string[128];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", p_id)) return _Mensaje(playerid, 3, "0", "/irpuerta [puerta id]");
	if (p_id < 1 || p_id >= MAX_PUERTAS) return _Mensaje(playerid, 0, "453", "ID de puerta dinamica errónea.");
	if (!i_Puerta[p_id][pPos_X]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	SetPlayerVirtualWorld(playerid, i_Puerta[p_id][pPos_VW]);
	SetPlayerInterior(playerid, i_Puerta[p_id][pPos_Int]);
	user[playerid][jInterior] = i_Puerta[p_id][pPos_Int];
	user[playerid][jVirtualWorld] = i_Puerta[p_id][pPos_VW];
	SetPlayerPos(playerid, i_Puerta[p_id][pPos_X], i_Puerta[p_id][pPos_Y], i_Puerta[p_id][pPos_Z]);

	format(string, sizeof(string), "Usted se teletransporto a la Puerta %d.", p_id);
	_Mensaje(playerid, 2, "0", string);
	return 1;
}

GCMD:qfa(playerid,  const params[])
{
	new playerid2, string[200];
	if (!sscanf(params, "d", playerid2))
	{
		if (!user[playerid][jAdmin]) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
		if (IsPlayerConnected(playerid2))
		{
			format(string, sizeof(string), "[SISTEMA]:{ffffff} El último usuario que mató a %s, fue %s.", nombre_pj(playerid2), QuienMato[playerid2]);
			_Mensaje(playerid, 4, "FF0000", string);
		} else return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	}
	else
	{
		if(asesino[playerid] == -1) return _Mensaje(playerid, 0, "75", "Nadie te ha asesinado, posible error.");
		format(string, sizeof(string), "[SISTEMA]:{ffffff} El último usuario que te mato fue %s.", QuienMato[playerid]);
		_Mensaje(playerid, 4, "FF0000", string);
	}
	return 1;
}

GCMD:editarp(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[256], option[50], p_id, amount;
	if (sscanf(params, "s[50]ii", option, p_id, amount))
	{
		_Mensaje(playerid, 3, "0", "/editarp [opción] [id puerta] [monto]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}Precio, Exterior, Interior, MapIcon");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}Icono, Premium, Familia, Faccion, Borrar.");
		return 1;
	}
	if (p_id < 1 || p_id >= MAX_PUERTAS) return _Mensaje(playerid, 0, "453", "ID de puerta dinamica errónea.");
	if (!i_Puerta[p_id][pPos_X]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	if (strcmp(option, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, i_Puerta[p_id][pPos_X], i_Puerta[p_id][pPos_Y], i_Puerta[p_id][pPos_Z]);
		GetPlayerFacingAngle(playerid, i_Puerta[p_id][pPos_A]);
		i_Puerta[p_id][pPos_VW] = GetPlayerVirtualWorld(playerid);
		i_Puerta[p_id][pPos_Int] = GetPlayerInterior(playerid);
		_Mensaje(playerid, 1, "0", "Cambiaste el exterior de la puerta.");
		puerta_Pickup(p_id);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "interior", true) == 0)
	{
		GetPlayerPos(playerid, i_Puerta[p_id][pInt_X], i_Puerta[p_id][pInt_Y], i_Puerta[p_id][pInt_Z]);
		GetPlayerFacingAngle(playerid, i_Puerta[p_id][pInt_A]);
		i_Puerta[p_id][pInt_Int] = GetPlayerInterior(playerid);
		i_Puerta[p_id][pInt_VW] = GetPlayerVirtualWorld(playerid);
		_Mensaje(playerid, 1, "0", "Cambiaste el interior de la puerta.");
		puerta_Pickup(p_id);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "icono", true) == 0)
	{
		i_Puerta[p_id][pIcono] = amount;
		_Mensaje(playerid, 1, "0", "Cambiaste el icono de la puerta.");
		puerta_Pickup(p_id);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "mapicon", true) == 0)
	{
		i_Puerta[p_id][pMapIcon] = amount;
		_Mensaje(playerid, 1, "0", "Cambiaste el mapicon de la puerta.");
		puerta_Pickup(p_id);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "precio", true) == 0)
	{
		if (amount == 0)
		{
			i_Puerta[p_id][pPrecio] = 0;
			i_Puerta[p_id][pTipo] = 0;
		}
		else
		{
			i_Puerta[p_id][pPrecio] = amount;
			i_Puerta[p_id][pTipo] = 1;
		}
		_Mensaje(playerid, 1, "0", "Cambiaste el precio de la puerta.");
		save_Puerta(p_id);
	}
	else if (strcmp(option, "premium", true) == 0)
	{
		i_Puerta[p_id][pPremium] = amount;
		format(string, sizeof(string), "Cambiaste la restricción Premium (%d).", amount);
		_Mensaje(playerid, 1, "0", string);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "familia", true) == 0)
	{
		i_Puerta[p_id][pFamilia] = amount;
		format(string, sizeof(string), "Cambiaste la restricción Facción NO (%d).", amount);
		_Mensaje(playerid, 1, "0", string);
		save_Puerta(p_id);
		return 1;
	}
	else if (strcmp(option, "faccion", true) == 0)
	{
		i_Puerta[p_id][pFaccion] = amount;
		format(string, sizeof(string), "Cambiaste la restricción Facción (%d).", amount);
		_Mensaje(playerid, 1, "0", string);
		save_Puerta(p_id);
	}
	else if (strcmp(option, "borrar", true) == 0)
	{
		puerta_2Pickup(p_id);
		format(i_Puerta[p_id][pNombre], 128, "Dulce Hogar");
		format(i_Puerta[p_id][pDueno], 32, "Gobierno");
		i_Puerta[p_id][pTipo] = 0;
		i_Puerta[p_id][pSeguro] = 0;
		i_Puerta[p_id][pComprado] = 0;
		i_Puerta[p_id][pDinero] = 0;
		i_Puerta[p_id][pPrecio] = 0;
		i_Puerta[p_id][pPremium] = 0;
		i_Puerta[p_id][pFamilia] = 0;
		i_Puerta[p_id][pFaccion] = 0;
		//float
		i_Puerta[p_id][pPos_X] = 0.0;
		i_Puerta[p_id][pPos_Y] = 0.0;
		i_Puerta[p_id][pPos_Z] = 0.0;
		i_Puerta[p_id][pPos_A] = 0.0;
		i_Puerta[p_id][pPos_VW] = 0;
		i_Puerta[p_id][pPos_Int] = 0;
		i_Puerta[p_id][pInt_X] = 0.0;
		i_Puerta[p_id][pInt_Y] = 0.0;
		i_Puerta[p_id][pInt_Z] = 0.0;
		i_Puerta[p_id][pInt_A] = 0.0;
		i_Puerta[p_id][pInt_VW] = 0;
		i_Puerta[p_id][pInt_Int] = 0;
		//iconos
		i_Puerta[p_id][pMapIcon] = 0;
		i_Puerta[p_id][pIcono] = 0;
		save_Puerta(p_id);
		format(string, sizeof(string), "Borraste la puerta dinámica: %d.", p_id);
		_Mensaje(playerid, 1, "0", string);
	}
	return 1;
}

GCMD:editarp2(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new p_id, doorname[128];
	if (sscanf(params, "ds[128]", p_id, doorname)) return _Mensaje(playerid, 3, "0", "/editarp2 [id puerta] [nombre]");
	format(i_Puerta[p_id][pNombre], 128, "%s", doorname);
	_Mensaje(playerid, 1, "0", "Cambiaste el nombre de la puerta.");
	save_Puerta(p_id);
	return 1;
}

GCMD:editarp3(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new p_id, doorname[32];
	if (sscanf(params, "ds[32]", p_id, doorname)) return _Mensaje(playerid, 3, "0", "/editarp3 [id puerta] [dueño]");
	format(i_Puerta[p_id][pDueno], 32, "%s", doorname);
	_Mensaje(playerid, 1, "0", "Cambiaste el dueño de la puerta.");
	save_Puerta(p_id);
	return 1;
}

GCMD:crearauto(playerid,  const params[])
{
	new string[128], playerid2, modelid, color1, color2, precio;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ddddd", playerid2, modelid, color1, color2, precio)) return _Mensaje(playerid, 3, "0", "/crearauto [id jugador] [modelid] [color 1] [color 2] [precio]");
	if (color1 < 0 || color1 > 126) { _Mensaje(playerid, 0, "444", "Numero de color no debe ser menor de 0 o mayor que 126."); return 1; }
	if (color2 < 0 || color2 > 126) { _Mensaje(playerid, 0, "445", "Numero de color 2 no debe ser menor de 0 o mayor que 126."); return 1; }
	if (modelid < 400 || modelid > 611) { _Mensaje(playerid, 0, "446", "Id del vehiculo debe ser del 400 al 611."); return 1; }
	new Float: X, Float: Y, Float: Z, Float: Angle;
	GetPlayerPos(playerid2, X, Y, Z);
	GetPlayerFacingAngle(playerid2, Angle);
	new car = CrearCoche(playerid2, modelid, X, Y, Z, Angle, color1, color2, precio);
	if (car == INVALID_PLAYER_VEHICLE_ID) _Mensaje(playerid, 0, "449", "Algo salió mal y el vehículo no se creó.");
	else
	{
		format(string, sizeof(string), "%s creó [M-%d C1-%d C2-%d] a %s", nombre_pj(playerid), modelid, color1, color2, nombre_pj(playerid2));
		_Mensaje(playerid, 2, "0", string);
		Log("Registros/CrearAuto.log", string);
	}
	return 1;
}

GCMD:respawncar(playerid,  const params[])
{
	new string[128], carid;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", carid)) return _Mensaje(playerid, 3, "0", "/respawncar [id vehículo]");
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /respawncar, Vehículo ID: %d.", nombre_pj(playerid), carid);
	MensajeAdmin(string);
	SetVehicleToRespawn(carid);
	return 1;
}

GCMD:respawncars(playerid,  const params[])
{
	new string[128], radius;
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/respawncars [Radio]");
	if (radius < 1 || radius > 50)
	{
		_Mensaje(playerid, 1, "0", "El radio debe ser de 1 a 50.");
		return 1;
	}
	RespawnNearbyVehicles(playerid, radius);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /respawncars, respawneo todos los vehículos cercanos a él.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}

GCMD:racall(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new bool: unwanted[MAX_VEHICLES];
	for (new player = 0; player < MAX_PLAYERS; player++)
	{
		if (IsPlayerInAnyVehicle(player))
		{
			unwanted[GetPlayerVehicleID(player)] = true;
		}
	}
	for (new car = 0; car < MAX_VEHICLES; car++)
	{
		if (!unwanted[car]) SetVehicleToRespawn(car);
		SetVehicleParamsEx(car, 0, 0, 0, 0, 0, 0, 0);
		arr_Engine {car} = 0;
	}
	new string[128];
	format(string, sizeof(string), "[Administración]{FFFFFF} Respawn general realizado por %s.", nombre_pj(playerid));
	return 1;
}

GCMD:vmiembros(playerid)
{
	new conteo = 0, rango[500], coordsstring[300];
	SendClientMessage(playerid, 0xFFDB4200, "Premiums conectados:");
	foreach(new i: Player)
	{
		if (user[i][jPremium] >= 1)
		{
			conteo++;
			if (user[i][jPremium] == 1) rango = "{D10000}Plata";
			else if (user[i][jPremium] == 2) rango = "{F6DF25}Oro";
			format(coordsstring, sizeof(coordsstring), "%d | %s: %s\n",i, nombre_pj(i), rango);
			SendClientMessage(playerid, 0xB5B5B5FF, coordsstring);
		}
	}
	if(conteo == 0) return SendClientMessage(playerid, 0xB5B5B5FF, "*** Actualmente no hay premiums conectados.");
	return 1;
}

GCMD:admins(playerid)
{
	new check = 0, info[150];
	_Mensaje(playerid, 5, "0", "Admins conectados:");
	foreach(new i: Player)
	{
		if(user[i][jAdmin] > 0)
		{
			new personaje = GetPVarInt(i, "crear_pj");
			new playername[50 + MAX_PLAYER_NAME];

			switch (personaje)
			{
				case 1: alm(playername, user[i][jCuenta_1]);
				case 2: alm(playername, user[i][jCuenta_2]);
				case 3: alm(playername, user[i][jCuenta_3]);
			}
			format(info, sizeof(info), "[ID: %d] - %s [%s] (Nivel: %i)", i, playername, user[i][jStaff], user[i][jAdmin]);
			SendClientMessage(playerid, EnServicioADM[i] == 1? 0x33AA33FF : 0xAFAFAFFF, info);
			check++;
		}
	}
	if(check == 0) return SendClientMessage(playerid, 0xAFAFAFFF, "*** Actualmente no hay administradores conectados.");
	return 1;
}

GCMD:loteria(playerid)
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	else
	{
		_MensajeSAN(C_BLANCO, "{2F99B5}Noticias: {FFFFFF}Ha comenzado el sorteo de la loteria.");
		new pay = Random(1, 120);
		Loteria(pay);
	}
	return 1;
}

GCMD:trabajar(playerid)
{
	if (user[playerid][jTrabajo1] != 0) return _Mensaje(playerid, 0, "0", "Ya posees un trabajo en la ranura 1 (/trabajar2 o /renunciar).");
	if (en_pos(playerid, 3.0, 2468.5474, -2116.8491, 13.4846)) //carguero
	{
		_Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}carguero{b0b0b0}, para más información: /ayuda trabajo.");
		return user[playerid][jTrabajo1] = 1;
    }
	else if (en_pos(playerid, 3.0, 8512.2188,13940.5342,4.9182)) //delincuente
	{
        if(!user[playerid][jPuntosRol][0]) return _Mensaje(playerid, 0, "9", "Debes tener al menos un punto de rol.");
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}delincuente{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 2;
    }
	else if (en_pos(playerid, 3.0, 8571.8350, 14494.7344, 5.7692)) //pescador
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}pescador{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 3;
    }
	else if (en_pos(playerid, 3.0, -566.1776, -1496.1948, 9.4454)) //leñador
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}leñador{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 4;
    }
	else if (en_pos(playerid, 3.0, 8756.8242,14228.8154,7.4378)) //ladrón de coches
	{
	    if (!user[playerid][jPuntosRol][0] && (user[playerid][jHabilidad][3] < 10)) return _Mensaje(playerid, 0, "0", "Debes tener un punto de rol o habilidad mínima de delincuente (11).");
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}ladrón de coches{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 5;
	}
	else if (en_pos(playerid, 3.0, -383.0549, -1438.9514, 26.3276)) //granjero
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}granjero{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 6;
    }
	else if (en_pos(playerid, 3.0, 2080.4480,-2355.2971,13.5469)) //Carpintero
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}carpintero{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo1] = 10;
    }
	return 1;
}

GCMD:trabajar2(playerid)
{
	if (user[playerid][jTrabajo2] != 0) return _Mensaje(playerid, 0, "0", "Ya posees un trabajo en la ranura 2 (/trabajar o /renunciar2).");
	if (en_pos(playerid, 3.0, 2468.5474, -2116.8491, 13.4846)) //carguero
	{
		_Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}carguero{b0b0b0}, para más información: /ayuda trabajo.");
		return user[playerid][jTrabajo2] = 1;
    }
	else if (en_pos(playerid, 3.0, 8512.2188,13940.5342,4.9182)) //delincuente
	{
        if(!user[playerid][jPuntosRol][0]) return _Mensaje(playerid, 0, "9", "Debes tener al menos un punto de rol.");
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}delincuente{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo2] = 2;
    }
	else if (en_pos(playerid, 3.0, 2953.7461, -1549.3822, 1.7974)) //pescador
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}pescador{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo2] = 3;
    }
	else if (en_pos(playerid, 3.0, 8571.8350, 14494.7344, 5.7692)) //leñador
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {E7D800}leñador{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo2] = 4;
    }
	else if (en_pos(playerid, 3.0, 8756.8242,14228.8154,7.4378)) //ladrón de coches
	{
	    if (!user[playerid][jPuntosRol][0] && (user[playerid][jHabilidad][3] < 10)) return _Mensaje(playerid, 0, "0", "Debes tener un punto de rol o habilidad mínima de delincuente (11).");        _Mensaje(playerid, 4, "b0b0b0", " Ahora eres {ffffff}ladrón de coches{b0b0b0}, escribe (/ayuda) para más información.");
        return user[playerid][jTrabajo2] = 5;
	}
	else if (en_pos(playerid, 3.0, -383.0549, -1438.9514, 26.3276)) //granjero
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {ffffff}granjero{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo2] = 6;
    }
	else if (en_pos(playerid, 3.0, 2080.4480,-2355.2971,13.5469)) //Carpintero
	{
        _Mensaje(playerid, 4, "b0b0b0", "Ahora eres {ffffff}carpintero{b0b0b0}, para más información: /ayuda trabajo.");
        return user[playerid][jTrabajo2] = 10;
    }
	return 1;
}

GCMD:renunciar(playerid)
{
	if (user[playerid][jTrabajo1] > 0)
	{
		user[playerid][jTrabajo1] = 0;
		return _Mensaje(playerid, 4, "ffffff", "Renunciaste a tu trabajo, si poseías un checkpoint usa /eliminarcp.");
	} else if (user[playerid][jTrabajo1] == 0) _Mensaje(playerid, 0, "424", "Tu no tienes trabajo.");
	return 1;
}

GCMD:renunciar2(playerid)
{
	if (user[playerid][jTrabajo2] > 0)
	{
		user[playerid][jTrabajo2] = 0;
		return _Mensaje(playerid, 4, "ffffff", "Renunciaste a tu trabajo, si poseías un checkpoint usa /eliminarcp.");
	} else if (user[playerid][jTrabajo2] == 0) _Mensaje(playerid, 0, "425", "Tu no tienes un segundo trabajo.");
	return 1;
}

GCMD:renunciar3(playerid)
{
	if (user[playerid][jTrabajo3] > 0)
	{
		user[playerid][jTrabajo3] = 0;
		return _Mensaje(playerid, 4, "ffffff", "Renunciaste a tu trabajo, si poseías un checkpoint usa /eliminarcp.");
	} else if (user[playerid][jTrabajo3] == 0) _Mensaje(playerid, 0, "426", "Tu no tienes un tercer trabajo.");
	return 1;
}

GCMD:vendercosecha(playerid)
{
	if (!en_pos(playerid, 2.0, -383.0549, -1438.9514, 26.3276)) return _Mensaje(playerid, 0, "0", "No estás en el punto de trabajar.");

	if (user[playerid][jCosechas] > 1)
	{
		new string[128], level = user[playerid][jHabilidad2][1], pago;

		if (level == 1) pago = 4;
		else if (level == 2) pago = 5;
		else if (level == 3) pago = 6;
		else if (level == 4) pago = 7;
		else if (level == 5) pago = 8;

		format(string, sizeof(string), "* Vendiste %d gramos de cosecha y sumaste $%i a tu bolsillo.", user[playerid][jCosechas], user[playerid][jCosechas] * pago / 3);
		_Mensaje(playerid, 4, "33CCFF", string);
		DarDineroGC(playerid, user[playerid][jCosechas] * pago / 3);
		d_estado -= user[playerid][jCosechas] * pago / 3;
		user[playerid][jCosechas] = 0;
		return 1;
	} else _Mensaje(playerid, 0, "423", "Lo mínimo para vender es un gramo.");
	return 1;
}

GCMD:cosechar(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
	if (!Es_job(playerid, 6)) return _Mensaje(playerid, 0, "0", "No eres granjero.");
	if (!veh_Granjero(idcar)) return _Mensaje(playerid, 0, "0", "No estás en un tractor.");
	if (Granjero[playerid] != 0) return _Mensaje(playerid, 0, "0", "Ya estás cosechando.");

	user[playerid][Checkpoint] = 1;
	Granjero[playerid] = 1;
	SetPlayerCheckpoint(playerid, p_granjero[0][0], p_granjero[0][1], p_granjero[0][2], 5.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	_Mensaje(playerid, 2, "0", "Dirígete a los checkpoints para cosechar, si quieres dejar de cosechar escribe /dcosechar.");
	DisableRemoteVehicleCollisions(playerid, true);
	return 1;
}

GCMD:dcosechar(playerid)
{
	new
		idcar = GetPlayerVehicleID(playerid),
		string[128]
	;
	if (!veh_Granjero(idcar)) return _Mensaje(playerid, 0, "0", "No estás en un tractor.");
	if (Granjero[playerid] != 1) return _Mensaje(playerid, 0, "0", "No estás cosechando.");

	Granjero[playerid] = 0;
	DeletePVar(playerid, "EnCheckPoint");
	SetVehicleToRespawn(idcar);
	format(string, sizeof(string), "Dejaste de cosechar, el tractor %d se respawneo.", idcar);
	SendClientMessage(playerid, 0x007798ff, string);
	DisablePlayerCheckpoint(playerid);
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	DisableRemoteVehicleCollisions(playerid, false);
	return 1;
}

GCMD:plantar(playerid)
{
	if (user[playerid][jm_Derecha] != 79) { _Mensaje(playerid, 0, "9", "Necesitas tener la semilla en tu mano derecha."); return 1; }
	new string[128], LimitarSemillas;
	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(InfoMaria[f][sSlot])
		{
			if(!strcmp(nombre_sin(playerid), InfoMaria[f][sDueno]))
			{
				LimitarSemillas++;
				if(LimitarSemillas > 4)
				{
					_Mensaje(playerid, 4, "ff0000", "Imposible plantar más de 5 semillas.");
					return 1;
				}
			}
		}
	}
	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(!InfoMaria[f][sSlot])
		{
			if(user[playerid][jm_Derecha] == 79){user[playerid][jm_DerechaCant] --;}
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
			InfoMaria[f][sSlot] = true;
			InfoMaria[f][sTime] = 1440;
			InfoMaria[f][sDueno] = nombre_sin(playerid);
			InfoMaria[f][sInterior] = GetPlayerInterior(playerid);
			InfoMaria[f][sVirtualWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2]);
			InfoMaria[f][sPosicion][2] -= 1.5;
			format(string, sizeof(string), "Planta de marihuana\n{ffffff}Madura en %s", Mins_time(InfoMaria[f][sTime]));
			InfoMaria[f][sLabel] = CreateDynamic3DTextLabel(string, 0x009F46FF, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2] + 1.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, InfoMaria[f][sVirtualWorld], InfoMaria[f][sInterior]);
			InfoMaria[f][sObjeto] = CreateDynamicObject(19473, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2], 0.0, 0.0, 0.0, InfoMaria[f][sVirtualWorld], InfoMaria[f][sInterior]);
			ActualizarMaria(f);
			break;
		}
	}
	return 1;
}

GCMD:splanta(playerid)
{
	if (user[playerid][jm_Derecha] != 127 && user[playerid][jm_Izquierda] != 127){ _Mensaje(playerid, 0, "9", "No tienes unas tijeras en ninguna mano."); return 1;}
	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(en_pos(playerid, 2, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2]))
		{
			if (GetPlayerVirtualWorld(playerid) == InfoMaria[f][sVirtualWorld] && GetPlayerInterior(playerid) == InfoMaria[f][sInterior])
			{
				if (InfoMaria[f][sGramos] > 0)
				{
					if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					new string[128], dGramos = InfoMaria[f][sGramos];
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					format(string, sizeof(string), "Has cosechado %d gramos de marihuana.", dGramos+7);
					_Mensaje(playerid, 4, "A7CE00", string);
					Borrarplanta(f);
					if (user[playerid][jm_Derecha] == 0)
					{
						user[playerid][jm_Derecha] = 74;
						user[playerid][jm_DerechaCant] = dGramos+7;
						PonerObjeto(playerid, 1, 74);
						return 1;
					}
					else if (user[playerid][jm_Derecha] != 0)
					{
						user[playerid][jm_Izquierda] = 74;
						user[playerid][jm_IzquierdaCant] = dGramos+7;
						PonerObjeto(playerid, 2, 74);
						return 1;
					}
				} else return _Mensaje(playerid, 0, "1", "Esta planta no está lista.");
			}
		}
	}
	return _Mensaje(playerid, 0, "1", "No estás cerca de alguna planta.");
}

GCMD:destruirplanta(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "1", "No eres de la PD.");

	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(en_pos(playerid, 2, InfoMaria[f][sPosicion][0], InfoMaria[f][sPosicion][1], InfoMaria[f][sPosicion][2]))
		{
			if (GetPlayerVirtualWorld(playerid) == InfoMaria[f][sVirtualWorld] && GetPlayerInterior(playerid) == InfoMaria[f][sInterior])
			{
				if(InfoMaria[f][sSlot])
				{
					accion_rol(playerid, 0, "destruye la marihuana plantada.");
					Borrarplanta(f);
					return 1;
				}
			}
		}
	}
	return 1;
}

funcion Borrarplanta(s)
{
	InfoMaria[s][sGramos] = 0;
	InfoMaria[s][sSlot] = false;
	InfoMaria[s][sPosicion][0] = -1;
	InfoMaria[s][sPosicion][1] = -1;
	InfoMaria[s][sPosicion][2] = -1;
	InfoMaria[s][sInterior] = -1;
	InfoMaria[s][sVirtualWorld] = -1;
	format(InfoMaria[s][sDueno], 24, "SinDueno");
	DestroyDynamic3DTextLabel(InfoMaria[s][sLabel]);
	DestroyDynamicObject(InfoMaria[s][sObjeto]);
	ActualizarMaria(s);
	return 1;
}

GCMD:aduty(playerid) return cmd_staffon(playerid);
GCMD:adminduty(playerid) return cmd_staffon(playerid);
GCMD:staffon(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0)
	{
		EnServicioADM[playerid] = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s se encuentra como (staff-on).", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else
	{
		EnServicioADM[playerid] = 0;
		SetPlayerColor(playerid, C_PLAYERBLANCO);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s se encuentra como (staff-off).", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:bugtalleres(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	used_taller[0] = 0;
	used_taller[1] = 0;
	used_taller[2] = 0;
	used_taller[3] = 0;
	used_taller[4] = 0;
	used_taller[5] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó el comando /bugtalleres.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}
GCMD:bugentrenar(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	UsandoGym[0] = 0; UsandoGym[1] = 0; UsandoGym[2] = 0; UsandoGym[3] = 0; UsandoGym[4] = 0;
	UsandoGym[5] = 0; UsandoGym[6] = 0; UsandoGym[7] = 0; UsandoGym[8] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó el comando /bugentrenar.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}

GCMD:llevarn(playerid,  const params[])
{
	new
		nid,
		playerid2,
		string[128]
	;
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", playerid2, nid)) return _Mensaje(playerid, 3, "0", "/llevarn [id jugador] [negocio]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "137", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (nid < 0 || nid >= MAX_NEGOCIOS) return _Mensaje(playerid, 0, "453", "ID de negocio erróneo.");
	if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");

	SetPlayerVirtualWorld(playerid2, 0);
	SetPlayerInterior(playerid2, 0);
	user[playerid2][jInterior] = 0;
	user[playerid2][jVirtualWorld] = 0;
	SetPlayerPos(playerid2, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
	format(string, sizeof(string), "%s te ha llevado al negocio ID %d.", user[playerid][jStaff], nid);
	_Mensaje(playerid2, 5, "0", string);
    format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s al Negocio: %d.", nombre_pj(playerid), nombre_pj(playerid2), nid);
    MensajeAdmin(string);

	return 1;
}

GCMD:llevarc(playerid,  const params[])
{
	new
		cid,
		playerid2,
		string[128]
	;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", playerid2, cid)) return _Mensaje(playerid, 3, "0", "/llevarc [id jugador] [casa]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "137", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (cid < 0 || cid >= MAX_CASAS) return _Mensaje(playerid, 0, "453", "ID de casa errónea.");
	if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	SetPlayerVirtualWorld(playerid2, i_Casa[cid][c_VW]);
	SetPlayerInterior(playerid2, i_Casa[cid][c_Int]);
	user[playerid2][jInterior] = i_Casa[cid][c_Int];
	user[playerid2][jVirtualWorld] = i_Casa[cid][c_VW];
	SetPlayerPos(playerid2, i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ]);
	format(string, sizeof(string), "%s te ha llevado a la casa ID %d.", user[playerid][jStaff], cid);
	_Mensaje(playerid2, 5, "0", string);
    format(string, sizeof(string), "[Administración]{FFFFFF} %s llevó a %s a la Casa: %d.", nombre_pj(playerid), nombre_pj(playerid2), cid);
	MensajeAdmin(string);

	return 1;
}

GCMD:llevar(playerid,  const params[])
{
	new
		playerid2
	;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/llevar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	ExPlayerDialog(playerid, teleport_staff, DIALOG_STYLE_LIST, "{b0b0b0}point_spawn",
	"Tienda de bici\n\
	Bullworth Plaza\n\
	Farmacia EasyDrugs\n\
	Gasolinera de Bullworth\n\
	Motel in and out\n\
	Las venturas\n\
	San fierro\n\
	Los santos", ">>", "<<");

	SetPVarInt(playerid, "playerid2", playerid2);

	return 1;
}

GCMD:pfllevar(playerid,  const params[])
{
	new
		playerid2
	;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/pfllevar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	ExPlayerDialog(playerid, teleport_pf, DIALOG_STYLE_LIST, "{b0b0b0}Interiores: PF",
	"Exterior\n\
	Bloque A\n\
	Bloque B\n\
	Aislamiento\n\
	Armería e int\n\
	Comedor\n\
	Compra\n\
	Enfermería\n\
	Ingresos\n\
	Pasillo\n\
	Piso 2\n\
	Recepción\n\
	Taller\n\
	Taquillas\n\
	Visitas", ">>", "<<");

	SetPVarInt(playerid, "playerid2", playerid2);

	return 1;
}

/* trabajo de carpintero */
GCMD:imueble(playerid)
{
	if (!Es_job(playerid, 10)) return _Mensaje(playerid, 0, "149", "No eres carpintero.");

	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer esto en un vehículo.");
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "150", "Estás haciendo un mueble, terminalo después usas el comando.");
	if (Carpintero[playerid] == 1) return _Mensaje(playerid, 0, "148", "Para usar este comando escribe /dmueble.");
	if (user[playerid][jEspalda] != 0) return _Mensaje(playerid, 4, "b0b0b0", "Debes retirar el objeto que posees colgado (/arma tomar).");

	set_checkpoint(playerid, 2151.3848,-2386.9004,13.5469, 2.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	SendClientMessage(playerid, 0x007798ff, "Dirígete por unos troncos, luego vas a las mesas.");
	Carpintero[playerid] = 1;
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	TogglePlayerAllDynamicCPs(playerid, false);

	return 1;
}
GCMD:dmueble(playerid)
{
	if (!Es_job(playerid, 10)) return _Mensaje(playerid, 0, "149", "No eres carpintero.");

	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "150", "Estás haciendo un mueble, terminalo después usas el comando.");
	new string[128], level = user[playerid][jHabilidad2][7], pago;

	if (level == 1) pago = 11;
	else if (level == 2) pago = 15;
	else if (level == 3) pago = 17;
	else if (level == 4) pago = 20;
	else if (level == 5) pago = 23;

	DarDineroGC(playerid, user[playerid][jMuebles] * pago);
	format(string, sizeof(string), "* Recibiste $%d por los %d muebles creados.", user[playerid][jMuebles] * pago, user[playerid][jMuebles]);
	_Mensaje(playerid, 4, "33CCFF", string);
	user[playerid][jMuebles] = 0;
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	Carpintero[playerid] = 0;
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	TogglePlayerAllDynamicCPs(playerid, true);
	DisablePlayerCheckpoint(playerid);
	DeletePVar(playerid, "HaciendoMueble");
	return 1;
}
//trabajo de carguero
GCMD:icargar(playerid)
{
	if (!Es_job(playerid, 1)) return _Mensaje(playerid, 0, "681", "No eres carguero.");

	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer esto en un vehículo.");
	if (GetPVarInt(playerid, "HaciendoCarga") == 1) return _Mensaje(playerid, 0, "148", "Para usar este comando escribe /dcargar.");
	if (user[playerid][jEspalda] != 0) return _Mensaje(playerid, 4, "b0b0b0", "Debes retirar el objeto que posees colgado (/arma tomar).");

	set_checkpoint(playerid, 2512.1077, -2108.5527, 13.4846, 2.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	SendClientMessage(playerid, 0x007b1dff, "Busca el lugar de las cajas, y llévalas al contenedor.");
	SetPVarInt(playerid, "HaciendoCarga", 1);
	ClearAnimations(playerid);
	Carguero[playerid] = 1;
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	return 1;
}
GCMD:dcargar(playerid)
{
	if (!Es_job(playerid, 1)) return _Mensaje(playerid, 0, "681", "No eres carguero.");

	if (user[playerid][jCargas] == 0) return _Mensaje(playerid, 0, "213", "Debes por lo menos subir una caja.");
	new string[100], level = user[playerid][jHabilidad2][4], pago;

	if (level == 1) pago = 12;
	else if (level == 2) pago = 16;
	else if (level == 3) pago = 19;
	else if (level == 4) pago = 24;
	else if (level == 5) pago = 29;

    d_estado -= user[playerid][jCargas] * pago;
	DarDineroGC(playerid, user[playerid][jCargas] * pago);
	format(string, sizeof(string), "* Recibiste $%d por las %d cajas subidas al tren.", user[playerid][jCargas] * pago, user[playerid][jCargas]);
	_Mensaje(playerid, 4, "33CCFF", string);

	user[playerid][jCargas] = 0;
	DeletePVar(playerid, "HaciendoCarga");
	DeletePVar(playerid, "EnCheckPoint");
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	DisablePlayerCheckpoint(playerid);
	Carguero[playerid] = 0;
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	return 1;
}

//
GCMD:conmirilla(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	_Mensaje(playerid, 4, "33CCFF", "Jugadores con mirilla:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (_mirilla[i] != -1)
			{
				new string[128];
				format(string, 128, "[ID: %d] %s", i, nombre_pj(i));
				Mensaje_(playerid, 0xb0b0b0ff, string);
			}
		}
	}
	return 1;
}
GCMD:enmascarados(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	_Mensaje(playerid, 4, "33CCFF", "Jugadores con máscara:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][j_Mascara] == 1)
			{
				new string[128];
				format(string, 128, "[ID: %d] - Original: {FF0000}%s{FFFFFF} / Usando: {00c200}%s", i, nombre_pj(i), nombre_pj(i, 0));
				_Mensaje(playerid, 4, "FFFFFF", string);
			}
		}
	}
	return 1;
}
GCMD:enmascaradospd(playerid)
{
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	_Mensaje(playerid, 4, "33CCFF", "Jugadores con máscara pd:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jMascaraPD] == 1)
			{
				new name[MAX_PLAYER_NAME];
				GetPVarString(i, "NombreP", name, sizeof(name));
				new string[128];
				format(string, 128, "[ID: %d] - Original: {FF0000}%s{FFFFFF} / Usando: {00c200}%s", i, name, nombre_pj(i, 0));
				_Mensaje(playerid, 4, "FFFFFF", string);
			}
		}
	}
	return 1;
}
GCMD:motor(playerid)
{
	if (check_motor[playerid] != 0) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	if (pago_tune[playerid] != 0) return _Mensaje(playerid, 4, "b0b0b0", "No puedes encender el vehículo mientras tuneas el coche.");
	if (VehiculoGasolina[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "No puedes encender el vehículo mientras se llena el tanque.");
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "2", "No puedes usar este comando si estás en este tipo de vehiculos.");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine == VEHICLE_PARAMS_ON)
	{
		check_motor[playerid] = 1;
		EncenderVehiculo(vehicleid, playerid);
	}
	else if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	{
		if (GetPVarType(playerid, "AreaVehPos")) return _Mensaje(playerid, 0, "148", "Debes apagar el estereo para encender el motor.");
		if (LSPD_Veh(vehicleid) || SADOC_Veh(vehicleid) || SAN_Vehicle(vehicleid) || ALS_Veh(vehicleid) ||
			LSFD_Veh(vehicleid) || veh_Pescador(vehicleid) || veh_Granjero(vehicleid))
		{
			check_motor[playerid] = 1;
			accion_rol(playerid, 0, "enciende el motor del vehículo.");
			SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
		}
		else
		{
			for (new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vID] == vehicleid)
				{
					if (i_Vehiculo[v][vEnDeposito] == 1) return _Mensaje(playerid, 0, "148", "Este vehículo se encuentra embargado, paga la multa en la Policía o en el ayuntamiento.");
					if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
                    check_motor[playerid] = 1;
					accion_rol(playerid, 0, "enciende el motor del vehículo.");
					SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
				}
			}
			for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
			{
                new v = veh_Empresa(e_id, vehicleid);
				if (v != -1)
				{
					if (user[playerid][jEmpresaKey] == e_id || user[playerid][jContrato] == e_id)
					{
                        check_motor[playerid] = 1;
						accion_rol(playerid, 0, "enciende el motor del vehículo.");
						SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
					}
					else
					{
						_Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo.");
						return 1;
					}

				}
			}
		}
		if (en_rentable(vehicleid))
		{
			if (renta_Veh[vehicleid][veh_renta] != 0)
			{
				if (strcmp(nombre_sin(playerid), renta_Veh[vehicleid][veh_dueno], true) == 0)
				{
				    check_motor[playerid] = 1;
					accion_rol(playerid, 0, "enciende el motor del vehículo.");
					SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
				}
				else
				{
					_Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo.");
					return 1;
				}
			}
		}
	    if(user[playerid][Started])
	    {
	        check_motor[playerid] = 1;
			accion_rol(playerid, 0, "enciende el motor del vehículo.");
			SetTimerEx("EncenderVehiculo", 2000, 0, "dd", user[playerid][Vehicle], playerid);
			return 1;
	    }
	}
	return 1;
}

funcion veh_Empresa(f, vehicleid)
{
	if(vehicleid == -1) return -1;
	for(new v = 0; v < 10; v++)
	{
		if(InfoVehEmp[f][v][vID] == vehicleid)
		{
			return v;
		}
	}
	return -1;
}
GCMD:luces(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "388", "No puedes usar este comando si estás en este tipo de vehiculos.");

	VehiculoLuces(vehicleid, playerid);
	return 1;
}

GCMD:capo(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
		{
			return _Mensaje(playerid, 0, "388", "No puedes usar este comando si estás en este tipo de vehiculos.");
		}
		VehiculoCapo(vehicleid, playerid);
	}
	else if (!IsPlayerInAnyVehicle(playerid))
	{
		new closestcar = DetectarCerrado(playerid);
		if (CercaDelVehiculo(playerid, closestcar, 5.0))
		{
			if (GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
			{
				return _Mensaje(playerid, 0, "388", "No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			VehiculoCapo(closestcar, playerid);
		}
	}
	return 1;
}

GCMD:miranda(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "1", "No eres de la PD.");

	new string[128];
	format(string, sizeof(string), "%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.", nombre_pj(playerid, 0));
	ProxDetector(10.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	format(string, sizeof(string), "%s dice: ¿De acuerdo señor?", nombre_pj(playerid, 0));
	ProxDetector(10.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	return 1;
}

GCMD:remolcar(playerid)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new Float: vX, Float: vY, Float: vZ, Found = 0, vid = 0, idcar = GetPlayerVehicleID(playerid);
		if (GetVehicleModel(idcar) != 525) return _Mensaje(playerid, 0, "355", "No estás dentro de una grúa.");
		new Float: pX, Float: pY, Float: pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		while ((vid < MAX_VEHICLES) && (!Found))
		{
			vid++;
			GetVehiclePos(vid, vX, vY, vZ);
			if ((floatabs(pX - vX) < 7.0) && (floatabs(pY - vY) < 7.0) && (floatabs(pZ - vZ) < 7.0) && (vid != GetPlayerVehicleID(playerid)))
			{
				Found = 1;
				if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				}
				else
				{
					AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
				}
			}
		}
		if (!Found) { _Mensaje(playerid, 0, "354", "No hay ningún vehículo cerca!"); }
	}
	return 1;
}

/*GCMD:prueba(playerid,  const params[])
{
	new
		modelo,
		Float: elmenos,
		Float: elrota,
		string[256],
		Float: posxyy,
		Float: posxyyzz
	;
	if (sscanf(params, "dffff", modelo, posxyy, posxyyzz, elmenos, elrota)) return _Mensaje(playerid, 3, "0", "/prueba [modelo] [elmenos] [elrota]");

	new
		Float: Position[4]
	;

	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	GetPlayerFacingAngle(playerid, Position[3]);
	CreateDynamicObject(modelo, Position[0]+posxyy, Position[1]+posxyyzz, Position[2]+elmenos, 0.0, 0.0, Position[3]+elrota, -1, -1, -1, 200.0);
	format(string, sizeof(string), "CreateDynamicObject(%d, %0.f, %0.f, %0.f, 0.0, 0.0, %0.f);", modelo, posxyy, posxyyzz, elmenos, elrota);
	SendClientMessage(playerid, -1, string);
	return 1;
}*/

GCMD:beditar(playerid)
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (u_objeto[playerid] == -1) return _Mensaje(playerid, 0, "362", "No has colocado ningún objeto o el objeto fue eliminado.");

	for (new bar = 0; bar < MAX_BARRERAS; bar++)
	{
		if (u_objeto[playerid] == bar)
		{

			if (en_pos(playerid, 5.0, InfoBar[bar][bPosX], InfoBar[bar][bPosY], InfoBar[bar][bPosZ]))
			{
				EditDynamicObject(playerid, InfoBar[bar][bObjeto]);

				user[playerid][pEditingMode] = 5;
				u_objeto[playerid] = bar;
				return 1;
			}
		}
	}
	SendClientMessage(playerid, -1, "No estás cerca del objeto.");
	return 1;
}

GCMD:bar(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");

	if (user[playerid][pEditingMode] != 0) return _Mensaje(playerid, 0, "362", "Estás editando un objeto.");
	if (IsPlayerInAnyVehicle(playerid)) { return _Mensaje(playerid, 0, "362", "Tienes que estar en el piso para usar este comando"); }

	new
		object,
		t_objetos[19]
	;
	
	if (sscanf(params, "d", object)) return _Mensaje(playerid, 3, "0", "/bar [1-10]");
	
	t_objetos[0] = 1238;
	t_objetos[1] = 1237; t_objetos[2] = 1282; t_objetos[3] = 1422;
	t_objetos[4] = 1423; t_objetos[5] = 1424; t_objetos[6] = 1425;
	t_objetos[7] = 1949; t_objetos[8] = 3091; t_objetos[9] = 981;
	t_objetos[10] = 1459; t_objetos[11] = 19834; t_objetos[12] = 19868;
	t_objetos[13] = 19869; t_objetos[14] = 978; t_objetos[15] = 3265;
	t_objetos[16] = 1437; t_objetos[17] = 932; t_objetos[18] = 1997;

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pAngle,
		modelid,
		si_no = 0
	;

	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerFacingAngle(playerid, pAngle);
	
	switch (object)
	{
	    case 1: // cono
	    {
	        pX+=0.2;
	        pY-=0.0;
	        pZ-=0.7;
	        modelid = 1238;
	        si_no = 1;
		}
		case 2: //
		{
	        pZ-=0.5;
	        modelid = 1459;
	        si_no = 1;
		}
		case 3: //
		{
	        pZ-=0.3;
	        modelid = 1282;
	        si_no = 1;
		}
		case 4: //
		{
	        pZ-=0.45;
	        modelid = 1424;
	        si_no = 1;
		}
		case 5: //
		{
	        pZ-=0.5;
	        modelid = 1425;
	        si_no = 1;
		}
		case 6: //
		{
	        pZ-=0.35;
	        modelid = 3091;
	        si_no = 1;
		}
		case 7: //
		{
	        pZ-=0.1;
	        modelid = 19834;
	        si_no = 1;
		}
		case 8: //
		{
	        pZ-=0.1;
	        modelid = 1437;
	        si_no = 1;
		}
		case 9: //
		{
	        pZ-=1;
	        modelid = 19869;
	        si_no = 1;
		}
		case 10: //
		{
	        pZ-=1;
	        modelid = 19868;
	        si_no = 1;
		}
	    default: menu_selectionEx(playerid, t_objetos, 19, "Objetos de trafico", D_OBJETOS_TRAFICO, 16.0, 0.0, -55.0);
	}
	if (si_no != 0)
	{
	    for (new bar = 0; bar < MAX_BARRERAS; bar++)
		{
			if (InfoBar[bar][bObjeto] == 0)
			{
				user[playerid][pEditingMode] = 0;
				InfoBar[bar][bPosX] = pX;
				InfoBar[bar][bPosY] = pY;
				InfoBar[bar][bPosZ] = pZ;
				InfoBar[bar][bModelo] = modelid;
				InfoBar[bar][bObjeto] = CreateDynamicObject(modelid, pX, pY, pZ, 0.0, 0.0, pAngle, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
				textgame_player(playerid, "~n~~n~~n~~n~~w~Objeto colocado", 3000, 3);
				u_objeto[playerid] = bar;
				SendClientMessage(playerid, 0xccccccff, "Para editar la posición del último objeto, utiliza /beditar.");
				return 1;
			}
		}
		SendClientMessage(playerid, -1, "No se pudo crear el objeto, llegó al limite.");
	}
	return 1;
}

GCMD:qb(playerid)
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");

	if (user[playerid][pEditingMode] != 0) return _Mensaje(playerid, 0, "362", "Estás editando un objeto.");
	if (IsPlayerInAnyVehicle(playerid)) { return _Mensaje(playerid, 0, "362", "Tienes que estar en el piso para usar este comando"); }
	for (new bar = 0; bar < MAX_BARRERAS; bar++)
	{
		if (en_pos(playerid, 5.0, InfoBar[bar][bPosX], InfoBar[bar][bPosY], InfoBar[bar][bPosZ]))
		{
			foreach(new i: Player) { if (u_objeto[i]==bar) u_objeto[i] = -1; }
			new string[60];
			DestroyDynamicObject(InfoBar[bar][bObjeto]);
			InfoBar[bar][bPosX] = 0;
			InfoBar[bar][bPosY] = 0;
			InfoBar[bar][bPosZ] = 0;
			InfoBar[bar][bObjeto] = 0;
			user[playerid][pEditingMode] = 0;
			format(string, sizeof(string), "[/qb | cercano] Objeto ID: %d borrado.", bar);
			SendClientMessage(playerid, 0xccccccff, string);
			return 1;
		}
	}
	return 1;
}

GCMD:qbs(playerid)
{
	if (!Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	for (new bar = 0; bar < MAX_BARRERAS; bar++)
	{
		if (InfoBar[bar][bPosX] != 0)
		{
			foreach(new i: Player) { if (u_objeto[i]==bar) u_objeto[i] = -1; }
			new string[60];
			DestroyDynamicObject(InfoBar[bar][bObjeto]);
			InfoBar[bar][bPosX] = 0;
			InfoBar[bar][bPosY] = 0;
			InfoBar[bar][bPosZ] = 0;
			InfoBar[bar][bObjeto] = 0;
			format(string, sizeof(string), "[/qbs | cualquier posición] Objeto ID: %d borrado.", bar);
			SendClientMessage(playerid, 0xccccccff, string);
			return 1;
		}
	}
	return 1;
}

GCMD:pinchos(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");

	_Mensaje(playerid, 4, "33CCFF", "Pinchos actuales:");
	for (new i, string[128 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
	{
		if (SpikeStrips[i][sX] != 0)
		{
			format(string, sizeof(string), "Pincho ID: %d | Localización: %s", i, SpikeStrips[i][sDeployedAt]);
			_Mensaje(playerid, 4, "8D8DFF", string);
		}
	}
	return 1;
}
GCMD:spinchos(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 1.");

	for (new i; i < sizeof(SpikeStrips); i++)
	{
		if (SpikeStrips[i][sX] == 0)
		{
			new Float: f_TempAngle, string[128];
			GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
			GetPlayerFacingAngle(playerid, f_TempAngle);
			SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ] - 0.8, 0.0, 0.0, f_TempAngle);
			GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
			format(string, sizeof string, "%s usó el comando /spinchos, para colocar uno cerca de él.", nombre_pj(playerid));
			mensaje_faccion(1, 0x77c7ffFF, string);
			Log("Registros/Pinchos.log", string);
			return 1;
		}
	}
	return 1;
}
GCMD:qpinchos(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 1.");
	for (new id; id < sizeof(SpikeStrips); id++)
	{
		if (SpikeStrips[id][sX] != 0)
		{
			new string[128 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
			DestroyDynamicObject(SpikeStrips[id][sObjectID]);
			SpikeStrips[id][sX] = 0;
			SpikeStrips[id][sY] = 0;
			SpikeStrips[id][sZ] = 0;
			SpikeStrips[id][sObjectID] = 0;
			format(string, sizeof(string), "Pincho ID: %d borrado.", id);
			_Mensaje(playerid, 1, "0", string);
			format(string, sizeof string, "* %s usó el comando /qpinchos, el cual elimino todos los pinchos.", nombre_pj(playerid));
			mensaje_faccion(1, 0x77c7ffFF, string);
			Log("Registros/Pinchos.log", string);
			return 1;
		}
	}
	return 1;
}

GCMD:irmedico(playerid)
{
	new
		string[256]
	;
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "704", "No formas parte del cuerpo de médicos.");
	if (_Medic2Call[playerid] > 0) return _Mensaje(playerid, 0, "678", "Ya aceptaste un llamado de médico.");
	if (_MedicAcept[playerid] != 999) { _Mensaje(playerid, 0, "0", "Te encuentras en un llamado, si es error escribe /eliminarcp."); return 1; }
	if (_MedicCall < 999)
	{
		if (IsPlayerConnectedEx(_MedicCall))
		{
			format(string, sizeof(string), "* Médico %s aceptó tu llamada espera en tu actual posición.", nombre_pj(playerid, 0));
			_Mensaje(_MedicCall, 4, "33CCFF", string);
			format(string, sizeof(string), "** %s aceptó la llamada reciente de %s (Médico).", nombre_pj(playerid, 0), nombre_pj(_MedicCall, 0));
			mensaje_faccion(5, C_ROJO, string);
			new Float: X, Float: Y, Float: Z;
			GetPlayerPos(_MedicCall, X, Y, Z);
			textgame_player(playerid, "~n~~r~CheckPoint.", 5000, 1);
			set_checkpoint(playerid, X, Y, Z, 5);
			SetPVarInt(playerid, "EnCheckPoint", 2);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(_MedicCall, zone, sizeof(zone));
			format(string, sizeof(string), "%s fue localizado en %s.", nombre_pj(_MedicCall), zone);
			_Mensaje(playerid, 4, "ffffff", string);
			_Medic2Call[playerid] = 1;
			_MedicAcept[playerid] = _MedicCall;
			_MedicCall = 999;
			return 1;
		}
	} else return _Mensaje(playerid, 0, "727", "Nadie ha solicitado un médico.");
	return 1;
}

GCMD:irbombero(playerid)
{
	new string[256];
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "704", "No formas parte del cuerpo de bomberos.");
	if (_Bomb2Call[playerid] > 0) return _Mensaje(playerid, 0, "678", "Ya aceptaste un llamado de bombero.");
	if (_BombAcept[playerid] != 999) { _Mensaje(playerid, 0, "0", "Te encuentras en un llamado, si es error escribe /eliminarcp."); return 1; }
	if (_BombCall < 999)
	{
		if (IsPlayerConnectedEx(_BombCall))
		{
			format(string, sizeof(string), "* Bombero %s aceptó tu llamada espera en tu actual posición.", nombre_pj(playerid, 0));
			_Mensaje(_BombCall, 4, "33CCFF", string);
			format(string, sizeof(string), "** %s aceptó la llamada reciente de %s (Bombero).", nombre_pj(playerid, 0), nombre_pj(_BombCall, 0));
			mensaje_faccion(5, C_ROJO, string);
			new Float: X, Float: Y, Float: Z;
			GetPlayerPos(_BombCall, X, Y, Z);
			textgame_player(playerid, "~n~~r~CheckPoint.", 5000, 1);
			set_checkpoint(playerid, X, Y, Z, 5);
			SetPVarInt(playerid, "EnCheckPoint", 2);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(_BombCall, zone, sizeof(zone));
			format(string, sizeof(string), "%s fue localizado en %s.", nombre_pj(_BombCall), zone);
			_Mensaje(playerid, 4, "ffffff", string);
			_Bomb2Call[playerid] = 1;
			_BombAcept[playerid] = _BombCall;
			_BombCall = 999;
			return 1;
		}
	} else return _Mensaje(playerid, 0, "727", "Nadie ha solicitado un bombero.");
	return 1;
}
GCMD:cancelar(playerid)
{
	new
		string[256]
	;

	if (m_operacion[playerid][3] != -1)
	{
		new
			playerid2 = m_operacion[playerid][3]
		;

		_Mensaje(playerid, 4, "b0b0b0", "Cancelaste la operación del mecánico.");
		_Mensaje(playerid2, 4, "b0b0b0", "El cliente decidió no seguir la operación.");
		m_operacion[playerid][0] = 0;
		m_operacion[playerid][1] = 0;
		m_operacion[playerid][2] = -1;
		m_operacion[playerid][3] = -1;
		
		return 1;
	}
	if (id_tune[playerid] != -1)
	{
		new _txt[128];
		format(_txt, sizeof(_txt), "* %s rechaza tu solitud.", nombre_pj(playerid, 0));
		if (IsPlayerConnected(id_tune[playerid])) _Mensaje(id_tune[playerid], 4, "b00000", _txt);

		e_tune[playerid] = -1;
		veh_tune[playerid] = 0;
		id_tune[playerid] = -1;
	    return 1;
	}
	if (alcoholemia[playerid] != 999)
	{
		new _txt[128];
		format(_txt, sizeof(_txt), "* %s rechaza tu solitud.", nombre_pj(playerid, 0));
		if (IsPlayerConnected(alcoholemia[playerid])) _Mensaje(alcoholemia[playerid], 4, "b00000", _txt);

		alcoholemia[playerid] = 999;
		return 1;
	}
	if (_Vehdueno[playerid] != 999)
	{
		if (IsPlayerConnected(_Vehdueno[playerid])) _Mensaje(_Vehdueno[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu vehículo.");
		haciend_[playerid] = 0;
		haciend_[_Vehdueno[playerid]] = 0;
		_Vehdueno[playerid] = 999;
		_Vehprecio[playerid] = 0;
		_VehID[playerid] = 0;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta del vehículo.");
		return 1;
	}
	if(PrestadorCoche[playerid] != -1)
	{
		PrestadorCoche[playerid] = -1;
		LlavePrestada[playerid] = -1;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste las llaves prestadas.");
		return 1;
	}
	if (CasaOffer[playerid] != 999)
	{
		if (IsPlayerConnected(CasaOffer[playerid])) _Mensaje(CasaOffer[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu casa.");
		haciend_[playerid] = 0;
		haciend_[CasaOffer[playerid]] = 0;
		CasaOffer[playerid] = 999;
		CasaPrice[playerid] = 0;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta de la casa.");
		return 1;
	}
	if (NegocioOffer[playerid] != 999)
	{
		if (IsPlayerConnected(NegocioOffer[playerid])) _Mensaje(NegocioOffer[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu negocio.");
		haciend_[playerid] = 0;
		haciend_[NegocioOffer[playerid]] = 0;
		NegocioOffer[playerid] = 999;
		NegocioPrice[playerid] = 0;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta del negocio.");
		return 1;
	}
	if (_Entrevista[playerid] != 999)
	{
		_Entrevista[playerid] = 999;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la invitación para una entrevista.");
		return 1;
	}
	if (MultaOfrecer[playerid] != 999)
	{
		accion_rol(playerid, 0, "tomó el papel de facturación de la multa y la tiró.");
		format(string, sizeof(string), "%s canceló el pago de una multa de %d$.", nombre_pj(playerid, 0), MultaPrecio[playerid]);
		if (IsPlayerConnected(MultaOfrecer[playerid])) _Mensaje(MultaOfrecer[playerid], 4, "33CCFF", string);
		MultaOfrecer[playerid] = 999;
		MultaPrecio[playerid] = 0;
		FacturaMulta[playerid] = 0;
		return 1;
	}
	_Mensaje(playerid, 4, "b0b0b0", "Nadie te ha ofrecido algo.");
	return 1;
}
GCMD:aceptar(playerid)
{
	new string[256];
	if (wsp_u[playerid] != -1)
	{
	    new playerid2 = wsp_u[playerid];
		if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "El contacto que quería compartir su ubicación, desconectó."), wsp_u[playerid] = -1;
		if (GetPlayerInterior(playerid2) != 0 && GetPlayerVirtualWorld(playerid2) != 0) return _Mensaje(playerid, 0, "0", "El contacto ha entrado a un interior, no se pudo ubicar."), wsp_u[playerid] = -1;

		new
			Float:xp,
			Float:yp,
			Float:zp
		;

		GetPlayerPos(playerid2, xp, yp, zp);
		_MarcarPos(playerid, xp, yp, zp, "Ubicación marcada en tu radar.");
		_Mensaje(playerid2, 4, "b0b0b0", "Ahora tu contacto posee información sobre tu última ubicación.");
		wsp_time[playerid2] = gettime();
		user[playerid2][jSaldo] -= 3;
		wsp_u[playerid] = -1;
		return 1;
	}
	if (m_operacion[playerid][3] != -1)
	{
	    new playerid2 = m_operacion[playerid][3], e_id = m_operacion[playerid][2];
	    if (m_operacion[playerid][0] == 1)
	    {
	    	new Float: cvida;
			new VehID = m_operacion[playerid][1];
			GetVehicleHealth(VehID, cvida);
			new pagar, Percent_damage = floatround(cvida);
			pagar = (1000-Percent_damage);
			if(ComprobarDineroJ(playerid) < pagar)
			{
				format(string, sizeof(string), "No tienes los %d$ dólares para pagar la reparación.", pagar);
				_Mensaje(playerid, 4, "b0b0b0", string);
				_Mensaje(playerid2, 4, "b0b0b0", "El jugador no posee la cantidad a pagar.");
				m_operacion[playerid][0] = 0;
				m_operacion[playerid][1] = 0;
				m_operacion[playerid][2] = -1;
				m_operacion[playerid][3] = -1;
				return 1;
			}

			RepairExVehicle(VehID);
			SetExVehicleHealth(VehID, 1000.0);
			new MsgCheckMe[MAX_TEXT_CHAT];
			format(MsgCheckMe, sizeof(MsgCheckMe), "repara el vehículo %s.", NombreVehiculo(VehID));
			accion_rol(playerid2, 0, MsgCheckMe);
			DarDineroGC(playerid, -pagar);
			i_Empresa[e_id][eDinero] += pagar/2;
			DarDineroGC(playerid2, pagar/2);
			save_Empresa(e_id);
			m_operacion[playerid][0] = 0;
			m_operacion[playerid][1] = 0;
			m_operacion[playerid][2] = -1;
			m_operacion[playerid][3] = -1;
			return 1;
		}
		else if (m_operacion[playerid][0] == 2)
	    {
			new vehiculo = m_operacion[playerid][1];

			if (LSPD_Veh(vehiculo) || SADOC_Veh(vehiculo) || SAN_Vehicle(vehiculo) || ALS_Veh(vehiculo) || LSFD_Veh(vehiculo))
			{
				_Mensaje(playerid, 0, "357", "No pueden pintar vehículos facciones.");
				_Mensaje(playerid2, 0, "357", "No puedes pintar vehículos facciones.");
				m_operacion[playerid][0] = 0;
				m_operacion[playerid][1] = 0;
				m_operacion[playerid][2] = -1;
				m_operacion[playerid][3] = -1;
				return 1;
			}
			for(new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vID] == vehiculo)
				{
					DarDineroGC(playerid, -35);
					i_Empresa[e_id][eDinero] += 22;
					DarDineroGC(playerid2, 13);
					save_Empresa(e_id);

					i_Vehiculo[v][vPaintJob] = m_operacion[playerid][4];
					ChangeVehiclePaintjob(vehiculo, m_operacion[playerid][4]);
					_Mensaje(playerid2, 4, "ADC3E7", "Cambiaste el paintjob del vehiculo.");
					_Mensaje(playerid, 4, "ADC3E7", "Cambiaron el paintjob del vehiculo.");
					vehicleSave(v);
					m_operacion[playerid][0] = 0;
					m_operacion[playerid][1] = 0;
					m_operacion[playerid][2] = -1;
					m_operacion[playerid][3] = -1;
					return 1;
				}
			}
			_Mensaje(playerid, 0, "357", "No pueden pintar ese vehículo.");
			_Mensaje(playerid2, 0, "357", "No puedes pintar ese vehículo.");
			m_operacion[playerid][0] = 0;
			m_operacion[playerid][1] = 0;
			m_operacion[playerid][2] = -1;
			m_operacion[playerid][3] = -1;
			return 1;
		}
		else if (m_operacion[playerid][0] == 3)
	    {
	    	new vehiculo = m_operacion[playerid][1];

			if (LSPD_Veh(vehiculo) || SADOC_Veh(vehiculo) || SAN_Vehicle(vehiculo) || ALS_Veh(vehiculo) || LSFD_Veh(vehiculo))
			{
				_Mensaje(playerid, 0, "357", "No pueden pintar vehículos facciones.");
				_Mensaje(playerid2, 0, "357", "No puedes pintar vehículos facciones.");
				m_operacion[playerid][0] = 0;
				m_operacion[playerid][1] = 0;
				m_operacion[playerid][2] = -1;
				m_operacion[playerid][3] = -1;
				return 1;
			}
			for(new v = 0; v < MAX_VEHICULOS; v++)
			{
				if(i_Vehiculo[v][vID] == vehiculo)
				{
					DarDineroGC(playerid, -32);
					i_Empresa[e_id][eDinero] += 20;
					DarDineroGC(playerid2, 12);
					save_Empresa(e_id);

					i_Vehiculo[v][vColor_1] = m_operacion[playerid][4],
					i_Vehiculo[v][vColor_2] = m_operacion[playerid][5];
					format(string, sizeof(string), "Cambiaste el color del vehiculo. [%d - %d]", m_operacion[playerid][4], m_operacion[playerid][5]);
					_Mensaje(playerid2, 4, "ADC3E7", string);
					format(string, sizeof(string), "Cambiaron el color del vehiculo. [%d - %d]", m_operacion[playerid][4], m_operacion[playerid][5]);
					_Mensaje(playerid, 4, "ADC3E7", string);
					ChangeVehicleColor(vehiculo, m_operacion[playerid][4], m_operacion[playerid][5]);
					vehicleSave(v);
					m_operacion[playerid][0] = 0;
					m_operacion[playerid][1] = 0;
					m_operacion[playerid][2] = -1;
					m_operacion[playerid][3] = -1;
					return 1;
				}
			}
			_Mensaje(playerid, 0, "357", "No pueden pintar ese vehículo.");
			_Mensaje(playerid2, 0, "357", "No puedes pintar ese vehículo.");
			m_operacion[playerid][0] = 0;
			m_operacion[playerid][1] = 0;
			m_operacion[playerid][2] = -1;
			m_operacion[playerid][3] = -1;
			return 1;
		}
		else if (m_operacion[playerid][0] == 6)
	    {
			if (ComprobarDineroJ(playerid) < 100)
			{
				_Mensaje(playerid, 4, "b0b0b0", "No tienes los 100$ dólares para pagar la gasolina.");
				_Mensaje(playerid2, 4, "b0b0b0", "El jugador no posee la cantidad a pagar.");
				m_operacion[playerid][0] = 0;
				m_operacion[playerid][1] = 0;
				m_operacion[playerid][2] = -1;
				m_operacion[playerid][3] = -1;
				return 1;
			}
			new idcar = m_operacion[playerid][1];

			veh_gasolina[idcar] = 300;

			new MsgCheckMe[MAX_TEXT_CHAT];
			format(MsgCheckMe, sizeof(MsgCheckMe), "llena el tanque de gasolina del %s.", NombreVehiculo(idcar));
			accion_rol(playerid2, 0, MsgCheckMe);
			DarDineroGC(playerid, -100);
			i_Empresa[e_id][eDinero] += 68;
			DarDineroGC(playerid2, 32);
			save_Empresa(e_id);
			m_operacion[playerid][0] = 0;
			m_operacion[playerid][1] = 0;
			m_operacion[playerid][2] = -1;
			m_operacion[playerid][3] = -1;
			return 1;
		}
	}
	if (id_tune[playerid] != -1)
	{
		if (!IsPlayerConnected(id_tune[playerid])) { id_tune[playerid] = -1; veh_tune[playerid] = 0; e_tune[playerid] = -1; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		if (!IsPlayerInAnyVehicle(playerid)) { _Mensaje(playerid, 4, "b0b0b0", "Se cancelo todo ya que no estás en algún vehículo."); return _Mensaje(id_tune[playerid], 0, "130", "Ese jugador no está en ningún vehículo."); }
		new iVeh = GetPlayerVehicleID(playerid);
		if (LSPD_Veh(iVeh) || SADOC_Veh(iVeh) || SAN_Vehicle(iVeh) || ALS_Veh(iVeh) || LSFD_Veh(iVeh) || veh_Granjero(iVeh) || veh_Pescador(iVeh))
		{
			e_tune[playerid] = -1;
			veh_tune[playerid] = 0;
			id_tune[playerid] = -1;
			_Mensaje(playerid, 0, "357", "No puedes tunear vehículos de facciones y trabajos.");
			return 1;
		}
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(iVeh, engine, lights, alarm, doors, bonnet, boot, objective);
		if (engine == VEHICLE_PARAMS_ON)
		{
			EncenderVehiculo(iVeh, playerid);
		}
		VehSeguro[iVeh] = 1;
		veh_tune[playerid] = iVeh;
		Menu_Tuneo(playerid);
		return 1;
	}
	if (MultaOfrecer[playerid] != 999)
	{
		if (!IsPlayerConnected(MultaOfrecer[playerid])) { MultaOfrecer[playerid] = 999; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		format(string, sizeof(string), "* %s pagaste la multa de %d$.", nombre_pj(playerid, 0), MultaPrecio[playerid]);
		_Mensaje(MultaOfrecer[playerid], 4, "33CCFF", string);
		format(string, sizeof(string), "pagó una multa de $%d al oficial.", MultaPrecio[playerid]);
		accion_rol(playerid, 0, string);
		user[playerid][jBanco] -= MultaPrecio[playerid];
		d_estado += MultaPrecio[playerid];
		MultaOfrecer[playerid] = 999;
		MultaPrecio[playerid] = 0;
		FacturaMulta[playerid] = 0;
		return 1;
	}
	if (alcoholemia[playerid] != 999)
	{
		if (!IsPlayerConnected(alcoholemia[playerid])) { alcoholemia[playerid] = 999; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		new _txt[128];
		accion_rol(playerid, 0, "sopla el objeto del control de alcoholemia.");
		format(_txt, sizeof(_txt), " Nivel de alcohol (%s): {b00000}%d{b0b0b0}.", nombre_pj(playerid, 0), user[playerid][jAlcohol]);
		_Mensaje(alcoholemia[playerid], 4, "b0b0b0", _txt);

		alcoholemia[playerid] = 999;
		return 1;
	}
	if (Saludo_ID[playerid] != 999)
	{
		if (!IsPlayerConnected(Saludo_ID[playerid])) { Saludo_ID[playerid] = 999; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
        new seleccion;
		seleccion = Saludo2_ID[playerid];
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "acepta el saludo de %s.", nombre_pj(Saludo_ID[playerid], 0));
		accion_rol(playerid, 0, MsgCheckMe);
		ApplyAnimation(playerid,animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea], 4.1, 0, 0, 1, 0, 0, 1);
		ApplyAnimation(Saludo_ID[playerid],animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea], 4.1, 0, 0, 1, 0, 0, 1);
		Saludo_ID[playerid] = 999;
		return 1;
	}
	if (Beso_ID[playerid] != 999)
	{
		if (!IsPlayerConnected(Beso_ID[playerid])) { Beso_ID[playerid] = 999; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
        new seleccion;
		seleccion = Beso2_ID[playerid];
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "acepta el beso de %s.", nombre_pj(Beso_ID[playerid], 0));
		accion_rol(playerid, 0, MsgCheckMe);
		if(seleccion != 1) ApplyAnimation(playerid,animbeso[seleccion][animliba],animbeso[seleccion][animnamea], 4.1, 0, 0, 1, 0, 0, 1);
		ApplyAnimation(Beso_ID[playerid],animbeso[seleccion][animliba],animbeso[seleccion][animnamea], 4.1, 0, 0, 1, 0, 0, 1);
		Beso_ID[playerid] = 999;
		return 1;
	}
	if (CasaOffer[playerid] != 999)
	{
		if (!IsPlayerConnected(CasaOffer[playerid])) { CasaOffer[playerid] = 999; haciend_[playerid] = 0; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		if (ComprobarDineroJ(playerid) > CasaPrice[playerid])
		{
			if (user[playerid][jCasaKey] != INVALID_CASA_ID) return _Mensaje(playerid, 0, "578", "Ya posees una Casa.");
			if (!CercaDelWeon(8.0, CasaOffer[playerid], playerid)) return _Mensaje(playerid, 0, "321", "No estás cerca del que te va a vender la casa.");
			new casaid = user[CasaOffer[playerid]][jCasaKey];
			if(!strcmp(user[playerid][jIP], user[CasaOffer[playerid]][jIP], false) && user[playerid][jMulticuenta] == 0 && user[CasaOffer[playerid]][jMulticuenta] == 0)
			{
				new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
				format(stringlog, sizeof(stringlog), "[Atención]{FFFFFF} %s pagó $%d a %s por su casa, posibles multicuentas [IP: %s]", nombre_pj(playerid), CasaPrice[playerid], nombre_pj(CasaOffer[playerid]), ipc);
				MensajeAdmin(stringlog);
				format(stringlog, sizeof(stringlog), "Registros: %s pagó $%d a %s por su casa. [IP: %s]", nombre_pj(playerid), CasaPrice[playerid], nombre_pj(CasaOffer[playerid]), ipc);
				Log("Registros/multicuentas.log", stringlog);
			}
			else
			{
				format(string, sizeof(string), "Registros: %s pagó $%d a %s por su casa.", nombre_pj(playerid), CasaPrice[playerid], nombre_pj(CasaOffer[playerid]));
				Log("Registros/VenderCasa.log", string);
			}
			format(string, sizeof(string), "* Pagaste $%d por la casa de %s.", CasaPrice[playerid], nombre_pj(CasaOffer[playerid], 0));
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "* Vendiste tu casa a %s por $%d.", nombre_pj(playerid, 0), CasaPrice[playerid]);
			_Mensaje(CasaOffer[playerid], 4, "33CCFF", string);
			DarDineroGC(CasaOffer[playerid], CasaPrice[playerid]);
			DarDineroGC(playerid, -CasaPrice[playerid]);
			user[playerid][jCasaKey] = user[CasaOffer[playerid]][jCasaKey];
			user[CasaOffer[playerid]][jCasaKey] = INVALID_CASA_ID;
			i_Casa[casaid][cComprado] = 1;
			i_Casa[casaid][c_patente] = casaid+Random(-400000, 999999);
			strmid(i_Casa[casaid][cComprador], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
			save_Casa(casaid);
			characterSave(playerid);
			characterSave(CasaOffer[playerid]);
			haciend_[playerid] = 0;
			haciend_[CasaOffer[playerid]] = 0;
			CasaOffer[playerid] = 999;
			CasaPrice[playerid] = 0;
			return 1;
		} else return _Mensaje(playerid, 0, "328", "No puedes pagar esta casa.");
	}
	if (NegocioOffer[playerid] != 999)
	{
		if (!IsPlayerConnected(NegocioOffer[playerid])) { NegocioOffer[playerid] = 999; haciend_[playerid] = 0; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		if (ComprobarDineroJ(playerid) > NegocioPrice[playerid])
		{
			if (user[playerid][jNegocioKey] != INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "578", "Ya posees un negocio.");
			if (!CercaDelWeon(8.0, NegocioOffer[playerid], playerid)) return _Mensaje(playerid, 0, "321", "No estás cerca del que te va a vender el negocio.");
			new negid = user[NegocioOffer[playerid]][jNegocioKey];
			if(!strcmp(user[playerid][jIP], user[NegocioOffer[playerid]][jIP], false) && user[playerid][jMulticuenta] == 0 && user[NegocioOffer[playerid]][jMulticuenta] == 0)
			{
				new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
				format(stringlog, sizeof(stringlog), "[Atención]{FFFFFF} %s pagó $%d a %s por su negocio, posibles multicuentas [IP: %s]", nombre_pj(playerid), NegocioPrice[playerid], nombre_pj(NegocioOffer[playerid]), ipc);
				MensajeAdmin(stringlog);
				format(stringlog, sizeof(stringlog), "Registros: %s pagó $%d a %s por su negocio. [IP: %s]", nombre_pj(playerid), NegocioPrice[playerid], nombre_pj(NegocioOffer[playerid]), ipc);
				Log("Registros/multicuentas.log", stringlog);
			}
			else
			{
				format(string, sizeof(string), "Registros: %s pagó $%d a %s por su negocio.", nombre_pj(playerid), NegocioPrice[playerid], nombre_pj(NegocioOffer[playerid]));
				Log("Registros/VenderNegocio.log", string);
	 		}
			format(string, sizeof(string), "* Pagaste $%d por el negocio de %s.", NegocioPrice[playerid], nombre_pj(NegocioOffer[playerid], 0));
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "* Vendiste tu negocio a %s por $%d.", nombre_pj(playerid, 0), NegocioPrice[playerid]);
			_Mensaje(NegocioOffer[playerid], 4, "33CCFF", string);
			DarDineroGC(NegocioOffer[playerid], NegocioPrice[playerid]);
			DarDineroGC(playerid, -NegocioPrice[playerid]);
			user[playerid][jNegocioKey] = user[NegocioOffer[playerid]][jNegocioKey];
			user[NegocioOffer[playerid]][jNegocioKey] = INVALID_NEGOCIO_ID;
			strmid(i_Negocio[negid][nDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
			i_Negocio[negid][n_patente] = negid+Random(-400000, 999999);
			save_Negocio(negid);
			characterSave(playerid);
			characterSave(NegocioOffer[playerid]);
			_NegocioP(negid);
			haciend_[playerid] = 0;
			haciend_[NegocioOffer[playerid]] = 0;
			NegocioOffer[playerid] = 999;
			NegocioPrice[playerid] = 0;
			return 1;
		} else return _Mensaje(playerid, 0, "328", "No puedes pagar este negocio.");
	}
	if (_Entrevista[playerid] != 999)
	{
		if (!IsPlayerConnected(_Entrevista[playerid])) { _Entrevista[playerid] = 999; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		if (CercaDelWeon(5.0, playerid, _Entrevista[playerid]))
		{
			_Mensaje(playerid, 2, "0", "Estarás congelado hasta que termine la entrevista.");
			_Mensaje(_Entrevista[playerid], 2, "0", "Estás congelado hasta que termine la entrevista.");
			_2Entrevista[playerid] = _Entrevista[playerid];
			_2Entrevista[_Entrevista[playerid]] = playerid;
			_Entrevista[playerid] = 999;
			return 1;
		} else return _Mensaje(playerid, 0, "330", "Estás lejos del reportero.");
	}
	if (PrestadorCoche[playerid] != -1)
	{
		if (!IsPlayerConnected(PrestadorCoche[playerid])) { PrestadorCoche[playerid] = -1; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		if (!CercaDelWeon(8.0, PrestadorCoche[playerid], playerid)) {
			PrestadorCoche[playerid] = -1;
			LlavePrestada[playerid] = -1;
			return _Mensaje(playerid, 0, "321", "No estás cerca del que te va dar la llave del vehículo.");
		}
		new tieneslotlibre = -1;
		for(new x=0; x<6; x++) { if(user[playerid][j2Vehiculos][x] == 0){tieneslotlibre = x; break;} }
		if(tieneslotlibre == -1){_Mensaje(playerid, 0, "321", "Tienes todas las ranuras de llaves prestadas ocupados."); return 1;}
		user[playerid][j2Vehiculos][tieneslotlibre] = LlavePrestada[playerid];
		user[playerid][j2Vehixculos][tieneslotlibre] = GetPVarInt(playerid, "num_veh");
		format(string, sizeof(string), "* Has aceptado las llaves del vehículo de %s.", nombre_pj(PrestadorCoche[playerid], 0));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "* %s ha aceptado las llaves de tu vehículo.", nombre_pj(playerid, 0));
		_Mensaje(PrestadorCoche[playerid], 4, "33CCFF", string);
		format(string, sizeof(string), "Registros: %s dio las llaves (LS-%d) a %s.", nombre_pj(PrestadorCoche[playerid]), GetPVarInt(playerid, "num_veh"), nombre_pj(playerid));
		Log("Registros/Vehiculos2.log", string);
		PrestadorCoche[playerid] = -1;
		LlavePrestada[playerid] = -1;
		return 1;
	}
	if (_Vehdueno[playerid] != 999)
	{
		if (!IsPlayerConnected(_Vehdueno[playerid])) { _Vehdueno[playerid] = 999; _Vehprecio[playerid] = 0; _VehID[playerid] = 0; haciend_[playerid] = 0; _Mensaje(playerid, 4, "b0b0b0", "El jugador que te ofreció algo no está conectado."); return 1; }
		new vid = _VehID[playerid], vehiculo = i_Vehiculo[_VehID[playerid]][vID], vendedor = _Vehdueno[playerid], costo = _Vehprecio[playerid];
		if (ComprobarDineroJ(playerid) > costo)
		{
			if (IsPlayerInVehicle(vendedor, vehiculo))
			{
				if (!CercaDelWeon(8.0, vendedor, playerid)) return _Mensaje(playerid, 0, "321", "No estás cerca del que te va a vender el vehículo.");
				new EspacioLibre;
				for(new xd = 0; xd < 6; xd++)
				{
					if(user[playerid][jLlaveCoche][xd] == 0)
					{
						EspacioLibre = 1;
						break;
					}
				}
				if(EspacioLibre == 0) { _Mensaje(playerid, 0, "0", "Ya tienes todas las ranuras de llaves propias ocupadas."); return 1; }
				new carsamount = CVehiculos(playerid);
				if (user[playerid][jPremium] == 0 && carsamount >= 3) return _Mensaje(playerid, 0, "82", "Sólo puedes tener 3 vehículos.");
				if (user[playerid][jPremium] == 1 && carsamount >= 4) return _Mensaje(playerid, 0, "82", "Sólo puedes tener 4 vehículos.");
				if(!strcmp(user[playerid][jIP], user[vendedor][jIP], false) && user[playerid][jMulticuenta] == 0 && user[vendedor][jMulticuenta] == 0)
				{
					new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
					format(stringlog, sizeof(stringlog), "[Atención]{FFFFFF} %s pagó $%d a %s por el %s, posibles multicuentas [IP: %s]", nombre_pj(playerid), costo, nombre_pj(vendedor), NombreVehiculo(vehiculo), ipc);
					MensajeAdmin(stringlog);
					format(stringlog, sizeof(stringlog), "Registros: %s pagó $%d a %s por el %s. [IP: %s]", nombre_pj(playerid), costo, nombre_pj(vendedor), NombreVehiculo(vehiculo), ipc);
					Log("Registros/multicuentas.log", stringlog);
				}
				else
				{
					format(string, sizeof(string), "Registros: %s pagó $%d a %s por el %s", nombre_pj(playerid), costo, nombre_pj(vendedor), NombreVehiculo(vehiculo));
					Log("Registros/VenderAuto.log", string);
				}
				format(string, sizeof(string), "* Has pagado por un %s por $%d a %s.", NombreVehiculo(vehiculo), costo, nombre_pj(vendedor, 0));
				_Mensaje(playerid, 4, "33CCFF", string);
				format(string, sizeof(string), "* Vendiste tu %s a %s por $%d.", NombreVehiculo(vehiculo), nombre_pj(playerid, 0), costo);
				_Mensaje(vendedor, 4, "33CCFF", string);
				DarDineroGC(vendedor, costo);
				DarDineroGC(playerid, -costo);
				RemovePlayerFromVehicle(vendedor);
				new Float: slx, Float: sly, Float: slz;
				GetPlayerPos(vendedor, slx, sly, slz);
				SetPlayerPos(vendedor, slx, sly + 2, slz);
				strmid(i_Vehiculo[vid][vDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
				i_Vehiculo[vid][vPatente] = vid+Random(-400000, 999999); //
				for(new xd; xd < 6; xd++)
				{
					if(user[playerid][jLlaveCoche][xd] == 0)
					{
						user[playerid][jLlaveCoche][xd] = vid+1000;
						break;
					}
				}
				for(new xd; xd < 6; xd++)
				{
					if(user[vendedor][jLlaveCoche][xd] == vid+1000)
					{
						user[vendedor][jLlaveCoche][xd] = 0;
					}
				}
				haciend_[playerid] = 0;
				haciend_[vendedor] = 0;
				characterSave(playerid);
				characterSave(vendedor);
				vehicleSave(vid);
				_Vehdueno[playerid] = 999;
				_Vehprecio[playerid] = 0;
				_VehID[playerid] = 0;
				return 1;
			} else return _Mensaje(playerid, 0, "327", "El que te va a vender no está en el coche.");
		} else return _Mensaje(playerid, 0, "328", "No puedes pagar este coche.");
	}
	_Mensaje(playerid, 4, "b0b0b0", "Nadie te ha ofrecido algo.");
	return 1;
}

GCMD:cinturons(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo.");
	if (IsPlayerInAnyVehicle(playerid) == 1 && Casco[playerid] == 0)
	{
		Casco[playerid] = 1;
		if (EnMotos_Bicis(GetPlayerVehicleID(playerid))) { accion_rol(playerid, 0, "agarra su casco, y se lo pone."); }
		else { accion_rol(playerid, 0, "pone las manos en su cinturón y se lo pone."); }
	}
	else if (IsPlayerInAnyVehicle(playerid) == 1 && Casco[playerid] == 1)
	{
		Casco[playerid] = 0;
		if (EnMotos_Bicis(GetPlayerVehicleID(playerid))) { accion_rol(playerid, 0, "pone las manos en su casco, y se lo quita."); }
		else { accion_rol(playerid, 0, "pone las manos en su cinturón y se lo quita."); }
	}
	return 1;
}

GCMD:vercinturon(playerid,  const params[])
{
	new playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vercinturon [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (GetPlayerState(playerid2) == PLAYER_STATE_ONFOOT) return _Mensaje(playerid, 0, "312", "Ese jugador no está en un vehiculo.");
	if (!CercaDelWeon(9.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	new string[128], stext[4];

	if (Casco[playerid2] == 0) stext = "sin";
	else stext = "con";

	if (EnMotos_Bicis(GetPlayerVehicleID(playerid)))
	{
		format(string, sizeof(string), "%s está %s casco.", nombre_pj(playerid2, 0), stext);
		_Mensaje(playerid, 4, "33CCFF", string);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "mira a %s, verifica si tiene puesto su casco.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
	}
	else
	{
		format(string, sizeof(string), "%s está %s cinturón.", nombre_pj(playerid2, 0), stext);
		_Mensaje(playerid, 4, "33CCFF", string);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "observa a través de la ventana de %s, mirando si usa el cinturón.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
	}
	return 1;
}

GCMD:gob(playerid,  const params[])
{
	new string[128];
	if (isnull(params)) { _Mensaje(playerid, 3, "0", "/gob [texto]"); return 1; }
	if (!Es_Lider(playerid, 1, 2, 4, 5)) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!Esta_Gob(playerid)) return _Mensaje(playerid, 0, "309", "No estás en el punto de /gob.");
	if (Es_Lider(playerid, 1))
	{
		format(string, sizeof(string), "{007ECC}Anuncio [LSPD] Capitán: {ffffff}%s", params[0]);
		_MensajeSAN(0xffffffff, string);
	}
	else if (Es_Lider(playerid, 2))
	{
		format(string, sizeof(string), "{007ECC}Anuncio [SADOC] Alcaide: {ffffff}%s", params[0]);
		_MensajeSAN(0xffffffff, string);
	}
	else if (Es_Lider(playerid, 4))
	{
		format(string, sizeof(string), "{007ECC}Anuncio [ALS] Alcalde: {ffffff}%s", params[0]);
		_MensajeSAN(0xffffffff, string);
	}
	else if (Es_Lider(playerid, 5))
	{
		format(string, sizeof(string), "{007ECC}Anuncio [LSFD] Director: {ffffff}%s", params[0]);
		_MensajeSAN(0xffffffff, string);
	}
 	return 1;
}

GCMD:impuesto(playerid,  const params[])
{
	new string[90];
	if (!Es_Lider(playerid, 4)) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/impuesto [monto]");
	if (params[0] < 3 || params[0] > 20) return _Mensaje(playerid, 0, "310", "Valor entre 3 - 20.");
	d_impuestos = params[0];
	save_stuff();
	format(string, sizeof(string), "Anuncio [ALS] Alcalde:{FFFFFF} Nuevo pago por impuesto. (%d$)", d_impuestos);
	EnviarMensajeTodos(0x007ECCFF, string);
	return 1;
}

GCMD:preciopeaje(playerid,  const params[])
{
	new string[90];
	if (!Es_Lider(playerid, 4)) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/preciopeaje [monto]");
	if (params[0] < 2 || params[0] > 50) return _Mensaje(playerid, 0, "310", "Valor entre 2 - 50.");
	d_peaje = params[0];
	save_stuff();
	format(string, sizeof(string), "Anuncio [ALS] Alcalde:{FFFFFF} Nuevo pago por peaje. (%d$)", d_peaje);
	EnviarMensajeTodos(0x007ECCFF, string);
	return 1;
}

GCMD:cpantalla(playerid,  const params[])
{
	new text[64], type;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "is", type, text)) return _Mensaje(playerid, 3, "0", "/cpantalla [tipo] [texto]");
	if (type == 2) return _Mensaje(playerid, 0, "306", "No puedes elegir el #2.");
	foreach(new i: Player) { if (JugadorEnSeccion {i}) { textgame_player(i, text, 5000, type); } }
	new string[128];
	format(string, sizeof(string), "[Administración]{FFFFFF} %s usó el comando /cpantalla.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}

GCMD:climpiar(playerid)
{
	limpiar_chat(playerid, 20);
	return 1;
}

GCMD:limpiarchat(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	CleanScreen();
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarchat.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}

GCMD:fuelcars(playerid)
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_MensajeOOC(0xE00000FF, "[Administración]{FFFFFF} La gasolina de los vehículos fue llenada.");
	for (new c = 0; c < MAX_VEHICLES; c++) veh_gasolina[c] = 200;
	return 1;
}

GCMD:fuelcarsno(playerid)
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_MensajeOOC(0xE00000FF, "[Administración]{FFFFFF} La gasolina de los autos fue vaciada.");
	for (new c = 0; c < MAX_VEHICLES; c++) veh_gasolina[c] = 0;
	return 1;
}

GCMD:sfondos(playerid,  const params[])
{
	if (Es_Lider(playerid, 3))
	{
		new string[256], amount, reason[64];
		if (sscanf(params, "ds[64]", amount, reason))
		{
			_Mensaje(playerid, 3, "0", "/sfondos [monto] [razón]");
			format(string, sizeof(string), "Balance: $%d.", d_san);
			_Mensaje(playerid, 4, "ffffff", string);
			return 1;
		}
		if (amount < 0) return _Mensaje(playerid, 0, "292", "El monto es inválido.");
		if (amount < 1 || params[1] > 30000) return _Mensaje(playerid, 0, "294", "Máximo: $30.000.");
		if (d_san > amount)
		{
			d_san -= amount;
			save_stuff();
			DarDineroGC(playerid, amount);
			format(string, sizeof(string), "Retiraste $%d de los fondos de INN.", amount);
			_Mensaje(playerid, 5, "0", string);
			format(string, sizeof(string), "[Atención]{FFFFFF} %s retiro $%d de los fondos de INN. {E00000}Razón: %s.", nombre_pj(playerid), amount, reason);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s retiro $%d de los fondos de INN. Razón %s.", nombre_pj(playerid), amount, reason);
			Log("Registros/D_Fondos.log", string);
			return 1;
		} else return _Mensaje(playerid, 0, "293", "No hay fondos suficientes.");
	}
	else if (Es_Lider(playerid, 4))
	{
		if (ActFondos == 0) return _Mensaje(playerid, 0, "296", "El sistema esta actualmente bloqueado por un administrador.");
		new string[256], amount, reason[64];
		if (sscanf(params, "ds[64]", amount, reason))
		{
			_Mensaje(playerid, 3, "0", "/sfondos [monto] [razón]");
			format(string, sizeof(string), "Balance: $%d.", d_estado);
			_Mensaje(playerid, 4, "ffffff", string);
			return 1;
		}
		if (amount < 0) return _Mensaje(playerid, 0, "292", "El monto es inválido.");
		if (amount < 1 || params[1] > 30000) return _Mensaje(playerid, 0, "294", "Máximo: $30.000.");
		if (d_estado > amount)
		{
			d_estado -= amount;
			save_stuff();
			DarDineroGC(playerid, amount);
			format(string, sizeof(string), "Retiraste $%d de los fondos del estado.", amount);
			_Mensaje(playerid, 5, "0", string);
			format(string, sizeof(string), "[Atención]{FFFFFF} %s retiro $%d de los fondos del estado. {E00000}Razón: %s.", nombre_pj(playerid), amount, reason);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s retiro $%d de los fondos del estado. Razón %s.", nombre_pj(playerid), amount, reason);
			Log("Registros/D_Fondos.log", string);
			return 1;
		} else return _Mensaje(playerid, 0, "293", "No hay fondos suficientes.");
	}
	_Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

GCMD:dfondos(playerid,  const params[])
{
	if (Es_Lider(playerid, 3))
	{
		new string[256], amount;
		if (sscanf(params, "d", amount))
		{
			_Mensaje(playerid, 3, "0", "/dfondos [monto]");
			format(string, sizeof(string), "Balance: $%d.", d_san);
			_Mensaje(playerid, 4, "ffffff", string);
			return 1;
		}
		if (amount > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 0, "187", "No posees esa cantidad.");
		if (amount < 1 || params[1] > 100000) return _Mensaje(playerid, 0, "294", "Máximo: $100.000.");
		d_san += amount;
		save_stuff();
		DarDineroGC(playerid, -amount);
		format(string, sizeof(string), "Depositaste $%d en los fondos de INN.", amount);
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "Registros: %s deposito $%d en los fondos de INN.", nombre_pj(playerid), amount);
		Log("Registros/D_Fondos.log", string);
		return 1;
	}
	else if (Es_Lider(playerid, 4))
	{
		new string[256], amount;
		if (sscanf(params, "d", amount))
		{
			_Mensaje(playerid, 3, "0", "/dfondos [monto]");
			format(string, sizeof(string), "Balance: $%d.", d_estado);
			_Mensaje(playerid, 4, "ffffff", string);
			return 1;
		}
		if (amount > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 0, "187", "No posees esa cantidad.");
		if (amount < 1 || params[1] > 100000) return _Mensaje(playerid, 0, "294", "Máximo: $100.000.");
		d_estado += amount;
		save_stuff();
		DarDineroGC(playerid, -amount);
		format(string, sizeof(string), "Depositaste $%d en los fondos del estado.", amount);
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "Registros: %s deposito $%d en los fondos del estado.", nombre_pj(playerid), amount);
		Log("Registros/D_Fondos.log", string);
		return 1;
	}
	_Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

GCMD:trabajos(playerid)
{
	new coordsstring[300], DialogStatus[1500];
	new Float:Distancia[6];
	Distancia[0] = (GetPlayerDistanceFromPoint(playerid, 2468.5474, -2116.8491, 13.4846) * 0.01);
	Distancia[1] = (GetPlayerDistanceFromPoint(playerid, -566.1776, -1496.1948, 9.4454) * 0.01); //leñador
	Distancia[2] = (GetPlayerDistanceFromPoint(playerid, 2080.4480,-2355.2971,13.5469) * 0.01);
	Distancia[3] = (GetPlayerDistanceFromPoint(playerid, 2953.7461, -1549.3822, 1.7974) * 0.01);
	Distancia[4] = (GetPlayerDistanceFromPoint(playerid, -383.0549, -1438.9514, 26.3276) * 0.01);

	strcat(DialogStatus, "Trabajo\tR. Licencia\tDistancia\n", sizeof(DialogStatus));
	format(coordsstring, sizeof(coordsstring), "{ffffff}Carguero\t{84C000}ninguna\t{b0b0b0}%0.2f Km\n", Distancia[0]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Carpintero\t{84C000}ninguna\t{b0b0b0}%0.2f Km\n", Distancia[2]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Pescador\t{84C000}ninguna\t{b0b0b0}%0.2f Km\n", Distancia[3]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Leñador\t{84C000}ninguna\t{b0b0b0}%0.2f Km\n", Distancia[1]); strcat(DialogStatus, coordsstring);
	format(coordsstring, sizeof(coordsstring), "{ffffff}Granjero\t{84C000}ninguna\t{b0b0b0}%0.2f Km", Distancia[4]); strcat(DialogStatus, coordsstring);
	ExPlayerDialog(playerid, D_TRABAJOS, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Trabajos", DialogStatus, "Buscar", "Cerrar");
	return 1;
}

GCMD:facciones(playerid)
{
	new options[]=
	"INN, Fresh News.\n\
	Alcaldía de Los Santos\n\
	Los Santos Emergency Department\n\
	Los Santos Police Department\n\
	San Andreas Department of Corrections";
	ExPlayerDialog(playerid, D_LUGARES_2, DIALOG_STYLE_LIST, "{D6E1EB}Facciones", options, "Buscar", "Cerrar");
	return 1;
}

GCMD:sms(playerid,  const params[])
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b00000", "No tienes un teléfono en ninguna mano."); return 1;}
	new string[256], phonenumb, text[256];
	if (sscanf(params, "ds[256]", phonenumb, text)) return _Mensaje(playerid, 3, "0", "/sms [numero teléfonico] [texto]");
	if (user[playerid][jSaldo] < 2) return _Mensaje(playerid, 4, "b00000", "No tienes saldo suficiente para enviar un mensaje.");
	foreach(new i: Player)
	{
		if (user[i][jTelefono] == phonenumb && phonenumb != 0)
		{
			new playerid2 = i;
			if (IsPlayerConnected(playerid2))
			{
				new contacto = -1;
				for (new e = 0; e < 20; e++)
				{
					if(user[playerid2][jContacto][e] == user[playerid][jTelefono]) contacto = e;
				}
				if (user[playerid2][j_uTelefono] > 0) return _Mensaje(playerid, 0, "276", "Ese jugador tiene el teléfono apagado.");
				if(contacto == -1)
				{
					format(string, sizeof(string), "[SMS: %d]: %s", user[playerid][jTelefono], text);
					_Mensaje(playerid2, 4, "FFEA5F", string);
				}
				else
				{
					format(string, sizeof(string), "[SMS: %s]: %s", verificar_c(playerid2, contacto), text);
					_Mensaje(playerid2, 4, "FFEA5F", string);
				}
				format(string, sizeof(string), "SMS al %d: %s", phonenumb, text);
				_Mensaje(playerid, 4, "b0b0b0", string);
				PlayerAudio(playerid, 1053, 10.0);
				PlayerAudio(playerid2, 20804, 10.0);
				textgame_player(playerid, "~r~$-1~w~ Saldo", 5000, 1);
				user[playerid][jSaldo] -= 1;
				accion_rol(playerid, 1, "envía un mensaje de texto.", 1);
				return 1;
			}
		}
	}
	_Mensaje(playerid, 0, "0", "El número que ha marcado no existe o no está disponible.");
	return 1;
}

/*GCMD:agenda(playerid) return cmd_numero(playerid);
GCMD:numero(playerid)
{
	if(!_Telefono(playerid)){_Mensaje(playerid, 4, "b00000", "No tienes un teléfono en ninguna mano."); return 1;}
	_Agenda(playerid);
    return 1;
}
*/
GCMD:telefonopublico(playerid,  const params[]) return cmd_publico(playerid, params);
GCMD:publico(playerid,  const params[])
{
	new numero;
	for (new tpid = 0; tpid < sizeof(i_PPhone); tpid++)
	{
		if (en_pos(playerid, 2.0, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1], i_PPhone[tpid][pp_Pos][2]))
		{
			new xdxd = Random(10030, 99399);
			if (sscanf(params, "d", numero)) return _Mensaje(playerid, 3, "0", "/publico [número telefónico]");
			if (EnLlamada[playerid] != 0){_Mensaje(playerid, 4, "b00000", "Ya estás en una llamada."); return 1;}
			if(numero == 0){_Mensaje(playerid, 4, "b00000", "No puedes llamar al número 0."); return 1;}
			if(numero == user[playerid][jTelefono]){_Mensaje(playerid, 4, "b00000", "No te puedes llamar a tí mismo."); return 1;}
			accion_rol(playerid, 0, "toma el teléfono público y marca unos números.");
			LlamarTelefono(playerid, numero);
			random_movil[playerid] = xdxd;
		}
	}
	return 1;
}

GCMD:saldo(playerid)
{
	new string[200];
	if (!_Telefono(playerid)){_Mensaje(playerid, 4, "b00000", "No tienes un teléfono en ninguna mano."); return 1;}
	format(string, sizeof(string), "[SMS: 4911]: ¡Saldo disponible $%d!", user[playerid][jSaldo]);
	_Mensaje(playerid, 4, "FFEA5F", string);
	return 1;
}

GCMD:colgar(playerid)
{
	ColgarTelefono(playerid);
	return 1;
}

GCMD:darskin(playerid,  const params[]) return cmd_darropa(playerid, params);
GCMD:darropa(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new playerid2, skin;
	if (sscanf(params, "di", playerid2, skin)) return _Mensaje(playerid, 3, "0", "/darropa [id jugador] [id skin]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	Skin_(playerid2, skin);

	new
		string[128]
	;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s cambió el skin de %s, SKIN: %d.", nombre_pj(playerid), nombre_pj(playerid2), skin);
	MensajeAdmin(string);
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if (MostrarNombre[playerid] == 0)
	{
		if(user[forplayerid][j_Mascara] == 1) ShowPlayerNameTagForPlayer(playerid, forplayerid, false);
		else ShowPlayerNameTagForPlayer(playerid, forplayerid, true);
	}
	else
	{
		if(user[forplayerid][j_Mascara] == 0) ShowPlayerNameTagForPlayer(playerid, forplayerid, false);
		else ShowPlayerNameTagForPlayer(playerid, forplayerid, false);
	}
	return 1;
}

GCMD:nombres(playerid)
{
	if (MostrarNombre[playerid] == 0)
	{
		_Mensaje(playerid, 4, "F8D48C", "Nombres de jugadores desactivados.");
		foreach(new i: Player) ShowPlayerNameTagForPlayer(playerid, i, false);
		MostrarNombre[playerid] = 1;
	}
	else
	{
		_Mensaje(playerid, 4, "F8D48C", "Nombres de jugadores activados.");
		MostrarNombre[playerid] = 0;
		foreach(new i: Player)
			if(user[i][j_Mascara] == 0) ShowPlayerNameTagForPlayer(playerid, i, true);
	}
	return 1;
}

GCMD:mascara(playerid)
{
	if (user[playerid][jMascara] == 0) return _Mensaje(playerid, 0, "457", "No tienes máscara.");
	if (user[playerid][j_Mascara] == 0)
	{
		foreach(new i: Player) ShowPlayerNameTagForPlayer(i, playerid, false);
		user[playerid][j_Mascara] = 1;
		accion_rol(playerid, 0, "se coloca una máscara.");
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 1, 0, 0, 1);
	}
	else
	{
		accion_rol(playerid, 0, "se retira una máscara.");
		foreach(new i: Player) ShowPlayerNameTagForPlayer(i, playerid, true);
		user[playerid][j_Mascara] = 0;
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 1, 0, 0, 1);
	}
	return 1;
}

GCMD:togstaff(playerid)
{
	if (user[playerid][jAdmin] > 0)
	{
		if (!B_Admin[playerid])
		{
			B_Admin[playerid] = 1;
			_Mensaje(playerid, 2, "0", "Canal de administración desactivado");
		}
		else
		{
			B_Admin[playerid] = 0;
			_Mensaje(playerid, 2, "0", "Canal de administración activado");
		}
	} else _Mensaje(playerid, 0, "459", "Tú no tienes acceso a el comando /togstaff.");
	return 1;
}

GCMD:togprivados(playerid)
{
	new string[256];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!VerPrivados[playerid])
	{
		VerPrivados[playerid] = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s bloqueó el chat de mensajes privados para el.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else if (VerPrivados[playerid])
	{
		VerPrivados[playerid] = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s activó el chat de mensajes privados para el.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:togmp2(playerid,  const params[])
{
	new
		name[MAX_PLAYER_NAME]
	;

	if (sscanf(params, "s[24]", name)) return _Mensaje(playerid, 3, "0", "/togmp2 [Nombre_Apellido]");

	if (strcmp(user[playerid][j_uMP2], "user_none", true) == 0)
	{
		yield 1;
		if(!characterCheck(name)) return Mensaje_(playerid, -1, "Ese personaje no existe.");
		alm(user[playerid][j_uMP2], name);
		SendClientMessage(playerid, 0x7593F5FF,"Bloqueaste los MP's de %s.", user[playerid][j_uMP2]);
	}
	else
	{
		SendClientMessage(playerid, 0x7593F5FF, "Desbloqueaste los MP's de %s.", user[playerid][j_uMP2]);
		alm(user[playerid][j_uMP2], "user_none");
	}
	return 1;
}

GCMD:togmp(playerid)
{
	if (!user[playerid][j_uMP])
	{
		user[playerid][j_uMP] = 1;
		_Mensaje(playerid, 2, "0", "Bloqueaste tus mensajes privados.");
	}
	else if (user[playerid][j_uMP])
	{
		user[playerid][j_uMP] = 0;
		_Mensaje(playerid, 2, "0", "Habilitaste tus mensajes privados.");
	}
	return 1;
}

GCMD:diadepaga(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	foreach(new i: Player)
	{
		if (user[i][State] == 3)
		{
			FalsoPD = 1;
			PagoDiario(i);
		}
	}
	return 1;
}

GCMD:adminrcon(playerid,  const params[])
{
	if (IsPlayerAdmin(playerid))
	{
		if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/adminrcon [id jugador] [nivel]");
		if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

		new string[128];
		user[params[0]][jAdmin] = params[1];
		accountSave(params[0]);
		format(string, sizeof(string), "* %s lo ha asignado administrador nivel %d", nombre_pj(playerid), params[1]);
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "Registros: El administrador %s le otorgo a %s un puesto en el Staff nivel %d. (/adminrcon)",  username[playerid], username[params[0]], params[1]);
		if (playerid != params[0]) Log("Registros/DarAdmin.log", string);

	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

GCMD:servicios(playerid,  const params[])
{
	new string[190];
	if (user[playerid][jEncarcelado] > 0) return _Mensaje(playerid, 0, "213", "No puedes usar este comando mientras estás en prisión.");
	if (user[playerid][jTiempoServicio] > 0) return _Mensaje(playerid, 0, "524", "Necesitas esperar 30 segundos para usar este comando.");
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/servicios [tipo] - Tipos: policia, medico, bombero");

	if (strcmp(params[0], "policia", true) == 0)
	{
		if(!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
		LlamarTelefono(playerid, 911);
		random_movil[playerid] = 0;
	}
	else if (strcmp(params[0], "medico", true) == 0)
	{
		if(members_fd < 1) return _Mensaje(playerid, 0, "726", "En este momento no se encuentran médicos disponibles, intenta más tarde.");
		format(string, sizeof(string), "** %s necesita un médico - usa '/irmedico' para ir al llamado.", nombre_pj(playerid, 0));
		_MensajeRfac(5, 0x01FCFFC8, string);
		_Mensaje(playerid, 4, "FAE800", "Has solicitado un médico.");
		_MedicCall = playerid;
		user[playerid][jTiempoServicio] = 30;
		return 1;
	}
	else if (strcmp(params[0], "bombero", true) == 0)
	{
		if(members_fd < 1) return _Mensaje(playerid, 0, "681", "En este momento no se encuentran bomberos en servicio, intenta más tarde.");
		format(string, sizeof(string), "** %s necesita un bombero - usa '/irbombero' para ir al llamado.", nombre_pj(playerid, 0));
		mensaje_faccion(5, 0x01FCFFC8, string);
		_Mensaje(playerid, 4, "FAE800", "Has solicitado un bombero.");
		_BombCall = playerid;
		user[playerid][jTiempoServicio] = 30;
		return 1;
	}
	return 1;
}

GCMD:togrd(playerid)
{
	if (user[playerid][jMiembro] == 0) return _Mensaje(playerid, 0, "b0b0b0", "No perteneces a una facción con radio.");
	if (!B_Radito[playerid])
	{
		B_Radito[playerid] = 1;
		_Mensaje(playerid, 5, "0", "Radio de facción y gubernamental apagado.");
	}
	else
	{
		B_Radito[playerid] = 0;
		_Mensaje(playerid, 5, "0", "Radio de facción y gubernamental encendido.");
	}
	return 1;
}

GCMD:duty(playerid) return cmd_servicio(playerid);
GCMD:enservicio(playerid) return cmd_servicio(playerid);
GCMD:servicio(playerid)
{
	if (Es_Faccion(playerid, 1, 2)) //LSPD - SADOC
	{
		if (EnServicioPD[playerid] == 1)
		{
			EnServicioPD[playerid] = 0;
			Mensaje_(playerid, 0xD20F0EFF, "Ahora estás fuera de servicio.");
		}
		else
		{
			EnServicioPD[playerid] = 1;
			Mensaje_(playerid, 0x43BE05FF, "Ahora estás en servicio.");
		}
		return 1;
	}
	else if (Es_Faccion(playerid, 3, 4)) //san - alcaldia
	{
		if (EnServicio[playerid] == 0)
		{
			EnServicio[playerid] = 1;
			Mensaje_(playerid, 0xD20F0EFF, "Ahora estás fuera en servicio.");
		}
		else
		{
			EnServicio[playerid] = 0;
			Mensaje_(playerid, 0x43BE05FF, "Ahora estás en servicio.");
		}
		return 1;
	}
	else if (Es_Faccion(playerid, 5)) //LSFD
	{
		if (EnServicio[playerid] == 1)
		{
			Mensaje_(playerid, 0xD20F0EFF, "Ahora estás fuera servicio.");
			EnServicio[playerid] = 0;
			return 1;
		}
		else
		{
			Mensaje_(playerid, 0x43BE05FF, "Ahora estás en servicio.");
			EnServicio[playerid] = 1;
			return 1;
		}
	}
	return _Mensaje(playerid, 0, "0", "No eres de una facción legal.");
}

GCMD:entrevista(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
	if (_2Entrevista[playerid] != INVALID_PLAYER_ID)
	{
		_Mensaje(playerid, 1, "0", "Entrevista terminada.");
		_Mensaje(_2Entrevista[playerid], 1, "0", "Entrevista terminada.");
		_2Entrevista[_2Entrevista[playerid]] = INVALID_PLAYER_ID;
		_2Entrevista[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/entrevista [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (playerid2 == playerid) return _Mensaje(playerid, 0, "417", "No puedes hacer una entrevista a ti mismo!");

	format(string, sizeof(string), "* Ofreciste a %s una entrevista.", nombre_pj(playerid2, 0));
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "* %s te ha ofrecido una entrevista, escribe '/aceptar' para aceptar.", nombre_pj(playerid, 0));
	_Mensaje(playerid2, 4, "33CCFF", string);
	_Entrevista[playerid2] = playerid;
	return 1;
}

GCMD:desconectar(playerid)
{
	if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
	if (_sanCall != -1)
	{
		ColgarTelefono(_sanCall);
		_sanCall = -1;
	} else _Mensaje(playerid, 0, "911", "No hay nadie en la línea de CNN");
	return 1;
}

GCMD:conectar(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
	new newcar = GetPlayerVehicleID(playerid);
	if (Auto_SAN(newcar) || en_pos(playerid, 7.0, 255.5458, 1762.5281, 701.0929) || en_pos(playerid, 7.0, 254.7656, 1755.9922, 701.0929))
	{
		if ( _sanCall == -1 )
		{
			new numero, nume2ro = true;
			if (sscanf(params, "d", numero)) return _Mensaje(playerid, 3, "0", "/conectar [número de teléfono]");
			if (!IsNumeric(params)) return _Mensaje(playerid, 0, "43", "Sólo números porfavor, vuelve a intentarlo.");
			foreach(new i: Player)
			{
				if (IsPlayerConnected(i) && user[i][State] == 3 && user[i][jTelefono] == numero)
				{
					if (EnLlamada[i] == 305)
					{
						nume2ro = false;
						_MensajeSAN(0x00DC3AFF, "[INN] Conexión telefónica establecida.");
						_sanCall = i;
						_Mensaje(_sanCall, 4, "00DC3A", "> {ffffff}Te encuentras en línea con INN.");
					} else return _Mensaje(playerid, 0, "43", "El número que desea conectar no se encuentra en esta línea.");
				}
			}
			if (nume2ro)
			{
				_Mensaje(playerid, 0, "43", "El número que desea conectar posiblemente no exista.");
			}
		} else _Mensaje(playerid, 3, "0", "La linea de SA Network está ocupada.");
	} else return _Mensaje(playerid, 0, "419", "No eres en una camioneta de noticias o helicóptero o en el estudio.");
	return 1;
}

GCMD:directo(playerid,  const params[])
{
	new string[128];
	if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "200", "No formas parte del canal de noticias.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/directo [texto]");
	new newcar = GetPlayerVehicleID(playerid);
	if (Auto_SAN(newcar) || en_pos(playerid, 7.0, 255.5458, 1762.5281, 701.0929) || en_pos(playerid, 7.0, 254.7656, 1755.9922, 701.0929))
	{
		if (user[playerid][jRango] < 2) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 2.");
		format(string, sizeof(string), "[INN] %s: %s", nombre_pj(playerid, 0), params);
		_MensajeSAN(0x00DC76FF, string);
	} else return _Mensaje(playerid, 0, "419", "No estás en un vehículo de INN o en el estudio.");
	return 1;
}

GCMD:porton(playerid) return cmd_deposito(playerid);
GCMD:deposito(playerid)
{
	if (en_pos(playerid, 10, -497.41959, -562.72961, 27.28690))
	{
		MoveDynamicObject(portondeposito, -497.4196, -562.7296, 21.7239, 4.0);
		SetTimer("depositogate", 7000, 0);
	}
	else if (en_pos(playerid, 30, 781.77209500, -1330.31884800, 12.68660500))
	{
		if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "307", "No tienes acceso a este portón.");

		MoveDynamicObject(portonSAN, 773.89648400, -1330.31884800, 12.68660500, 5.0);
		SetTimer("CerrarPortonSAN", 8000, 0);
		return 1;
	}
	else if (en_pos(playerid, 30, 774.11425781, -1384.98632812, 12.92022705))
	{
		if (!Es_Faccion(playerid, 3)) return _Mensaje(playerid, 0, "307", "No tienes acceso a este portón.");

		MoveDynamicObject(portonSAN1, 765.11425781, -1384.98632812, 12.92022705, 5.0);
		SetTimer("CerrarPortonSAN1", 8000, 0);
		return 1;
	}
	return 1;
}

//Cierre de Portones.
funcion depositogate() { MoveDynamicObject(portondeposito, -497.41959, -562.72961, 27.28690, 4.0); return 1; }
funcion CerrarPuertaSAN() { SetDynamicObjectRot(puertasan, 0.0, 0.0, 0.0); return 1; }
funcion CerrarPuertaDIC() { SetDynamicObjectRot(puertadic, 0.0, 0.0, 90.0); return 1; }
funcion CerrarPortonSAN() { MoveDynamicObject(portonSAN, 781.77209500, -1330.31884800, 12.68660500, 5.0); return 1; }
funcion CerrarPortonSAN1() { MoveDynamicObject(portonSAN1, 774.11425781, -1384.98632812, 12.92022705, 5.0); return 1; }

GCMD:uniformepd(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la PD.");
	new
		car,
		Float:distancia = 4.0,
		Float:vX,
		Float:vY,
		Float:vZ,
		vw_player=GetPlayerVirtualWorld(playerid)
	;
	for(new x=0; x <= MAX_VEHICLES; x++)
	{
		GetVehiclePos(x, vX, vY, vZ);
		if(en_pos(playerid, 4.0, vX, vY, vZ) && !EstaEnBicis(x))
		{
			if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
			new vw_veh = GetVehicleVirtualWorld(car);
			if (vw_veh == vw_player) break;
			else car = 0;
		}
	}
	if(car == 0) return _Mensaje(playerid, 0, "391", "No se ha detectado ningún vehículo a tu alrededor.");
	if(!LSPD_Veh(car))return _Mensaje(playerid, 0, "165", "No estás cerca de un vehículo de PD.");

	new UniformesPD[38];
	UniformesPD[0] = 71; UniformesPD[1] = 141; UniformesPD[2] = 280; UniformesPD[3] = 266; UniformesPD[4] = 281;
	UniformesPD[5] = 265; UniformesPD[6] = 267; UniformesPD[7] = 284; UniformesPD[8] = 285; UniformesPD[9] = 282;
	UniformesPD[10] = 283; UniformesPD[11] = 288; UniformesPD[12] = 300; UniformesPD[13] = 301; UniformesPD[14] = 302;
	UniformesPD[15] = 306; UniformesPD[16] = 307; UniformesPD[17] = 309; UniformesPD[18] = 310; UniformesPD[19] = 311;
	menu_selectionEx(playerid, UniformesPD, 38, "Uniformes", D_UNIFORMESPD);
	return 1;
}

GCMD:uniformefd(playerid)
{
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "165", "No formas parte de la FD.");
	new
		car,
		Float:distancia = 4.0,
		Float:vX,
		Float:vY,
		Float:vZ,
		vw_player=GetPlayerVirtualWorld(playerid)
	;
	for(new x=0; x <= MAX_VEHICLES; x++)
	{
		GetVehiclePos(x, vX, vY, vZ);
		if(en_pos(playerid, 4.0, vX, vY, vZ) && !EstaEnBicis(x))
		{
			if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
			new vw_veh = GetVehicleVirtualWorld(car);
			if (vw_veh == vw_player) break;
			else car = 0;
		}
	}
	if(car == 0) return _Mensaje(playerid, 0, "391", "No se ha detectado ningún vehículo a tu alrededor.");
	if(!LSFD_Veh(car))return _Mensaje(playerid, 0, "165", "No estás cerca de un vehículo de FD.");

	new
		UniformesFD[20]
	;
	UniformesFD[0] = 275; UniformesFD[1] = 276; UniformesFD[2] = 274; UniformesFD[3] = 277; UniformesFD[4] = 279;
	UniformesFD[5] = 278; UniformesFD[6] = 70; UniformesFD[7] = 71; UniformesFD[8] = 309; UniformesFD[9] = 61;
	UniformesFD[10] = 308;
	menu_selectionEx(playerid, UniformesFD, 20, "Uniformes", D_UNIFORMESFD);
	return 1;
}

GCMD:uniformes(playerid) return cmd_equipo(playerid);
GCMD:equipo(playerid)
{
	if (Es_Faccion(playerid, 1))
	{
		if (SolicitaRefuerzos[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "No puedes cambiarte mientras solicitas refuerzos. Escribe '/NoRef'.");
		if (!en_pos(playerid, 5, -429.4801, 688.3015, 3853.0627) &&
			!en_pos(playerid, 5, 874.8904, 2295.0615, 1910.4546) &&
			!en_pos(playerid, 5, 1021.5993, 2088.3018, -94.2204))
		return _Mensaje(playerid, 0, "375", "No estás en los casilleros.");

		ExPlayerDialog(playerid, D_equipoPDySD, DIALOG_STYLE_LIST, "{D6E1EB}Casillero", "Servicio\nArmería\nUniformes\nAccesorios\nSelección de skin", "Equipar", "Cancelar");

		return 1;
	}
	else if (Es_Faccion(playerid, 2))
	{
		if (!en_pos(playerid, 5, 322.5535,862.3134,1000.9999)) return _Mensaje(playerid, 0, "375", "No estás en los casilleros de SADOC.");

		new SAN[] = "{ffffff}Servicio\nArmamería\nUniformes\nRopa propia\nAccesorios";
		ExPlayerDialog(playerid, D_equipoSADOC, DIALOG_STYLE_LIST, "{D6E1EB}Casillero", SAN, "Equipar", "Cancelar");
		return 1;
	}
	else if (Es_Faccion(playerid, 3))
	{
		if (!en_pos(playerid, 5, 256.1008, 1779.5509, 701.0867)) return _Mensaje(playerid, 0, "375", "No estás en los casilleros de INN.");

		new SAN[] = "{ffffff}Cámara\nBotiquin HP\nUniformes\nRopa propia";
		ExPlayerDialog(playerid, D_equipo_noticias, DIALOG_STYLE_LIST, "{D6E1EB}Casillero", SAN, "Equipar", "Cancelar");

		return 1;
	}
	else if (Es_Faccion(playerid, 5))
	{
		if (!en_pos(playerid, 5, -208.5554, -1737.9666, 675.7973)) return _Mensaje(playerid, 0, "375", "No estás en los casilleros de LSFD.");

		new eq[] = "{ffffff}Extintor\nUniformes\nVida\nBotiquin\nRopa propia";
		ExPlayerDialog(playerid, D_equipo_ED, DIALOG_STYLE_LIST, "{D6E1EB}Casillero", eq, "Equipar", "Cancelar");

		return 1;
	} else _Mensaje(playerid, 0, "375", "No formas parte de una facción legal o estás en academia.");
	return 1;
}

GCMD:sir(playerid,  const params[]) return cmd_sirena(playerid, params);
GCMD:sirena(playerid,  const params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!Es_Faccion(playerid, 1, 2, 5)) return _Mensaje(playerid, 0, "0", "No eres LSPD/SADOC/LSFD.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "0", "Usted no se encuentra en ningún vehículo.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");

	new id;

	if(sscanf(params, "d", id)) return
		_Mensaje(playerid, 3, "0", "/sirena [0(off)/1/2]");

	if(id < 0 || id > 2) return
		_Mensaje(playerid, 3, "0", "/sirena [0(off)/1/2]");

	if(!id)
	{
		if(!SirenOn[vehicleid]) return _Mensaje(playerid, 0, "0", "Este vehículo no posee una sirena.");

		SirenOn[vehicleid] = false;
		DestroyDynamicObject(SirenObject[vehicleid]);
		accion_rol(playerid, 0, "retira una sirena del vehículo.");

		return 1;
	}

	if(SirenOn[vehicleid]) return _Mensaje(playerid, 0, "0", "Este vehículo ya posee una sirena.");

	new Float:fSize[3], Float:fSeat[3];

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]);

	SirenOn[vehicleid] = true;
	SirenObject[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	switch(id)
	{
		case 1: AttachDynamicObjectToVehicle(SirenObject[vehicleid], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
		case 2: AttachDynamicObjectToVehicle(SirenObject[vehicleid], vehicleid, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
	}

	accion_rol(playerid, 0, "coloca una sirena en el vehículo.");
	return 1;
}

GCMD:lockveh(playerid) return cmd_guantera(playerid);
GCMD:lockinv(playerid) return cmd_guantera(playerid);
GCMD:guantera(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) { return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo."); }
	new vehiculo = GetPlayerVehicleID(playerid);
	if (LSPD_Veh(vehiculo) || SADOC_Veh(vehiculo) || SAN_Vehicle(vehiculo) || ALS_Veh(vehiculo) || LSFD_Veh(vehiculo)) { return _Mensaje(playerid, 0, "357", "No puedes ver interior de los vehículos de facciones."); }
	if (EnMotos_Bicis(vehiculo)) return _Mensaje(playerid, 0, "411", "Este tipo de vehículo no contiene espacio (bikes).");
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehiculo)
		{
			if (i_Vehiculo[v][vEnDeposito] == 1) return _Mensaje(playerid, 0, "148", "Este vehículo se encuentra embargado, paga la multa en la Policía o en el ayuntamiento.");
			if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
			if (!i_Vehiculo[v][v_Guantera])
			{
				i_Vehiculo[v][v_Guantera] = 1;
				_Mensaje(playerid, 5, "0", "Seguro del inventario vehicular desactivado.");
			}
			else
			{
				i_Vehiculo[v][v_Guantera] = 0;
				_Mensaje(playerid, 5, "0", "Seguro del inventario vehicular activado.");
			}
		}
	}
	return 1;
}

GCMD:vehinv(playerid) return cmd_verguantera(playerid);
GCMD:vehinventario(playerid) return cmd_verguantera(playerid);
GCMD:verguantera(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) { return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo."); }
	new vehiculo = GetPlayerVehicleID(playerid);
	if (LSPD_Veh(vehiculo) || SADOC_Veh(vehiculo) || SAN_Vehicle(vehiculo) || ALS_Veh(vehiculo) || LSFD_Veh(vehiculo)) { return _Mensaje(playerid, 0, "357", "No puedes ver interior de los vehículos de facciones."); }
	if (EnMotos_Bicis(vehiculo)) return _Mensaje(playerid, 0, "411", "Este tipo de vehículo no contiene espacio (bikes).");
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
    	if(i_Vehiculo[v][vID] == vehiculo)
		{
			if (i_Vehiculo[v][v_Guantera] == 0) return _Mensaje(playerid, 0, "148", "Este vehículo posee seguro en su inventario.");
			ver_Guantera(playerid, v);
			VehGuanteraPlayer[playerid] = v;
		}
	}
    return 1;
}

GCMD:sacarsangre(playerid,  const params[])
{
	new playerid2;
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "704", "No eres Medico.");
	if (EnServicio[playerid] == 0) return _Mensaje(playerid, 0, "166", "No estas en servicio.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/sacarsangre [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "0", "Estás lejos del jugador.");

	new Float: HP = user[playerid2][jSangre];
	if (HP < 100) return _Mensaje(playerid, 0, "705", "El paciente debe estar con el máximo de vida.");
	Sangre_(playerid2, HP - 30);
	SetPlayerDrunkLevel(playerid2, 3000);
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "realiza una extracción de sangre a %s.", nombre_pj(playerid2, 0));
	accion_rol(playerid, 0, MsgCheckMe);
	save_stuff();
	return 1;
}

GCMD:curarse(playerid) return cmd_curarme(playerid);
GCMD:curarme(playerid)
{
	new string[150];
	if (user[playerid][jTiempos][1] != 0) return decir_eltiempo(playerid, 1);
	if (!en_pos(playerid, 3.0, -197.6426, -1760.8300, 675.7021)) return _Mensaje(playerid, 4, "b0b0b0", "No estás en el hospital.");

	new pagar, Percent_damage = floatround(user[playerid][jSangre]);
	if (Percent_damage >= 100) return _Mensaje(playerid, 4, "b00000", "Ya tienes la energía a full.");
	pagar = (300-(Percent_damage*3));
	if(ComprobarDineroJ(playerid) < pagar) { format(string, sizeof(string), "No tienes suficiente dinero ($%d).", pagar); _Mensaje(playerid, 4, "b0b0b0", string); return 1; }

	DarDineroGC(playerid, -pagar);
	d_estado += pagar;
	_Limuerte(playerid);
	Sangre_(playerid, 100);
	user[playerid][jTiempos][1] += 40;
	format(string, sizeof(string), "Pagaste un total de %d$ por los servicios médicos.", pagar);
	Mensaje_(playerid, 0x60CD0097, string);
	return 1;
}

GCMD:curar(playerid,  const params[])
{
	new string[256], playerid2, MsgCheckMe[MAX_TEXT_CHAT];
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 4, "b0b0b0", "No eres médico.");
	if (!CheckTimer(120, user[playerid][jTiempoCurar]))
	{
		if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/curar [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (Es_Faccion(playerid, 5) == Es_Faccion(playerid2, 5)) return _Mensaje(playerid, 0, "643", "No puedes curar a miembros de tu facción.");
		if (playerid == playerid2) return _Mensaje(playerid, 0, "722", "No puedes usar este comando contigo mismo.");
		if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "0", "Estás lejos del jugador.");

		new Float: health = user[playerid2][jSangre];
		if (health >= 85) Sangre_(playerid2, 100);
		else Sangre_(playerid2, health + 50.0);
		format(MsgCheckMe, sizeof(MsgCheckMe), "da a %s 50ml de sangre.", nombre_pj(playerid2, 0)); accion_rol(playerid, 0, MsgCheckMe);
		user[playerid][jTiempoCurar] = gettime();
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(120, user[playerid][jTiempoCurar]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:robarbanco(playerid)
{
	if (RobarBanco == 0) return _Mensaje(playerid, 0, "296", "El sistema esta actualmente bloqueado.");
	if (Es_Faccion(playerid, 1, 5)) return _Mensaje(playerid, 0, "297", "No puedes hacer esto ya que formas parte de la Ley.");
	return 1;
}

GCMD:banco(playerid)
{
	new coordsstring2[300];
	new coordsstring3[300];
	if (!Esta_Banco(playerid)) return _Mensaje(playerid, 0, "247", "No estás en ningún banco de la ciudad.");
	if (p_bank[playerid][1] != -1) //con permisos
	{
		format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Banco ({00c200}$%d{D6E1EB})", user[playerid][jBanco]);
		format(coordsstring3, sizeof(coordsstring3), "Abrir cuenta\nTarjeta débito\nRetirar dinero\nDepositar dinero\nTransferir dinero\nDinero de %s ({00c200}$%d{D6E1EB})", nombre_pj(p_bank[playerid][1]), user[p_bank[playerid][1]][jBanco]);
		ExPlayerDialog(playerid, D_BANCO, DIALOG_STYLE_LIST, coordsstring2, coordsstring3, "Seleccionar", "Cancelar");
	}
	else //sin permisos
	{
		format(coordsstring2, sizeof(coordsstring2), "{D6E1EB}Banco ({00c200}$%d{D6E1EB})", user[playerid][jBanco]);
		ExPlayerDialog(playerid, D_BANCO, DIALOG_STYLE_LIST, coordsstring2, "Abrir cuenta\nTarjeta débito\nRetirar dinero\nDepositar dinero\nTransferir dinero", "Seleccionar", "Cancelar");
	}
	return 1;
}

GCMD:fixvehall(playerid)
{
	new string[256];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	for (new v = 0; v < MAX_VEHICLES; v++)
	{
		RepairExVehicle(v);
		SetExVehicleHealth(v, 1000.0);
	}
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /fixvehall, reparó todos los vehículos del servidor.", nombre_pj(playerid));
	MensajeAdmin(string);
	_Mensaje(playerid, 1, "0", "Los vehiculos en general reparados.");
	return 1;
}

GCMD:traercar(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Float: plocx,Float: plocy,Float: plocz,vehicleid;
	if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/traercar [id vehículo]");
	if (!GetVehicleModel(vehicleid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");

	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /traercar, Vehículo ID: %d.", nombre_pj(playerid), vehicleid);
	MensajeAdmin(string);
	SetVehiclePos(vehicleid, plocx, plocy + 4, plocz);
	return 1;
}

GCMD:vehdesbug(playerid,  const params[])
{
	new
		string[256]
	;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		Float: plocx,
		Float: plocy,
		Float: plocz,
		vehicleid,
		playerid2
	;
	if (sscanf(params, "ii", playerid2, vehicleid)) return _Mensaje(playerid, 3, "0", "/vehdesbug [id jugador] [id vehículo]");
	if (!GetVehicleModel(vehicleid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	GetPlayerPos(playerid2, plocx, plocy, plocz);
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid2));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid2));
	SetVehiclePos(vehicleid, plocx, plocy + 4, plocz);

	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /vehdesbug, Vehículo ID: %d (user %s).", nombre_pj(playerid), vehicleid, nombre_pj(playerid2));
	MensajeAdmin(string);

	return 1;
}

GCMD:ircar(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new Float: cwx2,Float: cwy2,Float: cwz2,vehicleid;
	if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/ircar [id vehículo]");
	if (!GetVehicleModel(vehicleid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");

	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vehicleid));
	GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /ircar, Vehículo ID: %d.", nombre_pj(playerid), vehicleid);
	MensajeAdmin(string);
	SetPlayerPos(playerid, cwx2, cwy2, cwz2);
	return 1;
}

GCMD:fixveh(playerid)
{
	new string[256];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo.");
	SetExVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	RepairExVehicle(GetPlayerVehicleID(playerid));
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /fixveh, Vehículo ID: %d.", nombre_pj(playerid), GetPlayerVehicleID(playerid));
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return _Mensaje(playerid, 4, "ffff00", "Carroceria y motor arreglado [FIXVEH].");
}

GCMD:fixvid(playerid,  const params[])
{
	new string[256], vehicleid;
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/fixvid [id vehículo]");
	if (!GetVehicleModel(vehicleid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");

	SetExVehicleHealth(vehicleid, 1000.0);
	_Mensaje(playerid, 4, "ffff00", "Carroceria y motor arreglado [FIXVID].");
	RepairExVehicle(vehicleid);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /fixvid, Vehículo ID: %d.", nombre_pj(playerid), vehicleid);
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

stock GetVehicleDriverID(vehicleid)
{
	foreach(new i: Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(i,vehicleid)) return i;
	return -1;
}

GCMD:ir(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/ir [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new Float: p_x,Float: p_y,Float: p_z;
	GetPlayerPos(params[0], p_x, p_y, p_z);
	new interior = GetPlayerInterior(params[0]);
	new vw = GetPlayerVirtualWorld(params[0]);
	set_pos(playerid, p_x, p_y+2, p_z, 0, interior, vw);
	user[playerid][jVirtualWorld] = vw;
	user[playerid][jInterior] = interior;
	_Mensaje(playerid, 4, "ffb0b0", "Teleportado.");
	return 1;
}

GCMD:traer(playerid,  const params[])
{
	new playerid2;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/traer [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	if (user[playerid2][jAdmin] >= 10) return _Mensaje(playerid, 0, "238", "No tienes autorización a usar este comando con este jugador.");

	new Float: p_x,Float: p_y,Float: p_z;
	GetPlayerPos(playerid, p_x, p_y, p_z);
	new interior = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	set_pos(playerid2, p_x, p_y+2, p_z, 0, interior, vw);
	user[playerid2][jVirtualWorld] = vw;
	user[playerid2][jInterior] = interior;
	_Mensaje(playerid, 4, "ffb0b0", "Teleportado.");
	return 1;
}

GCMD:togmovil(playerid)
{
	if (!user[playerid][j_uTelefono])
	{
		user[playerid][j_uTelefono] = 1;
		_Mensaje(playerid, 2, "0", "Teléfono apagado.");
	}
	else
	{
		user[playerid][j_uTelefono] = 0;
		_Mensaje(playerid, 2, "0", "Teléfono encendido.");
	}
	return 1;
}

GCMD:frecuencia(playerid,  const params[])
{
	new string[128], frequency;
	if (user[playerid][jNivel] < 2) return _Mensaje(playerid, 0, "87", "Debes ser mínimo nivel 2, para utilizar el radio portable.");
	if (user[playerid][jm_Derecha] != 82 && user[playerid][jm_Izquierda] != 82){ _Mensaje(playerid, 0, "9", "No tienes una radio ninguna mano."); return 1;}
	if (sscanf(params, "d", frequency))
	{
		_Mensaje(playerid, 3, "0", "/frecuencia [frecuencia]");
		_Mensaje(playerid, 1, "0", "Ajuste la frecuencia de su radio -1 Si no quieres oir nada.");
		return 1;
	}
	if (frequency > 30000 || frequency < -30000) { return _Mensaje(playerid, 0, "233", "Frecuencia no debe ser menor a -30000 y mayor 30000."); }
	user[playerid][jFrecuencia] = frequency;
	format(string, sizeof(string), "Ajustaste la frecuencia de tu radio portable a %d khz.", frequency);
	_Mensaje(playerid, 2, "0", string);
	return 1;
}

GCMD:pr(playerid,  const params[])
{
	if (user[playerid][jNivel] < 2) return _Mensaje(playerid, 0, "87", "Debes ser mínimo nivel 2, para utilizar el radio portable.");
    if (user[playerid][jm_Derecha] != 82 && user[playerid][jm_Izquierda] != 82){ _Mensaje(playerid, 0, "9", "No tienes una radio ninguna mano."); return 1;}
    if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (user[playerid][j_uRadio] == 1) return _Mensaje(playerid, 0, "0", "Posees la radio apagada, enciende desde /panel.");
	if (user[playerid][jFrecuencia] == -1) return _Mensaje(playerid, 0, "12", "Ajusta la /frecuencia, la tienes en -1.");
    if (user[playerid][jEncarcelado] > 0) return _Mensaje(playerid, 0, "213", "No puedes usar este comando mientras estás en prisión.");
    if (user[playerid][jFrecuencia] >= 1 || user[playerid][jFrecuencia] <= -1)
	{
    	if(isnull(params)) return _Mensaje(playerid, 3, "0", "/pr [texto radio]");
     	m_radioP(playerid, params);

		new MensajeAR[128];
		format(MensajeAR, sizeof(MensajeAR), "* %s habla por su radio portable.", nombre_pj(playerid, 0));
		colocar_estado(1, playerid, MensajeAR, 0xC2A2DAFF, 3000);
    } else _Mensaje(playerid, 1, "0", "Primero ajusta la frecuencia. [Escribe]{00C200} '/frecuencia'");
    return 1;
}

GCMD:togradio(playerid)
{
	if (user[playerid][jNivel] < 2) return _Mensaje(playerid, 0, "87", "Debes ser mínimo nivel 2, para utilizar el radio portable.");
	if (user[playerid][jm_Derecha] != 82 && user[playerid][jm_Izquierda] != 82){ _Mensaje(playerid, 0, "9", "No tienes una radio ninguna mano."); return 1;}
	if (user[playerid][j_uRadio] == 1)
	{
		new string[128];
		user[playerid][j_uRadio] = 0;
		format(string, sizeof(string), "Encendiste tu radio portátil, y está sincronizada a %d khz.", user[playerid][jFrecuencia]);
		_Mensaje(playerid, 5, "0", string);
	}
	else
	{
		user[playerid][j_uRadio] = 1;
		_Mensaje(playerid, 5, "0", "Apagaste tu radio portátil.");
	}
	return 1;
}

GCMD:togsan(playerid)
{
	if (!user[playerid][j_uSAN])
	{
		user[playerid][j_uSAN] = 1;
		_Mensaje(playerid, 2, "0", "Anuncios INNetwork desactivados.");
	}
	else
	{
		user[playerid][j_uSAN] = 0;
		_Mensaje(playerid, 2, "0", "Anuncios INNetwork activados.");
	}
	return 1;
}

GCMD:togooc(playerid)
{
	if (!user[playerid][j_uOOC])
	{
		user[playerid][j_uOOC] = 1;
		_Mensaje(playerid, 2, "0", "Anuncios OOC desactivados.");
	}
	else
	{
		user[playerid][j_uOOC] = 0;
		_Mensaje(playerid, 2, "0", "Anuncios OOC activados.");
	}
	return 1;
}

GCMD:quitarfamiliac(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarfamiliac [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	new fid = user[params[0]][jMiembroFam];
	i_Familia[fid][fMiembros]--;
	ActualizarFamilia(fid);
	user[params[0]][jLiderFam] = 0;
	user[params[0]][jMiembroFam] = 0;
	user[params[0]][jRangoFam] = 1;
	format(string, 128, "[Administración]{FFFFFF} %s a limpiado las variables de familia a %s", nombre_pj(playerid), nombre_pj(params[0]));
	MensajeAdmin(string);
	return 1;
}

GCMD:quitarfamilia(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitarfamilia [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	user[params[0]][jLiderFam] = 0;
	user[params[0]][jMiembroFam] = 0;
	user[params[0]][jRangoFam] = 1;
	format(string, 128, "[Administración]{FFFFFF} %s a limpiado las variables de familia a %s", nombre_pj(playerid), nombre_pj(params[0]));
	MensajeAdmin(string);
	return 1;
}

GCMD:darliderfam(playerid,  const params[]) return cmd_darfam(playerid, params);
GCMD:darfam(playerid,  const params[])
{
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darfam [id jugador] [familia]");
	if (params[1] < 0 || params[1] > MAX_FAMILIAS) return _Mensaje(playerid, 0, "511", "ID familia incorrecta.");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	user[params[0]][jLiderFam] = params[1];
	user[params[0]][jMiembroFam] = params[1];
	user[params[0]][jRangoFam] = 5;
	format(string, sizeof(string), "* %s te asignó el líder de la Familia %s.", nombre_pj(playerid), i_Familia[params[1]][fNombre]);
	_Mensaje(params[0], 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s asigno lider de la familia %s a %s.", nombre_pj(playerid), i_Familia[params[1]][fNombre], nombre_pj(params[0]));
	MensajeAdmin(string);
	return 1;
}

GCMD:darmiembrofam(playerid,  const params[])
{
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darmiembrofam [id jugador] [familia]");
	if (params[1] < 0 || params[1] > MAX_FAMILIAS) return _Mensaje(playerid, 0, "511", "ID familia incorrecta.");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new string[128];
	user[params[0]][jRangoFam] = 1;
	user[params[0]][jMiembroFam] = params[1];
	format(string, sizeof(string), "* %s te ha añadido como miembror de la Familia %s.", nombre_pj(playerid), i_Familia[params[1]][fNombre]);
	_Mensaje(params[0], 4, "33CCFF", string);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s asigno miembro de la familia %s a %s.", nombre_pj(playerid), i_Familia[params[1]][fNombre], nombre_pj(params[0]));
	MensajeAdmin(string);
	return 1;
}

//Comandos de Familias.
SurfingCheck(vehicleid)
{
	foreach(new p: Player)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float: x, Float: y, Float: z;
			GetPlayerPos(p, x, y, z);
			SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);
			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}

funcion SurfingFix(playerid)
{
	SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");
	return 1;
}

GCMD:organizaciones(playerid) return cmd_familias(playerid);
GCMD:familias(playerid)
{
	new coordsstring[300], DialogStatus[3000], ftipo[30], number = 0;
	strcat(DialogStatus, "Líder\tMiembros\tTipo\tNombre\n", sizeof(DialogStatus));
	for (new i = 1; i < sizeof(i_Familia); i++)
	{
		switch(i_Familia[i][fTipo]){
			case 0:
				ftipo = "Ninguno";
			case 1:
				ftipo = "Pandilla";
			case 2:
				ftipo = "Mafia";
			case 3:
				ftipo = "Legal";
			case 4:
				ftipo = "Motoqueros";
			case 5:
				ftipo = "Triada";
			case 6:
				ftipo = "Criminal";
			case 7:
				ftipo = "Ilegal";
			case 8:
				ftipo = "Network";
		}
		if(i_Familia[i][fMiembros])
		{
			format(coordsstring, sizeof(coordsstring), "{ffffff}%s\t%d\t%s\t%s\n", i_Familia[i][fLider], i_Familia[i][fMiembros], ftipo, i_Familia[i][fNombre]);
			strcat(DialogStatus, coordsstring);
		}
		number++;
		ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Facciones", DialogStatus, "Cerrar", "");
	}
	return 1;
}

GCMD:cajafuerte(playerid)
{
	if (!user[playerid][jLiderFam] && !user[playerid][jMiembroFam]) return _Mensaje(playerid, 0, "137", "No tienes ninguna familia.");
	if (user[playerid][jRangoFam] < 3) return _Mensaje(playerid, 0, "607", "ERROR: Debes ser superior a rango 3.");
	new fid = user[playerid][jMiembroFam];
	if (!en_pos(playerid, 3, i_Familia[fid][fCajaFuerteX], i_Familia[fid][fCajaFuerteY], i_Familia[fid][fCajaFuerteZ])) return _Mensaje(playerid, 0, "671", "No estás cerca del armario de la familia.");
	ver_fArmario(playerid, user[playerid][jMiembroFam]);
	return 1;
}

GCMD:editarfam(playerid,  const params[])
{
	new string[256], option[128], ID_PFam = user[playerid][jLiderFam];
	if (!ID_PFam) return _Mensaje(playerid, 0, "621", "No eres lider de ninguna familia.");
	if (sscanf(params, "s[128]", option))
	{
		_Mensaje(playerid, 3, "0", "/editarfam [opción]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}nombre - rangonombre.");
		return 1;
	}
	if (!strcmp(option, "nombre", true, 4))
	{
		if (sscanf(params, "s[128]s[128]", option, params)) return _Mensaje(playerid, 3, "0", "/editarfam nombre [nombre]");
		format(i_Familia[ID_PFam][fNombre], 32, "%s", params);
		format(string, sizeof(string), "Ha configurado el nombre de su familia a {33AA33}%s", params);
		_Mensaje(playerid, 2, "0", string);
		ActualizarFamilia(ID_PFam);
	}
	else if (!strcmp(option, "rangonombre", true, 8))
	{
		new rango;
		if (sscanf(params, "s[128]is[128]", option, rango, params)) return _Mensaje(playerid, 3, "0", "/editarfam rangonombre [rango] [nombre]");
		if (rango < 0 || rango > 5) return _Mensaje(playerid, 0, "614", "Rangos de la familia están entre 1 y 5.");
		switch (rango)
		{
			case 1: format(i_Familia[ID_PFam][fRango1], 32, "%s", params);
			case 2: format(i_Familia[ID_PFam][fRango2], 32, "%s", params);
			case 3: format(i_Familia[ID_PFam][fRango3], 32, "%s", params);
			case 4: format(i_Familia[ID_PFam][fRango4], 32, "%s", params);
			case 5: format(i_Familia[ID_PFam][fRango5], 32, "%s", params);
		}
		format(string, sizeof(string), "Estableciste el rango %d: {33AA33}%s", rango, params);
		_Mensaje(playerid, 1, "0", string);
		ActualizarFamilia(ID_PFam);
	} else _Mensaje(playerid, 0, "612", "Opcion invalida.");
	return 1;
}

GCMD:fexpulsar(playerid,  const params[])
{
	new ID_PFam = user[playerid][jLiderFam], string[128];
	if (!ID_PFam) return _Mensaje(playerid, 0, "621", "No eres lider de ninguna familia.");
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/fexpulsar [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "619", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[params[0]][jLiderFam]) return _Mensaje(playerid, 0, "621", "No se puede despedir el líder de la familia.");
	if (!user[params[0]][jMiembroFam]) return _Mensaje(playerid, 0, "619", "El jugador no está en su familia.");
	if (user[params[0]][jMiembroFam] != ID_PFam) return _Mensaje(playerid, 0, "619", "El jugador no está en su familia.");
	format(string, sizeof(string), "Líder %s expulsó a %s de la familia.", nombre_pj(playerid), nombre_pj(params[0]));
	mensaje_familia(ID_PFam, C_LIGHTBLUE, string);
	i_Familia[ID_PFam][fMiembros]--;
	user[params[0]][jMiembroFam] = 0;
	user[params[0]][jRangoFam] = 1;
	ActualizarFamilia(ID_PFam);
	return 1;
}

GCMD:fdarrango(playerid,  const params[])
{
	new ID_PFam = user[playerid][jLiderFam], player, Val, string[128];
	if (!ID_PFam) return _Mensaje(playerid, 0, "621", "No eres lider de ninguna familia.");
	if (sscanf(params, "ui", player, Val)) return _Mensaje(playerid, 3, "0", "/darrango [id jugador] [número rango]");
	if (!IsPlayerConnected(player)) return _Mensaje(playerid, 0, "621", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (Val < 1) return _Mensaje(playerid, 0, "621", "Número de rango debe ser positivo.");
	if (user[player][jLiderFam]) return _Mensaje(playerid, 0, "621", "No le puedes cambiar el rango a un lider.");
	if (Val > 5) return _Mensaje(playerid, 0, "621", "Las familias tienen máximo 5 rangos.");
	if (user[player][jMiembroFam] != ID_PFam) return _Mensaje(playerid, 0, "621", "Ese jugador no pertenece a tu familia.");
	user[player][jRangoFam] = Val;
	format(string, sizeof(string), "Líder %s asignó rango %d al miembro %s.", nombre_pj(playerid), Val, nombre_pj(player));
	mensaje_familia(ID_PFam, C_LIGHTBLUE, string);
	ActualizarFamilia(ID_PFam);
	return 1;
}

GCMD:salirfamilia(playerid)
{
	new string[128];
	if (!user[playerid][jLiderFam] && !user[playerid][jMiembroFam]) return _Mensaje(playerid, 0, "137", "No tienes ninguna familia.");
	new fid = user[playerid][jMiembroFam];
	format(string, sizeof(string), "* Saliste de la familia, {33AA33}%s.", i_Familia[fid][fNombre]);
	_Mensaje(playerid, 4, "33CCFF", string);
	i_Familia[fid][fMiembros]--;
	ActualizarFamilia(fid);
	user[playerid][jLiderFam] = 0;
	user[playerid][jMiembroFam] = 0;
	user[playerid][jRangoFam] = 1;
	return 1;
}

GCMD:feditar(playerid,  const params[])
{
	new option[64], fid;
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "is[64]s[64]", fid, option, params))
	{
		_Mensaje(playerid, 3, "0", "/feditar [ranura] [opción] [monto]");
		_Mensaje(playerid, 1, "0", "Opciones disponibles: nombre - lider - logo");
		return 1;
	}
	if (fid < 1 || fid > MAX_FAMILIAS) return _Mensaje(playerid, 1, "0", "Las familias tienen entre 1 a 10.");
	if (strcmp(option, "nombre", true) == 0)
	{
		format(i_Familia[fid][fNombre], 64, "%s", params);
		ActualizarFamilia(fid);
	}
	else if (strcmp(option, "lider", true) == 0)
	{
		format(i_Familia[fid][fLider], 64, "%s", params);
		ActualizarFamilia(fid);
	}
	else if (strcmp(option, "logo", true) == 0)
	{
		format(i_Familia[fid][fLogito], 64, "%s", params);
		ActualizarFamilia(fid);
	} else _Mensaje(playerid, 0, "606", "Opción inválida.");
	return 1;
}

GCMD:feditar2(playerid,  const params[])
{
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ddd", params[0], params[1], params[2])) return _Mensaje(playerid, 3, "0", "/feditar2 [ranura] [opción (1 miembros - 2 tipo '1 pandillero - 2 mafia')] [monto]");
	if (params[0] < 1 || params[0] > MAX_FAMILIAS) return _Mensaje(playerid, 0, "626", "Las familias tienen entre 1 y 10.");
	if (i_Familia[params[0]][fMiembros] == 0) return _Mensaje(playerid, 0, "267", "Esa ranura de familia está vacía.");
	if (params[1] == 0) return _Mensaje(playerid, 0, "267", "0 no es una opción.");
	if (params[1] == 1)
	{
		i_Familia[params[0]][fMiembros] = params[2];
		new str[256];
		format(str, sizeof(str), "[Administración]{FFFFFF} %s modifico los miembros a %d de la familia %s (ID %d).", nombre_pj(playerid), i_Familia[params[0]][fMiembros], i_Familia[params[0]][fNombre], params[0]);
		MensajeAdmin(str);
		ActualizarFamilia(params[0]);
		return 1;
	}
	if (params[1] == 2)
	{
		if(params[2] == 0) return _Mensaje(playerid, 1, "0", "0 no es un tipo de facción.");
		else
		{
		    new ftipo[32];
		    switch(params[2])
			{
				case 1: ftipo = "Pandilla";
				case 2: ftipo = "Mafia";
				case 3: ftipo = "Legal";
				case 4: ftipo = "Motoqueros";
				case 5: ftipo = "Triada";
				case 6: ftipo = "Criminal";
				case 7: ftipo = "Ilegal";
				case 8: ftipo = "Network";
			}
			i_Familia[params[0]][fTipo] = params[2];
			new str[256];
			format(str, sizeof(str), "[Administración]{FFFFFF} %s cambió el tipo de la facción %s a %s.", nombre_pj(playerid), i_Familia[params[0]][fNombre], ftipo);
			MensajeAdmin(str);
			ActualizarFamilia(params[0]);
		}
	}
	return 1;
}

GCMD:crearfam(playerid,  const params[]) return cmd_crearfamilia(playerid, params);
GCMD:crearfamilia(playerid,  const params[])
{
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ddds[32]", params[0], params[1], params[2], params[3])) return _Mensaje(playerid, 3, "0", "/crearfamilia [id lider] [ranura] [tipo] [nombre familia]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (params[1] < 1 || params[1] > MAX_FAMILIAS) return _Mensaje(playerid, 0, "626", "Las familias tienen entre 1 y 10.");
	if (i_Familia[params[1]][fMiembros] > 0) return _Mensaje(playerid, 0, "267", "Esta ranura de familia está siendo utilizada.");
	alm(i_Familia[params[1]][fNombre], params[3]);
	user[params[0]][jLiderFam] = params[1];
	user[params[0]][jMiembroFam] = params[1];
	user[params[0]][jRangoFam] = 5;
	i_Familia[params[1]][fMiembros]++;
	i_Familia[params[1]][fTipo] = params[2];
	format(i_Familia[params[1]][fLider], MAX_PLAYER_NAME, "%s", nombre_pj(params[0]));
	new str[256];
	format(str, sizeof(str), "[Administración]{FFFFFF} %s creó la familia %s (ID %d), y su lider será %s.", nombre_pj(playerid), i_Familia[params[1]][fNombre], params[1], nombre_pj(params[0]));
	MensajeAdmin(str);
	ActualizarFamilia(params[1]);
	return 1;
}

GCMD:borrarfamilia(playerid,  const params[]) return cmd_borrarfam(playerid, params);
GCMD:borrarfam(playerid,  const params[])
{
	new fid, string[256];
	if (user[playerid][jEncargado][2] == 0) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", fid)) return _Mensaje(playerid, 3, "0", "/borrarfam [slot]");
	if (fid < 1 || fid > MAX_FAMILIAS) return _Mensaje(playerid, 0, "626", "Las familias tienen entre 1 y 10.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jMiembroFam] == fid)
			{
				user[i][jLiderFam] = 0;
				user[i][jMiembroFam] = 0;
				user[i][jRangoFam] = 1;
			}
		}
	}
	format(string, 128, "[Administración]{FFFFFF} %s elimino la familia %s[%d].", nombre_pj(playerid), i_Familia[fid][fNombre], fid);
	MensajeAdmin(string);
	format(i_Familia[fid][fNombre], 32, "Ninguno");
	format(i_Familia[fid][fLider], MAX_PLAYER_NAME, "Ninguno");
	format(i_Familia[fid][fLogito], 24, "Ninguno");
	i_Familia[fid][fMiembros] = 0;
	i_Familia[fid][fTipo] = 0;
	i_Familia[fid][fCajaFuerteX] = 0;
	i_Familia[fid][fCajaFuerteY] = 0;
	i_Familia[fid][fCajaFuerteZ] = 0;
	format(i_Familia[fid][fRango1], 32, "");
	format(i_Familia[fid][fRango2], 32, "");
	format(i_Familia[fid][fRango3], 32, "");
	format(i_Familia[fid][fRango4], 32, "");
	format(i_Familia[fid][fRango5], 32, "");
	i_Familia[fid][fCajaFuerteWorld] = 0;
	DestroyDynamicPickup(i_Familia[fid][fPickup]);
	ActualizarFamilia(fid);
	return 1;
}

GCMD:togfaccion(playerid)
{
	new id_fac = user[playerid][jLider], id;
	if (!id_fac) return _Mensaje(playerid, 0, "367", "No eres lider de ninguna facción.");
	switch (id_fac)
	{
		case 1: id = 0;
		case 2: id = 3;
		case 3: id = 4;
		case 4: id = 5;
		case 5: id = 6;
	}

	new string[256];
	if (togFac[id] == 1)
	{
		togFac[id] = 0;
		format(string, sizeof(string), "Líder %s desbloqueo el chat /fac.", nombre_pj(playerid));
		mensaje_faccion(id_fac, C_LIGHTBLUE, string);
	}
	else
	{
		togFac[id] = 1;
		format(string, sizeof(string), "Líder %s bloqueo el chat /fac.", nombre_pj(playerid));
		mensaje_faccion(id_fac, C_LIGHTBLUE, string);
	}
	return 1;
}

GCMD:togfac(playerid)
{
	if (!B_Faccion[playerid])
	{
		B_Faccion[playerid] = 1;
		_Mensaje(playerid, 4, "F8D48C", "Mensajes de Facción desactivados.");
	}
	else
	{
		B_Faccion[playerid] = 0;
		_Mensaje(playerid, 4, "F8D48C", "Mensajes de Facción activados.");
	}
	return 1;
}

GCMD:fac(playerid,  const params[])
{
	if (!isnull(params))
	{
		new string[314];
		if (user[playerid][jLider] > 0 || user[playerid][jMiembro] > 0)
		{
			if (B_Faccion[playerid] == 1) return  _Mensaje(playerid, 4, "b0b0b0", "Posees el canal desactivado, usa /togfac.");
			new member = user[playerid][jMiembro];
			if (member == 1)
			{ // LSPD
				if (togFac[0] == 1) return _Mensaje(playerid, 4, "b0b0b0", "El canal OOC de la facción está desactivado por un líder.");
				new
					faccion[64],
					rango[64]
				;
				_infoFaccion(playerid, rango, faccion);
				format(string, sizeof(string), "{008AE2}[LSPD] %s %s: {FFFFFF}%s", rango, nombre_pj(playerid), params);
				mensaje_faccion(1, 0xFFFFFFFF, string);
			}
			else if (member == 2)
			{ // SADOC
				if (togFac[3] == 1) return _Mensaje(playerid, 4, "b0b0b0", "El canal OOC de la facción está desactivado por un líder.");
				new
					faccion[64],
					rango[64]
				;
				_infoFaccion(playerid, rango, faccion);
				format(string, sizeof(string), "{008AE2}[SADOC] %s %s: {FFFFFF}%s", rango, nombre_pj(playerid), params);
				mensaje_faccion(2, 0xFFFFFFFF, string);
			}
			else if (member == 3)
			{ // SAN
				if (togFac[4] == 1) return _Mensaje(playerid, 4, "b0b0b0", "El canal OOC de la facción está desactivado por un líder.");
				new
					faccion[64],
					rango[64]
				;
				_infoFaccion(playerid, rango, faccion);
				format(string, sizeof(string), "{008AE2}[INN] %s %s: {FFFFFF}%s", rango, nombre_pj(playerid), params);
				mensaje_faccion(3, 0xFFFFFFFF, string);
			}
			else if (member == 4)
			{ // Alcaldía
				if (togFac[5] == 1) return _Mensaje(playerid, 4, "b0b0b0", "El canal OOC de la facción está desactivado por un líder.");
				new
					faccion[64],
					rango[64]
				;
				_infoFaccion(playerid, rango, faccion);
				format(string, sizeof(string), "{008AE2}[ALS] %s %s: {FFFFFF}%s", rango, nombre_pj(playerid), params);
				mensaje_faccion(4, 0xFFFFFFFF, string);
			}
			else if (member == 5)
			{ // LSFD
			    if (togFac[6] == 1) return _Mensaje(playerid, 4, "b0b0b0", "El canal OOC de la facción está desactivado por un líder.");
				new
					faccion[64],
					rango[64]
				;
				_infoFaccion(playerid, rango, faccion);
				format(string, sizeof(string), "{008AE2}[LSFD] %s %s: {FFFFFF}%s", rango, nombre_pj(playerid), params);
				mensaje_faccion(5, 0xFFFFFFFF, string);
			}
		} else _Mensaje(playerid, 0, "218", "No estás en una facción.");
	} else _Mensaje(playerid, 3, "0", "/fac [texto]");
	return 1;
}

GCMD:swsp(playerid)
{
	if (!user[playerid][jLiderFam] && !user[playerid][jMiembroFam]) return _Mensaje(playerid, 0, "137", "No tienes ninguna familia.");
	if (!B_WSP[playerid])
	{
		B_WSP[playerid] = 1;
		_Mensaje(playerid, 2, "0", "Silenciaste el grupo de WSP.");
	}
	else
	{
		B_WSP[playerid] = 0;
		_Mensaje(playerid, 2, "0", "Habilitaste el grupo de WSP.");
	}
	return 1;
}

GCMD:gwsp(playerid,  const params[])
{
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
	if (!user[playerid][jLiderFam] && !user[playerid][jMiembroFam]) return _Mensaje(playerid, 0, "137", "No tienes ninguna familia.");
	if (sscanf(params, "s[124]", params[0])) return _Mensaje(playerid, 3, "0", "/gwsp [texto]");
	new str[124 + MAX_PLAYER_NAME + (8 * 3)];
	Loop(i, MAX_FAMILIAS, 1)
	{
		format(str, sizeof(str), "{00AA00}[WhatsApp %s] %s:{ffffff} %s", i_Familia[user[playerid][jMiembroFam]][fLogito], GetPlayerPartName(playerid), params[0]);
		_FamWSP(user[playerid][jMiembroFam], 0xffffffff, str);
		PlayerAudio(playerid, 1053, 10.0);
		textgame_player(playerid, "~g~WSP", 2000, 1);
		accion_rol(playerid, 1, "envía un mensaje por wsp.", 1);
		return 1;
	}
	return 1;
}

GCMD:togfamilia(playerid)
{
	new string[256];
	new ID_PFam = user[playerid][jLiderFam];
	if (!ID_PFam) return _Mensaje(playerid, 0, "367", "No eres lider de ninguna familia.");
	if (i_Familia[ID_PFam][fChat] == 1)
	{
		i_Familia[ID_PFam][fChat] = 0;
		format(string, sizeof(string), "Líder %s desbloqueo el chat /fam.", nombre_pj(playerid));
		mensaje_familia(ID_PFam, C_LIGHTBLUE, string);
	}
	else
	{
		i_Familia[ID_PFam][fChat] = 1;
		format(string, sizeof(string), "Líder %s bloqueo el chat /fam.", nombre_pj(playerid));
		mensaje_familia(ID_PFam, C_LIGHTBLUE, string);
	}
	return 1;
}

GCMD:togfam(playerid)
{
	if (!B_Familia[playerid])
	{
		B_Familia[playerid] = 1;
		_Mensaje(playerid, 4, "F8D48C", "Mensajes de Familia desactivados.");
	}
	else
	{
		B_Familia[playerid] = 0;
		_Mensaje(playerid, 4, "F8D48C", "Mensajes de Familia activados.");
	}
	return 1;
}

GCMD:fam(playerid,  const params[])
{
	if (!user[playerid][jLiderFam] && !user[playerid][jMiembroFam]) return _Mensaje(playerid, 0, "137", "No tienes ninguna familia.");
	if (B_Familia[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Posees el canal desactivado, usa /togfam.");
	if (sscanf(params, "s[124]", params[0])) return _Mensaje(playerid, 3, "0", "/fam [texto]");
	new str[124 + MAX_PLAYER_NAME + (8 * 3)];
	Loop(i, MAX_FAMILIAS, 1)
	{
		if (user[playerid][jLiderFam] == i)
		{
			format(str, sizeof(str), "{1A8C97}[%s] Líder %s: {FFFFFF}%s", i_Familia[i][fLogito], nombre_pj(playerid), params[0]);
			mensaje_familia(i, 0xFFFFFFFF, str);
			return 1;
		}
		else if (user[playerid][jMiembroFam] == i)
		{
			if (i_Familia[i][fChat] == 1) return _Mensaje(playerid, 0, "137", "El /fam se encuentra bloqueado por algún líder.");
			switch (user[playerid][jRangoFam])
			{
				case 1: format(str, sizeof(str), "{1A8C97}[%s] %s %s: {FFFFFF}%s", i_Familia[i][fLogito], i_Familia[i][fRango1], nombre_pj(playerid), params[0]);
				case 2: format(str, sizeof(str), "{1A8C97}[%s] %s %s: {FFFFFF}%s", i_Familia[i][fLogito], i_Familia[i][fRango2], nombre_pj(playerid), params[0]);
				case 3: format(str, sizeof(str), "{1A8C97}[%s] %s %s: {FFFFFF}%s", i_Familia[i][fLogito], i_Familia[i][fRango3], nombre_pj(playerid), params[0]);
				case 4: format(str, sizeof(str), "{1A8C97}[%s] %s %s: {FFFFFF}%s", i_Familia[i][fLogito], i_Familia[i][fRango4], nombre_pj(playerid), params[0]);
				case 5: format(str, sizeof(str), "{1A8C97}[%s] %s %s: {FFFFFF}%s", i_Familia[i][fLogito], i_Familia[i][fRango5], nombre_pj(playerid), params[0]);
			}
			mensaje_familia(i, 0xFFFFFFFF, str);
			return 1;
		}
	}
	return 1;
}

GCMD:d(playerid,  const params[])
{
	new string[314];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/d [radio chat]");
	if (B_Radito[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Posees la radio gubernamental apagada, escribe /togrd.");
	new
		faccion[64],
		rango[64]
	;
	_infoFaccion(playerid, rango, faccion);
	switch (user[playerid][jMiembro])
	{
		case 1: format(string, sizeof(string), "** [LSPD] %s %s: %s **", rango, nombre_pj(playerid, 0), params);
		case 2: format(string, sizeof(string), "** [SADOC] %s %s: %s **", rango, nombre_pj(playerid, 0), params);
		case 4: format(string, sizeof(string), "** [CITY] %s %s: %s **", rango, nombre_pj(playerid, 0), params);
		case 5: format(string, sizeof(string), "** [LSFD] %s %s: %s **", rango, nombre_pj(playerid, 0), params);
		default: return _Mensaje(playerid, 0, "230", "No te encuentras en una facción legal.");
    }
	_MensajeRfac(1, 0xF07A7AFF, string);
	_MensajeRfac(2, 0xF07A7AFF, string);
	_MensajeRfac(4, 0xF07A7AFF, string);
	_MensajeRfac(5, 0xF07A7AFF, string);
	new MensajeAR[128];
	format(MensajeAR, sizeof(MensajeAR), "* %s dice algo en su radio.", nombre_pj(playerid, 0));
	colocar_estado(1, playerid, MensajeAR, 0xC2A2DAFF, 3000);
	format(string, sizeof(string), "%s por radio: %s", nombre_pj(playerid, 0), params);
	ProxExDetector(3.0, playerid, string, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
	return 1;
}
GCMD:r(playerid,  const params[])
{
	new string[314];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/r [radio chat]");
	if (B_Radito[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Posees la radio de facción apagada, escribe /togrd.");
	switch (user[playerid][jMiembro])
	{
		case 1:
		{
		    format(string, sizeof(string), "**[CH: %d, S: %d] %s: %s", 911, 1, nombre_pj(playerid, 0), params);
			_MensajeRfac(1, 0x9B9BFFFF, string);
		}
		case 2:
		{
			format(string, sizeof(string), "**[CH: %d, S: %d] %s: %s", 800, 4, nombre_pj(playerid, 0), params);
			_MensajeRfac(2, 0x9B9BFFFF, string);
		}
		case 3:
		{
			format(string, sizeof(string), "**[CH: %d, S: %d] %s: %s", 320, 1, nombre_pj(playerid, 0), params);
			_MensajeRfac(3, 0x9B9BFFFF, string);
		}
		case 4:
		{
			format(string, sizeof(string), "**[CH: %d, S: %d] %s: %s", 400, 1, nombre_pj(playerid, 0), params);
			_MensajeRfac(4, 0x9B9BFFFF, string);
		}
		case 5:
		{
			format(string, sizeof(string), "**[CH: %d, S: %d] %s: %s", 911, 3, nombre_pj(playerid, 0), params);
			_MensajeRfac(5, 0x9B9BFFFF, string);
		}
		default: return _Mensaje(playerid, 0, "230", "No te encuentras en una facción legal.");
	}
	new MensajeAR[128];
	format(MensajeAR, sizeof(MensajeAR), "* %s dice algo en su radio.", nombre_pj(playerid, 0));
	colocar_estado(1, playerid, MensajeAR, 0xC2A2DAFF, 3000);
	format(string, sizeof(string), "%s por radio: %s", nombre_pj(playerid, 0), params);
	ProxExDetector(3.0, playerid, string, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
	return 1;
}

ProxExDetector(Float: f_Radius, playerid, const string[], col1, col2, col3, col4, col5)
{
	new Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(new i: Player)
	{
		if(i==playerid)break;
		if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			if(en_pos(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (user[i][jNivel] != -1) SendSplitMessage(i, col1, string);
			}
			else if(en_pos(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (user[i][jNivel] != -1) SendSplitMessage(i, col2, string);
			}
			else if(en_pos(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (user[i][jNivel] != -1) SendSplitMessage(i, col3, string);
			}
			else if(en_pos(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (user[i][jNivel] != -1) SendSplitMessage(i, col4, string);
			}
			else if(en_pos(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (user[i][jNivel] != -1) SendSplitMessage(i, col5, string);
			}
		}
	}
	return 1;
}

GCMD:pagar(playerid,  const params[])
{
	new string[128];
	if (user[playerid][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes usar el comando debido a tu restricción de dos horas de juego.");
	if (!CheckTimer(5, PagarTiempo[playerid]))
	{
		if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/pagar [id jugador] [cantidad]");
		if (playerid == params[0]) return _Mensaje(playerid, 3, "0", "/pagar [id jugador] [cantidad]");
		if (params[1] > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 0, "187", "No posees esa cantidad.");
		if (params[1] < 1 || params[1] > 50000) return _Mensaje(playerid, 1, "0", "Máximo: $50.000.");
		if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (!CercaDelWeon(5.0, playerid, params[0])) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
		if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		if (user[params[0]][jEncarcelado] != 0) return _Mensaje(playerid, 0, "9", "No puedes darle dinero a un preso.");

		Compra(playerid, params[1]);
		Ganancia(params[0], params[1]);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "le dio algo de dinero a %s.", nombre_pj(params[0], 0));
		accion_rol(playerid, 0, MsgCheckMe);
		format(string, sizeof(string), "Recibiste $%d de %s.", params[1], nombre_pj(playerid, 0));
		_Mensaje(params[0], 4, "b0b0b0", string);

		if(!strcmp(user[playerid][jIP], user[params[0]][jIP], false) && user[playerid][jMulticuenta] == 0 && user[params[0]][jMulticuenta] == 0)
		{
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "[Atención]{FFFFFF} %s le da $%d a %s, posible multicuentas [IP: %s]", nombre_pj(playerid), params[1], nombre_pj(params[0]), ipc);
			MensajeAdmin(stringlog);
			format(stringlog, sizeof(stringlog), "Registros: %s le da '$%d' a %s. [IP: %s]", nombre_pj(playerid), params[1], nombre_pj(params[0]), ipc);
			Log("Registros/multicuentas.log", stringlog);
		}
		else
		{
			format(string, sizeof(string), "Registros: %s le da '$%d' a %s.", nombre_pj(playerid), params[1], nombre_pj(params[0]));
			Log("Registros/Pagos.log", string);
		}

		PagarTiempo[playerid] = gettime();
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, PagarTiempo[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:quitar(playerid,  const params[])
{
	new
		string[128],
		playerid2,
		opcion
	;
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (sscanf(params, "ui", playerid2, opcion))
	{
		_Mensaje(playerid, 3, "0", "/quitar [id jugador] [opción]");
		_Mensaje(playerid, 1, "0", "Opciones disponibles: 1 (licencia de arma), 2 (punto de licencia)");
		return 1;
	}
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "165", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "165", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	switch (opcion)
	{
	    case 1:
	    {
	        if (user[playerid2][jLicencias][0] == 0) return _Mensaje(playerid, 0, "0", "Ese jugador no tiene licencia de armas.");
			user[playerid2][jLicencias][0] = 0;
			format(string, sizeof(string), "%s quita la licencia de armas a %s.", nombre_pj(playerid, 0), nombre_pj(playerid2, 0));
			ProxDetector(30.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
			return 1;
	    }
	    case 2:
	    {
	        if (user[playerid2][jLicencias][1] == 0) return _Mensaje(playerid, 0, "0", "Ese jugador no tiene licencia de conducir.");
			user[playerid2][jPuntosLic]--;
			if (user[playerid2][jPuntosLic] == 0)
			{
				user[playerid2][jLicencias][1] = 0;
				format(string, sizeof(string), "%s quita la licencia de conducir a %s.", nombre_pj(playerid, 0), nombre_pj(playerid2, 0));
				ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
				return 1;
			}
			else
			{
				format(string, sizeof(string), "Retiraste un punto de licencia a %s, ahora tiene %d.", nombre_pj(playerid2, 0), user[playerid2][jPuntosLic]);
				Mensaje_(playerid, -1, string);
				format(string, sizeof(string), "%s te removió un punto de licencia, tienes %d.", nombre_pj(playerid, 0), user[playerid2][jPuntosLic]);
				Mensaje_(playerid2, -1, string);
				return 1;
			}
	    }
		default: _Mensaje(playerid, 0, "121", "Opción inválida.");
	}
	return 1;
}

GCMD:reiniciarregalo(playerid,  const params[])
{
	new string[128], playerid2;
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/reiniciarregalo [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	format(string, sizeof(string), "[Administración]{FFFFFF} %s reseteó el tiempo de regalo a %s", nombre_pj(playerid), nombre_pj(playerid2));
	MensajeAdmin(string);
	user[playerid2][jTiempos][5] = 0;
	return 1;
}

forward RecogerAccesorio(playerid);
public RecogerAccesorio(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { _Mensaje(playerid, 0, "9", "No puedes usar este comando en esta situación."); return 1; }
	new ObjetoRecogido, string[256];
	for(new i = 0; i < sizeof(InfoCaido); i++)
	{
		if(en_pos(playerid, 2.0, InfoCaido[i][AccX], InfoCaido[i][AccY], InfoCaido[i][AccZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == InfoCaido[i][AccVWorld] && GetPlayerInterior(playerid) == InfoCaido[i][AccInterior])
			{
				if(InfoCaido[i][AccID] == 0) break;
				DestroyDynamicObject(AccCaido[i]);
				for (new ida; ida < MAX_uACCESORIOS; ida++)
				{
					if (InfoAccesorio[playerid][ida][aModelo] == 0)
					{
						InfoAccesorio[playerid][ida][aModelo] = InfoCaido[i][AccID];
						InfoAccesorio[playerid][ida][aParte] = InfoCaido[i][aParte];
						InfoAccesorio[playerid][ida][aPosicionX] = InfoCaido[i][aPosicionX];
						InfoAccesorio[playerid][ida][aPosicionY] = InfoCaido[i][aPosicionY];
						InfoAccesorio[playerid][ida][aPosicionZ] = InfoCaido[i][aPosicionZ];
						InfoAccesorio[playerid][ida][aRotacionX] = InfoCaido[i][aRotacionX];
						InfoAccesorio[playerid][ida][aRotacionY] = InfoCaido[i][aRotacionY];
						InfoAccesorio[playerid][ida][aRotacionZ] = InfoCaido[i][aRotacionZ];
						InfoAccesorio[playerid][ida][aEscalaX] = InfoCaido[i][aEscalaZ];
						InfoAccesorio[playerid][ida][aEscalaY] = InfoCaido[i][aEscalaY];
						InfoAccesorio[playerid][ida][aEscalaZ] = InfoCaido[i][aEscalaX];
						new NombreAcc[32];
						for(new ir; ir < sizeof(Accesorios); ir++)
						{
							if(Accesorios[ir][ModeloAccesorio] == InfoAccesorio[playerid][ida][aModelo])
							{
								format(NombreAcc, sizeof(NombreAcc), "%s", Accesorios[ir][NombreAccesorio]);
							}
						}
						new MsgCheckMe[MAX_TEXT_CHAT];
						format(MsgCheckMe, sizeof(MsgCheckMe), "recoge del suelo un accesorio %s.", NombreAcc);
						accion_rol(playerid, 0, MsgCheckMe);
						format(string, sizeof(string), "Has recogido el accesorio {00C200}%s{ffffff}, revisa /accesorios.", NombreAcc);
						_Mensaje(playerid, 4, "ffffff", string);
						InfoCaido[i][AccX] = 0.0;
						InfoCaido[i][AccY] = 0.0;
						InfoCaido[i][AccZ] = 0.0;
						InfoCaido[i][AccID] = 0;
						InfoCaido[i][aParte] = 0;
						InfoCaido[i][aPosicionX] = 0;
						InfoCaido[i][aPosicionY] = 0;
						InfoCaido[i][aPosicionZ] = 0;
						InfoCaido[i][aRotacionX] = 0;
						InfoCaido[i][aRotacionY] = 0;
						InfoCaido[i][aRotacionZ] = 0;
						InfoCaido[i][aEscalaZ] = 0;
						InfoCaido[i][aEscalaY] = 0;
						InfoCaido[i][aEscalaX] = 0;
						ObjetoRecogido = 1;
						return 1;
					}
				}
				break;
			}
		}
	}
	if(ObjetoRecogido == 0) return _Mensaje(playerid, 4, "b0b0b0", "No tienes un accesorio cercano a ti.");
	return 1;
}

GCMD:recogertoy(playerid) return cmd_recogeracc(playerid);
GCMD:recogeracc(playerid)
{
	RecogerAccesorio(playerid);
	return 1;
}

GCMD:toys(playerid) return cmd_accesorios(playerid);
GCMD:accesorios(playerid)
{
	new TextAcc[512];
	for(new x; x < MAX_uACCESORIOS; x++)
	{
		new NombreAcc[128];
		format(NombreAcc, sizeof(NombreAcc), "{b0b0b0}Vacío");
		for(new i; i < sizeof(Accesorios); i++)
		{
			if(Accesorios[i][ModeloAccesorio] == InfoAccesorio[playerid][x][aModelo])
			{
				format(NombreAcc, sizeof(NombreAcc), "%s%s", color_objeto(playerid, x), Accesorios[i][NombreAccesorio]);
			}
		}
		format(TextAcc, sizeof(TextAcc), "%s%s\n", TextAcc, NombreAcc);
	}
	ExPlayerDialog(playerid, D_ACCESORIOS, DIALOG_STYLE_LIST, "{D6E1EB}Accesorios", TextAcc, "Seleccionar", "Cancelar");
	return 1;
}

GCMD:poneraccesorios(playerid) return cmd_ptoys(playerid);
GCMD:ptoys(playerid)
{
	_Mensaje(playerid, 5, "0", "Colocaste todos los accesorios a tu personaje.");
	for (new x; x < MAX_uACCESORIOS; x++)
	{
		if (InfoAccesorio[playerid][x][aModelo] != 0) ColocarObject(playerid, x, InfoAccesorio[playerid][x][aModelo], InfoAccesorio[playerid][x][aParte], InfoAccesorio[playerid][x][aPosicionX], InfoAccesorio[playerid][x][aPosicionY], InfoAccesorio[playerid][x][aPosicionZ], InfoAccesorio[playerid][x][aRotacionX], InfoAccesorio[playerid][x][aRotacionY], InfoAccesorio[playerid][x][aRotacionZ],
		InfoAccesorio[playerid][x][aEscalaX], InfoAccesorio[playerid][x][aEscalaY], InfoAccesorio[playerid][x][aEscalaZ]);
		InfoAccesorio[playerid][x][aColocado] = 1;
	}
	return 1;
}

GCMD:quitaraccesorios(playerid) return cmd_qtoys(playerid);
GCMD:qtoys(playerid)
{
	_Mensaje(playerid, 5, "0", "Retiraste todos los accesorios de tu personaje.");
	for (new x; x < MAX_uACCESORIOS; x++)
	{
		RemovePlayerAttachedObject(playerid, x);
		InfoAccesorio[playerid][x][aColocado] = 0;
	}
	return 1;
}

GCMD:poneracc(playerid,  const params[]) return cmd_toy(playerid, params);
GCMD:toy(playerid,  const params[])
{
	new toyslot;
	if (sscanf(params, "d", toyslot)) return _Mensaje(playerid, 3, "0", "/toy [slot (0-6)]");
	if (toyslot < 0 || toyslot > MAX_uACCESORIOS) return _Mensaje(playerid, 0, "290", "Los Slots de los toys son del número 0 al 6.");
	switch (toyslot)
	{
		case 0, 1, 2, 3, 4, 5, 6:
		{
			if (IsPlayerAttachedObjectSlotUsed(playerid, toyslot))
			{
				_Mensaje(playerid, 4, "F8D48C", "Retiraste el accesorio correctamente.");
				RemovePlayerAttachedObject(playerid, toyslot);
				InfoAccesorio[playerid][toyslot][aColocado] = 0;
				return 1;
			}
			else
			{
				if (InfoAccesorio[playerid][toyslot][aModelo] == 0) return _Mensaje(playerid, 0, "291", "No tienes ningún toy en ese slot.");
				ColocarObject(playerid, toyslot, InfoAccesorio[playerid][toyslot][aModelo], InfoAccesorio[playerid][toyslot][aParte], InfoAccesorio[playerid][toyslot][aPosicionX], InfoAccesorio[playerid][toyslot][aPosicionY], InfoAccesorio[playerid][toyslot][aPosicionZ], InfoAccesorio[playerid][toyslot][aRotacionX], InfoAccesorio[playerid][toyslot][aRotacionY], InfoAccesorio[playerid][toyslot][aRotacionZ], InfoAccesorio[playerid][toyslot][aEscalaX],
				InfoAccesorio[playerid][toyslot][aEscalaY], InfoAccesorio[playerid][toyslot][aEscalaZ]);
				_Mensaje(playerid, 4, "F8D48C", "Colocaste el accesorio correctamente.");
				InfoAccesorio[playerid][toyslot][aColocado] = 1;
			}
		}
	}
	return 1;
}

GCMD:prendas(playerid) return cmd_toysvip(playerid);
GCMD:toysvip(playerid)
{
	if (!en_pos(playerid, 3.0, -2304.5933,170.7388,35.3407)) return _Mensaje(playerid, 0, "205", "No estás en los casilleros premium.");
	if (user[playerid][jPremium] < 1) return Mensaje_(playerid, -1, "No tienes acceso a este privilegio.");

	ExPlayerDialog(playerid, D_COMPRARTOYVIP, DIALOG_STYLE_MSGBOX, "{D6E1EB}Accesorios VIP", "Bienvenido al dispensador de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás", "Ok", "Salir");
	return 1;
}

GCMD:regalo(playerid)
{
	if (CajadeRegalo != 0)
	{
		new Float: Position[3];
		GetDynamicObjectPos(CajadeRegalo, Position[0], Position[1], Position[2]);
		if (en_pos(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if (user[playerid][jTiempos][11] != 0) return decir_eltiempo(playerid, 11);
			accion_rol(playerid, 0, "mira en el interior del regalo.");
			user[playerid][jTiempos][11] = 600;
			DarDineroGC(playerid, 100);
			user[playerid][jExperiencia] += 2;
			user[playerid][j_Horas] += 2;
			_Mensaje(playerid, 4, "b0b0b0", "Felicidades recibiste:");
			_Mensaje(playerid, 4, "b0b0b0", "100$, 2 puntos de experiencia.");
			return 1;
		}
	}
	return 1;
}

GCMD:casillero(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, -2301.9307,174.2739,35.3407)) return _Mensaje(playerid, 0, "205", "No estás en los casilleros del salón premium.");
	if (!user[playerid][jPremium]) return _Mensaje(playerid, 0, "207", "No eres usuario premium.");

	ExPlayerDialog(playerid, D_vip_locker, DIALOG_STYLE_LIST, "{D6E1EB}Casillero premium", "Color premium\nCambiar skin\nRestaurar vida\nCambiar trabajo\nRegalo", "Seleccionar", "Cancelar");
	return 1;
}

GCMD:darvip(playerid,  const params[])
{
	new string[128], playerid2, level, dia, mes;
	if (user[playerid][jAdmin] < 1338) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dddd", playerid2, level, dia,mes))
	{
		_Mensaje(playerid, 3, "0", "/darvip [id jugador] [tipo vip] [día fin] [mes fin]");
		_Mensaje(playerid, 1, "0", "Tipos disponibles: 1) Plata - 2) Oro");
		return 1;
	}
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (level < 0 || level > 2) return _Mensaje(playerid, 1, "0", "Solo existen dos tipos de premium.");

	user[playerid2][jPremium] = level;
	user[playerid2][jM_premium] = mes;
	user[playerid2][jD_premium] = dia;
	if (level == 0)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s retiró los beneficios premium de %s.", nombre_pj(playerid), nombre_pj(playerid2));
		MensajeAdmin(string);
		format(string, sizeof(string), "* %s te retiró los beneficios premium.", nombre_pj(playerid));
		Mensaje_(playerid2, 0xFFDB42FF, string);
		SetPlayerColor(playerid2, C_PLAYERBLANCO);
		user[playerid2][jColorP] = 0;
		user[playerid2][jD_premium] = -1;
		user[playerid2][jM_premium] = -1;
		format(string, sizeof(string), "Registros: %s retiró el premium de %s.", nombre_pj(playerid), nombre_pj(playerid2));
		Log("Registros/Darvip.log", string);
		return 1;
	}
	else if (level == 1)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s otorgó beneficios Plata a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		MensajeAdmin(string);
		format(string, sizeof(string), "* %s te ha otorgado VIP Plata (EXP 7 + 12,500).", nombre_pj(playerid), level);
		Mensaje_(playerid2, 0xFFDB42FF, string);
		format(string, sizeof(string), "Registros: %s cedió VIP Plata a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		Log("Registros/Darvip.log", string);
		DarDineroGC(playerid2, 12500);
		user[playerid2][jExperiencia] +=7;
		return 1;
	}
	else if (level == 2)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s otorgó beneficios Oro a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		MensajeAdmin(string);
		format(string, sizeof(string), "* %s te ha otorgado VIP Oro (LV UP + 25,000).", nombre_pj(playerid), level);
		Mensaje_(playerid2, 0xFFDB42FF, string);
		format(string, sizeof(string), "Registros: %s cedió VIP Oro a %s.", nombre_pj(playerid), nombre_pj(playerid2));
		Log("Registros/Darvip.log", string);
		user[playerid2][jNivel] +=1;
		DarDineroGC(playerid2, 25000);
		return 1;
	}
	return 1;
}

GCMD:togvip(playerid)
{
	if (user[playerid][jPremium] > 0 || user[playerid][jAdmin] >= 1)
	{
		switch (B_VIP[playerid])
		{
			case 0:
			{
				B_VIP[playerid] = 1;
				Mensaje_(playerid, -1, "Chat VIP habilitado.");
			}
            case 1:
			{
				B_VIP[playerid] = 0;
				Mensaje_(playerid, -1, "Chat VIP deshabilitado.");
			}
		}
	}
	return 1;
}

GCMD:vip(playerid,  const params[])
{
	if (user[playerid][jPremium] > 0 || user[playerid][jAdmin] >= 1)
	{
		new string[256];
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/vip [texto]");
		if (B_VIP[playerid] == 0) return _Mensaje(playerid, 0, "211", "Tienes el canal deshabilitado, /togvip para re-habilitarlo.");
		if (user[playerid][jAdmin])
		{
			format(string, sizeof(string), "{C93CCE}[VIP] Staff %s:{ffffff} %s", user[playerid][jStaff], params);
		}
		switch (user[playerid][jPremium])
		{
			case 1: format(string, sizeof(string), "{C93CCE}[VIP] Plata %s:{ffffff} %s", nombre_pj(playerid), params);
			case 2: format(string, sizeof(string), "{C93CCE}[VIP] Oro %s:{ffffff} %s", nombre_pj(playerid), params);
		}
		if (user[playerid][jPremium] >= 1 || user[playerid][jAdmin] >= 1) { MensajeVIP(0xffffffff, string); }
		format(string, sizeof(string), "%s: %s", nombre_pj(playerid), params);
		Log("Registros/ChatVip.log", string);
	}
	return 1;
}

GCMD:regaloatodos(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (Regalo)
	{
		new string[128];
		format(string, sizeof(string), "[Administración]{FFFFFF} %s envió regalos a todo el servidor.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
		Regalo = 0;
		foreach(new i: Player) { RegaloTodos(i); }
	} else return _Mensaje(playerid, 0, "212", "Este comando ya fue usado, puedes usarlo en el próximo pago diario.");
	return 1;
}

GCMD:liberar(playerid,  const params[])
{
	new string[256], jugador2;
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "u", jugador2)) return _Mensaje(playerid, 3, "0", "/liberar [id jugador]");
	if (!IsPlayerConnected(jugador2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[jugador2][jTiempoCarcel] == 0) return _Mensaje(playerid, 0, "158", "Ese jugador no está en prisión.");
	format(string, sizeof(string), "Registros: %s liberó de prisión a %s.", nombre_pj(playerid), nombre_pj(jugador2));
	Log("Registros/LiberarJail.log", string);
	format(string, sizeof(string), "Administración: %s liberó de prisión a %s.", nombre_pj(playerid), nombre_pj(jugador2));
	_MensajeOOC(0xFF6347FF, string);
	user[jugador2][jTiempoCarcel] = 1;
	user[jugador2][jtiempito] = 0;
	if(user[jugador2][jEncarcelado] == 1) user[jugador2][jSanciones] -= 1;
	_Mensaje(jugador2, 4, "33CCFF", "Un miembro de la administración bajo tu condena a 60 segundos.");
	return 1;
}

#pragma warning push
#pragma warning disable 252
GCMD:sancionarcuenta(playerid,  const params[]) return cmd_jailcuenta(playerid, params);
GCMD:jailcuenta(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[200], name[MAX_PLAYER_NAME], minutes, pID, tipo, reason[100];
	if (sscanf(params, "udds[100]", pID, tipo, minutes, reason)) return _Mensaje(playerid, 3, "0", "/jailcuenta [Nombre_Apellido] [tipo, 1. OOC - 2. IC - 3. PF] [minutos] [razón]");
	if (IsPlayerConnected(pID)) return _Mensaje(playerid, 0, "75", "Ese jugador está conectado.");
	if (sscanf(params, "s[24]dds[100]", name, tipo, minutes, reason)) return _Mensaje(playerid, 3, "0", "/jailcuenta [Nombre_Apellido] [tipo, 1. OOC - 2. IC - 3. PF] [minutos] [razón]");
	yield 1;
	if(!characterCheck(name)) return Mensaje_(playerid, -1, "Esta cuenta no existe.");
	
	if (tipo < 1 || tipo > 3) { _Mensaje(playerid, 4, "b0b0b0", "Tipos: 1. OOC - 2. IC - 3. PF"); return 1; }
	if (tipo == 3) if (minutes < 1 || minutes > 20) { _Mensaje(playerid, 0, "174", "Horas: 1 a 20 horas."); return 1; }
	else { if (minutes < 1 || minutes > 900) { _Mensaje(playerid, 0, "174", "Tiempo: 1 a 900 minutos."); return 1; } }
	
	new
		x_jail,
		x_jail2,
		tipos[5],
		timejl[92],
		resp[MAX_PLAYER_NAME],
		ORM:jlcORM = orm_create("characters")
	;
	
	orm_addvar_string(jlcORM, name, MAX_PLAYER_NAME, "NombrePJ");
	orm_setkey(jlcORM, "NombrePJ");
	orm_addvar_int(jlcORM, x_jail, "Sanciones");
	orm_addvar_int(jlcORM, x_jail2, "Arrestos");
	
	if( (task_await(orm_async_select(jlcORM))) != _:ERROR_OK ){
		orm_destroy(jlcORM);
		return _Mensaje(playerid, 0, "0", "Ocurrió un error al cargar los datos del personaje a sancionar.");
	}
	
	switch(tipo){
		case 1:{
			tipos = "OOC";
			x_jail++;
		}
		case 2:{
			tipos = "IC";
			x_jail2++;
		}
		case 3:{
			tipos = "PF";
			x_jail2++;	
		}
	}

	orm_addvar_int(jlcORM, tipo, "Encarcelado");
	orm_addvar_string(jlcORM, resp, MAX_PLAYER_NAME, "jCulpable");
	orm_addvar_string(jlcORM, timejl, sizeof(timejl), "jMomento");
	orm_addvar_string(jlcORM, reason, sizeof(reason), "jRazon");


	if (tipo == 3)
	{
		if(minutes > 2)
		{
		    new k = gettime(), elpru[30];
			minutes = (minutes-2)*3600;
			k += minutes;
			format(elpru, sizeof(elpru), "%d", k);
			static tiempoCr = 120;
			orm_addvar_string(jlcORM, elpru, sizeof(elpru), "tiempito");
			orm_addvar_int(jlcORM, tiempoCr, "TiempoCarcel");
		}
		else
		{
			new tiempoCr = (minutes*60);
			new str[2] = {'0', '\0'};
			orm_addvar_string(jlcORM, str, sizeof(str), "tiempito");
			orm_addvar_int(jlcORM, tiempoCr, "TiempoCarcel");
		}
	}
	else
	{
		new str[2] = {'0', '\0'};
		new tiempoCr = minutes;
		orm_addvar_int(jlcORM, tiempoCr, "TiempoCarcel");
		orm_addvar_string(jlcORM, str, sizeof(str), "tiempito");
	}
	if( (task_await(orm_async_update(jlcORM))) == _:ERROR_OK ){
		format(string, sizeof(string), "Registros: %s fue sancionado por %s (%s). [CMD OFFLINE]", name, nombre_pj(playerid), tipos);
		Log("Registros/JailCuenta.log", string);
		format(string, 200, "[Administración]{FFFFFF} %s fue sancionado por %s (%s). [CMD OFFLINE]", name, nombre_pj(playerid), tipos);
		MensajeAdmin(string);
	}
	orm_destroy(jlcORM);
	return 1;
	
}
#pragma warning pop

GCMD:jailtipo(playerid,  const params[])
{
	new string[256], time, tipo, playerid2, reason[100];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "ddds[100]", playerid2, tipo, time, reason)) return _Mensaje(playerid, 3, "0", "/jailtipo [id jugador] [tipo, 1. OOC - 2. IC - 3. PF] [minutos (horas si es PF)] [razón]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	else { if (time < 1 || time > 99999) return _Mensaje(playerid, 1, "0", "Máximo: 99999 minutos"); }

	user[playerid2][jEncarcelado] = tipo;
	user[playerid2][j_uTelefono] = 1;
	if (tipo == 1)
	{
		user[playerid2][jSanciones] += 1;
		user[playerid2][jTiempoCarcel] = time;
		user[playerid2][jtiempito] = 0;
		format(string, sizeof(string), "Administración: %s fue encarcelado OOC, Razón:[%s]", nombre_pj(playerid2), reason);
		_MensajeOOC(0xFF6347FF, string);
		format(string, sizeof(string), "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", nombre_pj(playerid), time, nombre_pj(playerid2));
		mensaje_admin(string, 0xff0000ff);
		alm(user[playerid2][jJculpable], nombre_pj(playerid));
        SetPlayerPos(playerid2, 2687.3630, 2705.2537, 22.9472);
		TogglePlayerControllable(playerid2, 0); SetPVarInt(playerid2, "Congelado", 1);
		SetPlayerVirtualWorld(playerid2, playerid2); user[playerid2][jVirtualWorld] = playerid2;
		SetPlayerInterior(playerid2, 0); user[playerid2][jInterior] = 0;
		if (Esposado[playerid2] != 0)
		{
			Esposado[playerid2] = 0;
			RemovePlayerAttachedObject(playerid2, 9);
			SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		}
		PlayerTextDrawShow(playerid2, TextTrabajo[playerid2]);
		alm(user[playerid2][jJmomento], el_tiempo());
		alm(user[playerid2][jJrazon], reason);
	}
	else if (tipo == 2)
	{
		user[playerid2][jArrestos] += 1;
		user[playerid2][jTiempoCarcel] = time;
		user[playerid2][jtiempito] = 0;
		format(string, sizeof(string), "Administración: %s fue encarcelado en comisaria, Razón:[%s]", nombre_pj(playerid2), reason);
		_MensajeOOC(0xFF6347FF, string);
		format(string, sizeof(string), "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", nombre_pj(playerid), time, nombre_pj(playerid2));
		mensaje_admin(string, 0xff0000ff);
		new rand = random(sizeof(_COMISARIAp));
		SetPlayerPos(playerid2, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2]);
		CargarObjetos(playerid2);
		SetPlayerInterior(playerid2, 5); user[playerid2][jInterior] = 5;
		if (Esposado[playerid2] != 0)
		{
			Esposado[playerid2] = 0;
			RemovePlayerAttachedObject(playerid2, 9);
			SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		}
		for(new x = 0; x < 10; x++)
		{
			if(InfoObjeto[user[playerid2][jBolsillo][x]][IDArma] > 0) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
			if(user[playerid2][jBolsillo][x] <= 49 && user[playerid2][jBolsillo][x] >= 41) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
			if(user[playerid2][jBolsillo][x] <= 79 && user[playerid2][jBolsillo][x] >= 74) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
		}
	}
	else if (tipo == 3)
	{
		user[playerid2][jArrestos] += 1;
		format(string, sizeof(string), "Administración: %s fue encarcelado en la prisión federal, Razón:[%s]", nombre_pj(playerid2), reason);
		_MensajeOOC(0xFF6347FF, string);
		format(string, sizeof(string), "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", nombre_pj(playerid), time, nombre_pj(playerid2));
		mensaje_admin(string, 0xff0000ff);
		new rand = random(sizeof(_FEDERALp));
		SetPlayerPos(playerid2, _FEDERALp[rand][0], _FEDERALp[rand][1], _FEDERALp[rand][2]);
		CargarObjetos(playerid2);
		SetPlayerInterior(playerid2, 0); user[playerid2][jInterior] = 0;
		SetPlayerVirtualWorld(playerid2, 0); user[playerid2][jVirtualWorld] = 0;
		if (Esposado[playerid2] != 0)
		{
			Esposado[playerid2] = 0;
			RemovePlayerAttachedObject(playerid2, 9);
			SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		}
		for(new x = 0; x < 10; x++)
		{
			if(InfoObjeto[user[playerid2][jBolsillo][x]][IDArma] > 0) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
			if(user[playerid2][jBolsillo][x] <= 49 && user[playerid2][jBolsillo][x] >= 41) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
			if(user[playerid2][jBolsillo][x] <= 79 && user[playerid2][jBolsillo][x] >= 74) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; }
		}
		for(new x = 0; x < 10; x++)
		{
			user[playerid2][job_PF][x] = user[playerid2][jBolsillo][x];
			user[playerid2][job_PFCant][x] = user[playerid2][jBolsilloCant][x];
			user[playerid2][jBolsillo][x] = 0;
			user[playerid2][jBolsilloCant][x] = 0;
		}
		user[playerid2][jTiempoCarcel] = time, user[playerid2][jtiempito] = 0;
		user[playerid2][job_PF][10] = user[playerid2][jm_Derecha], user[playerid2][job_PFCant][10] = user[playerid2][jm_DerechaCant];
		user[playerid2][job_PF][11] = user[playerid2][jm_Izquierda], user[playerid2][job_PFCant][11] = user[playerid2][jm_IzquierdaCant];
		user[playerid2][jm_Derecha] = 0, user[playerid2][jm_DerechaCant] = 0;
		user[playerid2][jm_Izquierda] = 0, user[playerid2][jm_IzquierdaCant] = 0;
		if (user[playerid2][jDineroPF] == 0)
		{
			user[playerid2][jDineroPF] = ComprobarDineroJ(playerid2);
			DarDineroGC(playerid2, -ComprobarDineroJ(playerid2));
		}
		update_manos(playerid2);
		QuitarEspalda(playerid2);
		characterSave(playerid2);
	}
	StopAudioStreamForPlayer(playerid2);
	return 1;
}

GCMD:sancionar(playerid,  const params[]) return cmd_jail(playerid, params);
GCMD:jail(playerid,  const params[])
{
	new string[256], time, playerid2, reason[100];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	if (sscanf(params, "dds[100]", playerid2, time, reason)) return _Mensaje(playerid, 3, "0", "/jail [id jugador] [minutos] [razón]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (time < 1 || time > 250) { _Mensaje(playerid, 0, "174", "Tiempo: 1 a 250 minutos."); return 1; }

	user[playerid2][jSanciones] += 1;
	user[playerid2][jEncarcelado] = 1;
	alm(user[playerid2][jJmomento], el_tiempo());
	alm(user[playerid2][jJrazon], reason);
	PlayerTextDrawShow(playerid2, TextTrabajo[playerid2]);
	user[playerid2][j_uTelefono] = 1;
	user[playerid2][jTiempoCarcel] = time;
	user[playerid2][jtiempito] = 0;
    SetPlayerPos(playerid2, 2687.3630, 2705.2537, 22.9472);
	SetPlayerVirtualWorld(playerid2, playerid2); user[playerid2][jVirtualWorld] = playerid2;
	SetPlayerInterior(playerid2, 0); user[playerid2][jInterior] = 0;
	TogglePlayerControllable(playerid2, 0);
	SetPVarInt(playerid2, "Congelado", 1);
	format(string, sizeof(string), "Administración: %s fue encarcelado %d minutos, Razón:[%s]", nombre_pj(playerid2), time, reason);
	_MensajeOOC(0xFF6347FF, string);
	format(string, sizeof(string), "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", nombre_pj(playerid), time, nombre_pj(playerid2));
	mensaje_admin(string, 0xff0000ff);
	StopAudioStreamForPlayer(playerid2);
	alm(user[playerid2][jJculpable], nombre_pj(playerid));
	return 1;
}

GCMD:fmiembros(playerid)
{
	new member = user[playerid][jMiembroFam], leader = user[playerid][jLiderFam], teamnumber;
	if (user[playerid][jLiderFam] != 0) teamnumber = user[playerid][jLiderFam];
	else if (user[playerid][jMiembroFam] != 0) teamnumber = user[playerid][jMiembroFam];
	if (member > 0 || leader > 0)
	{
		new stringx[128];
		format(stringx, sizeof(stringx), "Miembros conectados de: {1EB032}%s", i_Familia[teamnumber][fLogito]);
		Mensaje_(playerid, -1, stringx);
		foreach(new i: Player)
		{
			new string[128];
			if (IsPlayerConnectedEx(i))
			{
				if (user[i][jLiderFam] == teamnumber) format(string, sizeof(string), "[ID: %d] %s - Rango: Líder", i, nombre_pj(i));
				else if (user[i][jMiembroFam] == teamnumber) format(string, sizeof(string), "[ID: %d] %s - Rango: %d", i, nombre_pj(i), user[i][jRangoFam]);
				if (strlen(string) > 0) Mensaje_(playerid, 0xb0b0b0ff, string);
			}
		}
	} else _Mensaje(playerid, 0, "687", "No perteneces a ninguna familia.");
	return 1;
}

GCMD:detener(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 2, 5)) _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "165", "ERROR: Debes estar fuera del vehículo.");
	new playerid2, seat,carid = QuienManejo[playerid];
	if (sscanf(params, "dd", playerid2, seat)) return _Mensaje(playerid, 3, "0", "/detener [id jugador] [asiento 1-3]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "165", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (seat < 1 || seat > 3) return _Mensaje(playerid, 0, "165", "Asientos: 1 al 3.");
	if (IsPlayerInAnyVehicle(playerid2)) return _Mensaje(playerid, 0, "165", "Esa persona está en un vehiculo.");
	if (playerid2 == playerid) return _Mensaje(playerid, 0, "165", "No puedes hacer esto contigo mismo.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "165", "Estás lejos del jugador.");

	if (IsSeatAvailable(carid, seat))
	{
		new Float: pos[6];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerPos(playerid2, pos[3], pos[4], pos[5]);
		GetVehiclePos(carid, pos[0], pos[1], pos[2]);
		if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 && floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 && floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "sube forzosamente a %s al vehiculo.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
		textgame_player(playerid2, "~r~Detenido", 2500, 3);
		ClearAnimations(playerid2);
		TogglePlayerControllable(playerid2, false);
		PutPlayerInVehicle(playerid2, carid, seat);
	} else return _Mensaje(playerid, 0, "165", "El asiento seleccionado no está disponible.");
	return 1;
}

GCMD:reportar(playerid,  const params[]) return cmd_re(playerid, params);
GCMD:re(playerid,  const params[])
{
	new string[256];
	if(!CheckTimer(60, TiempoReporte[playerid]))
	{
		if (StaffEnLinea() == 0) return _Mensaje(playerid, 4, "ffffff", "Su reporte {E11509}no fue enviado{ffffff}, ya que no se encuentra staff conectado. Puedes reportar en el /foro.");
		if (ReporteB[playerid] == 1) return _Mensaje(playerid, 0, "472", "El /re ha sido bloqueado para ti por mal uso.");
		if(sscanf(params, "ds[128]", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/reportar [id jugador] [razón]");
		if(IsPlayerConnected(params[0]))
		{
			format(string, sizeof(string), "Reporte de: %s [ID:%d] a %s [ID:%d]. Razón: %s", nombre_pj(playerid), playerid, nombre_pj(params[0]), params[0], params[1]);
			mensaje_admin(string, 0xE11509FF, 1);
			format(ReporteT[playerid], 256, "%s [ID:%d]. Razón: %s", nombre_pj(params[0]), params[0], params[1]);
			_Mensaje(playerid, 4, "ffffff", "Su reporte fue enviado {188201}correctamente{ffffff} al equipo administrativo en servicio.");
			TiempoReporte[playerid] = gettime();
			ReporteA[playerid] = 1;
		} else _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas enviar otro reporte.", CheckTimer(60, TiempoReporte[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:ar(playerid,  const params[]) return cmd_rr(playerid, params);
GCMD:rreporte(playerid,  const params[]) return cmd_rr(playerid, params);
GCMD:rr(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/rr [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (ReporteA[params[0]] == 1)
	{
		new string[128];
		format(string, sizeof(string), "{ffffff}%s se encuentra revisando el reporte de %s [ID: {E11509}%d{ffffff}].", nombre_pj(playerid), nombre_pj(params[0]), params[0]);
		MensajeAdmin(string);
		format(string, sizeof(string), "Su reporte está siendo revisado por %s (ID: %d).", user[playerid][jStaff], playerid);
		SendClientMessage(params[0], 0x8FB2D1ff, string);
		SendClientMessage(params[0], 0x8FB2D1ff, "También puede realizar el reporte en el foro con pruebas sino fue atendido a tiempo.");
		ReporteA[params[0]] = 0;
		ReporteT[params[0]] = "Nada";
	} else _Mensaje(playerid, 0, "194", "El jugador no ha enviado ningún reporte.");
	return 1;
}

GCMD:reportes(playerid)
{
	new string[256];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "E11509", "» {ffffff}Reportes:");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i) && ReporteA[i] == 1)
		{
			format(string, sizeof(string), "Reporte de: %s [ID:%d] a %s", nombre_pj(i), i, ReporteT[i]);
			if (strlen(string) > 0) SendSplitMessage(playerid, 0xE11509FF, string);
		}
	}
	return 1;
}

GCMD:borrarreportes(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i) && ReporteA[i] == 1)
		{
			ReporteA[i] = 0;
			ReporteT[i] = "Nada";
		}
	}
	format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] a borrado todos los reportes activos.", nombre_pj(playerid), playerid);
	MensajeAdmin(string);
	return 1;
}

GCMD:bloquearreportes(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloquearreportes [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (ReporteB[playerid2] == 0)
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] bloqueo el canal de reportes a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "* %s te ha bloqueado el canal de reportes por mal uso.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		ReporteA[playerid2] = 0;
		ReporteT[playerid2] = "Nada";
		ReporteB[playerid2] = 1;
	}
	else
	{
		format(string, sizeof(string), "[Administración]{FFFFFF} %s [ID:%i] desbloqueo el canal de reportes a %s (ID: %i).", nombre_pj(playerid), playerid, nombre_pj(playerid2), playerid2);
		MensajeAdmin(string);
		format(string, sizeof(string), "* %s te ha desbloqueado el canal de reportes. Utilizelo bien esta vez.", nombre_pj(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		ReporteA[playerid2] = 0;
		ReporteT[playerid2] = "Nada";
		ReporteB[playerid2] = 0;
	}
	return 1;
}

GCMD:desbanip(playerid,  const params[]) return cmd_unbanip(playerid, params);
GCMD:desbanearip(playerid,  const params[]) return cmd_unbanip(playerid, params);
GCMD:unbanip(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 2 || user[playerid][jEncargado][3] == 1)
	{
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/unbanip [ip]");
		if (IsValidIP(params)) return _Mensaje(playerid, 4, "b0b0b0", "Esa IP no es válida.");
		if (CheckBan(params) == 1)
		{
			new string[128];
			RemoveBan(params);
			unban_ip(params);
			format(string, 128, "[Administración]{FFFFFF} %s desbaneó la IP %s.", nombre_pj(playerid), params);
			MensajeAdmin(string);
			format(string, sizeof(string), "Registros: %s desbaneó la IP %s.", nombre_pj(playerid), params);
			Log("Registros/DesbloquearIP.log", string);
		}
		else _Mensaje(playerid, 4, "b0b0b0", "IP ingresada no se encuentra bloqueada.");
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

GCMD:desban(playerid,  const params[]) return cmd_unban(playerid, params);
GCMD:desbanear(playerid,  const params[]) return cmd_unban(playerid, params);
GCMD:unban(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 2 || user[playerid][jEncargado][3] == 1)
	{
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/unban [Nombre_Apellido]");
		yield 1;
		if (characterCheck(params))
		{
			new string[128];
			mysql_format(mainDatabase, string, sizeof(string), "UPDATE characters SET Baneado = 0 WHERE NombrePJ = '%e'", params);
			await mysql_aquery(mainDatabase, string);
			if(cache_affected_rows()){
				format(string, 128, "[Administración]{FFFFFF} %s fue desbaneado por %s.", params, nombre_pj(playerid));
				MensajeAdmin(string);
				format(string, sizeof(string), "Registros: %s fue desbaneado por %s.", params, nombre_pj(playerid));
				Log("Registros/Desban.log", string);
			}
		} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}

adminCheck(acc[]){
	new account_id;
	new query[96];
	new ret = -1;
	new find;
	if((find = strfind(acc, "_")) != -1 && find != acc[0] && find != acc[strlen(acc)-1]){
		mysql_format(mainDatabase, query, sizeof(query), "SELECT charOwner FROM characters WHERE NombrePJ = '%e' LIMIT 1", acc);
		await mysql_aquery(mainDatabase, query);
		if(cache_num_rows()){
			cache_get_value_name_int(0, "charOwner", account_id);
			await mysql_aquery_s(mainDatabase, str_format("SELECT Admin FROM accounts WHERE SQLID = %d LIMIT 1", account_id));
			if(cache_num_rows())
				cache_get_value_name_int(0, "Admin", ret);
		}
		return ret;
	}
	else{
		mysql_format(mainDatabase, query, sizeof(query), "SELECT Admin FROM accounts WHERE Nombre = '%e' LIMIT 1", acc);
		await mysql_aquery(mainDatabase, query);
		if(cache_num_rows())
			cache_get_value_name_int(0, "Admin", ret);
	}
	return ret;
}

GCMD:bancuenta(playerid,  const params[]) return cmd_obanear(playerid, params);
GCMD:banearcuenta(playerid,  const params[]) return cmd_obanear(playerid, params);
GCMD:obanear(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new string[200], playername[MAX_PLAYER_NAME], reason[64];
		if (sscanf(params, "s[32]s[128]", playername, reason)) return _Mensaje(playerid, 3, "0", "/obanear [Nombre_Apellido] [razón]");
		yield 1;
		
		if (characterCheck(playername))
		{
			if (adminCheck(playername) >= user[playerid][jAdmin])
			{
				format(string, sizeof(string), "{FF6347}Administración: %s ha sido auto-baneado. Razón: [Intentar banear un staff]", nombre_pj(playerid));
				MensajeAdmin(string);
				user[playerid][jBaneado] = 20;
				Kick(playerid);
				return 1;
			}
			new ORM:obanear_orm = orm_create("characters");
			orm_addvar_string(obanear_orm, playername, MAX_PLAYER_NAME, "NombrePJ");

			new _ban_ = 20;
			new culp[MAX_PLAYER_NAME],
			timeb[92];
			alm(culp, nombre_pj(playerid));
			alm(timeb, el_tiempo());
			orm_addvar_int(obanear_orm, _ban_, "Baneado");
			orm_addvar_string(obanear_orm, culp, MAX_PLAYER_NAME,"bCulpable");
			orm_addvar_string(obanear_orm, reason, sizeof(reason), "bRazon");
			orm_addvar_string(obanear_orm, timeb, sizeof(timeb), "bMomento");

			if ( (task_await(orm_async_update(obanear_orm))) == _:ERROR_OK ){
				format(string, sizeof(string), "Registros: %s ha sido bloqueado por %s. Razón: %s.", playername, nombre_pj(playerid), reason);
				Log("Registros/Bloqueados.log", string);

				format(string, 200, "Administración: %s ha sido bloqueado por %s, Razón:[%s] (OFFLINE)", playername, nombre_pj(playerid), reason);
				_MensajeOOC(0xFF6347FF, string);
			}

		} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}
GCMD:ban(playerid,  const params[]) return cmd_banear(playerid, params);
GCMD:bloquear(playerid,  const params[]) return cmd_banear(playerid, params);
GCMD:banear(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new string[200], playerid2, reason[128];
		if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/banear [id jugador] [razón]");
		if (playerid == playerid2) return _Mensaje(playerid, 3, "0", "/banear [id jugador] [razón]");
		if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid2][jAdmin] > user[playerid][jAdmin])
		{
			format(string, sizeof(string), "{FF6347}Administración: %s ha sido auto-baneado. Razón: [Intentar banear un staff]", nombre_pj(playerid));
			MensajeAdmin(string);
			user[playerid][jBaneado] = 20;
			Kick(playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "Registros: %s ha sido bloqueado por %s. Razón: %s", nombre_pj(playerid2), nombre_pj(playerid), reason);
			Log("Registros/Bloqueados.log", string);

			format(string, sizeof(string), "Administración: %s ha sido bloqueado por %s, Razón:[%s]", nombre_pj(playerid2), nombre_pj(playerid), reason);
			_MensajeOOC(0xFF6347FF, string);

			user[playerid2][jBaneado] = 20;

			alm(user[playerid2][jBmomento], el_tiempo());
			alm(user[playerid2][jBculpable], user[playerid][jStaff]);
			alm(user[playerid2][jBrazon], reason);
			new thetime[92];
			format(thetime, sizeof(thetime), "%s", reason);
			_Expulsar(playerid2, 0, thetime);
		}
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}
GCMD:banearip(playerid,  const params[]) return cmd_banip(playerid, params);
GCMD:banip(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new string[256], playerid2, reason[128];
		if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/banearip [id jugador] [razón]");
		if (playerid == playerid2) return _Mensaje(playerid, 3, "0", "/banearip [id jugador] [razón]");
		if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid2][jAdmin] > user[playerid][jAdmin])
		{
			format(string, sizeof(string), "{FF6347}Administración: %s ha sido auto-baneado. Razón: [Intentar banear un staff]", nombre_pj(playerid));
			MensajeAdmin(string);
			user[playerid][jBaneado] = 20;
			Kick(playerid);
			return 1;
		}
		else
		{
			user[playerid2][jBaneado] = 20;

			format(string, sizeof(string), "Administración: %s ha sido baneado por %s, Razón:[%s]", nombre_pj(playerid2), nombre_pj(playerid), reason);
			_MensajeOOC(0xFF6347FF, string);

			format(string, sizeof(string), "Registros: %s ha sido baneado por %s. Razón: %s", nombre_pj(playerid2), nombre_pj(playerid), reason);
			Log("Registros/Baneados.log", string);

			new ip[32];
			GetPlayerIp(playerid2, ip, sizeof(ip));
			AddBan(ip);
			ban_ip(ip, reason, user[playerid][jStaff]);
			alm(user[playerid2][jBmomento], el_tiempo());
			alm(user[playerid2][jBculpable], user[playerid][jStaff]);
			alm(user[playerid2][jBrazon], reason);
			new thetime[92];
			format(thetime, sizeof(thetime), "%s", reason);
			_Expulsar(playerid2, 0, thetime);
		}
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}
GCMD:verip(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new string[128], ip[32];
		if(sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/verip [id jugador]");
		GetPlayerIp(params[0], ip, 32);
		format(string, sizeof(string), "  IP de %s es: %s", nombre_pj(params[0]), ip);
		_Mensaje(playerid, 4, "b0b0b0", string);
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}
GCMD:bloquearip(playerid,  const params[])
{
	if (user[playerid][jAdmin] >= 3 || user[playerid][jEncargado][3] == 1)
	{
		new string[256], ip[50], reason[128];
		if (sscanf(params, "s[50]s[128]", ip, reason)) return _Mensaje(playerid, 3, "0", "/bloquearip [ip] [razón]");
		format(string, sizeof(string), "Registros: IP %s fue bloqueada por %s. Razón: %s", ip, nombre_pj(playerid), reason);
		Log("Registros/BloquearIP.log", string);
		format(string, sizeof(string), "{FF6347}Administración: IP %s fue bloqueada por %s, Razón:[%s]", ip, nombre_pj(playerid), reason);
		MensajeAdmin(string);
		ban_ip(ip, reason, user[playerid][jStaff]);
		AddBan(ip);
	} else _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	return 1;
}
GCMD:kick(playerid,  const params[])
{
	new string[200], playerid2, reason[128];
    if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/kick [id jugador] [razón]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid2][jAdmin] >= user[playerid][jAdmin])
	{
		return cmd_a(playerid, "Estoy medio jorge, intenté kickear a un superior XDXsdddd, matenme.");
	}
	else
	{
		format(string, sizeof(string), "Registros: %s fue expulsado por %s. Razón %s", nombre_pj(playerid2), nombre_pj(playerid), reason);
		Log("Registros/Kick.log", string);

		format(string, sizeof(string), "{FF6347}Administración: %s fue expulsado por %s, Razón:[%s]", nombre_pj(playerid2), nombre_pj(playerid), reason);
		MensajeAdmin(string);

		format(string, sizeof(string), "%s", reason);
		_Expulsar(playerid2, 0, string);
	}
	return 1;
}

funcion TimerKICK(playerid) Kick(playerid);

GCMD:arrestarf(playerid,  const params[])
{
	new string[128], multa, tiempo, fianza, playerid2;
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "175", "No eres miembro de la PD o SADOC.");
	if (!en_pos(playerid, 4.0, 364.5627,819.0615,1000.9888)) return _Mensaje(playerid, 0, "177", "No estás en el lugar de arresto.");
	if (sscanf(params, "dddd", playerid2, multa, tiempo, fianza)) return _Mensaje(playerid, 3, "0", "/arrestar [id jugador] [multa$] [minutos] [Fianza (no=0 / si=$monto]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (user[playerid2][jEncarcelado] != 0) { _Mensaje(playerid, 0, "174", "Ese jugador ya se encuentra en prisión."); return 1; }
	if (multa < 1 || multa > 10000) { _Mensaje(playerid, 0, "174", "Multa: $1 a $10,000."); return 1; }
	if (tiempo < 15 || tiempo > 900) { _Mensaje(playerid, 0, "174", "Tiempo: 15 a 900 minutos."); return 1; }
	switch (tiempo)
	{
	    case 121..180: tiempo = 2;
	    case 181..240: tiempo = 3;
	    case 241..300: tiempo = 4;
	    case 301..360: tiempo = 5;
	    case 361..420: tiempo = 6;
	    case 421..480: tiempo = 7;
	    case 481..540: tiempo = 8;
	    case 541..600: tiempo = 9;
	    case 601..660: tiempo = 10;
	    case 661..720: tiempo = 11;
	    case 721..780: tiempo = 12;
	    case 781..840: tiempo = 13;
	    case 841..900: tiempo = 14;
	}
	if (fianza < 0 || fianza > 20000) { _Mensaje(playerid, 0, "174", "Fianza: $0 a $20,000."); return 1; }
	if (user[playerid2][jEstrellas] < 1) return _Mensaje(playerid, 0, "174", "El sospechoso debe tener un nivel de búsqueda mínimo.");
	if (user[playerid2][jBanco] < multa)
	{
		_Mensaje(playerid2, 5, "0", "No tienes fondos en tu cuenta bancaria para la multa, aumentaron tu condena por ello.");
		if(tiempo >= 2 && tiempo <= 14)
		{
			tiempo += 1;
			if (tiempo >= 4)user[playerid2][jEdad]++;
			// apertura cuenta
			new k = gettime(), elpru[30];
			tiempo = (tiempo-2)*3600;
			k += tiempo;
			format(elpru, sizeof(elpru), "%d", k);
			user[playerid2][jTiempoCarcel] = 120;
			user[playerid2][jtiempito] = strval(elpru);
		}
		else user[playerid2][jTiempoCarcel] = tiempo+60;
	}
	else
	{
		user[playerid2][jBanco] -=multa; d_estado += multa;
		format(string, sizeof(string), "El estado cobró %d$ de multa a tu cuenta bancaria.", multa);
		_Mensaje(playerid2, 5, "0", string);
		if(tiempo >= 2 && tiempo <= 14)
		{
			if (tiempo >= 4)user[playerid2][jEdad]++;
			// apertura cuenta
			new k = gettime(), elpru[30];
			tiempo = (tiempo-2)*3600;
			k += tiempo;
			format(elpru, sizeof(elpru), "%d", k);
			user[playerid2][jTiempoCarcel] = 120;
			user[playerid2][jtiempito] = strval(elpru);
		}
		else user[playerid2][jTiempoCarcel] = tiempo;
	}
	textgame_player(playerid2, "Fuiste arrestado", 5000, 5);
	user[playerid2][jEncarcelado] = 3; user[playerid2][j_uTelefono] = 1;
	user[playerid2][jArrestos] += 1; user[playerid2][jEstrellas] = 0;

	new rand = random(sizeof(_FEDERALp));
	SetPlayerPos(playerid2, _FEDERALp[rand][0], _FEDERALp[rand][1], _FEDERALp[rand][2]);
	CargarObjetos(playerid2);
	SetPlayerInterior(playerid2, 0); user[playerid2][jInterior] = 0;
	SetPlayerVirtualWorld(playerid2, 0); user[playerid2][jVirtualWorld] = 0;
	if (Esposado[playerid2] != 0)
	{
		Esposado[playerid2] = 0;
		RemovePlayerAttachedObject(playerid2, 9);
		SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
	}
	for(new x = 0; x < 10; x++)
	{
		if(InfoObjeto[user[playerid2][jBolsillo][x]][IDArma] > 0)
		{
			user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0;
		}
	}
	for(new x = 0; x < 10; x++)
	{
		user[playerid2][job_PF][x] = user[playerid2][jBolsillo][x];
		user[playerid2][job_PFCant][x] = user[playerid2][jBolsilloCant][x];
		user[playerid2][jBolsillo][x] = 0;
		user[playerid2][jBolsilloCant][x] = 0;
	}
	user[playerid2][job_PF][10] = user[playerid2][jm_Derecha], user[playerid2][job_PFCant][10] = user[playerid2][jm_DerechaCant];
	user[playerid2][job_PF][11] = user[playerid2][jm_Izquierda], user[playerid2][job_PFCant][11] = user[playerid2][jm_IzquierdaCant];
	user[playerid2][jm_Derecha] = 0, user[playerid2][jm_DerechaCant] = 0;
	user[playerid2][jm_Izquierda] = 0, user[playerid2][jm_IzquierdaCant] = 0;
	if (user[playerid2][jDineroPF] == 0)
	{
		user[playerid2][jDineroPF] = ComprobarDineroJ(playerid2);
		DarDineroGC(playerid2, -ComprobarDineroJ(playerid2));
	}
	update_manos(playerid2);
	QuitarEspalda(playerid2);
	characterSave(playerid2);
	if (fianza != 0)
	{
		user[playerid2][jFianza] = fianza;
		format(string, sizeof(string), "Fuiste encarcelado %s - Fianza: $%d.", informe_tiempo(playerid2), user[playerid2][jFianza]);
		_Mensaje(playerid2, 4, "33CCFF", string);
	}
	else
	{
		user[playerid2][jFianza] = 0;
		format(string, sizeof(string), "Fuiste encarcelado %s - Fianza: No disponible.", informe_tiempo(playerid2));
		_Mensaje(playerid2, 4, "33CCFF", string);
	}
	_Mensaje(playerid2, 1, "0", "Todo tu dinero y pertenencias estarán en una caja hasta que culmines el tiempo.");
	return 1;
}
GCMD:arrestar(playerid,  const params[])
{
	new string[128], multa, tiempo, fianza, playerid2, rand;
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "175", "No eres miembro de la PD o SADOC.");
	if (!Esta_Arresto(playerid)) return _Mensaje(playerid, 0, "177", "No estás en el lugar de arresto.");
	if (sscanf(params, "dddd", playerid2, multa, tiempo, fianza)) return _Mensaje(playerid, 3, "0", "/arrestar [id jugador] [multa$] [minutos] [Fianza (no=0 / si=$monto]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (user[playerid2][jEncarcelado] != 0) { _Mensaje(playerid, 0, "174", "Ese jugador ya se encuentra en prisión."); return 1; }
	if (multa < 1 || multa > 5000) { _Mensaje(playerid, 0, "174", "Multa: $1 a $5,000."); return 1; }
	if (tiempo < 1 || tiempo > 240) { _Mensaje(playerid, 0, "174", "Tiempo: 1 a 240 minutos."); return 1; }
	if (fianza < 0 || fianza > 8000) { _Mensaje(playerid, 0, "174", "Fianza: $0 a $8,000."); return 1; }
	if (user[playerid2][jEstrellas] < 1) { _Mensaje(playerid, 0, "174", "El sospechoso debe tener un nivel de búsqueda de al menos una estrella."); return 1; }

	if (user[playerid2][jBanco] < multa)
	{
		_Mensaje(playerid2, 5, "0", "No tienes fondos en tu cuenta bancaria para la multa, aumentaron tu condena por ello.");
		user[playerid2][jTiempoCarcel] = tiempo+45;
		user[playerid2][jtiempito] = 0;
	}
	else
	{
		user[playerid2][jBanco] -=multa; d_estado += multa;
		format(string, sizeof(string), "El estado cobró %d$ de multa a tu cuenta bancaria.", multa);
		_Mensaje(playerid2, 5, "0", string);
		user[playerid2][jTiempoCarcel] = tiempo;
		user[playerid2][jtiempito] = 0;
	}
	textgame_player(playerid2, "Fuiste arrestado", 5000, 5);
	DeletePVar(playerid2, "Congelado");
	rand = random(sizeof(_COMISARIAp));
	SetPlayerPos(playerid2, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2]);
	CargarObjetos(playerid2);
	SetPlayerInterior(playerid2, 5); user[playerid2][jInterior] = 5;
	user[playerid2][jEncarcelado] = 2; user[playerid2][j_uTelefono] = 1;
	user[playerid2][jArrestos] += 1; user[playerid2][jEstrellas] = 0;
	if (Esposado[playerid2] != 0)
	{
		Esposado[playerid2] = 0;
		RemovePlayerAttachedObject(playerid2, 9);
		SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
	}
	for(new x = 0; x < 10; x++) { if(InfoObjeto[user[playerid2][jBolsillo][x]][IDArma] > 0) { user[playerid2][jBolsillo][x] = 0, user[playerid2][jBolsilloCant][x] = 0; } }
	SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
	if (fianza != 0)
	{
		user[playerid2][jFianza] = fianza;
		format(string, sizeof(string), "Fuiste encarcelado %d minutos - Fianza: $%d", user[playerid2][jTiempoCarcel], user[playerid2][jFianza]);
		_Mensaje(playerid2, 4, "33CCFF", string);
	}
	else
	{
		user[playerid2][jFianza] = 0;
		format(string, sizeof(string), "Fuiste encarcelado %d minutos - Fianza: No disponible", user[playerid2][jTiempoCarcel]);
		_Mensaje(playerid2, 4, "33CCFF", string);
	}
	return 1;
}

GCMD:historial(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "0", "ERROR: Debes ser superior a rango 1.");
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/historial [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	new Str[256], Str_[2000], coordsstring2[60], i_ = 0;
	if (user[params[0]][jEstrellas] != 0)
	{
		Formato(Str, "Nivel de búsqueda: {E6B40C}rango %d\n", user[params[0]][jEstrellas]);
		strcat(Str_, Str);
		Formato(Str, "ant_id%d", i_);
		SetPVarInt(playerid, Str, -1);
		i_++;
	}
	for (new i_d = 0; i_d < 10; i_d++)
	{
		if (user[params[0]][jDelito][i_d] != 0)
		{
			Formato(Str, "{90C3D4}n° %d{ffffff} | %s\n", i_d, p_delito[params[0]][i_d]);
			strcat(Str_, Str);
			Formato(Str, "ant_id%d", i_);
			SetPVarInt(playerid, Str, i_d);
			i_++;
		}
	}
	format(coordsstring2, sizeof(coordsstring2), "{b0b0b0}Delitos de %s", nombre_pj(params[0]));
	if (i_ == 0) ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, coordsstring2, "Ese jugador no tiene ningún delito registrado", "Cerrar", "");
	ExPlayerDialog(playerid, D_Historial, DIALOG_STYLE_LIST, coordsstring2, Str_, "Limpiar", "Cerrar");
	SetPVarInt(playerid, "juegador_his", params[0]);
	return 1;
}

GCMD:antecedente(playerid,  const params[]) return cmd_ant(playerid, params);
GCMD:hdelectivo(playerid,  const params[]) return cmd_ant(playerid, params);
GCMD:ant(playerid,  const params[])
{
	new playerid2, reason[64];

	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 1.");

	if (sscanf(params, "ds[64]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/ant [id jugador] [texto]");
	if (strlen(reason) > 32) { _Mensaje(playerid, 4, "b00000", "El antecedente solo puede tener 32 caracteres."); return 1; }

	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	new es_si = 0;
	for (new i_d = 0; i_d < 10; i_d++)
	{
		if (user[playerid2][jDelito][i_d] == 0)
		{
			Colocar_Delito(playerid, playerid2, i_d, reason);
			es_si++;
			i_d = 10;
		}
	}
	if (es_si == 0) _Mensaje(playerid, 4, "b0b0b0", "Ese jugador no puede tener más antecedentes.");
	return 1;
}

Colocar_Delito(playerid, playerid2, slot, razon[64])
{
	new
	string[128],
	tMensaje[129],
	razonsita[80],
	Ano,
	Mes,
	Dia;
	getdate(Ano, Mes, Dia);
	format(razonsita, sizeof(razonsita), "%s [%d/%d/%d]", razon, Dia, Mes, Ano);
	p_delito[playerid2][slot] = razonsita;
	user[playerid2][jDelito][slot] = 1;
	format(string, sizeof(string), "Colocaste un antecedente (%s) a %s.", razon, nombre_pj(playerid2, 0));
	Mensaje_(playerid, -1, string);
	format(string, sizeof(string), "CENTRAL: %s ha puesto un antecedente a %s (%s)", nombre_pj(playerid, 0), nombre_pj(playerid2, 0), razon);
	format(tMensaje, sizeof(tMensaje), "Registros: %s ha puesto un antecedente a %s (%s).", nombre_pj(playerid), nombre_pj(playerid2), razon);
	Log("Registros/Antecedentes.log", tMensaje);
	_MensajeRfac(1, C_COLORRADIO, string);
	return 1;
}

GCMD:su(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (EnServicioPD[playerid] == 0) return _Mensaje(playerid, 0, "166", "No estas en servicio.");
	if (sscanf(params, "ds[64]", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/su [id jugador] [crimen]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	if (Es_Faccion(params[0], 1)) return _Mensaje(playerid, 0, "173", "No puedes acusar a un oficial.");
	if (user[params[0]][jEstrellas] == 6)
	{
		_Mensaje(playerid, 4, "b0b0b0", "Ese jugador alcanzó el máximo de nivel de búsqueda.");
		return 1;
	}
	else
	{
		if (user[params[0]][jEstrellas] < 1) { _MensajeRfac(1, C_COLORRADIO, "CENTRAL: Se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores."); }
		new string[64];
		user[params[0]][jEstrellas]++;
		format(string, sizeof(string), "Añadiste un nivel de búsqueda (%d/6) a %s.", user[params[0]][jEstrellas], nombre_pj(params[0], 0));
		_Mensaje(playerid, 1, "0", string);
	}
	return 1;
}

GCMD:mp(playerid,  const params[]) return cmd_pm(playerid, params);
GCMD:pm(playerid,  const params[])
{
	new string[256], string2[256], mensaje[200];
	if (PrivadosB[playerid] == 1) return _Mensaje(playerid, 0, "472", "Tienes bloqueado el permiso de mandar /mp.");
	if (sscanf(params, "ds[200]", params[0], mensaje)) return _Mensaje(playerid, 3, "0", "/mp [id jugador] [texto]");
	if (!IsPlayerConnectedEx(params[0]) || params[0] == INVALID_PLAYER_ID) { _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado."); return 1; }
	if (playerid == params[0]) return _Mensaje(playerid, 0, "75", "No puedes enviarte mensajes privados a tí mismo.");
	if (user[playerid][jAdmin] == 0)
	{
		if (user[params[0]][jAdmin] == 0)
		{
			if (user[params[0]][j_uMP] == 1) return _Mensaje(playerid, 0, "163", "Ese jugador tiene bloqueado los mensajes privados.");
			if (strcmp(user[params[0]][j_uMP2], "user_none", true) == 0)
			{
				format(string, sizeof(string), "Privado de %s (ID: %d): %s", nombre_pj(playerid), playerid, mensaje);
				SendSplitMessage(params[0], 0xfdfe8bff, string);
				format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(params[0]), params[0], mensaje);
				SendSplitMessage(playerid, 0xfce80cff, string);
				format(string2, sizeof(string2), "MP %s a %s: %s", nombre_pj(playerid), nombre_pj(params[0]), mensaje);
				MensajeMPS(0xFC7500FF, string2);
				return 1;
			}
			else
			{
				if (strcmp(user[params[0]][j_uMP2], nombre_pj(playerid), true) == 0)
				{
					_Mensaje(playerid, 0, "163", "Ese jugador te bloqueo de sus mensajes privados.");
					return 1;
				}
				format(string, sizeof(string), "Privado de %s (ID: %d): %s", nombre_pj(playerid), playerid, mensaje);
				SendSplitMessage(params[0], 0xfdfe8bff, string);
				format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(params[0]), params[0], mensaje);
				SendSplitMessage(playerid, 0xfce80cff, string);
				format(string2, sizeof(string2), "MP %s a %s: %s", nombre_pj(playerid), nombre_pj(params[0]), mensaje);
				MensajeMPS(0xFC7500FF, string2);
				return 1;
			}
		}
		else
		{
			if (user[params[0]][j_uMP] == 1) return _Mensaje(playerid, 0, "163", "Ese jugador tiene bloqueado los mensajes privados.");
			if (strcmp(user[params[0]][j_uMP2], "user_none", true) == 0)
			{
				format(string, sizeof(string), "Privado de %s (ID: %d): %s", nombre_pj(playerid), playerid, mensaje);
				SendSplitMessage(params[0], 0xfdfe8bff, string);
				format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(params[0]), params[0], mensaje);
				SendSplitMessage(playerid, 0xfce80cff, string);
				return 1;
			}
			else
			{
				if (strcmp(user[params[0]][j_uMP2], nombre_pj(playerid), true) == 0)
				{
					_Mensaje(playerid, 0, "163", "Ese jugador te bloqueo de sus mensajes privados.");
					return 1;
				}
				format(string, sizeof(string), "Privado de %s (ID: %d): %s", nombre_pj(playerid), playerid, mensaje);
				SendSplitMessage(params[0], 0xfdfe8bff, string);
				format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(params[0]), params[0], mensaje);
				SendSplitMessage(playerid, 0xfce80cff, string);
				return 1;
			}
		}
	}
	else
	{
		format(string, sizeof(string), "Privado de %s (ID: %d): %s", nombre_pj(playerid), playerid, mensaje);
		SendSplitMessage(params[0], 0xfdfe8bff, string);
		format(string, sizeof(string), "Privado a %s (ID: %d): %s", nombre_pj(params[0]), params[0], mensaje);
		SendSplitMessage(playerid, 0xfce80cff, string);
		return 1;
	}
}

GCMD:guardarservidor(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	GuardarCuentas();
	GuardarUsuarios();
	save_stuff();
	save_incendios();
	save_bindon();
	ActualizarVVeh();
	ActualizarUVeh();
	for (new f = 0; f < MAX_PLANTAS; f++)
	{
		if(InfoMaria[f][sSlot])
		{
			ActualizarMaria(f);
		}
	}
	_MensajeOOC(0xb0b0b0ff, "  Todos los datos del servidor han sido guardados.");
	return 1;
}

GCMD:aguardar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params[0])) return _Mensaje(playerid, 3, "0", "/aguardar [sistema] - (casa - negocio - garaje - familia - puerta)");
	if (strcmp(params[0], "casa", true) == 0)
	{
		for (new idc = 0; idc < MAX_CASAS; idc++)
		{
			if (i_Casa[idc][cEspacio] != 0)
			{
				i_Casa[idc][cEstado] = 0;
				save_Casa(idc);
			}
		}
		_MensajeOOC(0xb0b0b0ff, "  Sistema de casas guardado con éxito.");
	}
	else if (strcmp(params[0], "negocio", true) == 0)
	{
		for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
		{
			if (i_Negocio[nid][nTipo] != 0)
			{
				save_Negocio(nid);
			}
		}
		_MensajeOOC(0xb0b0b0ff, "  Sistema de negocios guardado con éxito.");
	}
	else if (strcmp(params[0], "garaje", true) == 0)
	{
		for (new gid = 0; gid < MAX_GARAJES; gid++)
		{
			if(i_Garaje[gid][gTipo] > 0)
			{
				save_Garaje(gid);
			}
		}
		_MensajeOOC(0xb0b0b0ff, "  Sistema de garajes guardado con éxito.");
	}
	else if (strcmp(params[0], "puerta", true) == 0)
	{
		for (new pid = 1; pid < MAX_PUERTAS; pid++)
		{
			if(i_Puerta[pid][pPos_X] != 0.0)
			{
				save_Puerta(pid, true);
			}
		}
		_MensajeOOC(0xb0b0b0ff, "  Sistema de puertas guardado con éxito.");
	}
	else if (strcmp(params[0], "familia", true) == 0)
	{
		for (new i = 0; i < sizeof(i_Familia); i++)
		{
			ActualizarFamilia(i);
		}
		_MensajeOOC(0xb0b0b0ff, "  Facciones guardadas con éxito.");
	}
	return 1;
}

GCMD:congelar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");

	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/congelar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid2][jAdmin] > user[playerid][jAdmin]) return _Mensaje(playerid, 0, "159", "No puedes congelar a un miembro del staff superior.");

	TogglePlayerControllable(playerid2, 0);
	SetPVarInt(playerid2, "Congelado", 1);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s fue congelado por %s.", nombre_pj(playerid2), nombre_pj(playerid));
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:descongelar(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");

	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/descongelar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	DeletePVar(playerid2, "Congelado");
	TogglePlayerControllable(playerid2, 1);
	ClearAnimations(playerid2);
	SetCameraBehindPlayer(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s fue descongelado por %s.", nombre_pj(playerid2), nombre_pj(playerid));
	if (EnServicioADM[playerid] != 2) MensajeAdmin(string);
	return 1;
}

GCMD:a(playerid,  const params[])
{
	new string[256];
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!isnull(params))
	{
		format(string, sizeof(string), "[%d] %s:{FFFFFF} %s", playerid, user[playerid][jStaff], params);
		MensajeAdmins(0xFFD600FF, string);
		format(string, sizeof(string), "[%s] %s: %s", user[playerid][jStaff], nombre_pj(playerid), params);
		Log("Registros/ChatAdmin.log", string);
	} else _Mensaje(playerid, 3, "0", "/a [texto]");
	return 1;
}

GCMD:presos(playerid)
{
	if (Es_Faccion(playerid, 1, 2))
	{
	    new carcel[32];

		new szNoobs[128];
		foreach(new i: Player) if (user[i][jEncarcelado] == 2 || user[i][jEncarcelado] == 3)
		{
			if (user[i][jEncarcelado] == 2) carcel = "{9B9BFF}Comisaría{b0b0b0}";
			else if (user[i][jEncarcelado] == 3) carcel = "{00c200}Federal{b0b0b0}";
			format(szNoobs, sizeof(szNoobs), "[%d] - Nombre y apellido: %s - %s - Prisión: %s", i, nombre_pj(i, 0), informe_tiempo(i), carcel);
			_Mensaje(playerid, 4, "b0b0b0", szNoobs);
		}
	}
	return 1;
}
GCMD:enprision(playerid) return cmd_enjail(playerid);
GCMD:enjail(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new carcel[32];

	new szNoobs[256];
	foreach(new i: Player) if (user[i][jEncarcelado])
	{
		if (user[i][jEncarcelado] == 1) carcel = "{b00000}OOC{ffffff}";
		else if (user[i][jEncarcelado] == 2) carcel = "{9B9BFF}Comisaría{ffffff}";
		else if (user[i][jEncarcelado] == 3) carcel = "{00c200}Federal{ffffff}";

		if(user[i][jEncarcelado] == 1) format(szNoobs, sizeof(szNoobs), "[%d] %s - Minutos: %d - Prisión: %s - Por: %s - (%s)", i, nombre_pj(i), user[i][jTiempoCarcel], carcel, user[i][jJculpable], user[i][jJrazon]);
		else format(szNoobs, sizeof(szNoobs), "[%d] %s - %s - Prisión: %s", i, nombre_pj(i), informe_tiempo(i), carcel);
		SendSplitMessage(playerid, 0xffffffff, szNoobs);
	}
	return 1;
}
GCMD:nuevos(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	_Mensaje(playerid, 4, "b0b0b0", "  Jugadores menores a 10 horas:");
	new szNoobs[128];
	foreach(new i: Player) if (user[i][j_Horas] < 10)
	{
		if (user[i][jNivel] != -1)
		{
			format(szNoobs, sizeof(szNoobs), "[%d] %s - Horas de juego: {00A2ff}%d{ffffff}.", i, nombre_pj(i), user[i][j_Horas]);
			_Mensaje(playerid, 4, "ffffff", szNoobs);
 		}
	}
	return 1;
}

GCMD:getid(playerid,  const params[]) return cmd_id(playerid, params);
GCMD:id(playerid,  const params[])
{
	new id;
	new string[128];

	if(isnull(params)) return _Mensaje(playerid, 3, "0", "/id [id o nombre]");

	if(IsNumeric(params))
	{
		sscanf(params, "d", id);

		if(!IsPlayerConnected(id)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if(user[id][jNivel] == -1) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (user[playerid][jAdmin] != 0) format(string, sizeof(string), "[%d] %s - Nivel: %d - Ping: %d - username: %s", id, nombre_pj(id), user[id][jNivel], GetPlayerPing(id), username[id]);
		else format(string, sizeof(string), "[%d] %s - Nivel: %d - Ping: %d", id, nombre_pj(id), user[id][jNivel], GetPlayerPing(id));
		SendClientMessage(playerid, 0xCBD5C58C, string);
	}
	else
	{
		if(strlen(params) < 3 || strlen(params) > MAX_PLAYER_NAME)return
		    _Mensaje(playerid, 0, "0", "ERROR: El nombre debe estar entre 3 a 24 caracteres.");

		new count;

		foreach(new i: Player) if(strfind(ReturnName(i), params, true) != -1)
		{
			if(user[i][jNivel] != -1)
			{
				if (user[playerid][jAdmin] != 0) format(string, sizeof(string), "[%d] %s - Nivel: %d - Ping: %d - username: %s", i, nombre_pj(i), user[i][jNivel], GetPlayerPing(i), username[i]);
				else format(string, sizeof(string), "[%d] %s - Nivel: %d - Ping: %d", i, nombre_pj(i), user[i][jNivel], GetPlayerPing(i));
				SendClientMessage(playerid, 0xCBD5C58C, string);
				count++;
			}
		}

		if(!count)return
			_Mensaje(playerid, 0, "0", "No hay ningún usuario con ese nombre conectado.");
	}

	return 1;
}

ReturnName(playerid)
{
    new name[MAX_PLAYER_NAME];

    if(playerid == -1) name = "Vuoto";
    else GetPlayerName(playerid, name, MAX_PLAYER_NAME);

    return name;
}

GCMD:informacion(playerid) return cmd_info(playerid);
GCMD:info(playerid) return cmd_server(playerid);
GCMD:server(playerid)
{
	Mensaje_(playerid, -1, " ");
	Mensaje_(playerid, 0x90C3D4FF, "Twitter:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Instagram:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Fan Page:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Google:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Grupo FB:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Web Site:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Youtube:{ffffff} muy pronto");
	Mensaje_(playerid, 0x90C3D4FF, "Discord:{ffffff} invite.gg/bullworthrp");
	return 1;
}

GCMD:ts(playerid) return cmd_ts3(playerid);
GCMD:ts3(playerid)
{
	Mensaje_(playerid, 0x90C3D4FF, "muy pronto");
	return 1;
}

GCMD:web(playerid) return cmd_foro(playerid);
GCMD:foro(playerid)
{
	Mensaje_(playerid, 0x90C3D4FF, "muy pronto");
	return 1;
}

GCMD:premium(playerid)
{
	Mensaje_(playerid, 0x90C3D4FF, "invite.gg/bullworthrp");
	return 1;
}

GCMD:acciones(playerid) return Menu_ayuda(playerid, 10);
GCMD:animaciones(playerid) return Menu_ayuda(playerid, 10);

GCMD:anuncios(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (Anuncios == 0)
	{
		Anuncios = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el sistema de anuncios.", nombre_pj(playerid));
		_MensajeOOC(0xE00000FF, string);
	}
	else
	{
		Anuncios = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el sistema de anuncios.", nombre_pj(playerid));
		_MensajeOOC(0xE00000FF, string);
	}
	return 1;
}

GCMD:admin_coches2(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (cmd_veh2 == 1)
	{
		cmd_veh2 = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el comando /coches2.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else
	{
		cmd_veh2 = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el comando /coches2.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:dejarfondos(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (ActFondos == 0)
	{
		ActFondos = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el sistema de sacar fondos (Alcaldía).", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else
	{
		ActFondos = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el sistema sacar fondos (Alcaldía).", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:activartest(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (ActTest == 0)
	{
		ActTest = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el test de rol.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else
	{
		ActTest = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el test de rol.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:registro(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (ActRegistro == 0)
	{
		ActRegistro = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el sistema de registro.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	else
	{
		ActRegistro = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el sistema de registro.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	return 1;
}

GCMD:robobanco(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (RobarBanco == 0)
	{
		RobarBanco = 1;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha habilitado el sistema de robo al banco.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	else
	{
		RobarBanco = 0;
		format(string, sizeof(string), "[Administración]{FFFFFF} %s ha deshabilitado el sistema de robo al banco.", nombre_pj(playerid));
		_MensajeOOC(C_UGRP, string);
	}
	return 1;
}

GCMD:ircordenada(playerid,  const params[])
{
	new Float: x,Float: y,Float: z,string[100];
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "fff", x, y, z)) return _Mensaje(playerid, 3, "0", "/ircordenada {ffff00}<X> {0000ff}<Y> {ff0000}<Z>");
	SetPlayerPos(playerid, x, y, z);
	format(string, sizeof(string), "Teleportado a {ffff00}%f, {0000ff}%f, {ff0000}%f", x, y, z);
	_Mensaje(playerid, 1, "0", string);
	return 1;
}

GCMD:saludar(playerid,  const params[])
{
	new playerid2, idsaludo;
	if (sscanf(params, "dd", playerid2, idsaludo)) return _Mensaje(playerid, 3, "0", "/saludar [id jugador] [saludo 0-7]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "132", "No puedes saludarte a ti mismo.");
	if (!CercaDelWeon(2.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (idsaludo < 0 || idsaludo > 7) return _Mensaje(playerid, 3, "0", "/saludar [id jugador] [saludo 0-7]");
	new string[128];
	Saludo_ID[playerid2] = playerid;
	Saludo2_ID[playerid2] = idsaludo;
	format(string, sizeof string, "%s te envía una petición de saludo. (/aceptar)", nombre_pj(playerid, 0));
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

GCMD:besar(playerid,  const params[])
{
	new playerid2, idbeso;
	if (sscanf(params, "dd", playerid2, idbeso)) return _Mensaje(playerid, 3, "0", "/besar [id jugador] [beso 0-1]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "132", "No puedes saludarte a ti mismo.");
	if (!CercaDelWeon(2.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (idbeso < 0 || idbeso > 1) return _Mensaje(playerid, 3, "0", "/besar [id jugador] [beso 0-1]");
	new string[128];
	Beso_ID[playerid2] = playerid;
	Beso2_ID[playerid2] = idbeso;
	format(string, sizeof string, "%s te envía una petición de beso. (/aceptar)", nombre_pj(playerid, 0));
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

GCMD:eject(playerid,  const params[]) return cmd_expulsarveh(playerid, params);
GCMD:expulsarveh(playerid,  const params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) _Mensaje(playerid, 0, "130", "Usted no se encuentra en ningún vehículo.");
	new porno = GetPlayerState(playerid), playerid2;
	if (porno != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/expulsarveh [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid2 == playerid) return _Mensaje(playerid, 0, "127", "No puedes usar este comando contigo.");

	if (!IsPlayerInAnyVehicle(playerid2)) return _Mensaje(playerid, 0, "129", "El jugador no está en un vehículo.");
	if (GetPlayerVehicleID(playerid) == GetPlayerVehicleID(playerid2))
	{
		accion_rol(playerid2, 0, "fue expulsado del vehiculo.");
		RemovePlayerFromVehicle(playerid2);
		DeletePVar(playerid2, "Congelado");
		TogglePlayerControllable(playerid2, 1);
	} else _Mensaje(playerid, 0, "128", "El jugador no está en tu vehículo.");
	return 1;
}

GCMD:borrarauto(playerid)
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "75", "Usted no se encuentra en ningún vehículo.");

	new string[128];
	new carid = GetPlayerVehicleID(playerid);
	DestroyVehicle(carid);
	format(string, sizeof(string), "* Vehiculo [%d] destruido.", carid);
	_Mensaje(playerid, 4, "FF0000", string);
	return 1;
}

GCMD:limpiarant(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiartodo [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	alm(p_delito[playerid2][0], "Ninguno");
	alm(p_delito[playerid2][1], "Ninguno");
	alm(p_delito[playerid2][2], "Ninguno");
	alm(p_delito[playerid2][3], "Ninguno");
	alm(p_delito[playerid2][4], "Ninguno");
	alm(p_delito[playerid2][5], "Ninguno");
	alm(p_delito[playerid2][6], "Ninguno");
	alm(p_delito[playerid2][7], "Ninguno");
	alm(p_delito[playerid2][8], "Ninguno");
	alm(p_delito[playerid2][9], "Ninguno");
	user[playerid2][jDelito][0] = 0;
	user[playerid2][jDelito][1] = 0;
	user[playerid2][jDelito][2] = 0;
	user[playerid2][jDelito][3] = 0;
	user[playerid2][jDelito][4] = 0;
	user[playerid2][jDelito][5] = 0;
	user[playerid2][jDelito][6] = 0;
	user[playerid2][jDelito][7] = 0;
	user[playerid2][jDelito][8] = 0;
	user[playerid2][jDelito][9] = 0;
	user[playerid2][jEstrellas] = 0;
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarant, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}
GCMD:limpiartodo(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiartodo [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	QuitarBolsillos(playerid2);
	QuitarEspalda(playerid2);
	QuitarCinturon(playerid2);
	QuitarManos(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiartodo, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

GCMD:limpiarbol(playerid,  const params[]) return cmd_limpiarbolsillos(playerid, params);
GCMD:limpiarbolsillos(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarbolsillos [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	QuitarBolsillos(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarbolsillos, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}
GCMD:limpiarmanos(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarmanos [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	QuitarManos(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarmanos, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}
GCMD:limpiarct(playerid,  const params[]) return cmd_limpiarcinturon(playerid, params);
GCMD:limpiarcinturon(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarcinturon [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");

	QuitarCinturon(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarcinturon, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

GCMD:bugcasitas(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "FFFFFF", "Casas bugeadas menor de 4,000$");
	for (new i = 0; i < MAX_CASAS; i++)
	{
		if (i_Casa[i][cExteriorX] != 0.0)
		{
			new string[128], cash = i_Casa[i][cPrecio];
			if (cash < 4000)
			{
				format(string, sizeof(string), "Dueño: %s - ID: %d - Precio: %d", i_Casa[i][cComprador], i, cash);
				_Mensaje(playerid, 4, "b0b0b0", string);
			}
		}
	}
	return 1;
}

GCMD:dinerocasa(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "FFFFFF", "Casas con más de 50,000$");
	for (new i = 0; i < MAX_CASAS; i++)
	{
		new string[128], cash = i_Casa[i][cDinero];
		if (cash > 50500)
		{
			format(string, sizeof(string), "Dueño: %s - ID: %d - Dinero: %d", i_Casa[i][cComprador], i, cash);
			_Mensaje(playerid, 4, "b0b0b0", string);
		}
	}
	return 1;
}

GCMD:dineronegocio(playerid)
{
	if (user[playerid][jAdmin] < 1337) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "FFFFFF", "Negocios con más de 100,000$");
	for (new i = 0; i < MAX_NEGOCIOS; i++)
	{
	    new string[128], cash = i_Negocio[i][nDinero];
		if (cash > 100500)
		{
			format(string, sizeof(string), "Dueño: %s - ID: %d - Dinero: %d", i_Negocio[i][nDueno], i, cash);
			_Mensaje(playerid, 4, "b0b0b0", string);
		}
	}
	return 1;
}
GCMD:condinero(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "FFFFFF", "Usuarios con más de 8,500$");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			new string[128], cash = ComprobarDineroJ(i) + user[i][jBanco];
			if (cash > 8500)
			{
				format(string, sizeof(string), " (%d) - %s | Horas: ({FF0000}%d{b0b0b0}) | Dinero: {00A60E}$%d", i, nombre_pj(i), user[i][j_Horas], cash);
				_Mensaje(playerid, 4, "b0b0b0", string);
			}
		}
	}
	return 1;
}
GCMD:limpiarespalda(playerid,  const params[])
{
	new playerid2, string[256];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarespalda [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	QuitarEspalda(playerid2);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /limpiarespalda, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

GCMD:darstat(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "uii", params[0], params[1], params[2]))
	{
		_Mensaje(playerid, 3, "0", "/darstat [id jugador] [opción] [cantidad]");
		_Mensaje(playerid, 1, "0", "1.Nivel - 2.Experiencia - 3.Teléfono - 4.Horas On.");
		_Mensaje(playerid, 1, "0", "5.Trabajo1 - 6. Trabajo2 - 7. Trabajo3 - 8. FD VIP.");
		return _Mensaje(playerid, 1, "0", "9. FMes VIP - 10. jail ic - 11. jail ooc - 12.Fuerza.");
	}
	new string[128];

	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");

	switch (params[1])
	{
		case 1:
		{
			user[params[0]][jNivel] = params[2];
			SetPlayerScore(params[0], user[params[0]][jNivel]);
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el nivel a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 2:
		{
			user[params[0]][jExperiencia] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido la experiencia a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 3:
		{
			user[params[0]][jTelefono] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el numero a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 4:
		{
			user[params[0]][j_Horas] = user[params[0]][j_Horas] + params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s le ha dado [%d] de horas on a %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 5:
		{
			user[params[0]][jTrabajo1] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el trabajo 1 a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 6:
		{
			user[params[0]][jTrabajo2] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el trabajo 2 a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 7:
		{
			user[params[0]][jTrabajo3] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el trabajo 3 a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 8:
		{
			user[params[0]][jD_premium] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el fin de día vip a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 9:
		{
			user[params[0]][jM_premium] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido el fin de mes vip a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 10:
		{
			user[params[0]][jArrestos] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido los arrestos a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 11:
		{
			user[params[0]][jSanciones] = params[2];
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido los jail's a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 12:
		{
			user[params[0]][jFuerza] = params[2]*10;
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha establecido la fuerza a [%d] de %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		case 13:
		{
			user[params[0]][jHambre] = float(params[2]);
			format(string, sizeof(string), "[Administración]{FFFFFF} %s ha dado [%d] de hambre a %s", nombre_pj(playerid), params[2], nombre_pj(params[0]));
			MensajeAdmin(string);
		}
		default: _Mensaje(playerid, 0, "0", "Opción inválida.");
	}
    return 1;
}

GCMD:esposar(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/esposar [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(2.0, playerid, params[0])) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (user[params[0]][jm_Derecha] == 131) return _Mensaje(playerid, 4, "b00000", "No puedes realizar este comando si el sujeto lleva una caja registradora.");

	if (Esposado[params[0]] == 0)
	{
		if (user[params[0]][jEspalda] != 0) return _Mensaje(playerid, 4, "b0b0b0", "El jugador no debe tener nada colgado.");
		if (user[playerid][jm_Derecha] != 73) { _Mensaje(playerid, 0, "9", "Necesitas tener las esposas en el mano derecha, sacalas con /inv."); return 1; }
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "esposa al sospechoso %s.", nombre_pj(params[0], 0));
		accion_rol(playerid, 0, MsgCheckMe);
		textgame_player(params[0], "~r~ESPOSADO", 2500, 3);
		Esposado[params[0]] = 1;
		SetPlayerSpecialAction(params[0], 24);
		user[playerid][jm_DerechaCant] = 0;
	}
	else
	{
		if (user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0) { _Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1; }
		if (user[playerid][jm_Derecha] == 0)
		{
			PonerObjeto(playerid, 1, 73);
			user[playerid][jm_Derecha] = 73, user[playerid][jm_DerechaCant] = 1;
		}
		else if (user[playerid][jm_Izquierda] == 0)
		{
			PonerObjeto(playerid, 2, 73);
			user[playerid][jm_Izquierda] = 73, user[playerid][jm_IzquierdaCant] = 1;
		}
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "desesposa a %s.", nombre_pj(params[0], 0));
		accion_rol(playerid, 0, MsgCheckMe);
		textgame_player(params[0], "~g~LIBRE", 2500, 3);
		Esposado[params[0]] = 0;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
	}
	return 1;
}

GCMD:mercado(playerid)
{
	if (!en_pos(playerid, 3.0, 2119.1084, -2001.5844, 8.0257)) return _Mensaje(playerid, 0, "248", "No estás en el mercado negro.");

	ExPlayerDialog(playerid, D_Mnegro, DIALOG_STYLE_TABLIST_HEADERS, "{D6E1EB}Mercado negro", "Producto\tCosto\n\
	Puño Americano\t$45\n\
	Máscara\t$560\n\
	Ganzúas\t$500\n\
	Cuerda & vendas\t$60\n\
	DNI falso\t$2,000\n\
	Vender accesorios", "Seleccionar", "Cancelar");

	return 1;
}

GCMD:atar(playerid,  const params[])
{
	new playerid2;
	if (VendasYSoga[playerid] == 0) return _Mensaje(playerid, 0, "250", "No tienes una cuerda.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/atar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	if (Atado[playerid2] == 0)
	{
		Atado[playerid2] = 1;
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "agarra una cuerda y ata a %s.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
	}
	else
	{
		Atado[playerid2] = 0;
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "agarra una cuerda y desata a %s.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
		TogglePlayerControllable(playerid2, 1);
	}
	return 1;
}

GCMD:vendar(playerid,  const params[])
{
	new playerid2;
	if (VendasYSoga[playerid] == 0) return _Mensaje(playerid, 0, "252", "No tienes una venda.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vendar [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	if (Vendado[playerid2] == 0)
	{
		Vendado[playerid2] = 1;
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "venda los ojos de %s.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
		SetPlayerCameraPos(playerid2, 0.0, 0.0, 1000);
		SetPlayerCameraLookAt(playerid2, 0.0, 0.0, 5000);
	}
	else
	{
		Vendado[playerid2] = 0;
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "desvenda los ojos de %s.", nombre_pj(playerid2, 0));
		accion_rol(playerid, 0, MsgCheckMe);
		SetCameraBehindPlayer(playerid2);
	}
	return 1;
}

GCMD:entrenar(playerid)
{
	new
		DetectarPressBanca,
		banca
	;
	if (user[playerid][jFuerza]	> 998) return _Mensaje(playerid, 4, "b0b0b0", "Ya posees el máximo de fuerza, ya vete farmero.");
	if (user[playerid][jEncarcelado] == 0)
	{
		if (ComprobarDineroJ(playerid) < 20)
		{
			_Mensaje(playerid, 4, "b0b0b0", "No tienes 20$ para entrenar.");
			return 1;
		}
	}
	if (HaciendoPressBanca[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ya estás haciendo algún tipo de ejercicio.");
	if (user[playerid][jEspalda] != 0) return _Mensaje(playerid, 4, "b0b0b0", "Debes retirar el objeto que posees colgado (/arma tomar).");
	if (user[playerid][jTiempos][2] != 0) return decir_eltiempo(playerid, 2);
	for (new x; x < sizeof(PressBancaPlayerPos); x++)
	{
		if (en_pos(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
		{
			DetectarPressBanca = 1;
			banca = x;
			if (UsandoGym[banca] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Están usando la maquina, espera a que terminen.");
			DestroyObject(PressBancaBarraObjeto[x]);
			break;
		}
	}
	if (DetectarPressBanca == 0) return _Mensaje(playerid, 4, "b0b0b0", "No estás al lado de una máquina para hacer ese ejercicio.");
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "se tumba en la máquina de press banca y comienza a levantar una barra de %dKg.", user[playerid][jFuerza] / 10 * 5);
	accion_rol(playerid, 0, MsgCheckMe);
	HaciendoPressBanca[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	SetPlayerPos(playerid, PressBancaPlayerPos[banca][0], PressBancaPlayerPos[banca][1], PressBancaPlayerPos[banca][2]);
	SetPlayerFacingAngle(playerid, PressBancaPlayerPos[banca][3]);
	ApplyAnimation(playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1);
	Mensaje_(playerid, -1, "Pulsa '{537CDB}clic{FFFFFF}' tantas veces como puedas en 1 minuto o escribe '{537CDB}/Dentrenar{FFFFFF}' para dejar de hacer ejercicio.");
	ColocarObject(playerid, 9, 2913, 6);
	UsandoGym[banca] = 1;
	UsandoGym2[playerid] = banca;
	SetTimerEx("FinEntrenar", 60000, false, "ii", playerid,banca+1);
	if (user[playerid][jEncarcelado] == 0) DarDineroGC(playerid, -20);
	return 1;
}

GCMD:dentrenar(playerid)
{
	if (HaciendoPressBanca[playerid] == 0) return _Mensaje(playerid, 0, "126", "No estás haciendo ningún tipo de ejercicio.");
	new banca;
	for (new x; x < sizeof(PressBancaPlayerPos); x++)
	{
		if (en_pos(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
		{
			banca = x;
			break;
		}
	}
	FinEntrenar(playerid,banca+1);
	return 1;
}

GCMD:placa(playerid,  const params[])
{
	new
		string[128],
		playerid2
	;
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "175", "No eres miembro de la PD.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/placa [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	new
		faccion[64],
		rango[64]
	;
	_infoFaccion(playerid, rango, faccion);
	format(string, sizeof(string), "[%s-%d - %s - %s]", faccion, user[playerid][jSQLID]+72810, nombre_sin(playerid), rango);
	SendClientMessage(playerid2, 0xffff00ff, string);
	return 1;
}

GCMD:documentofalso(playerid,  const params[]) return cmd_dnifalso(playerid, params);
GCMD:dnifalso(playerid,  const params[])
{
	new string[300], playerid2, sex[18], otext[36];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/dnifalso [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[playerid][jf_Dni] == 0) return _Mensaje(playerid, 0, "516", "No posees un documento falso.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	if (user[playerid][jSexo] == 1) sex = "Hombre";
	else if (user[playerid][jSexo] == 2) sex = "Mujer";
	if (user[playerid][jCiudad] == 1) otext = "Los Santos";
	else if (user[playerid][jCiudad] == 2) otext = "none";
	else if (user[playerid][jCiudad] == 3) otext = "none";
	SendClientMessage(playerid2, 0xb0b0b0ff, "|_______DOCUMENTOS_______|");
	format(string, sizeof(string), "Nombre completo: %s - Sexo: %s - Edad: %d", user[playerid][jf_Nombre], sex, user[playerid][jf_Edad]);
	SendClientMessage(playerid2, 0xffffffff, string);
	format(string, sizeof(string), "Nacionalidad: %s - Documento: %d - Estado: Soltero", otext, user[playerid][jf_Dni]);
	SendClientMessage(playerid2, 0xffffffff, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "muestra sus documentos a %s.", nombre_pj(playerid2, 0));
	if(playerid != playerid2) accion_rol(playerid, 0, string);
	return 1;
}

GCMD:documento(playerid,  const params[]) return cmd_dni(playerid, params);
GCMD:dni(playerid,  const params[])
{
	new string[300], playerid2, sex[18], otext[36];
	if (user[playerid][jDocumento] == 0) return _Mensaje(playerid, 0, "1", "No posees un documento, saca uno en el ayuntamiento.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/documento [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	if (user[playerid][jSexo] == 1) sex = "Hombre";
	else if (user[playerid][jSexo] == 2) sex = "Mujer";
	if (user[playerid][jCiudad] == 1) otext = "Los Santos";
	else if (user[playerid][jCiudad] == 2) otext = "none";
	else if (user[playerid][jCiudad] == 3) otext = "none";
	_Mensaje(playerid2, 5, "0", "|_______DOCUMENTOS_______|");
	format(string, sizeof(string), "Nombre completo: %s - Sexo: %s - Edad: %d", nombre_sin(playerid), sex, user[playerid][jEdad]);
	SendClientMessage(playerid2, 0xffffffff, string);
	format(string, sizeof(string), "Nacionalidad: %s - Documento: %d - Estado: %s (%s)", otext, user[playerid][jDocumento], estado_civil(playerid), user[playerid][jCasado]);
	SendClientMessage(playerid2, 0xffffffff, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "muestra sus documentos a %s.", nombre_pj(playerid2, 0));
	if(playerid != playerid2) accion_rol(playerid, 0, string);
	return 1;
}

GCMD:quitardnifalso(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitardni [id jugador]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (user[params[0]][jf_Dni] != 0)
	{
		new string[128];
		user[params[0]][jf_Dni] = 0;
		user[params[0]][jf_Edad] = 0;
		strmid(user[params[0]][jf_Nombre], "Ninguno", 0, strlen("Ninguno"), 12);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /quitardnifalso, Jugador ID: %s[%d].", nombre_pj(playerid), nombre_pj(params[0]), params[0]);
		MensajeAdmin(string);
	} else _Mensaje(playerid, 0, "182", "Ese jugador no tiene un documento falso.");
	return 1;
}

GCMD:licencias(playerid,  const params[])
{
	new car[18], fly[18], boat[18], gun[18], string[300], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/licencias [id jugador]");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	if (user[playerid][jLicencias][0] == 1) gun = "Si";
	else gun = "No";
	if (user[playerid][jLicencias][1] == 1) car = "Si";
	else car = "No";
	if (user[playerid][jLicencias][4] == 1) fly = "Si";
	else fly = "No";
	if (user[playerid][jLicencias][5] == 1) boat = "Si";
	else boat = "No";
	format(string, sizeof(string), "|_______Licencias de: %s / Documento: %d_______|", nombre_sin(playerid), user[playerid][jDocumento]);
	_Mensaje(playerid2, 5, "0", string);
	format(string, sizeof(string), "Conducir: %s - Vuelo: %s", car, fly);
	_Mensaje(playerid2, 1, "0", string);
	format(string, sizeof(string), "Armas: %s - Navegación: %s", gun, boat);
	SendClientMessage(playerid2, 0xffffffff, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "le muestra sus licencias a %s.", nombre_pj(playerid2, 0));
	if(playerid != playerid2) accion_rol(playerid, 0, string);
	return 1;
}

GCMD:purple(playerid)
{
	if(user[playerid][jm_Derecha] != 93 && user[playerid][jm_Izquierda] != 93){ _Mensaje(playerid, 0, "9", "No tienes un sprunk en ninguna mano."); return 1;}
	if(user[playerid][jm_Derecha] != 125 && user[playerid][jm_Izquierda] != 125){ _Mensaje(playerid, 0, "9", "Necesitas una botella de codeine."); return 1;}
	textgame_player(playerid, "~p~Sirviendo...", 5000, 3);
	SetTimerEx("_Purple", 4000, false, "i", playerid);
	return 1;
}
funcion _Purple(playerid)
{
	if(user[playerid][jm_Derecha] != 93 && user[playerid][jm_Izquierda] != 93){ _Mensaje(playerid, 0, "9", "No tienes un sprunk en ninguna mano."); return 1;}
	if(user[playerid][jm_Derecha] != 125 && user[playerid][jm_Izquierda] != 125){ _Mensaje(playerid, 0, "9", "Necesitas una botella de codeine."); return 1;}
	if(user[playerid][jm_Derecha] == 125){user[playerid][jm_DerechaCant] --;}
	else if(user[playerid][jm_Izquierda] == 125){user[playerid][jm_IzquierdaCant] --;}
	switch (user[playerid][jSexo])
	{
		case 1: ApplyAnimation(playerid, "GANGS", "drnkbr_prtl", 4.0, 0, 0, 1, 0, 6000, 1);
		case 2: ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 0, 0, 1, 0, 4000, 1);
	}
	if(user[playerid][jm_Derecha] == 93)
	{
		RemovePlayerAttachedObject(playerid, 7);
		user[playerid][jm_Derecha] = 124;
		user[playerid][jm_DerechaCant] = 5;
        PonerObjeto(playerid, 1, 124);

	}
	else if(user[playerid][jm_Izquierda] == 93)
	{
		RemovePlayerAttachedObject(playerid, 8);
		user[playerid][jm_Izquierda] = 124;
		user[playerid][jm_IzquierdaCant] = 5;
        PonerObjeto(playerid, 2, 124);
	}
	_Mensaje(playerid, 4, "ADC3E7", "Has mezclado las botellas correctamente, usa /beber.");
	return 1;
}

GCMD:parqueo(playerid)
{
	estaen_peaje(playerid, 1, 3);
	return 1;
}
GCMD:peaje(playerid)
{
	estaen_peaje(playerid, 0, d_peaje);
	return 1;
}
GCMD:combustible(playerid,  const params[])
{
	new
		cantidad,
		id = -1
	;
	for (new gas = 0; gas < sizeof(i_Bindon); gas++)
	{
		if (en_pos(playerid, 5.0, i_Bindon[gas][gsPosicionX], i_Bindon[gas][gsPosicionY], i_Bindon[gas][gsPosicionZ]))
		{
		    id = gas;
		}
	}
	if (id == -1) return _Mensaje(playerid, 0, "0", "No estás en una gasolinera.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "0", "Usted no es el conductor del vehículo.");
	if (VehiculoGasolina[playerid] == 1) return _Mensaje(playerid, 0, "0", "Ya te encuentras llenando el tanque de gasolina.");
	if (sscanf(params, "d", cantidad)) return _Mensaje(playerid, 3, "0", "/combustible [litros]"),SendClientMessage(playerid, 0x7593F5FF, "Cada litro 1$, máximo 150 litros.");
	if (cantidad < 1 || cantidad > 175) return _Mensaje(playerid, 0, "0", "Máximo: 175 litros.");
	new
		vehicleid = GetPlayerVehicleID(playerid),
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective,
		price
	;

	if (LSPD_Veh(vehicleid))
	{
		price = 0;
	}
	else price = cantidad;
	
	if (cantidad*2 > ComprobarDineroJ(playerid)) return _Mensaje(playerid, 0, "187", "No posees la cantidad a pagar.");

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return _Mensaje(playerid, 0, "0", "Este vehículo no necesita gasolina.");
	if (engine == VEHICLE_PARAMS_ON) return _Mensaje(playerid, 0, "0", "Debes tener el motor apagado.");
	if (veh_gasolina[vehicleid]+cantidad >= 175) return _Mensaje(playerid, 0, "0", "El tanque de gasolina del vehículo no aguanta más de 175 litros.");

	textgame_player(playerid, "~w~Llenando ~r~tanque...", 10000, 3);
	VehiculoGasolina[playerid] = 1;
	SetTimerEx("_gasolinta", 9000, 0, "dddd", playerid, id, cantidad, price);

	return 1;
}
funcion _gasolinta(playerid, id, cantidad, price)
{
	if (price != 0)
	{
		i_Negocio[i_Bindon[id][gsNegocio]][nDinero] += cantidad*2;
		DarDineroGC(playerid, -cantidad*2);
	}
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	VehiculoGasolina[playerid] = 0;
	veh_gasolina[GetPlayerVehicleID(playerid)] += cantidad;
	_Mensaje(playerid, 4, "00a2ff", "El tanque de gasolina fue llenado con éxito.");
	if (veh_gasolina[GetPlayerVehicleID(playerid)] >= 180) veh_gasolina[GetPlayerVehicleID(playerid)] = 180;
	return 1;
}
GCMD:creargasolinera(playerid,  const params[])
{
	new gsid, id;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "dd", gsid, id)) return _Mensaje(playerid, 3, "0", "/creargasolinera [id libre] [id negocio]");
	if (gsid < 0 || gsid > MAX_GASOLINERAS) return _Mensaje(playerid, 0, "260", "ID de Gasolinera inválida.");
	if (i_Bindon[gsid][gsPosicionX] != 0.0) return _Mensaje(playerid, 0, "261", "Esta ID está siendo utilizada.");

	GetPlayerPos(playerid, i_Bindon[gsid][gsPosicionX], i_Bindon[gsid][gsPosicionY], i_Bindon[gsid][gsPosicionZ]);
	i_Bindon[gsid][gsNegocio] = id;
	save_bindon();
	_Mensaje(playerid, 4, "b0b0b0", " Creado con éxito.");
	return 1;
}
GCMD:borrargasolinera(playerid,  const params[])
{
	new id;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrargasolinera [gasid]");
	if (i_Bindon[id][gsPosicionX] == 0.0) return _Mensaje(playerid, 0, "261", "Esa ID no existe.");
	i_Bindon[id][gsPosicionX] = 0;
	i_Bindon[id][gsPosicionY] = 0;
	i_Bindon[id][gsPosicionZ] = 0;
	i_Bindon[id][gsNegocio] = -1;
	_Mensaje(playerid, 4, "b0b0b0", " Borraste el indicado con éxito.");
	save_bindon();
	return 1;
}

GCMD:emisora(playerid) return cmd_estereo(playerid);
GCMD:emisoras(playerid) return cmd_estereo(playerid);
GCMD:estereo(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");

	new StationsDialog[2500];
	strcat(StationsDialog, "Número\tNombre\tGénero\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{F50000}||\t{F50000}Detener música\t{F50000}||\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}1\t{FFFFFF}54 House\t{00A2FF}Electro\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}2\t{FFFFFF}Top Latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}3\t{FFFFFF}Dubbase.FM\t{00A2FF}Dubstep\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}4\t{FFFFFF}Reggae Hits\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}5\t{FFFFFF}MBradio.FM\t{00A2FF}Reggaeton\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}6\t{FFFFFF}Classical Weta 90.9FM\t{00A2FF}Classic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}7\t{FFFFFF}LOVE TIMES\t{00A2FF}Classic romantic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}8\t{FFFFFF}Soft Rock Cafe\t{00A2FF}Heavy Metal\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}9\t{FFFFFF}HardRadio.com\t{00A2FF}Rock\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}10\t{FFFFFF}Aural Moon\t{00A2FF}Punk\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}11\t{FFFFFF}Idobi Radio\t{00A2FF}Electronic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}12\t{FFFFFF}www.Hot108.com\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}13\t{FFFFFF}Sensacion Peru\t{00A2FF}Pop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}14\t{FFFFFF}DEEGAY RADIO\t{00A2FF}Dance Pop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}15\t{FFFFFF}PaganMetalRadio\t{00A2FF}Extreme Metal\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}16\t{FFFFFF}PulsRadio TRANCE\t{00A2FF}Electronic\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}17\t{FFFFFF}The Trip\t{00A2FF}Music Usa\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}18\t{FFFFFF}Parazitii Club\t{00A2FF}Gangsta Rap\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}19\t{FFFFFF}Amor latino\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}20\t{FFFFFF}Hotmixradio\t{00A2FF}Hip Hop\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}21\t{FFFFFF}RadioHot69\t{00A2FF}Variado\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}22\t{FFFFFF}Radio Hunter\t{00A2FF}Electrónica\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{00C200}23\t{FFFFFF}92.5 The River\t{00A2FF}Alternative\n", sizeof(StationsDialog));
	strcat(StationsDialog, "{F50000}>>>\t{FFFFFF}URL - Internet\t{F50000}<<<", sizeof(StationsDialog));
	ExPlayerDialog(playerid, D_ESTEREO, DIALOG_STYLE_TABLIST_HEADERS, "{00C200}Estéreo", StationsDialog, "Seleccionar", "Cancelar");

	return 1;
}

GCMD:lugares(playerid)
{
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return _Mensaje(playerid, 0, "148","Tienes un checkpoint pendiente, escribe /eliminarcp.");
	if (Granjero[playerid] == 1) return _Mensaje(playerid, 1, "0", "Estás cosechando, termina antes.");
	ExPlayerDialog(playerid, D_LUGARES_4, DIALOG_STYLE_LIST, "{D6E1EB}Lugares", "Locales\nTrabajos\nDeposito de embargos\nAyuntamiento\nBanco MT\nLic. Conducción\nLic. Navegación\nLic. Vuelo", "Seleccionar", "Cancelar");
	return 1;
}

GCMD:boombox(playerid) return cmd_equiposonido(playerid);
GCMD:esonido(playerid) return cmd_equiposonido(playerid);
GCMD:equiposonido(playerid)
{
	if (user[playerid][jBoombox] == 0) return _Mensaje(playerid, 0, "0", "No posees un equipo de sonido, adquiere uno en una tienda electrónica.");
	if (user[playerid][jEncarcelado] != 0) return _Mensaje(playerid, 0, "0", "No puedes usar este comando en prisión.");
	if (i_boox[playerid][BB_obj]) return Mensaje_(playerid, -1, "Escribe {90C3D4}/encender{FFFFFF} para cambiar la emisora o {90C3D4}/requipo{FFFFFF} para recoger tu estéreo.");

	foreach(new i: Player)
	{
		if (i_boox[i][BB_obj])
		{
			if (en_pos(playerid, 30.0, i_boox[i][BB_x], i_boox[i][BB_y], i_boox[i][BB_z]))
			{
				_Mensaje(playerid, 0, "0", "No puedes colocar tu estéreo aquí, se encuentra uno cerca.");
				return 1;
			}
		}
	}

	GetPlayerPos(playerid, i_boox[playerid][BB_x], i_boox[playerid][BB_y], i_boox[playerid][BB_z]);
	i_boox[playerid][BB_obj] = CreateDynamicObject(2226, i_boox[playerid][BB_x]-2.0, i_boox[playerid][BB_y]-1.0, i_boox[playerid][BB_z], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	i_boox[playerid][BB_int] = GetPlayerInterior(playerid);
	i_boox[playerid][BB_vw] = GetPlayerVirtualWorld(playerid);

	EditDynamicObject(playerid, i_boox[playerid][BB_obj]);
	user[playerid][pEditingMode] = 17;
	boombox[playerid] = 35;
	Mensaje_(playerid, 0x90C3D4FF, "Tienes 35 segundos para colocar el objeto.");
	return 1;
}

GCMD:encender(playerid)
{
	if (!i_boox[playerid][BB_obj]) return _Mensaje(playerid, 0, "0", "No has colocado ningún estéreo.");
	if (_Telefono(playerid))
	{
		if (!en_pos(playerid, 30.0, i_boox[playerid][BB_x], i_boox[playerid][BB_y], i_boox[playerid][BB_z])) return _Mensaje(playerid, 0, "0", "No estás en el area de tu estéreo.");
		ExPlayerDialog(playerid, D_BOOMBOX, DIALOG_STYLE_LIST, "{D6E1EB}Estéreo", "{F50000}Detener música{FFFFFF}\nRadios\nURL - Internet", "Continuar", "<<");
	}
	else
	{
		if (!en_pos(playerid, 3.0, i_boox[playerid][BB_x], i_boox[playerid][BB_y], i_boox[playerid][BB_z])) return _Mensaje(playerid, 0, "0", "No estás cerca de tu estéreo.");
		if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return _Mensaje(playerid, 0, "0", "Debes estar agachado.");
		ExPlayerDialog(playerid, D_BOOMBOX, DIALOG_STYLE_LIST, "{D6E1EB}Estéreo", "{F50000}Detener música{FFFFFF}\nRadios\nURL - Internet", "Continuar", "<<");
	}
	return 1;
}

GCMD:requipo(playerid) return cmd_requiposonido(playerid);
GCMD:requiposonido(playerid)
{
	if (!i_boox[playerid][BB_obj]) return _Mensaje(playerid, 0, "0", "No has colocado ningún estéreo.");
	if (!en_pos(playerid, 3.0, i_boox[playerid][BB_x], i_boox[playerid][BB_y], i_boox[playerid][BB_z])) return _Mensaje(playerid, 0, "0", "No estás cerca de tu estéreo.");
	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return _Mensaje(playerid, 0, "0", "Debes estar agachado.");

	foreach(new i: Player)
	{
		if(IsPlayerInDynamicArea(i, i_boox[playerid][BB_area]))
		{
			StopStream(i);
		}
	}
	i_boox[playerid][BB_area] = 0;
	DestroyDynamicObject(i_boox[playerid][BB_obj]);
	DestroyDynamic3DTextLabel(Text3D: i_boox[playerid][BB_label]);
	i_boox[playerid][BB_obj] = 0;
	i_boox[playerid][BB_x] = 0.0;
	i_boox[playerid][BB_y] = 0.0;
	i_boox[playerid][BB_z] = 0.0;
	i_boox[playerid][BB_int] = 0;
	i_boox[playerid][BB_vw] = 0;
	DeletePVar(playerid, "BBStation");

	_Mensaje(playerid, 5, "0", "Recogiste tu equipo de sonido.");
	return 1;
}

GCMD:repararveh(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	new idcar = GetPlayerVehicleID(playerid);
	if (user[playerid][ObjetosRep] == 1)
	{
		textgame_player(playerid,"~w~reparando ~r~fallas...",20000,3);
		user[playerid][ObjetosRep] = 0;
		SetTimerEx("_Fix", 20000, false, "dd", playerid, idcar);
		TogglePlayerControllable(playerid, false);
		_rVeh[playerid] = 1;
	} else _Mensaje(playerid, 0, "126", "No tienes piezas de recambio, compra unos en la gasolinera.");
	return 1;
}

funcion _Fix(playerid, idcar)
{
	TogglePlayerControllable(playerid, true);
	new panels, doors, lights, tires;
	GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
	RepairExVehicle(idcar);
	UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
	SetExVehicleHealth(idcar, 650.0);
	SetExVehicleHealth(idcar, 650.0);
	SetTimerEx("dar_F", 2000, false, "d", playerid);
	return 1;
}

funcion dar_F(playerid) _rVeh[playerid] = 0;

GCMD:llenarveh(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
	new idcar = GetPlayerVehicleID(playerid);
	if(user[playerid][jm_Derecha] != 89 && user[playerid][jm_Izquierda] != 89){ _Mensaje(playerid, 0, "9", "No tienes un bidón de gasolina en ninguna mano."); return 1;}
	accion_rol(playerid, 0, "llenó el tanque de gasolina con un bidón pequeño.");
	if(EstaEnAvion(idcar) || EstaEnBote(idcar)) veh_gasolina[idcar] = 150;
	else veh_gasolina[idcar] = 85;
	if(user[playerid][jm_Derecha] == 89){user[playerid][jm_Derecha] = 0;}
	else if(user[playerid][jm_Izquierda] == 89){user[playerid][jm_Izquierda] = 0;}
	return 1;
}

GCMD:togmanos(playerid)
{
	if (!user[playerid][j_uManos])
	{
		user[playerid][j_uManos] = 1;
		_Mensaje(playerid, 2, "0", "Animación desactivada.");
	}
	else
	{
		user[playerid][j_uManos] = 0;
		_Mensaje(playerid, 2, "0", "Animación activada.");
	}
	return 1;
}

GCMD:togmusica(playerid) return cmd_togmusic(playerid);
GCMD:togmusic(playerid)
{
	if (!user[playerid][j_uAudio])
	{
		user[playerid][j_uAudio] = 1;
		StopAudioStreamForPlayer(playerid);
		_Mensaje(playerid, 2, "0", "Audios desactivados.");
	}
	else
	{
		user[playerid][j_uAudio] = 0;
		StopAudioStreamForPlayer(playerid);
		_Mensaje(playerid, 2, "0", "Audios activados.");
	}
	return 1;
}

GCMD:seguro(playerid) return cmd_lock(playerid);
GCMD:lock(playerid)
{
	new Float: x, Float: y, Float: z;
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if (i_Vehiculo[v][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[v][vID], x, y, z);
		if (en_pos(playerid, 3.0, x, y, z))
		{
			if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
			if (IsPlayerInAnyVehicle(playerid)) // en vehículo
			{
				if (i_Vehiculo[v][vUSeguro] == 0)
				{
					textgame_player(playerid, "~r~Bloqueado", 5000, 1);
					PlayerPlaySoundEx(24600, x, y, z);
					i_Vehiculo[v][vUSeguro] = 1;
					VehSeguro[i_Vehiculo[v][vID]] = 1;
					vehicle_lock_doors(i_Vehiculo[v][vID]);
					vehicleSave(v);
					return 1;
				}
				else if (i_Vehiculo[v][vUSeguro] == 1)
				{
					textgame_player(playerid, "~g~Desbloqueado", 5000, 1);
					PlayerPlaySoundEx(24600, x, y, z);
					i_Vehiculo[v][vUSeguro] = 0;
					VehSeguro[i_Vehiculo[v][vID]] = 0;
					vehicle_unlock_doors(i_Vehiculo[v][vID]);
					vehicleSave(v);
					return 1;
				}
			}
			else // en modo caminar
			{
				if (i_Vehiculo[v][vUSeguro] == 0)
				{
					if(IsVehicleBusy(i_Vehiculo[v][vID])) return _Mensaje(playerid, 0, "0", "ERROR: El vehículo posee jugadores dentro de el.");
					textgame_player(playerid, "~r~Bloqueado", 5000, 1);
					PlayerPlaySoundEx(24600, x, y, z);
					i_Vehiculo[v][vUSeguro] = 1;
					VehSeguro[i_Vehiculo[v][vID]] = 1;
					vehicle_lock_doors(i_Vehiculo[v][vID]);
					vehicleSave(v);
					return 1;
				}
				else if (i_Vehiculo[v][vUSeguro] == 1)
				{
					textgame_player(playerid, "~g~Desbloqueado", 5000, 1);
					PlayerPlaySoundEx(24600, x, y, z);
					i_Vehiculo[v][vUSeguro] = 0;
					VehSeguro[i_Vehiculo[v][vID]] = 0;
					vehicle_unlock_doors(i_Vehiculo[v][vID]);
					vehicleSave(v);
					return 1;
				}
			}
		}
	}
	_Mensaje(playerid, 0, "399", "No estás cerca de un vehiculo.");
	return 1;
}

GCMD:aparcar(playerid) return cmd_estacionar(playerid);
GCMD:estacionar(playerid)
{
	for (new d = 0; d < MAX_VEHICULOS; d++)
	{
		if (IsPlayerInVehicle(playerid, i_Vehiculo[d][vID]))
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
			if (!TieneLlavesVeh(playerid, i_Vehiculo[d][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
			new Float: x,Float: y,Float: z,Float: angle,Float: health;
			GetVehicleHealth(i_Vehiculo[d][vID], health);
			GetVehicleDamageStatus(i_Vehiculo[d][vID], i_Vehiculo[d][vDanioSuperficie], i_Vehiculo[d][vDanioPuertas], i_Vehiculo[d][vDanioLuces], i_Vehiculo[d][vDanioRuedas]);
			i_Vehiculo[d][vVida] = health;
			GetVehiclePos(i_Vehiculo[d][vID], x, y, z);
			GetVehicleZAngle(i_Vehiculo[d][vID], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			CargarCoche(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, i_Vehiculo[d][vID], 0);
			CargarVehMods(d, i_Vehiculo[d][vID]);
			SetExVehicleHealth(i_Vehiculo[d][vID], health);
			accion_rol(playerid, 0, "ha estacionado su vehìculo.");
			_vVelocidad[playerid] = 0.0;
			UpdateVehicleDamageStatus(i_Vehiculo[d][vID], i_Vehiculo[d][vDanioSuperficie], i_Vehiculo[d][vDanioPuertas], i_Vehiculo[d][vDanioLuces], i_Vehiculo[d][vDanioRuedas]);
			vehicleSave(d);
			return 1;
		}
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
	{
		new d = veh_Empresa(e_id, vehicleid);
		if (d != -1)
		{
			if (user[playerid][jEmpresaKey] == e_id)
			{
				if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return _Mensaje(playerid, 0, "126", "Usted no es el conductor del vehículo.");
				new Float: x,Float: y,Float: z,Float: angle,Float: health;
				GetVehicleHealth(InfoVehEmp[e_id][d][vID], health);
				GetVehicleDamageStatus(InfoVehEmp[e_id][d][vID], InfoVehEmp[e_id][d][vDanioSuperficie], InfoVehEmp[e_id][d][vDanioPuertas], InfoVehEmp[e_id][d][vDanioLuces], InfoVehEmp[e_id][d][vDanioRuedas]);
				InfoVehEmp[e_id][d][vVida] = health;
				GetVehiclePos(InfoVehEmp[e_id][d][vID], x, y, z);
				GetVehicleZAngle(InfoVehEmp[e_id][d][vID], angle);
				SurfingCheck(GetPlayerVehicleID(playerid));
				CargarVehEmp(playerid, d, x, y, z, angle, health, e_id);
				PutPlayerInVehicle(playerid, InfoVehEmp[e_id][d][vID], 0);
				SetExVehicleHealth(InfoVehEmp[e_id][d][vID], health);
				accion_rol(playerid, 0, "ha estacionado el vehículo de la empresa.");
				_vVelocidad[playerid] = 0.0;
				UpdateVehicleDamageStatus(InfoVehEmp[e_id][d][vID], InfoVehEmp[e_id][d][vDanioSuperficie], InfoVehEmp[e_id][d][vDanioPuertas], InfoVehEmp[e_id][d][vDanioLuces], InfoVehEmp[e_id][d][vDanioRuedas]);
				save_Empresa(e_id, false, d);
				return 1;
			}
			else return _Mensaje(playerid, 4, "b0b0b0", "Este vehículo no es de tu empresa.");
		}
	}
	_Mensaje(playerid, 4, "b0b0b0", "No estás dentro de un vehículo comprado o de empresa.");
	return 1;
}

funcion CargarVehEmp(playerid, vid, Float: newx, Float: newy, Float: newz, Float: newangle, Float: health, e_id)
{
    if(InfoVehEmp[e_id][vid][vID] != INVALID_PLAYER_VEHICLE_ID)
	{
        new Float: oldx,Float: oldy,Float: oldz,oldfuel;
        oldx = InfoVehEmp[e_id][vid][vPosicionX];
        oldy = InfoVehEmp[e_id][vid][vPosicionY];
        oldz = InfoVehEmp[e_id][vid][vPosicionZ];
        if(oldx == newx && oldy == newy && oldz == newz) return 0;
        InfoVehEmp[e_id][vid][vPosicionX] = newx;
        InfoVehEmp[e_id][vid][vPosicionY] = newy;
        InfoVehEmp[e_id][vid][vPosicionZ] = newz;
        InfoVehEmp[e_id][vid][vPosicionR] = newangle;
		InfoVehEmp[e_id][vid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
		InfoVehEmp[e_id][vid][vInterior] = GetPlayerInterior(playerid);
        oldfuel = veh_gasolina[InfoVehEmp[e_id][vid][vID]];
		random_veh[InfoVehEmp[e_id][vid][vID]] = 0;
        DestroyVehicle(InfoVehEmp[e_id][vid][vID]);
        new Coche = CreateVehicle(InfoVehEmp[e_id][vid][vModelo], InfoVehEmp[e_id][vid][vPosicionX], InfoVehEmp[e_id][vid][vPosicionY], InfoVehEmp[e_id][vid][vPosicionZ],
		InfoVehEmp[e_id][vid][vPosicionR], InfoVehEmp[e_id][vid][vColor_1], InfoVehEmp[e_id][vid][vColor_2], -1);
        random_veh[Coche] = Coche + random(899999);
        SetVehicleVirtualWorld(Coche, InfoVehEmp[e_id][vid][vVirtualWorld]);
        LinkVehicleToInterior(Coche, InfoVehEmp[e_id][vid][vInterior]);
        InfoVehEmp[e_id][vid][vID] = Coche;
        veh_gasolina[Coche] = oldfuel;
        SetExVehicleHealth(Coche, health);
        InfoVehEmp[e_id][vid][vGasolina] = oldfuel;
        SetVehicleMatricula(Coche);
        return 1;
    }
    return 0;
}

funcion CargarCoche(playerid, vid, Float: newx, Float: newy, Float: newz, Float: newangle, Float: health)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(i_Vehiculo[vid][vID] != INVALID_PLAYER_VEHICLE_ID)
	{
		new Float: oldx,Float: oldy,Float: oldz,oldfuel;
		oldx = i_Vehiculo[vid][vPosicionX];
		oldy = i_Vehiculo[vid][vPosicionY];
		oldz = i_Vehiculo[vid][vPosicionZ];
		if(oldx == newx && oldy == newy && oldz == newz) return 0;
		i_Vehiculo[vid][vPosicionX] = newx;
		i_Vehiculo[vid][vPosicionY] = newy;
		i_Vehiculo[vid][vPosicionZ] = newz;
		i_Vehiculo[vid][vPosicionR] = newangle;
		i_Vehiculo[vid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
		i_Vehiculo[vid][vInterior] = GetPlayerInterior(playerid);
		oldfuel = veh_gasolina[i_Vehiculo[vid][vID]];
		ActualizarMods(i_Vehiculo[vid][vID]);
		DestroyVehicle(i_Vehiculo[vid][vID]);
		random_veh[i_Vehiculo[vid][vID]] = 0;
		new Coche = CreateVehicle(i_Vehiculo[vid][vModelo], i_Vehiculo[vid][vPosicionX], i_Vehiculo[vid][vPosicionY], i_Vehiculo[vid][vPosicionZ],
		i_Vehiculo[vid][vPosicionR], i_Vehiculo[vid][vColor_1], i_Vehiculo[vid][vColor_2], -1);
        random_veh[Coche] = Coche + random(899999);
		SetVehicleVirtualWorld(Coche, i_Vehiculo[vid][vVirtualWorld]);
		LinkVehicleToInterior(Coche, i_Vehiculo[vid][vInterior]);
		i_Vehiculo[vid][vID] = Coche;
		veh_gasolina[Coche] = oldfuel;
		SetExVehicleHealth(Coche, health);
		i_Vehiculo[vid][vGasolina] = oldfuel;
		ColocarMods(Coche, vid);
		DarMatricula(Coche, i_Vehiculo[vid][vLlave]);
		return 1;
	}
	return 0; //causa error
}

GCMD:vendercoche(playerid,  const params[]) return cmd_vendermicoche(playerid, params);
GCMD:vendermicoche(playerid,  const params[])
{
	new string[128], playerid2, price;
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if (IsPlayerInVehicle(playerid, i_Vehiculo[vid][vID]))
		{
			if (strcmp(nombre_sin(playerid), i_Vehiculo[vid][vDueno], true) == 0)
			{
				new Float: health, vehiculo = i_Vehiculo[vid][vID];
				GetVehicleHealth(vehiculo, health);
				if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "/vendermicoche [id jugador] [precio]");
				if (price < 1) return _Mensaje(playerid, 0, "384", "Precio debe ser mayor a 0.");
				if (playerid == playerid2) return _Mensaje(playerid, 0, "385", "No puedes venderte el auto a ti mismo.");
				if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
				if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
				if (user[playerid2][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes venderle propiedades a usuarios con menos de dos horas de juego.");
				if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
				if (haciend_[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Te encuentras en una operación, termina primero.");
				if (haciend_[playerid2] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ese jugador se encuentra en una operación, espera a que termine.");
				haciend_[playerid] = 1;
				haciend_[playerid2] = 1;
				_Vehdueno[playerid2] = playerid;
				_VehID[playerid2] = vid;
				_Vehprecio[playerid2] = price;
				format(string, sizeof(string), "* Ofreciste a %s para comprar este %s por $%d.", nombre_pj(playerid2, 0), NombreVehiculo(vehiculo), price);
				_Mensaje(playerid, 4, "33CCFF", string);
				format(string, sizeof(string), "* %s te ha ofrecido su %s por $%d, (/aceptar).", nombre_pj(playerid, 0), NombreVehiculo(vehiculo), price);
				_Mensaje(playerid2, 4, "33CCFF", string);
				return 1;
			} else return _Mensaje(playerid, 0, "580", "No tienes este vehículo a tu nombre.");
		}
	}
	_Mensaje(playerid, 0, "386", "Necesitas estar dentro de un vehiculo de tu propiedad.");
	return 1;
}

GCMD:payday(playerid)
{
	new string[128];
	format(string, sizeof(string), "Faltan exactamente %d minutos para recibir el pago diario.", 60-user[playerid][jPayday]);
	return _Mensaje(playerid, 4, "FFEA5F", string);
}

GCMD:guardarcuenta(playerid)
{
	new string[256];
	if(!CheckTimer(180, user[playerid][jTiempoGuardado]))
	{
		if (JugadorEnSeccion {playerid})
		{
			user[playerid][jInterior] = GetPlayerInterior(playerid);
			user[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
			GetPlayerFacingAngle(playerid, user[playerid][jPosicion_R]);
			characterSave(playerid);
			user[playerid][jTiempoGuardado] = gettime();
			_Mensaje(playerid, 4, "33CCFF", " Has guardado correctamente tu cuenta, puedes volver a guardarla en 3 minutos.");
		}
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(180, user[playerid][jTiempoGuardado]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:help(playerid,  const params[]) return cmd_ayuda(playerid, params);
GCMD:ayuda(playerid,  const params[])
{
	new option[24];
	if(sscanf(params, "s[24]", option)) return Menu_ayuda(playerid, 0);

	if(!strcmp(option, "principal", true)) Menu_ayuda(playerid, 1);
	else if(!strcmp(option, "inventario", true)) Menu_ayuda(playerid, 2);
	else if(!strcmp(option, "canales", true)) Menu_ayuda(playerid, 3);
	else if(!strcmp(option, "vehiculos", true)) Menu_ayuda(playerid, 4);
	else if(!strcmp(option, "faccion", true)) Menu_ayuda(playerid, 5);
	else if(!strcmp(option, "propiedades", true)) Menu_ayuda(playerid, 6);
	else if(!strcmp(option, "empresa", true)) Menu_ayuda(playerid, 7);
	else if(!strcmp(option, "accesorios", true)) Menu_ayuda(playerid, 8);
	else if(!strcmp(option, "trabajo", true)) Menu_ayuda(playerid, 9);
	else if(!strcmp(option, "animaciones", true)) Menu_ayuda(playerid, 10);
	else if(!strcmp(option, "premium", true)) Menu_ayuda(playerid, 11);
	else if(!strcmp(option, "vip", true)) Menu_ayuda(playerid, 11);
	else Menu_ayuda(playerid, 0);
	return 1;
}

stock Menu_ayuda(playerid, id = 0)
{
	switch(id)
	{
		case 0:
		{
			ExPlayerDialog(playerid, D_AYUDA2, DIALOG_STYLE_LIST, "{D6E1EB}Menú de ayuda",
			"- Principal\n\
			- Inventario\n\
			- Canales\n\
			- Vehículos\n\
			- Facción\n\
			- Propiedades\n\
			- Empresa\n\
			- Accesorios\n\
			- Trabajo\n\
			- Animaciones\n\
			- Premium\n", "Seleccionar", "Cancelar");
		}
		case 1: //principal
		{
			new ayuda[]=
			"{cccccc}/stats /admins /gps /id /climpiar /comprar /saldo\n\
			/pagar /entrar /salir /documento /duda /descargar /impuestos\n\
			/plantar /hablar /splanta /consumir /fumar /darcheque /wsp\n\
			/mirilla /avisarpd /hora /peaje /desbug /eliminarcp /dnifalso\n\
			/stereo /estacion /apagarstereo /comprar /revisar /sms /llamar\n\
			/licencias /equiposonido /requiposonido /abrircuenta /colgar";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Principal", ayuda, "Atrás", "Cerrar");
		}
		case 2: //inventario
		{
			new ayuda[]=
			"{cccccc}/ceder /usar /cargar /inv\n\
			/guadar /sacar /cmano /tirar\n\
			/espalda /qespalda /recoger\n\
			/cinturon /guardarct /sacarct\n\
			/arma /descargar /agregar";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Inventario", ayuda, "Atrás", "Cerrar");
		}
		case 3: //canales
		{
			new ayuda[]=
			"{cccccc}/me [Acción]\n\
			/ame [Acción Corta]\n\
			/do [Entorno ó aclaración]\n\
			/g [Gritar]\n\
			/s [Susurrar]\n\
			/sus [Susurro ID]\n\
			/b [Chat OOC]\n\
			/re [Reportar]\n\
			/mp [Mensajes privados]\n\
			/r [Chat facción IC]\n\
			/fac [Chat facción OOC]\n\
			/fam [Chat familia OOC]\n\
			/dop [Hablar en puertas]\n\
			/c [Chat IC (al teléfono)]\n\
			/togsan /togooc /togfac /togfam /togmusic /togmp /togmovil /togradio";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Canales", ayuda, "Atrás", "Cerrar");
		}
		case 4: //vehículos
		{
			new ayuda[]=
			"{cccccc}/coches /coches2 /seguro /motor /capo /maletero /luces\n\
			/llenarveh /vermaletero /estacionar /cinturons /quitartunning /expulsarveh\n\
			/vendercoche /combustible /lockveh (inventario seguro) /vehinv";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Vehículos", ayuda, "Atrás", "Cerrar");
		}
		case 5: //facción
		{
			if(user[playerid][jMiembroFam] != 0)
			{
				new indice_[50], ayuda[]=
				"{1EB032}General:{cccccc} /fam - /fmiembros - /pedido - /gwsp - /swsp - /graffiti\n\
				{1EB032}Líder:{cccccc} /invitar - /editarfam - /togfamilia - /fdarrango - /fexpulsar";
				format(indice_, sizeof(indice_), "Facción: {1A8C97}%s", i_Familia[user[playerid][jMiembroFam]][fLogito]);
				ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, indice_, ayuda, "Atrás", "Cerrar");
				return 1;
			}
			if(Es_Faccion(playerid, 1))
			{
				new ayuda[]=
				"{cccccc}/bp /ref /noref /palcohol /optiwand /cachear /computador /destruir\n\
				/quitarcables /darlicencia /ram /verarmario /callsign /sct /ct\n\
				/reanimar /m /destruirplanta /miranda /bar /qb /qbs /pinchos\n\
				/spinchos /qpinchos /sirena /quitar /detener /arrestar /arrestarf\n\
				/historial /antecedente /su /presos /esposar /pespalda /gct\n\
				/mascarapd /multar /embargar /enganchar /desnenganchar /dejarmulta";
				ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}LSPD", ayuda, "Atrás", "Cerrar");
            }
			else if(Es_Faccion(playerid, 2))
			{
				new ayuda[]=
				"{cccccc}/taclear /altavozpf /palcohol /cachear /computador\n\
				/quitarcables /callsign /reanimar /esposar /detener\n\
				/pespalda /m /su /presos /sirena /arrestar /arrestarf";
				ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}SADOC", ayuda, "Atrás", "Cerrar");
            }
			else if(Es_Faccion(playerid, 3))
			{
                new ayuda[]=
                "{cccccc}/entrevista /apgarage /equipo /directo /miembros\n\
                /enservicio /conectar /desconectar /r /maleterover\n\
				/musicacnn /transmisionmusica /sfondos /dfondos";
                ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}Network", ayuda, "Atrás", "Cerrar");
            }
			else if(Es_Faccion(playerid, 4))
			{
                new ayuda[]=
                "{cccccc}/gob /impuesto /sfondos /dfondos /equipo\n\
                /r /d /servicio /miembros /maleterover /preciopeaje";
                ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}Alcaldía", ayuda, "Atrás", "Cerrar");
            }
			else if(Es_Faccion(playerid, 5))
			{
                new ayuda[]=
                "{cccccc}/callsign /apagarincendio /miembros /gob /r /d\n\
                /curar /bar /qb/m /servicio /reanimar /equipo /ram\n\
                /uniformefd /detener /verincendios /maleterover";
                ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}Emergencias", ayuda, "Atrás", "Cerrar");
			}
		}
		case 6: //propiedades
		{
			new no_existe = 0, _dialog1[1500];

			if(user[playerid][jCasaKey] != INVALID_CASA_ID || user[playerid][jCasaKey2] != INVALID_CASA_ID || user[playerid][jCasaLlaves] != INVALID_CASA_ID || user[playerid][j2CasaLlaves] != INVALID_CASA_ID)
			{
			    no_existe++;
				strcat(_dialog1, "{00c200}CASA:\n\
				{cccccc}/casa /puerta /muebles /cseguro /armario /vendercasa /gpos1 /gpos2\n\
				/entrarg /salirg /gseguro /darllaves /quitarllaves /tirarllaves\n\n");
			}
			if(user[playerid][jNegocioKey] != INVALID_NEGOCIO_ID || user[playerid][jNegocioKey2] != INVALID_NEGOCIO_ID || user[playerid][jNegocioLlaves] != INVALID_NEGOCIO_ID)
			{
			    no_existe++;
				strcat(_dialog1, "{00a2ff}NEGOCIO:\n\
				{cccccc}/negocio /muebles /vendernegocio(2)\n\
				/darllaves /quitarllaves /nseguro\n\n");
			}
			if(user[playerid][jAlquiler] != INVALID_CASA_ID)
			{
			    no_existe++;
				strcat(_dialog1, "{90C3D4}ALQUILER:\n\
				{cccccc}/alquiler /cseguro /desalquilar\n\n");
			}
			if (no_existe == 0) _Mensaje(playerid, 5, "0", "No dispones de ninguna propiedad.");
			else ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Propiedades", _dialog1, "Atrás", "Cerrar");
		}
		case 7: //empresas
		{
			if (user[playerid][jEmpresaKey] == -1 && user[playerid][jEmpresaLlaves] == -1 && user[playerid][jContrato] == -1) return _Mensaje(playerid, 0, "580", "No tienes una empresa o no trabajas para una.");
			new _dialog1[1500];
			strcat(_dialog1,
			"{00c200}GENERAL:\n\
			{cccccc}/atendert /eanuncio /motor\n\n\
			{ffff00}REPARTOS:\n\
			{cccccc}/repartos /repartosbot /mercancia\n\n\
			{00a2ff}MECÁNICA:\n\
			{cccccc}/reparar /colorcoche /paintcoche\n\
			/tunear /gasolina /vertuneo /precios\n\n\
			{00A04C}DUEÑO:\n\
			{cccccc}/empresa /eseguro /ecoches /comprarcoches /darempleo\n\
			/infoempresa /salirempleo /muebles /venderempresa");
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Empresa", _dialog1, "Atrás", "Cerrar");
		}
        case 8: //accesorios
		{
			new ayuda[]=
			"{cccccc}/accesorios /poneraccesorios /quitaraccesorios /poneracc [0-4 ranura]";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "Facción: {1A8C97}Accesorios", ayuda, "Atrás", "Cerrar");
		}
		case 9: //trabajos
		{
			switch(user[playerid][jTrabajo1])
			{
				case 1: Mensaje_(playerid, 0xe7d800ff, "Carguero:{ffffff} /icargar /dcargar /habilidad /mejorar");
				case 2: Mensaje_(playerid, 0xe7d800ff, "Delincuente:{ffffff} /delincuente /hurtar /cachear /robarcaja /robarlocal");
                case 3: Mensaje_(playerid, 0xe7d800ff, "Pescador:{ffffff} /pescar /puntos /venderpeces/barco /arpon /puerto /habilidad /mejorar /car pescador");
				case 4: Mensaje_(playerid, 0xe7d800ff, "Leñador:{ffffff} /talar");
				case 5: Mensaje_(playerid, 0xe7d800ff, "Ladrón de coches:{ffffff} /delincuente /pedido /fseguro /puente /inforobo");
				case 6: Mensaje_(playerid, 0xe7d800ff, "Granjero:{ffffff} /cosechar /dcosechar /vendercosecha /habilidad /mejorar /car granjero");
				case 10: Mensaje_(playerid, 0xe7d800ff, "Carpintero:{ffffff} /imueble /dmueble /habilidad /mejorar");
			}
			switch(user[playerid][jTrabajo2])
			{
				case 1: Mensaje_(playerid, 0xe7d800ff, "Carguero:{ffffff} /icargar /dcargar /habilidad /mejorar");
				case 2: Mensaje_(playerid, 0xe7d800ff, "Delincuente:{ffffff} /delincuente /hurtar /cachear /robarcaja /robarlocal");
                case 3: Mensaje_(playerid, 0xe7d800ff, "Pescador:{ffffff} /pescar /puntos /venderpeces /barco /arpon /puerto /habilidad /mejorar /car pescador");
				case 4: Mensaje_(playerid, 0xe7d800ff, "Leñador:{ffffff} /talar");
				case 5: Mensaje_(playerid, 0xe7d800ff, "Ladrón de coches:{ffffff} /delincuente /pedido /fseguro /puente /inforobo");
				case 6: Mensaje_(playerid, 0xe7d800ff, "Granjero:{ffffff} /cosechar /dcosechar /vendercosecha /habilidad /mejorar /car granjero");
				case 10: Mensaje_(playerid, 0xe7d800ff, "Carpintero:{ffffff} /imueble /dmueble /habilidad /mejorar");
			}
			switch(user[playerid][jTrabajo3])
			{
				case 1: Mensaje_(playerid, 0xe7d800ff, "Carguero:{ffffff} /icargar /dcargar /habilidad /mejorar");
				case 2: Mensaje_(playerid, 0xe7d800ff, "Delincuente:{ffffff} /delincuente /hurtar /cachear /robarcaja /robarlocal");
                case 3: Mensaje_(playerid, 0xe7d800ff, "Pescador:{ffffff} /pescar /puntos /venderpeces /barco /arpon /puerto /habilidad /mejorar /car pescador");
				case 4: Mensaje_(playerid, 0xe7d800ff, "Leñador:{ffffff} /talar");
				case 5: Mensaje_(playerid, 0xe7d800ff, "Ladrón de coches:{ffffff} /delincuente /pedido /fseguro /puente /inforobo");
				case 6: Mensaje_(playerid, 0xe7d800ff, "Granjero:{ffffff} /cosechar /dcosechar /vendercosecha /habilidad /mejorar /car granjero");
				case 10: Mensaje_(playerid, 0xe7d800ff, "Carpintero:{ffffff} /imueble /dmueble /habilidad /mejorar");
			}
		}
		case 10: //animaciones
		{
			new danimaccion[3000];
			strcat(danimaccion,"{cccccc}/danzar - /bebido - /movil - /cmovil - /bomba - /apuntar - /dormir\n");
			strcat(danimaccion,"/adios - /saludar - /trato - /crack - /fumando - /gro - /hablando - /taichi\n");
			strcat(danimaccion,"/caer - /reir - /tumbarse - /vomitar - /comiendo - /herido - /medico - /oralsex\n");
			strcat(danimaccion,"/muerto - /brazos - /pandillero - /taxi - /trafico - /golpeado - /besar - /boxear\n");
			strcat(danimaccion,"/espada /policia  /tortazo - /rodar - /cacheado - /bate - /gritando - /facepalm\n");
			strcat(danimaccion,"/animar - /esposado - /lanzar - /basket - /cansado - /saltovital - /pelea - /depie\n");
			strcat(danimaccion,"/rascarse - /apoyarse - /correr - /strip - /bailar - /asientosexi - /spray\n");
			strcat(danimaccion,"/rifle - /mecanico - /carga - /consola - /barandilla - /llorar - /cruzarbrazos\n");
			strcat(danimaccion,"/discutir /camara  /bofetada - /billar - /dedo - /mear - /asco - /no - /si - /fokear\n");
			strcat(danimaccion,"/cansarme - /asiento - /pararme - /irsecortao - /comerciar - /echarme - /cubrirme\n");
			strcat(danimaccion,"/coche - /agonizar - /levantarme - /mmm - /paja /oficinaanim /dildosex - /oralsexcar\n");
			ExPlayerDialog(playerid,D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Animaciones", danimaccion, "Atrás", "Cerrar");
		}
		case 11: //premium
		{
			if(user[playerid][jPremium] == 0) return _Mensaje(playerid, 0, "207", "No eres usuario premium.");
			new ayuda[]=
			"{cccccc}/casillero /vip /prendas /togvip /vmiembros";
			ExPlayerDialog(playerid, D_AYUDA, DIALOG_STYLE_MSGBOX, "{ffffff}Ayuda: {6a98e2}Premium", ayuda, "Atrás", "Cerrar");
		}
	}
	return 1;
}

GCMD:creditos(playerid)
{
	SendClientMessage(playerid, 0xCB2700FF, "Gamemode elaborado por edinsonwalker (regular).");
	SendClientMessage(playerid, 0xCB2700FF, "Adaptación a Bullworth por bish0p (zbishop).");
	SendClientMessage(playerid, C_VIP, "Reimplemetanción a open.mp por 1berkeley (github.com/stley)");
	return 1;
}

GCMD:darcheque(playerid,  const params[])
{
	new money, player, text[128];
	if (user[playerid][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes usar el comando debido a tu restricción de dos horas de juego.");
	if (sscanf(params, "ud", player, money)) return _Mensaje(playerid, 3, "0", "/darcheque [id jugador] [Monto]");
	if (money > user[playerid][jBanco] || money < 1) return _Mensaje(playerid, 0, "12", "No tienes suficientes fondos en el banco para hacer este cheque.");
	if (player == playerid) return _Mensaje(playerid, 0, "12", "No puedes darte un cheque tu mismo.");
	if (!CercaDelWeon(4.0, playerid, player)) return _Mensaje(playerid, 0, "12", "Estás lejos del jugador.");
	if (Spectando[player] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	user[playerid][jBanco] -= money;
	user[player][jCheques] += money;
	format(text, sizeof(text), "* Hiciste un cheque de $%d para %s, se resto a tu cuenta bancaria.", money, nombre_pj(player, 0));
	_Mensaje(playerid, 4, "33CCFF", text);
	format(text, sizeof(text), "* %s te hizó un cheque de $%d y lo cobrarás en tu próximo pago diario.", nombre_pj(playerid, 0), money);
	_Mensaje(player, 4, "33CCFF", text);
	format(text, sizeof(text), "%s hizó un cheque de $%d a %s.", nombre_pj(playerid), money, nombre_pj(player));
	Log("Registros/Cheques.log", text);
	return 1;
}

GCMD:cuenta(playerid) return cmd_stats(playerid);
GCMD:stats(playerid)
{
	ExPlayerDialog(playerid, D_CUENTA, DIALOG_STYLE_LIST, "{D6E1EB}Estadísticas", "{ffffff}General\nCasas\nNegocios\nVehiculos\nLlaves prestadas\nConfigurar cuenta", "Seleccionar", "Cancelar");
	return 1;
}

GCMD:gps(playerid)
{
	if (!_Telefono(playerid)){_Mensaje(playerid, 0, "9","No tienes un teléfono en ninguna mano."); return 1;}
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return _Mensaje(playerid, 1, "0","Posees un checkpoint pendiente, escribe /eliminarcp.");
	if (Granjero[playerid] == 1) return _Mensaje(playerid, 0, "0", "Estás cosechando, termina antes.");
	ExPlayerDialog(playerid, D_GPS, DIALOG_STYLE_LIST, "{D6E1EB}Sistema de 'GPS'", "{FFFFFF}Negocios\nTrabajos\nCentrales\nConcesionarias", "Seleccionar", "Cancelar");
	return 1;
}

GCMD:stereo(playerid)
{
	new Float: x,Float: y,Float: z;
	for (new d = 0; d < MAX_VEHICULOS; d++)
	{
		if (i_Vehiculo[d][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[d][vID], x, y, z);
		if (en_pos(playerid, 5.0, x, y, z))
		{
			if (i_Vehiculo[d][vStereo] > 0)
			{
				if (GetVehicleModel(i_Vehiculo[d][vID]) == 481 || GetVehicleModel(i_Vehiculo[d][vID]) == 509) return _Mensaje(playerid, 0, "396", "Ese vehiculo no tiene maletero.");
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(i_Vehiculo[d][vID], engine, lights, alarm, doors, bonnet, boot, objective);
				if (boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return Mensaje_(playerid, -1, "Necesitas tener el maletero abierto! ({00C200}/maletero{FFFFFF})");
				if (engine == VEHICLE_PARAMS_ON) return _Mensaje(playerid, 1, "0", "Necesitas tener el motor apagado.");
				foreach(new i: Player)
				{
					if (GetPVarType(i, "AreaVehPos"))
					{
						if (en_pos(playerid, 65.0, GetPVarFloat(i, "AreaVehPosX"), GetPVarFloat(i, "AreaVehPosY"), GetPVarFloat(i, "AreaVehPosZ")))
						{
							_Mensaje(playerid, 3, "0", "Escribe '/estacion', no funciona ya que hay otro stereo encendido cerca.");
							return 1;
						}
					}
				}
				SetPVarInt(playerid, "AreaVehPos", 1);
				SetPVarFloat(playerid, "AreaVehPosX", x);
				SetPVarFloat(playerid, "AreaVehPosY", y);
				SetPVarFloat(playerid, "AreaVehPosZ", z);
				SetPVarInt(playerid, "AreaVehMus", CreateDynamicSphere(GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ"), 45.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
				SetPVarInt(playerid, "AreaVehPosInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "AreaVehPosVW", GetPlayerVirtualWorld(playerid));
				SetPVarInt(playerid, "AreaVehID", i_Vehiculo[d][vID]);
				accion_rol(playerid, 0, "encendió el stereo del vehículo.");
				return 1;
			}
			_Mensaje(playerid, 0, "408", "Usted no tiene un stereo instalado en su vehiculo compra uno en la tienda electronica.");
			return 1;
		}
	}
	_Mensaje(playerid, 0, "399", "No estás cerca de un vehiculo tuyo.");
	return 1;
}

GCMD:estacion(playerid)
{
	if (GetPVarType(playerid, "AreaVehPos"))
	{
		if (en_pos(playerid, 3.0, GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ")))
		{
			ExPlayerDialog(playerid, D_MusiCar, DIALOG_STYLE_LIST, "{D6E1EB}Stereo - Selecciona:", "{F50000}Detener música{FFFFFF}\nRadios\nInsertar URL", "Seleccionar", "Cancelar");
		} else return _Mensaje(playerid, 0, "399", "No estás cerca de un vehiculo tuyo.");
	} else _Mensaje(playerid, 0, "409", "No has encendido el stereo o hay otro stereo encendido cercano.");
	return 1;
}

GCMD:apagarstereo(playerid)
{
	new Float: xc,Float: yc,Float: zc;
	for (new d = 0; d < MAX_VEHICULOS; d++)
	{
		if (i_Vehiculo[d][vID] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(i_Vehiculo[d][vID], xc, yc, zc);
		if (en_pos(playerid, 3.0, xc, yc, zc))
		{
			if (i_Vehiculo[d][vStereo] > 0)
			{
				if (GetPVarType(playerid, "AreaVehPos"))
				{
					DeletePVar(playerid, "AreaVehPos");
					DeletePVar(playerid, "AreaVehAud");
					DeletePVar(playerid, "AreaVehPosLabel");
					DeletePVar(playerid, "AreaVehPosX");
					DeletePVar(playerid, "AreaVehPosY");
					DeletePVar(playerid, "AreaVehPosZ");
					DeletePVar(playerid, "AreaVehPosInt");
					DeletePVar(playerid, "AreaVehPosVW");
					DeletePVar(playerid, "AreaVehID");
					if (GetPVarType(playerid, "AreaVehMus"))
					{
						foreach(new i: Player)
						{
							if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
							{
								PararMVeh(i);
							}
						}
						DeletePVar(playerid, "AreaVehMus");
					}
					_Mensaje(playerid, 1, "0", "Apagaste tu stereo.");
				}
				else
				{
					foreach(new i: Player)
					{
						if (GetPVarType(i, "AreaVehPos"))
						{
							if (GetPVarInt(i, "AreaVehPosVW") == GetPlayerVirtualWorld(playerid) && GetPVarInt(i, "AreaVehPosInt") == GetPlayerInterior(playerid) && en_pos(playerid, 5.0, GetPVarFloat(i, "AreaVehPosX"), GetPVarFloat(i, "AreaVehPosY"), GetPVarFloat(i, "AreaVehPosZ")))
							{
								DeletePVar(i, "AreaVehPos");
								DeletePVar(i, "AreaVehAud");
								DeletePVar(i, "AreaVehPosX");
								DeletePVar(i, "AreaVehPosY");
								DeletePVar(i, "AreaVehPosZ");
								DeletePVar(i, "AreaVehPosInt");
								DeletePVar(i, "AreaVehPosVW");
								DeletePVar(i, "AreaVehID");
								if (GetPVarType(i, "AreaVehMus"))
								{
									for (new x = 0; x < MAX_PLAYERS; x++)
									{
										if (IsPlayerInDynamicArea(x, GetPVarInt(x, "AreaVehMus")))
										{
											PararMVeh(x);
										}
									}
									DeletePVar(i, "AreaVehMus");
								}
								return 1;
							}
						}
					}
					_Mensaje(playerid, 0, "409", "No has prendido tu stereo o hay otro auto con stereo encendido muy cerca.");
				}
				return 1;
			}
			_Mensaje(playerid, 0, "408", "Usted no tiene un stereo instalado en su vehiculo compra uno en la Tienda Electronica.");
			return 1;
		}
	}
	_Mensaje(playerid, 0, "399", "No estás cerca de un vehiculo tuyo.");
	return 1;
}

GCMD:quitartunning(playerid)
{
	new modList[512], string[128], count = 0;
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if (IsPlayerInVehicle(playerid, i_Vehiculo[v][vID]))
		{
			if (!TieneLlavesVeh(playerid, i_Vehiculo[v][vID])) { _Mensaje(playerid, 0, "126", "No tienes las llaves de este vehículo."); return 1;}
			new vehiculo = i_Vehiculo[v][vID];
			for (new f = 0; f < MAX_MODVEHICULOS; f++)
			{
				if (GetVehicleComponentInSlot(vehiculo, f) != 0)
				{
					if (f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, PartesVehiculo(f), PartesNombres(GetVehicleComponentInSlot(vehiculo, f)));
					} else format(modList, sizeof(modList), "%s\n%s", modList, PartesVehiculo(f));
					format(string, sizeof(string), "partList%d", count);
					SetPVarInt(playerid, string, GetVehicleComponentInSlot(vehiculo, f));
					count++;
				}
			}
			if (count == 0) return _Mensaje(playerid, 0, "402", "Este vehiculo no tiene ninguna modificación.");
			format(modList, sizeof(modList), "%s\nTodo", modList);
			format(string, sizeof(string), "partList%d", count);
			SetPVarInt(playerid, string, 999);
			count++;
			SetPVarInt(playerid, "modCount", count);
			ExPlayerDialog(playerid, D_QUITARTUNNING, DIALOG_STYLE_LIST, "{D6E1EB}Partes", modList, "Seleccionar", "Cancelar");
			return 1;
		}
	}
	return 1;
}

GCMD:cerrarpeajes(playerid) return cmd_cpeaje(playerid);
GCMD:cpeaje(playerid)
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	if (user[playerid][jRango] < 1) return _Mensaje(playerid, 0, "418", "ERROR: Debes ser superior a rango 1.");
	new info[256];
	if(cierre_p == 0)
	{
		format(info, sizeof(info), "** [LSPD | ID: %d]: %s solicitó el cierre de los peajes.", playerid, nombre_pj(playerid, 0));
		_MensajeRfac(1, 0xff6347ff, info);
        cierre_p = 1;
        return 1;
	}
	if(cierre_p == 1)
	{
		format(info, sizeof(info), "** [LSPD | ID: %d]: %s solicitó abrir los peajes.", playerid, nombre_pj(playerid, 0));
		_MensajeRfac(1, 0xff6347ff, info);
        cierre_p = 0;
        return 1;
	}
	return 1;
}

GCMD:refuerzos(playerid,  const params[]) return cmd_bk(playerid, params);
GCMD:ref(playerid,  const params[]) return cmd_bk(playerid, params);
GCMD:bk(playerid,  const params[])
{
	if (SolicitaRefuerzos[playerid] == 1 || BotonPanico[playerid]) return _Mensaje(playerid, 0, "229", "Ya tienes un pedido de ayuda.");
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "165", "No formas parte de la Ley.");
	new slotid;
	if (sscanf(params, "d", slotid)) return _Mensaje(playerid, 3, "0", "/ref [tipo] (1: Azul - 2: Amarilllo)");
	if (slotid < 1 || slotid > 2) return SendClientMessage(playerid, 0xFF6347AA, "Error de id, intenta entre 1 - 2.");
	tipo_ref[playerid] = slotid;
	new Float: px, Float: py, Float: pz, string[128];
	GetPlayerPos(playerid, px, py, pz);
	SolicitaRefuerzos[playerid] = 1;
	format(string, sizeof(string), "CENTRAL: A todas las unidades, el oficial (%s) requiere apoyo en su posición.", nombre_pj(playerid, 0));
	_MensajeRfac(1, C_COLORRADIO, string);
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (Es_Faccion(i, 1) && EnServicioPD[i] == 1)
			{
				SetPVarInt(i, "EnCheckPoint", 5);
				if (slotid == 1) SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
				else if (slotid == 2) SetPlayerMarkerForPlayer(i, playerid, 0xFFFF00FF);
			}
		}
	}
	_Mensaje(playerid, 4, "b0b0b0", "/noref, para cancelar los refuerzos.");
	return 1;
}

GCMD:verincendios(playerid)
{
	if (!Es_Faccion(playerid, 5)) return _Mensaje(playerid, 0, "519", "No formas parte de LSFD.");
	LIncendios(playerid);
	return 1;
}

GCMD:crearincendio(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/crearincendio [CASA: 0, NEGOCIO: 1], ID[CASA/NEGOCIO]");
	new nextFire = FuegoSiguiente(), stringFormat[144];
	if (nextFire == -1) return _Mensaje(playerid, 0, "138", "Se ha alcanzado el número máximo de incendios.");
	if (params[0] == 0)
	{
		if(!i_Casa[params[1]][cEspacio]) return _Mensaje(playerid, 0, "138", "ID Invalida.");
		format(stringFormat, sizeof(stringFormat), "Has creado un incendio con ID[%i] en la casa ID[%i]", nextFire, params[1]);
		_Mensaje(playerid, 2, "0", stringFormat);
		format(stringFormat, sizeof(stringFormat), "[Administración]{FFFFFF} %s utilizó /Crearincendio.", nombre_pj(playerid));
		MensajeAdmin(stringFormat);
		CrearIncendioP(params[1], params[0]);
		return 1;
	}
	if (params[0] == 1)
	{
		if(!i_Negocio[params[1]][nTipo]) return _Mensaje(playerid, 0, "138", "ID Invalida.");
		format(stringFormat, sizeof(stringFormat), "Has creado un incendio con ID[%i] en el negocio ID[%i]", nextFire, params[1]);
		_Mensaje(playerid, 2, "0", stringFormat);
		format(stringFormat, sizeof(stringFormat), "[Administración]{FFFFFF} %s utilizó /Crearincendio.", nombre_pj(playerid));
		MensajeAdmin(stringFormat);
		CrearIncendioP(params[1], params[0]);
		return 1;
	}
	_Mensaje(playerid, 3, "0", "/crearincendio [CASA: 0, NEGOCIO: 1], ID[CASA/NEGOCIO]");
	return 1;
}

GCMD:incendios(playerid)
{
	new string[128];
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	ListaIncendios(playerid);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /Incendios.", nombre_pj(playerid));
	MensajeAdmin(string);
	return 1;
}

GCMD:guardar(playerid)
{
	if(user[playerid][jm_Derecha] == 0) G_Bol(playerid, 2);
	else G_Bol(playerid, 1);
	return 1;
}
GCMD:gct(playerid) return cmd_guardarct(playerid);
GCMD:guardarct(playerid)
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "9", "No tienes un cinturón táctico");
	G_Cinturon(playerid, 1);
	return 1;
}
GCMD:sct(playerid,  const params[]) return cmd_sacarct(playerid, params);
GCMD:sacarct(playerid,  const params[])
{
	new id;
	if (sscanf(params, "i", id)) { _Mensaje(playerid, 3, "0", "/sacarct [espacio]"); return 1; }
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "9", "No tienes un cinturón táctico");
	if (id < 1 || id > 6) { _Mensaje(playerid, 0, "9", "El número del espacios debe estar entre 1 y 6."); return 1; }
	S_Cinturon(playerid, id - 1);
	return 1;
}
GCMD:sacar(playerid,  const params[])
{
	new id;
	if (sscanf(params, "i", id)) { _Mensaje(playerid, 3, "0", "/sacar [espacio]"); return 1; }
	if (id < 1 || id > 10) { _Mensaje(playerid, 0, "9", "El número del bolsillo debe estar entre 1 y 10."); return 1; }
	S_Bol(playerid, id - 1);
	return 1;
}
GCMD:mano(playerid) return cmd_cmano(playerid);
GCMD:cmano(playerid)
{
	C_Mano(playerid);
	return 1;
}
GCMD:crearobjeto(playerid,  const params[])
{
	new idobj, cantidad, string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", idobj, cantidad)) { _Mensaje(playerid, 3, "0", "/crearobjeto [id objeto] [cantidad]"); return 1; }
	if (idobj <= 0) return _Mensaje(playerid, 0, "9", "La ID del objeto no puede ser nula o negativa.");
	if (cantidad <= 0) return _Mensaje(playerid, 0, "9", "La cantidad no puede ser nula o negativa.");
	if (idobj < 0 || idobj >= 225) return _Mensaje(playerid, 0, "453", "ID de objeto erroneo.");
	if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) return _Mensaje(playerid, 0, "9", "ERROR: Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	if (user[playerid][jm_Derecha] == 0)
	{
		user[playerid][jm_Derecha] = idobj;
		user[playerid][jm_DerechaCant] = cantidad;
		PonerObjeto(playerid, 1, idobj);
		if (InfoObjeto[idobj][IDArma] > 0) { _GiveWeapon(playerid, InfoObjeto[idobj][IDArma], cantidad); }
	}
	else if (user[playerid][jm_Derecha] != 0)
	{
		user[playerid][jm_Izquierda] = idobj;
		user[playerid][jm_IzquierdaCant] = cantidad;
		PonerObjeto(playerid, 2, idobj);
	}

	format(string, sizeof(string), "[Administración]{FFFFFF} %s ha creado un objeto [Nombre: %s] [Cantidad: %d].",nombre_pj(playerid), InfoObjeto[idobj][NombreObjeto], cantidad);
	MensajeAdmin(string);
	format(string, sizeof(string), "Registros: %s ha creado un objeto [Nombre: %s] [Cantidad: %d]", nombre_pj(playerid), InfoObjeto[idobj][NombreObjeto], cantidad);
	Log("Registros/CrearObjeto.log", string);
	return 1;
}
GCMD:tirar(playerid)
{
	new string[128];
	update_manos(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return _Mensaje(playerid, 0, "9", "No puedes usar este comando en esta situación.");
	if (user[playerid][jm_Derecha] != 0)
	{
		new ManoDer = user[playerid][jm_Derecha], ManoDerCant = user[playerid][jm_DerechaCant];

		format(string, sizeof(string), "Tiraste tu ~b~%s~w~.", InfoObjeto[ManoDer][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "tira su %s.", InfoObjeto[ManoDer][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
		ResetPlayerWeapons(playerid);
		user[playerid][jm_Derecha] = 0;
		user[playerid][jm_DerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		if(ManoDer == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TirarObjeto(ManoDer, ManoDerCant, X, Y - 0.3, Z, World, Interior);
		Streamer_Update(playerid);
		return 1;
	}
	if (user[playerid][jm_Izquierda] != 0)
	{
		new ManoDer = user[playerid][jm_Izquierda], ManoDerCant = user[playerid][jm_IzquierdaCant];

		format(string, sizeof(string), "Tiraste tu ~b~%s~w~.", InfoObjeto[ManoDer][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		format(string, sizeof(string), "tira su %s.", InfoObjeto[ManoDer][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
		ResetPlayerWeapons(playerid);
		user[playerid][jm_Izquierda] = 0;
		user[playerid][jm_IzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		if(ManoDer == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TirarObjeto(ManoDer, ManoDerCant, X, Y - 0.3, Z, World, Interior);
		Streamer_Update(playerid);
		return 1;
	}
	SendClientMessage(playerid, 0xccccccff, "No posees ningún objeto en tus manos.");
	return 1;
}

GCMD:recogerobjeto(playerid) return cmd_recoger(playerid);
GCMD:recoger(playerid)
{
    _Recoger(playerid);
    return 1;
}
GCMD:bolsillo(playerid) return cmd_bol(playerid);
GCMD:inv(playerid) return cmd_bol(playerid);
GCMD:inventario(playerid) return cmd_bol(playerid);
GCMD:bolsillos(playerid) return cmd_bol(playerid);
GCMD:bol(playerid)
{
	ver_inventario(playerid);
	return 1;
}
GCMD:ct(playerid) return cmd_cinturon(playerid);
GCMD:cinturon(playerid)
{
	if (!Es_Faccion(playerid, 1, 2)) return _Mensaje(playerid, 0, "9", "No tienes un cinturón táctico.");
	ver_Cinturon(playerid, playerid);
	return 1;
}

GCMD:dararma(playerid,  const params[]) return cmd_ceder(playerid, params);
GCMD:ceder(playerid,  const params[])
{
	new playerid2, string[256];
	if(!CheckTimer(5, CederTiempo[playerid]))
	{
		if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/ceder [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return _Mensaje(playerid, 0, "9", "ERROR: El jugador seleccionado no se encuentra conectado.");
		if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
		if (user[playerid][jm_Derecha] <= 0) { _Mensaje(playerid, 0, "9", "No tienes nada en tu mano derecha."); return 1; }
    	new weaponid = InfoObjeto[user[playerid][jm_Derecha]][IDArma];
		if (user[playerid2][j_Horas] < 10)
		{
			if (weaponid >= 22 && weaponid <= 29309)
			{
				_Mensaje(playerid, 4, "b0b0b0", "Ese jugador no posee aún diez horas de juego.");
				return 1;
			}
		}
		if (user[playerid2][jm_Izquierda] > 0 && user[playerid2][jm_Derecha] > 0) { _Mensaje(playerid, 0, "9", "Este jugador tiene ambas manos ocupadas."); return 1; }
		new ManoDer = user[playerid][jm_Derecha], ManoDerCant = user[playerid][jm_DerechaCant];
        if (ManoDer == 131) return _Mensaje(playerid, 4, "b00000", "No puedes ceder una caja registradora, tírala.");

		if (user[playerid2][jm_Derecha] == 0)
		{
			if (InfoObjeto[ManoDer][IDArma] > 0) { _GiveWeapon(playerid2, InfoObjeto[ManoDer][IDArma], ManoDerCant); }
			user[playerid2][jm_Derecha] = ManoDer, user[playerid2][jm_DerechaCant] = ManoDerCant, PonerObjeto(playerid2, 1, ManoDer), update_manos(playerid2);
		}
		else if (user[playerid2][jm_Izquierda] == 0)
		{
			user[playerid2][jm_Izquierda] = ManoDer, user[playerid2][jm_IzquierdaCant] = ManoDerCant, PonerObjeto(playerid2, 2, ManoDer), update_manos(playerid2);
		}
		user[playerid][jm_Derecha] = 0, user[playerid][jm_DerechaCant] = 0, update_manos(playerid);
		ResetPlayerWeapons(playerid);
		CederTiempo[playerid] = gettime();
		format(string, sizeof(string), "~b~%s~w~ te entrega su ~b~%s~w~.", nombre_pj(playerid, 0), InfoObjeto[ManoDer][NombreObjeto]);
		ShowPlayerFooter(playerid2, string);
		format(string, sizeof(string), "Entregas a ~b~%s~w~ tu ~b~%s~w~.", nombre_pj(playerid2, 0), InfoObjeto[ManoDer][NombreObjeto]);
		ShowPlayerFooter(playerid, string);
		if (!IsPlayerInAnyVehicle(playerid))
		{
			format(string, sizeof(string), "cede su %s a %s.", InfoObjeto[ManoDer][NombreObjeto], nombre_pj(playerid2, 0));
			accion_rol(playerid, 1, string, 1);
		}
		format(string, sizeof(string), "Registros: %s le dio (%s) a %s.", nombre_pj(playerid), InfoObjeto[ManoDer][NombreObjeto], nombre_pj(playerid2));
		Log("Registros/CederArmas.log", string);
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, CederTiempo[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}
GCMD:chaleco(playerid)
{
	if (user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0){_Mensaje(playerid, 0, "9", "No tienes nada en ninguna mano."); return 1;}
	if (user[playerid][jChaleco] > 0) { _Mensaje(playerid, 0, "9", "Ya tienes un chaleco puesto, debes usar /qchaleco para quitarlo."); return 1; }
	if (user[playerid][jm_Derecha] == 72 && user[playerid][jm_DerechaCant] > 0)
	{
		update_manos(playerid);
		accion_rol(playerid, 0, "se coloca el blindaje que lleva en su mano derecha.");
		Chaleco_(playerid, user[playerid][jm_DerechaCant]);
		user[playerid][jm_Derecha] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		return 1;
	}
	else if(user[playerid][jm_Izquierda] == 72 && user[playerid][jm_IzquierdaCant] > 0)
	{
		update_manos(playerid);
		accion_rol(playerid, 0, "se coloca el blindaje que lleva en su mano izquierda.");
		Chaleco_(playerid, user[playerid][jm_IzquierdaCant]);
		user[playerid][jm_Izquierda] = 0;
		RemovePlayerAttachedObject(playerid, 8);
		return 1;
	}
	else _Mensaje(playerid, 0, "9", "No tienes ningún tipo de blindaje en ninguna mano o no te queda.");
	return 1;
}
GCMD:qchaleco(playerid)
{
	if (user[playerid][jm_Derecha] == 131) return _Mensaje(playerid, 4, "b00000", "No puedes realizar este comando con una caja registradora.");
	if (GetPVarInt(playerid, "HaciendoEvento") == 1) return _Mensaje(playerid, 0, "148", "No puedes utilizar este comando mientras estas en el evento.");
	if (user[playerid][jChaleco] == 0.0) return _Mensaje(playerid, 0, "9", "No tienes ningun blindaje puesto.");
	if (user[playerid][jm_Derecha] > 0 && user[playerid][jm_Izquierda] > 0) { _Mensaje(playerid, 0, "9", "Tus manos están ocupadas."); return 1; }
	if (user[playerid][jm_Derecha] == 0)
	{
		_Mensaje(playerid, 4, "A7CE00", "Retiras el chaleco que llevabas puesto.");
		user[playerid][jm_Derecha] = 72;
		user[playerid][jm_DerechaCant] = floatround(user[playerid][jChaleco]);
		PonerObjeto(playerid, 1, 72);
	}
	else if (user[playerid][jm_Izquierda] == 0)
	{
		_Mensaje(playerid, 4, "A7CE00", "Retiras el chaleco que llevabas puesto.");
		user[playerid][jm_Izquierda] = 72;
		user[playerid][jm_IzquierdaCant] = floatround(user[playerid][jChaleco]);
		PonerObjeto(playerid, 2, 72);
	}
	user[playerid][jChaleco] = 0.0;
	return 1;
}

GCMD:mascarapd(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "378", "No eres miembro de la PD.");
	if (user[playerid][jRango] < 5) return _Mensaje(playerid, 0, "124", "ERROR: Debes ser superior a rango 5.");
	new string[128];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/mascarapd [Nombre_Apellido]");
	if (user[playerid][jMascaraPD] == 0)
	{
		yield 1;
		if (!characterCheck(params))
		{
			format(string, sizeof(string), "Te encuentras en modo detective como %s.", params);
			_Mensaje(playerid, 4, "b0b0b0", string);
			new name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			SetPVarString(playerid, "NombreP", name);
			new detName[MAX_PLAYER_NAME];
			strcat(detName, params);
			SetPlayerName(playerid, detName);
			user[playerid][jMascaraPD] = 1;
		} else _Mensaje(playerid, 4, "b0b0b0", "Este nombre se encuentra registrado.");
	}
	else
	{
		new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "NombreP", name, sizeof(name));
		format(string, sizeof(string), " Te encuentras nuevamente como %s", name);
		_Mensaje(playerid, 4, "b0b0b0", string);
		SetPlayerName(playerid, name);
		user[playerid][jMascaraPD] = 0;
	}
	return 1;
}
funcion tiene_bebida(playerid, mano)
{
	new
		derecha = user[playerid][jm_Derecha],
		izquierda = user[playerid][jm_Izquierda]
	;

	if (mano == 1)
	{
		switch(derecha)
		{
			case 93..99: return 1; //
			case 103,104,105: return 1; //
			case 124: return 1; //
			case 159: return 1; //café
		}
	}

	else if (mano == 2)
	{
		switch(izquierda)
		{
			case 93..99: return 1; //
			case 103,104,105: return 1; //
			case 124: return 1; //
			case 159: return 1; //café
		}
	}

	return 0;
}
GCMD:beber(playerid)
{
	new string[128], Float: hambre = user[playerid][jHambre];
	if (user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0){_Mensaje(playerid, 0, "9", "No tienes nada en ninguna mano."); return 1;}
	if (tiene_bebida(playerid, 1) && user[playerid][jm_DerechaCant] > 0)
	{
		if (user[playerid][jAlcohol] > 51) return _Mensaje(playerid, 0, "9", "Has bebido demasiado trata de pasar todo el alcohol que llevas.");
		switch (user[playerid][jm_Derecha])
		{
			case 96: user[playerid][jAlcohol] += 2; //cerveza
			case 97: user[playerid][jAlcohol] += 4; //Copa de vino
			case 98: user[playerid][jAlcohol] += 6; //Vaso de whisky
			case 99: user[playerid][jAlcohol] += 7; //Vaso de ron
			case 103: user[playerid][jAlcohol] += 7; //Botella de ron
			case 104: user[playerid][jAlcohol] += 6; //Botella de whisky
			case 105: user[playerid][jAlcohol] += 4; //Botella de vino
			case 124: user[playerid][jAlcohol] += 8; //purple drank
			case 159: user[playerid][jHambre] -= 1.5; //café
		}
		switch (user[playerid][jSexo])
		{
			case 1: ApplyAnimation(playerid, "GANGS", "drnkbr_prtl", 4.0, 0, 0, 1, 0, 6000, 1);
			case 2: ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 0, 0, 1, 0, 4000, 1);
		}
		format(string, sizeof(string), "bebe de su %s.", InfoObjeto[user[playerid][jm_Derecha]][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
		user[playerid][jm_DerechaCant] --;
		if (hambre >= -50 && hambre <= 100)
		{
			user[playerid][jHambre] -= 0.5;
		}
		if (user[playerid][jAlcohol] >= 25 && user[playerid][jAlcohol] <= 39) return _Mensaje(playerid, 4, "cccc00", "Estás pasado de copas, deberías parar de beber alcohol.");
		if (user[playerid][jAlcohol] > 40)
		{
			accion_rol(playerid, 0, "vomita todo lo que ha bebido.");
			user[playerid][jAlcohol] -= 5;
			ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1);
			return 1;
		}
		return 1;
	}
	else if (tiene_bebida(playerid, 2) && user[playerid][jm_IzquierdaCant] > 0)
	{
		if (user[playerid][jAlcohol] > 51) return _Mensaje(playerid, 0, "9", "Has bebido demasiado trata de pasar todo el alcohol que llevas.");
		switch (user[playerid][jm_Izquierda])
		{
			case 96: user[playerid][jAlcohol] += 2; //cerveza
			case 97: user[playerid][jAlcohol] += 4; //Copa de vino
			case 98: user[playerid][jAlcohol] += 6; //Vaso de whisky
			case 99: user[playerid][jAlcohol] += 7; //Vaso de ron
			case 103: user[playerid][jAlcohol] += 7; //Botella de ron
			case 104: user[playerid][jAlcohol] += 6; //Botella de whisky
			case 105: user[playerid][jAlcohol] += 4; //Botella de vino
			case 124: user[playerid][jAlcohol] += 8; //purple drank
			case 159: user[playerid][jHambre] -= 1.5; //café
		}
		if (hambre >= -50 && hambre <= 100)
		{
			user[playerid][jHambre] -= 0.5;
		}
		switch (user[playerid][jSexo])
		{
			case 1: ApplyAnimation(playerid, "GANGS", "drnkbr_prtl", 4.0, 0, 0, 1, 0, 6000, 1);
			case 2: ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 0, 0, 1, 0, 4000, 1);
		}
		format(string, sizeof(string), "bebe de su %s.", InfoObjeto[user[playerid][jm_Izquierda]][NombreObjeto]);
		accion_rol(playerid, 1, string, 1);
		user[playerid][jm_IzquierdaCant] --;
		if (user[playerid][jAlcohol] >= 25 && user[playerid][jAlcohol] <= 39) return _Mensaje(playerid, 4, "cccc00", "Estás pasado de copas, deberías parar de beber alcohol.");
		if (user[playerid][jAlcohol] > 40)
		{
			accion_rol(playerid, 0, "vomita todo lo que ha bebido.");
			user[playerid][jAlcohol] -= 5;
			ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1);
			return 1;
		}
		return 1;
	}
	else{_Mensaje(playerid, 0, "9", "No tienes ningún tipo de bebida en ninguna mano o no te queda.");}
	return 1;
}

funcion tiene_comida(playerid, mano)
{
	new
		derecha = user[playerid][jm_Derecha],
		izquierda = user[playerid][jm_Izquierda]
	;

	if (mano == 1)
	{
		switch(derecha)
		{
			case 90,91,92: return 1; //
			case 100,101,102: return 1; //
			case 156,157,158: return 1; //
			case 160: return 1;
		}
	}

	else if (mano == 2)
	{
		switch(izquierda)
		{
			case 90,91,92: return 1; //
			case 100,101,102: return 1; //
			case 156,157,158: return 1; //
			case 160: return 1;
		}
	}

	return 0;
}
GCMD:comer(playerid)
{
	new string[128], Float: hambre = user[playerid][jHambre];
	if (user[playerid][jm_Derecha] == 0 && user[playerid][jm_Izquierda] == 0){_Mensaje(playerid, 0, "9", "No tienes nada en ninguna mano."); return 1;}
	if (tiene_comida(playerid, 1) && user[playerid][jm_DerechaCant] > 0)
	{
		if (hambre >= -50 && hambre <= 100)
		{
			switch(user[playerid][jm_Derecha])
			{
				case 90: user[playerid][jHambre] -= 1.5; //Bolsa de doritos
				case 91: user[playerid][jHambre] -= 1.5; //Bolsa de patatas
				case 92: user[playerid][jHambre] -= 1.5; //Bolsa de nachos
				case 100: user[playerid][jHambre] -= 5.0; //Hamburguesa
				case 101: user[playerid][jHambre] -= 4.0; //Burrito
				case 102: user[playerid][jHambre] -= 6.0; //Pizza
				case 156: user[playerid][jHambre] -= 3.0; //taco
				case 157: user[playerid][jHambre] -= 4.0; //hot dog
				case 158: user[playerid][jHambre] -= 5.5; //pescado frito
				case 160: user[playerid][jHambre] -= 4.0; //pierna de pavo
			}
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
			format(string, sizeof(string), "come de su %s.", InfoObjeto[user[playerid][jm_Derecha]][NombreObjeto]);
			accion_rol(playerid, 1, string, 1);
			user[playerid][jm_DerechaCant] --;
			return 1;
  		}
  		else return Mensaje_(playerid, -1, "No tienes apetito.");
	}
	else if(tiene_comida(playerid, 2)  && user[playerid][jm_IzquierdaCant] > 0)
	{
		if (hambre >= -50 && hambre <= 100)
		{
			switch(user[playerid][jm_Izquierda])
			{
				case 90: user[playerid][jHambre] -= 1.5; //Bolsa de doritos
				case 91: user[playerid][jHambre] -= 1.5; //Bolsa de patatas
				case 92: user[playerid][jHambre] -= 1.5; //Bolsa de nachos
				case 100: user[playerid][jHambre] -= 5.0; //Hamburguesa
				case 101: user[playerid][jHambre] -= 4.0; //Burrito
				case 102: user[playerid][jHambre] -= 6.0; //Pizza
				case 156: user[playerid][jHambre] -= 3.0; //taco
				case 157: user[playerid][jHambre] -= 4.0; //hot dog
				case 158: user[playerid][jHambre] -= 5.5; //pescado frito
				case 160: user[playerid][jHambre] -= 4.0; //pierna de pavo
			}
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
			format(string, sizeof(string), "come de su %s.", InfoObjeto[user[playerid][jm_Izquierda]][NombreObjeto]);
			accion_rol(playerid, 1, string, 1);
			user[playerid][jm_IzquierdaCant] --;
			return 1;
  		}
  		else return Mensaje_(playerid, -1, "No tienes apetito.");
	}
	else if(user[playerid][jm_Derecha] == 126 || user[playerid][jm_Izquierda] == 126)
	{
		if(user[playerid][jm_Izquierda] == 126)user[playerid][jm_IzquierdaCant] --;
		else user[playerid][jm_DerechaCant] --;
		accion_rol(playerid, 1, "comenzó a mascar una goma de mascar.");
		user[playerid][jHambre] = 10;
		return 1;
	}
	_Mensaje(playerid, 0, "9", "No tienes ningún tipo de comida en ninguna mano o no te queda.");
	return 1;
}

GCMD:fumar(playerid,  const params[])
{
    new manoder = user[playerid][jm_Derecha];
    /*
    74 marihuana
    142 hachis
    88 cigarros
    149 puros
    151 Canuto de Marihuana
    152 Canuto de Hachís
    153 Blunt de Marihuana
    154 Blunt de Hachís
    106 cigarro
    150 puro

    87 encendedor
    */
    if((manoder == 74 || manoder == 142 || manoder == 88 || manoder == 149) && user[playerid][jm_DerechaCant] > 0)
    {
        if(user[playerid][jm_Izquierda] != 87) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes un encendedor en tu mano izquierda.");
        if(user[playerid][jm_IzquierdaCant] == 0) return Mensaje_(playerid, 0xb0b0b0ff, "El encendedor que tienes ya no tiene gas.");
        new slot = -1;
        for (new x = 0; x < 10; x++)
        {
            if (user[playerid][jBolsillo][x] == 0)
            {
                slot = x;
            }
        }
        if(slot == -1) return Mensaje_(playerid, 0xb0b0b0ff, "No tienes donde guardar el objeto de la mano derecha.");
        switch(manoder)
        {
            case 74:
            {
                if(!sscanf(params, "s[7]", params[0]))
                {
                    if(!strcmp(params[0], "canuto", true))
                    {
                        user[playerid][jm_DerechaCant] --;
                        user[playerid][jm_IzquierdaCant] --;
                        user[playerid][jBolsillo][slot] = 74;
                        user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                        user[playerid][jm_Derecha] = 0;
                        update_manos(playerid);
                        user[playerid][jm_Derecha] = 151;
                        user[playerid][jm_DerechaCant] = 5;
                        PonerObjeto(playerid, 1, 151);
                        SendClientMessage(playerid, 0xFFFF00AA, "Te lías un canuto de marihuana (/fumar).");
						cmd_fumando(playerid, "5");
                        return 1;
                    }
                    else if(!strcmp(params[0], "blunt", true))
                    {
                        user[playerid][jm_DerechaCant] --;
                        user[playerid][jm_IzquierdaCant] --;
                        user[playerid][jBolsillo][slot] = 74;
                        user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                        user[playerid][jm_Derecha] = 0;
                        update_manos(playerid);
                        user[playerid][jm_Derecha] = 153;
                        user[playerid][jm_DerechaCant] = 5;
                        PonerObjeto(playerid, 1, 153);
                        SendClientMessage(playerid, 0xFFFF00AA, "Te lías un blunt de marihuana (/fumar).");
						cmd_fumando(playerid, "5");
                        return 1;
                    }
                    else return _Mensaje(playerid, 3, "0", "/fumar [canuto | blunt]");
                }
                else return _Mensaje(playerid, 3, "0", "/fumar [canuto | blunt]");
            }
            case 142:
            {
                if(!sscanf(params, "s[7]", params[0]))
                {
                    if(!strcmp(params[0], "canuto", true))
                    {
                        user[playerid][jm_DerechaCant] --;
                        user[playerid][jm_IzquierdaCant] --;
                        user[playerid][jBolsillo][slot] = 142;
                        user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                        user[playerid][jm_Derecha] = 0;
                        update_manos(playerid);
                        user[playerid][jm_Derecha] = 152;
                        user[playerid][jm_DerechaCant] = 5;
                        PonerObjeto(playerid, 1, 152);
                        SendClientMessage(playerid, 0xFFFF00AA, "Te lías un canuto de hachís (/fumar).");
						cmd_fumando(playerid, "5");
                    }
                    else if(!strcmp(params[0], "blunt", true))
                    {
                        user[playerid][jm_DerechaCant] --;
                        user[playerid][jm_IzquierdaCant] --;
                        user[playerid][jBolsillo][slot] = 142;
                        user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                        user[playerid][jm_Derecha] = 0;
                        update_manos(playerid);
                        user[playerid][jm_Derecha] = 154;
                        user[playerid][jm_DerechaCant] = 5;
                        PonerObjeto(playerid, 1, 154);
                        SendClientMessage(playerid, 0xFFFF00AA, "Te lías un blunt de hachís (/fumar).");
						cmd_fumando(playerid, "5");
                    }
                    else return _Mensaje(playerid, 3, "0", "/fumar [canuto | blunt]");
                }
                else return _Mensaje(playerid, 3, "0", "/fumar [canuto | blunt]");
            }
            case 88:
            {
                user[playerid][jm_DerechaCant] --;
                user[playerid][jm_IzquierdaCant] --;
                user[playerid][jBolsillo][slot] = 88;
                user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                user[playerid][jm_Derecha] = 0;
                update_manos(playerid);
                user[playerid][jm_Derecha] = 106;
                user[playerid][jm_DerechaCant] = 5;
                PonerObjeto(playerid, 1, 106);
                SendClientMessage(playerid, 0xFFFF00AA, "Te lías un cigarro (/fumar).");
				cmd_fumando(playerid, "5");
            }
            case 149:
            {
                user[playerid][jm_DerechaCant] --;
                user[playerid][jm_IzquierdaCant] --;
                user[playerid][jBolsillo][slot] = 149;
                user[playerid][jBolsilloCant][slot] = user[playerid][jm_DerechaCant];
                user[playerid][jm_Derecha] = 0;
                update_manos(playerid);
                user[playerid][jm_Derecha] = 150;
                user[playerid][jm_DerechaCant] = 10;
                PonerObjeto(playerid, 1, 150);
                SendClientMessage(playerid, 0xFFFF00AA, "Te lías un puro (/fumar).");
				cmd_fumando(playerid, "5");
            }
        }
    }
    else if(manoder == 106 || manoder == 150 || manoder == 151 || manoder == 152 || manoder == 153 || manoder == 154)
    {
        switch(manoder)
        {
            case 151,153:
            {
                if (user[playerid][jDtipo] == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

                if(user[playerid][jDtipo] != 0 && user[playerid][jDtipo] != 9) ContadorCuraciones[playerid] = 0;
                KillTimer(random_abstinence[playerid]);

                if(user[playerid][jDtipo] != 9)
                {
                    SendClientMessage(playerid, 0x9ACD32AA, "Te sientes cada vez más relajado. Todo te causa gracia. De vez en cuando cambia tu forma de pensar y comportamiento.");
                    user[playerid][jDtipo] = 9;
                    user[playerid][jDpower] = 1;
                    user[playerid][jDtiempo] = 2;
                    ContadorCuraciones[playerid] = 29;
                    SetTimerEx("curacion_droga", 15000, false, "i", playerid);
                }
                else
                {
                    user[playerid][jDpower] += 1;
                    user[playerid][jDtiempo] += 1;
                }
                user[playerid][jHambre] += 2.0;
                user[playerid][jm_DerechaCant] --;
				cmd_fumando(playerid, "5");
            }
            case 152,154:
            {
                if (user[playerid][jDtipo] == 11) return _Mensaje(playerid, 4, "b00000", "No puedes drogarte mientras estás bajo los efectos de la metadona.");

                if(user[playerid][jDtipo] != 0 && user[playerid][jDtipo] != 10) ContadorCuraciones[playerid] = 0;
                KillTimer(random_abstinence[playerid]);

                if(user[playerid][jDtipo] != 10)
                {
                    SendClientMessage(playerid, 0x9ACD32AA, "Te sientes cada vez más relajado. Todo te causa gracia. De vez en cuando cambia tu forma de pensar y comportamiento.");
                    user[playerid][jDtipo] = 10;
                    user[playerid][jDpower] = 1;
                    user[playerid][jDtiempo] = 2;
                    ContadorCuraciones[playerid] = 15;
                    SetTimerEx("curacion_droga", 15000, false, "i", playerid);
                }
                else
                {
                    user[playerid][jDpower] += 1;
                    user[playerid][jDtiempo] += 1;
                }
                user[playerid][jHambre] += 1.5;
                user[playerid][jm_DerechaCant] --;
				cmd_fumando(playerid, "5");
            }
            case 106,150:
            {
                user[playerid][jm_DerechaCant] --;
                user[playerid][jHambre] += 0.5;
				cmd_fumando(playerid, "5");
            }
            default: return Mensaje_(playerid, 0xb0b0b0, "No tienes ninguna unidad para fumar.");
        }
    }
    else return Mensaje_(playerid, 0xb00000ff, "No tienes nada para encender o fumar en tu mano derecha.");
    return 1;
}

funcion tiene_arma(playerid, mano)
{
	if (mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 19: return 41; //- 45. Colt
			case 21: return 42; //- D. Eagle
			case 29: return 45; //- Tec-9
			case 25: return 43; //- UZI
			case 26: return 44; //- MP5K
			case 22: return 49; //- Escopeta
			case 23: return 49; //- Escopeta recortada
			case 24: return 49; //- Escopeta de combate
			case 27: return 46; //- Ak-47
			case 28: return 47; //- M4A1
			case 30: return 48; //- Rifle de caza
			case 31: return 48; //- Rifle de francotirador
		}
	}
	else if (mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 19: return 41; //- 45. Colt
			case 21: return 42; //- D. Eagle
			case 29: return 45; //- Tec-9
			case 25: return 43; //- UZI
			case 26: return 44; //- MP5K
			case 22: return 49; //- Escopeta
			case 23: return 49; //- Escopeta recortada
			case 24: return 49; //- Escopeta de combate
			case 27: return 46; //- Ak-47
			case 28: return 47; //- M4A1
			case 30: return 48; //- Rifle de caza
			case 31: return 48; //- Rifle de francotirador
		}
	}
	return 0;
}

funcion tiene_cargador(playerid, mano)
{
	if (mano == 1)
	{
		switch(user[playerid][jm_Derecha])
		{
			case 41: return 41; //- 45. Colt
			case 42: return 42; //- D. Eagle
			case 45: return 45; //- Tec-9
			case 43: return 43; //- UZI
			case 44: return 44; //- MP5K
			case 49: return 49; //- Escopeta
			case 46: return 46; //- Ak-47
			case 47: return 47; //- M4A1
			case 48: return 48; //- Rifle
		}
	}
	else if (mano == 2)
	{
		switch(user[playerid][jm_Izquierda])
		{
			case 41: return 41; //- 45. Colt
			case 42: return 42; //- D. Eagle
			case 45: return 45; //- Tec-9
			case 43: return 43; //- UZI
			case 44: return 44; //- MP5K
			case 49: return 49; //- Escopeta
			case 46: return 46; //- Ak-47
			case 47: return 47; //- M4A1
			case 48: return 48; //- Rifle
		}
	}
	return 0;
}
GCMD:descargar(playerid) //sacar cargador
{
	new string[128];
	if (!tiene_arma(playerid, 1)) return _Mensaje(playerid, 4, "b0b0b0", "No tienes un arma con balas en tu mano derecha.");
	if (user[playerid][jm_DerechaCant] == 0) return _Mensaje(playerid, 4, "b0b0b0", "El arma que tienes en mano no tiene balas.");
	if (user[playerid][jm_Izquierda] != 0) return _Mensaje(playerid, 4, "b0b0b0", "Debes tener tu mano izquierda vacía.");

	update_manos(playerid);
	new
		objeto = tiene_arma(playerid, 1),
		defaultarm = user[playerid][jm_DerechaCant]
	;

	PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = defaultarm;
	update_manos(playerid);

	format(string, sizeof(string), "Retiras un cargador con %d balas, quedan %d de munición.", user[playerid][jm_IzquierdaCant], defaultarm-user[playerid][jm_IzquierdaCant]);
	_Mensaje(playerid, 4, "F8D48C", string);
	user[playerid][jm_DerechaCant] = defaultarm-user[playerid][jm_IzquierdaCant];
	ResetPlayerWeapons(playerid);
	Anti[playerid][BalasW] = 0;
	update_manos(playerid);
	_GiveWeapon(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma], defaultarm-user[playerid][jm_IzquierdaCant]);
	return 1;
}
GCMD:agregar(playerid) //unir cargadores
{
	new string[128];
	if (!tiene_cargador(playerid, 1)) return _Mensaje(playerid, 4, "b0b0b0", "No tienes ningún cargador en mano derecha.");
	if (!tiene_cargador(playerid, 2)) return _Mensaje(playerid, 4, "b0b0b0", "No tienes ningún cargador en mano izquierda.");
	new Cargadores, mano_d = user[playerid][jm_Derecha];
	new tipo = user[playerid][jm_Izquierda];
	switch (tipo)
	{
		case 41: Cargadores = 41; //- 45. Colt
		case 42: Cargadores = 42; //- D. Eagle
		case 45: Cargadores = 45; //- Tec-9
		case 43: Cargadores = 43; //- UZI
		case 44: Cargadores = 44; //- MP5K
		case 49: Cargadores = 49; //- Escopeta
		case 46: Cargadores = 46; //- Ak-47
		case 47: Cargadores = 47; //- M4A1
		case 48: Cargadores = 48; //- Rifle
	}
	if (mano_d != Cargadores) { _Mensaje(playerid, 0, "9", "No puedes unir este cargador con uno distinto."); return 1; }
	user[playerid][jm_DerechaCant] += user[playerid][jm_IzquierdaCant];
	user[playerid][jm_Izquierda] = 0;
	user[playerid][jm_IzquierdaCant] = 0;
	RemovePlayerAttachedObject(playerid, 8);
	update_manos(playerid);
	format(string, sizeof(string), "Ahora tienes el cargador con %d balas.", user[playerid][jm_DerechaCant]);
	_Mensaje(playerid, 4, "F8D48C", string);
	return 1;
}
funcion tiene_carga(playerid, idobj)
{
	new izq = user[playerid][jm_Izquierda];
	if (izq == idobj)
	{
		return idobj;
	}
	for (new x = 0; x < 10; x++)
	{
		if (user[playerid][jBolsillo][x] == idobj)
		{
			return idobj;
		}
	}
	return 0;
}
GCMD:rec(playerid) return cmd_cargar(playerid);
GCMD:recargar(playerid) return cmd_cargar(playerid);
GCMD:cargar(playerid) //poner cargador
{
	new string[128];
	if(!CheckTimer(3, RecargarTiempo[playerid]))
	{
		//if (user[playerid][jm_DerechaCant] != 0) return _Mensaje(playerid, 0, "0", "Aún tienes munición en tu arma.");
		update_manos(playerid);
		new
			derecha = user[playerid][jm_Derecha],
			derechaCant = user[playerid][jm_DerechaCant], //new
			izquierda = user[playerid][jm_Izquierda],
			izquierdaCant = user[playerid][jm_IzquierdaCant]
		;
		if (InfoObjeto[derecha][IDArma] > 0 && InfoObjeto[derecha][Capacidad] > 1) //tiene un arma en mano derecha
		{
			update_manos(playerid);
			new
				cargador,
				ArmaID = InfoObjeto[derecha][IDArma]
			;
			switch (ArmaID)
			{
				case 22: cargador = 41;
				case 23: cargador = 41;
				case 24: cargador = 42;
				case 25: cargador = 49;
				case 26: cargador = 49;
				case 27: cargador = 49;
				case 28: cargador = 43;
				case 29: cargador = 44;
				case 30: cargador = 46;
				case 31: cargador = 47;
				case 32: cargador = 45;
				case 33: cargador = 48;
				case 34: cargador = 48;
			}
			new objeto = tiene_carga(playerid, cargador);
			if (objeto != cargador) { _Mensaje(playerid, 0, "0", "No tienes un cargador para esta arma."); return 1; }

			if (izquierda != cargador) //función bolsillos
			{
				new ranura = TieneObjeto(playerid, cargador);
				if (user[playerid][jBolsilloCant][ranura] == 0) return _Mensaje(playerid, 0, "0", "Ese cargador está vacio.");
				format(string, sizeof(string), "Cargas tu arma con %d balas, ahora tiene %d de munición.", user[playerid][jBolsilloCant][ranura], derechaCant+user[playerid][jBolsilloCant][ranura]);
				_Mensaje(playerid, 4, "F8D48C", string);
				ResetPlayerWeapons(playerid);
				_GiveWeapon(playerid, ArmaID, user[playerid][jBolsilloCant][ranura]+derechaCant);
				user[playerid][jm_DerechaCant] = user[playerid][jBolsilloCant][ranura]+derechaCant;
				user[playerid][jBolsillo][ranura] = 0;
				user[playerid][jBolsilloCant][ranura] = 0;
				RecargarTiempo[playerid] = gettime();
				Anti[playerid][BalasW] = 0;
				update_manos(playerid);
				return 1;
			}
			else //función mano izquierda
			{
				if (izquierdaCant == 0) return _Mensaje(playerid, 0, "0", "Ese cargador está vacio.");
				format(string, sizeof(string), "Cargas tu arma con %d balas, ahora tiene %d de munición.", izquierdaCant, derechaCant+izquierdaCant);
				_Mensaje(playerid, 4, "F8D48C", string);
				ResetPlayerWeapons(playerid);
				_GiveWeapon(playerid, ArmaID, izquierdaCant+derechaCant);
				user[playerid][jm_DerechaCant] = izquierdaCant+derechaCant;
				user[playerid][jm_Izquierda] = 0;
				user[playerid][jm_IzquierdaCant] = 0;
				RemovePlayerAttachedObject(playerid, 8);
				RecargarTiempo[playerid] = gettime();
				Anti[playerid][BalasW] = 0;
				update_manos(playerid);
				return 1;
			}

		}
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas recargar.", CheckTimer(3, RecargarTiempo[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:anim(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		animlib[32],
		animname[32],
		Float: fDelta,
		loop,
		lockx,
		locky,
		freeze,
		time,
		foresync
	;
	if (sscanf(params, "s[32]s[32]fdddddd", animlib, animname, fDelta, loop, lockx, locky, freeze, time, foresync)) return _Mensaje(playerid, 3, "0", "/anim [animlib, animname, fDelta, loop, lockx, locky, freeze, time, foresync]");
	new mensaje[200];
	format(mensaje, 200, "ApplyAnimation(playerid, '%s', '%s', %0.f, %d, %d, %d, %d, %d, %d);", animlib, animname, fDelta, loop, lockx, locky, freeze, time, foresync);
	SendClientMessage(playerid, -1, mensaje);
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, foresync);
	return 1;
}

GCMD:estilo(playerid,  const params[])
{
	new estilo, estilo2[50], mensaje_x[128];
	if (sscanf(params, "d", estilo)) return _Mensaje(playerid, 3, "0", "/estilo [1-12]");
	if (estilo < 1 || estilo > 12) return _Mensaje(playerid, 3, "0", "/estilo [1-12]");
	switch (estilo)
	{
		case 1: estilo2 = "Normal";
		case 2: estilo2 = "Pandillero";
		case 3: estilo2 = "Pandillero2";
		case 4: estilo2 = "Anciano";
		case 5: estilo2 = "Anciano-Gordo";
		case 6: estilo2 = "Gordo";
		case 7: estilo2 = "Mujer";
		case 8: estilo2 = "Mujer2";
		case 9: estilo2 = "Sexi";
		case 10: estilo2 = "Sexi2";
		case 11: estilo2 = "Hebrio";
		case 12: estilo2 = "Ciego";
	}
	user[playerid][jEstilo] = estilo;
	format(mensaje_x, sizeof(mensaje_x), "Cambiaste tu estilo de caminar: {00c200}%s", estilo2);
	Mensaje_(playerid, -1, mensaje_x);
	Caminar(playerid);
	return 1;
}
//animaciones renovadas - EdinsonWalker
GCMD:animcargar(playerid)
{
	ApplyAnimationEx(playerid, "UZI",		"UZI_reload", 		4.0, 0, 1, 1, 0, 0, 1);
	return 1;
}

GCMD:cielo(playerid)
{
	ApplyAnimationEx(playerid, "WUZI",		"Wuzi_stand_loop", 	4.0, 0, 1, 1, 0, 0, 1);
	return 1;
}

GCMD:fumando(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/fumando [1-7]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, 	"SMOKING",	"M_smklean_loop",	4.0, 1, 0, 1, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, 	"SMOKING",	"M_smkstnd_loop",	4.0, 1, 0, 1, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, 	"SMOKING",	"M_smk_out",		4.0, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, 	"SMOKING",	"M_smk_in",			4.0, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, 	"GANGS", 	"smkcig_prtl",		4.0, 0, 1, 1, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, 	"SMOKING",	"M_smk_drag",		4.0, 0, 1, 1, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid,	"SMOKING",	"F_smklean_loop",	4.0, 1, 0, 1, 0, 0, 1);
		default: _Mensaje(playerid, 3, "0", "/fumando [1-7]");
	}
	return 1;
}

GCMD:pandillero(playerid,  const params[])
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		new animacion;
		if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/pandillero [1-9]");
		switch (animacion)
		{
			case 1: ApplyAnimationEx(playerid, "GHANDS", 		"gsign2", 			4.0, 0, 0, 1, 0, 0, 1, true);
			case 2: ApplyAnimationEx(playerid, "GHANDS",		"gsign2LH",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 3: ApplyAnimationEx(playerid, "GHANDS",		"gsign3",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 4: ApplyAnimationEx(playerid, "GHANDS",		"gsign3LH",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 5: ApplyAnimationEx(playerid, "GHANDS",		"gsign4",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 6: ApplyAnimationEx(playerid, "GHANDS",		"gsign4LH",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 7: ApplyAnimationEx(playerid, "GHANDS",		"gsign5",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 8: ApplyAnimationEx(playerid, "GHANDS",		"gsign5LH",			4.0, 0, 0, 1, 0, 0, 1, true);
			case 9: ApplyAnimationEx(playerid, "LOWRIDER",		"prtial_gngtlkG",	4.0, 0, 0, 1, 0, 0, 1, true);
			default: _Mensaje(playerid, 3, "0", "/pandillero [1-9]");
		}
	}
	else
	{
		new animacion;
		if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/pandillero [1-16]");
		switch (animacion)
		{
			case 1: ApplyAnimationEx(playerid, "RAPPING",		"RAP_A_Loop", 		4.0, 1, 0, 1, 0, 0, 1); //nosepuede en coche
			case 2: ApplyAnimationEx(playerid, "RAPPING",		"RAP_C_Loop", 		4.0, 1, 0, 1, 0, 0, 1); //nosepuede en coche
			case 3: ApplyAnimationEx(playerid, "GHANDS", 		"gsign2", 			4.0, 1, 1, 1, 1, 1, 1);
			case 4: ApplyAnimationEx(playerid, "GHANDS",		"gsign2LH",			4.0, 1, 1, 1, 1, 1, 1);
			case 5: ApplyAnimationEx(playerid, "GHANDS",		"gsign3",			4.0, 1, 1, 1, 1, 1, 1);
			case 6: ApplyAnimationEx(playerid, "GHANDS",		"gsign3LH",			4.0, 1, 1, 1, 1, 1, 1);
			case 7: ApplyAnimationEx(playerid, "GHANDS",		"gsign4",			4.0, 1, 1, 1, 1, 1, 1);
			case 8: ApplyAnimationEx(playerid, "GHANDS",		"gsign4LH",			4.0, 1, 1, 1, 1, 1, 1);
			case 9: ApplyAnimationEx(playerid, "GHANDS",		"gsign5",			4.0, 1, 1, 1, 1, 1, 1);
			case 10: ApplyAnimationEx(playerid, "GHANDS",		"gsign5LH",			4.0, 1, 1, 1, 1, 1, 1);
			case 11: ApplyAnimationEx(playerid, "benchpress",	"gym_bp_celebrate", 4.0, 0, 0, 1, 0, 0, 1);//nosepuede en coche
			case 12: ApplyAnimationEx(playerid, "LOWRIDER",		"prtial_gngtlkG",	4.0, 0, 0, 1, 0, 0, 1);
			case 13: ApplyAnimationEx(playerid, "RIOT",			"RIOT_ANGRY",		4.0, 0, 0, 1, 0, 0, 1);//nosepuede en coche
			case 14: ApplyAnimationEx(playerid, "RIOT",			"RIOT_challenge",	4.0, 0, 0, 1, 0, 0, 1);//nosepuede en coche
			case 15: ApplyAnimationEx(playerid, "RAPPING",		"RAP_B_Loop",		4.0, 1, 0, 1, 0, 0, 1);//nosepuede en coche
			case 16: ApplyAnimationEx(playerid, "SCRATCHING",	"scdrulp",			4.0, 1, 0, 1, 0, 0, 1);//nosepuede en coche
			default: _Mensaje(playerid, 3, "0", "/pandillero [1-16]");
		}
	}
	return 1;
}

GCMD:hablando(playerid)
{
	switch (user[playerid][jHablar])
	{
		case 1: ApplyAnimationEx(playerid, "PED", 		"IDLE_chat", 		4.1, 1, 0, 0, 1, 1, 1, true);
		case 2: ApplyAnimationEx(playerid, "MISC", 		"IDLE_CHAT_02", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 3: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkA", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 4: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkB", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 5: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkE", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 6: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkF", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 7: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkG", 	4.1, 1, 0, 0, 1, 1, 1, true);
		case 8: ApplyAnimationEx(playerid, "GANGS", 	"prtial_gngtlkH", 	4.1, 1, 0, 0, 1, 1, 1, true);
	}
	return 1;
}

GCMD:caminar(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/caminar [1-12]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, 	"PED", 	"WALK_civi", 		4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, 	"PED", 	"WALK_gang1", 		4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, 	"PED", 	"WALK_gang2", 		4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, 	"PED", 	"WALK_old", 		4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, 	"PED", 	"WALK_fatold",		4.1, 1, 1, 1, 1, 1);
		case 6: ApplyAnimationEx(playerid, 	"PED", 	"WALK_fat",			4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, 	"PED", 	"WOMAN_walknorm",	4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, 	"PED", 	"WOMAN_walkbusy",	4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, 	"PED", 	"WOMAN_walkpro",	4.1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimationEx(playerid, "PED", 	"WOMAN_walksexy",	4.1, 1, 1, 1, 1, 1);
		case 11: ApplyAnimationEx(playerid, "PED", 	"WALK_drunk",		4.1, 1, 1, 1, 1, 1);
		case 12: ApplyAnimationEx(playerid, "PED", 	"Walk_Wuzi",		4.1, 1, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/caminar [1-12]");
	}
	return 1;
}

GCMD:adios(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/adios [1-8]");
	if (anim < 1 || anim > 8) return _Mensaje(playerid, 3, "0", "/adios [1-8]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "KISSING", 		"BD_GF_Wave", 	4.0, 0, 0, 1, 0, 0);
		case 2: ApplyAnimationEx(playerid, "ON_LOOKERS", 	"wave_in", 		4.0, 0, 0, 1, 0, 0);
		case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", 	"wave_loop", 	4.0, 0, 0, 1, 0, 0);
		case 4: ApplyAnimationEx(playerid, "ON_LOOKERS", 	"wave_out", 	4.0, 0, 0, 1, 0, 0);
		case 5: ApplyAnimationEx(playerid, "BD_FIRE",		"BD_GF_Wave", 	4.0, 0, 0, 1, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", 			"endchat_01", 	4.0, 0, 0, 1, 0, 0);
		case 7: ApplyAnimationEx(playerid, "ped", 			"endchat_02", 	4.0, 0, 0, 1, 0, 0);
		case 8: ApplyAnimationEx(playerid, "ped", 			"endchat_03", 	4.0, 0, 0, 1, 0, 0);
	}
	return 1;
}

GCMD:coche(playerid,  const params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted no se encuentra en ningún vehículo.");
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/coche [1-19]");
	if (anim < 1 || anim > 19) return _Mensaje(playerid, 3, "0", "/coche [1-19]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, 	"KISSING", 		"GF_CarArgue_01", 	4.0, 0, 0, 1, 0, 0, 1, true);
		case 2: ApplyAnimationEx(playerid, 	"KISSING", 		"GF_CarArgue_02", 	4.0, 0, 0, 1, 0, 0, 1, true);
		case 3: ApplyAnimationEx(playerid, 	"KISSING", 		"GF_CarSpot", 		4.0, 0, 0, 1, 0, 0, 1, true);
		case 4: ApplyAnimationEx(playerid, 	"LOWRIDER", 	"lrgirl_hair",		4.0, 0, 0, 1, 1, 0, 1, true);
		case 5: ApplyAnimationEx(playerid, 	"LOWRIDER", 	"lrgirl_idleloop",	4.0, 1, 0, 1, 0, 0, 1, true);
		case 6: ApplyAnimationEx(playerid, 	"LOWRIDER", 	"Sit_relaxed",		4.0, 0, 0, 1, 1, 0, 1, true);
		case 7: ApplyAnimationEx(playerid, 	"LOWRIDER", 	"Tap_hand",			4.0, 0, 0, 0, 1, 0, 1, true);
		case 8: ApplyAnimationEx(playerid, 	"CAR_CHAT", 	"carfone_in", 		4.0, 0, 0, 0, 1, 0, 1, true);
		case 9: ApplyAnimationEx(playerid, 	"CAR_CHAT", 	"carfone_loopA", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 10: ApplyAnimationEx(playerid, "CAR_CHAT", 	"carfone_loopB", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 11: ApplyAnimationEx(playerid, "CAR_CHAT", 	"CAR_Sc1_BL", 		4.0, 0, 0, 0, 1, 0, 1, true);
		case 12: ApplyAnimationEx(playerid, "CAR_CHAT", 	"CAR_Sc3_FL", 		4.0, 0, 0, 0, 1, 0, 1, true);
		case 13: ApplyAnimationEx(playerid, "CAR_CHAT", 	"car_talkm_in", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 14: ApplyAnimationEx(playerid, "CAR_CHAT", 	"car_talkm_loop", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 15: ApplyAnimationEx(playerid, "CAR_CHAT", 	"car_talkm_out", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 16: ApplyAnimationEx(playerid, "ped", 			"CAR_sit_weak", 	4.0, 0, 0, 0, 1, 0, 1, true);
		case 17: ApplyAnimationEx(playerid, "ped", 			"CAR_LB_pro", 		4.0, 0, 0, 0, 1, 0, 1, true);
		case 18: ApplyAnimationEx(playerid, "ped", 			"CAR_sit", 			4.0, 0, 0, 0, 1, 0, 1, true);
		case 19: ApplyAnimationEx(playerid, "ped", 			"CAR_dead_RHS", 	4.0, 0, 0, 0, 1, 0, 1, true);
	}
	return 1;
}

//animaciones viejas

GCMD:camara(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/camara [1-14]");
	if (anim < 1 || anim > 14) return _Mensaje(playerid, 3, "0", "/camara [1-14]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "CAMERA", "camcrch_cmon", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "CAMERA", "camcrch_idleloop", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "CAMERA", "camcrch_stay", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "CAMERA", "camcrch_to_camstnd", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "CAMERA", "camstnd_cmon", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "CAMERA", "camstnd_idleloop", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "CAMERA", "camstnd_lkabt", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "CAMERA", "camstnd_to_camcrch", 4.0, 0, 0, 0, 1, 0);
		case 9: ApplyAnimationEx(playerid, "CAMERA", "piccrch_in", 4.0, 0, 0, 0, 1, 0);
		case 10: ApplyAnimationEx(playerid, "CAMERA", "piccrch_out", 4.0, 0, 0, 0, 1, 0);
		case 11: ApplyAnimationEx(playerid, "CAMERA", "piccrch_take", 4.0, 0, 0, 0, 1, 0);
		case 12: ApplyAnimationEx(playerid, "CAMERA", "picstnd_in", 4.0, 0, 0, 0, 1, 0);
		case 13: ApplyAnimationEx(playerid, "CAMERA", "picstnd_out", 4.0, 0, 0, 0, 1, 0);
		case 14: ApplyAnimationEx(playerid, "CAMERA", "picstnd_take", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:discutir(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/discutir [1-6]");
	if (anim < 1 || anim > 6) return _Mensaje(playerid, 3, "0", "/discutir [1-6]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "KISSING", "GF_StreetArgue_01", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "KISSING", "GF_StreetArgue_02", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "PAULNMAC", "PnM_Argue1_A", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "PAULNMAC", "PnM_Argue1_B", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "PAULNMAC", "PnM_Argue2_A", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "PAULNMAC", "PnM_Argue2_B", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:policia(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/policia [1-9]");
	if (anim < 1 || anim > 9) return _Mensaje(playerid, 3, "0", "/policia [1-9]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Away", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Left", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "POLICE", "COP_getoutcar_LHS", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "POLICE", "Cop_move_FWD", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "POLICE", "plc_drgbst_01", 4.0, 0, 0, 0, 1, 0);
		case 9: ApplyAnimationEx(playerid, "POLICE", "plc_drgbst_02", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:espada(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/espada [1-2]");
	if (anim < 1 || anim > 2) return _Mensaje(playerid, 3, "0", "/espada [1-2]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SWORD", "sword_IDLE", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:herido(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/herido [1-10]");
	if (anim < 1 || anim > 10) return _Mensaje(playerid, 3, "0", "/herido [1-10]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.0, 0, 0, 0, 1, 0);
		case 9: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.0, 0, 0, 0, 1, 0);
		case 10: ApplyAnimationEx(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:oralsex(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oralsex [1-12]");
	if (anim < 1 || anim > 12) return _Mensaje(playerid, 3, "0", "/oralsex [1-12]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.0, 0, 0, 0, 1, 0);
		case 9: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.0, 0, 0, 0, 1, 0);
		case 10: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.0, 0, 0, 0, 1, 0);
		case 11: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.0, 0, 0, 0, 1, 0);
		case 12: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:oralsexcar(playerid,  const params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "683", "Usted no se encuentra en ningún vehículo.");
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oralsexcar [1-7]");
	if (anim < 1 || anim > 7) return _Mensaje(playerid, 3, "0", "/oralsexcar [1-7]");
	switch (anim)
	{
		case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_W", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 0, 0, 1, 0, 1);
		case 3: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 0, 0, 0, 1, 0, 1); //Una sola vez
		case 4: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 1, 0, 0, 1, 0, 1); //Continuo
		case 5: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_P", 4.0, 0, 0, 0, 1, 0, 1);
		case 6: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_W", 4.0, 0, 0, 0, 1, 0, 1);
		case 7: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

GCMD:dildosex(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/dildosex [1-8]");
	if (anim < 1 || anim > 8) return _Mensaje(playerid, 3, "0", "/dildosex [1-8]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEW", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEP", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "SNM", "SPANKINGW", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "SNM", "SPANKINGP", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SNM", "SPANKEDW", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SNM", "SPANKEDP", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDW", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDP", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:apuntar(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/apuntar [1-7]");
	if (anim < 1 || anim > 8) return _Mensaje(playerid, 3, "0", "/apuntar [1-7]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SHOP", "SHP_Gun_Aim", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "PYTHON", "python_crouchreload", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SHOP", "SHP_Gun_Grab", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SHOP", "SHP_Gun_Threat", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "ped", "gang_gunstand", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:oficinaanim(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oficinaanim [1-10]");
	if (anim < 1 || anim > 10) return _Mensaje(playerid, 3, "0", "/oficinaanim [1-10]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "FF_Dam_Fwd", 4.0, 0, 0, 0, 1, 0);
		case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_2Idle_180", 4.0, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.0, 0, 0, 0, 1, 0);
		case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.0, 0, 0, 0, 1, 0);
		case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.0, 0, 0, 0, 1, 0);
		case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Idle_Loop", 4.0, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_In", 4.0, 0, 0, 0, 1, 0);
		case 8: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.0, 0, 0, 0, 1, 0);
		case 9: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.0, 0, 0, 0, 1, 0);
		case 10: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.0, 0, 0, 0, 1, 0);
	}
	return 1;
}

GCMD:paja(playerid) { ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 1); return 1; }
GCMD:irsecortao(playerid) { ApplyAnimationEx(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:mear(playerid) { ApplyAnimationEx(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:comerciar(playerid) { ApplyAnimationEx(playerid, "DEALER", "shop_pay", 4.000000, 0, 1, 1, 0, 0); return 1; }
GCMD:pelea(playerid) { ApplyAnimationEx(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1); return 1; }
GCMD:dormir(playerid) { ApplyAnimationEx(playerid, "INT_HOUSE", "BED_In_R", 4.1, 0, 0, 0, 1, 0); return 1; }
GCMD:taxi(playerid) { ApplyAnimationEx(playerid, "PED", "IDLE_taxi", 4.1, 0, 1, 1, 1, 1); return 1; }
GCMD:asco(playerid) { ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_SK", 4.1, 0, 1, 1, 1, 1); return 1; }
GCMD:asientosexi(playerid) { ApplyAnimationEx(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.000000, 0, 1, 1, 1, 0); return 1; }
GCMD:mmm(playerid) { ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 0, 0, 0, 0); return 1; }
GCMD:fokear(playerid) { ApplyAnimationEx(playerid, "ped", "fucku", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:cruzarbrazos(playerid) { ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000); return 1; }
GCMD:recostarme(playerid) { ApplyAnimationEx(playerid, "SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0); return 1; }
GCMD:pararme(playerid) { ApplyAnimationEx(playerid, "SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:cubrirme(playerid) { ApplyAnimationEx(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0); return 1; }
GCMD:vomitar(playerid) { ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); return 1; }
GCMD:agonizar(playerid) { ApplyAnimationEx(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0); return 1; }
GCMD:depie(playerid) { ApplyAnimationEx(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0); return 1; }
GCMD:si(playerid) { ApplyAnimationEx(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:no(playerid) { ApplyAnimationEx(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:levantarme(playerid) { ApplyAnimationEx(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0); return 1; }
GCMD:echarme(playerid) { ApplyAnimationEx(playerid, "SUNBATHE", "SitnWait_in_W", 4.000000, 0, 0, 0, 1, 0); return 1; }
GCMD:cansarme(playerid) { ApplyAnimationEx(playerid, "PED", "WOMAN_runfatold", 4.1, 7, 5, 1, 1, 1); return 1; }
GCMD:carga(playerid) { ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1); return 1; }
GCMD:llorar(playerid) { ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 1, 1, 1, 1); return 1; }
GCMD:bofetada(playerid) { ApplyAnimationEx(playerid, "MISC", "bitchslap", 4.1, 1, 0, 0, 1, 1); return 1; }
GCMD:facepalm(playerid) { ApplyAnimationEx(playerid, "MISC", "plyr_shkhead", 4.1, 0, 0, 0, 0, 0); return 1; }
GCMD:barandilla(playerid) { ApplyAnimationEx(playerid, "BD_FIRE", "BD_Panic_Loop", 4.1, 1, 1, 1, 1, 1); return 1; }
GCMD:rifle(playerid) { ApplyAnimationEx(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1); return 1; }
GCMD:bebido(playerid) { ApplyAnimationEx(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1); return 1; }
GCMD:bomba(playerid) { ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 1); return 1; }
GCMD:reir(playerid) { ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:comiendo(playerid) { ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:trato(playerid) { ApplyAnimationEx(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:gro(playerid) { ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 1, 1, 1); return 1; }
GCMD:taichi(playerid) { ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:caer(playerid) { ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 1); return 1; }
GCMD:muerto(playerid) { ApplyAnimationEx(playerid, "PED", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:rascarse(playerid) { ApplyAnimationEx(playerid, "MISC", "Scratchballs_01", 4.1, 1, 1, 1, 1, 1); return 1; }
GCMD:spray(playerid) { ApplyAnimationEx(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:medico(playerid) { ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:golpeado(playerid) { ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:saltovital(playerid) { ApplyAnimationEx(playerid, "PED", "EV_dive", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:tortazo(playerid) { ApplyAnimationEx(playerid, "PED", "BIKE_elbowL", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:rodar(playerid) { ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:cacheado(playerid) { ApplyAnimationEx(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 1, 1, 1, 1); return 1; }
GCMD:boxear(playerid) { ApplyAnimationEx(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:animar(playerid) { ApplyAnimationEx(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:dedo(playerid) { ApplyAnimationEx(playerid, "RIOT", "RIOT_FUKU", 4.0, 0, 0, 0, 0, 0); return 1; }
GCMD:gritando(playerid) { ApplyAnimationEx(playerid, "RIOT", "RIOT_shout", 4.0, 1, 1, 1, 1, 1); return 1; }
GCMD:esposado(playerid) { ApplyAnimationEx(playerid, "SWORD", "sword_block", 50.0, 0, 1, 1, 1, 1); return 1; }
GCMD:lanzar(playerid) { ApplyAnimationEx(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 1, 1, 1, 0); return 1; }

GCMD:movil(playerid)
{
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "148", "No puedes utilizar una animación en este momento.");
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer una animación en un vehículo.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

GCMD:cmovil(playerid)
{
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "148", "No puedes utilizar una animación en este momento.");
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer una animación en un vehículo.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

GCMD:rendirme(playerid) return cmd_rendirse(playerid);
GCMD:rendirse(playerid)
{
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "148", "No puedes utilizar una animación en este momento.");
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer una animación en un vehículo.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); }
	return 1;
}

GCMD:stopanim(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "HaciendoMueble") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando mientras trabajas.");
	if (en_lenador[playerid] == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar este comando mientras trabajas.");
	if (GetPVarInt(playerid, "EnEvento") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar animaciones en un evento.");

	FinHablar(playerid);
	return 1;
}

GCMD:cansado(playerid,  const params[])
{
	new S;
	if (sscanf(params, "i", S)) return _Mensaje(playerid, 3, "0", "/cansado [1 - 2]");
	if (S == 1) return ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 1, 1, 1);
	else if (S == 2) return ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 1, 1, 1);
	else return _Mensaje(playerid, 3, "0", "/cansado [1 - 2]");
}

GCMD:danzar(playerid,  const params[])
{
	new S;
	if (sscanf(params, "i", S)) return _Mensaje(playerid, 3, "0", "/danzar [1 - 13]");
	if (S == 1) return ApplyAnimationEx(playerid, "DANCING", "bd_clap",4.0,1,0,0,0,0);
	else if (S == 2) return ApplyAnimationEx(playerid, "DANCING", "bd_clap1",4.0,1,0,0,0,0);
	else if (S == 3) return ApplyAnimationEx(playerid, "DANCING", "dance_loop",4.0,1,0,0,0,0);
	else if (S == 4) return ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A",4.0,1,0,0,0,0);
	else if (S == 5) return ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A",4.0,1,0,0,0,0);
	else if (S == 6) return ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A",4.0,1,0,0,0,0);
	else if (S == 7) return ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A",4.0,1,0,0,0,0);
	else if (S == 8) return ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A",4.0,1,0,0,0,0);
	else if (S == 9) return ApplyAnimationEx(playerid, "DANCING", "dnce_M_a",4.0,1,0,0,0,0);
	else if (S == 10) return ApplyAnimationEx(playerid, "DANCING", "dnce_M_b",4.0,1,0,0,0,0);
	else if (S == 11) return ApplyAnimationEx(playerid, "DANCING", "dnce_M_c",4.0,1,0,0,0,0);
	else if (S == 12) return ApplyAnimationEx(playerid, "DANCING", "dnce_M_d",4.0,1,0,0,0,0);
	else if (S == 13) return ApplyAnimationEx(playerid, "DANCING", "dnce_M_e",4.0,1,0,0,0,0);
	else return _Mensaje(playerid, 3, "0", "/danzar [1 - 13]");
}

GCMD:brazos(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/brazos [1-6]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "CASINO", "cards_in",4.1,0,1,1,1,1);
		case 2: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_shake",4.1,0,1,1,1,1);
		case 3: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_think",4.1,0,1,1,1,1);
		case 4: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch",4.1,0,1,1,1,1);
		case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE",4.1,0,1,1,1,1);
		case 6: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa",4.1,0,1,1,1,1);
		default: _Mensaje(playerid, 3, "0", "/brazos [1-6]");
	}
	return 1;
}

GCMD:crack(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/crack [1-9]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		case 2: ApplyAnimationEx(playerid,"CRACK","crckdeth2",4.1,1,0,0,1,1);
		case 3: ApplyAnimationEx(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		case 4: ApplyAnimationEx(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		case 5: ApplyAnimationEx(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		case 6: ApplyAnimationEx(playerid,"CRACK","crckidle2",4.1,1,0,0,1,1);
		case 7: ApplyAnimationEx(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
		case 8: ApplyAnimationEx(playerid,"CRACK","crckidle4",4.1,1,0,0,1,1);
		case 9: ApplyAnimationEx(playerid,"SWEET","Sweet_injuredloop",4.1,1,0,0,1,1);
		default: _Mensaje(playerid, 3, "0", "/crack [1-9]");
	}
	return 1;
}

GCMD:asiento(playerid,  const params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/asiento [1-9]");
	if (anim < 1 || anim > 9) return _Mensaje(playerid, 3, "0", "/asiento [1-9]");
	switch (anim)
	{
		case 1: ApplyAnimationEx(playerid, "Attractors", "Stepsit_in", 4.1, 0, 0, 0, 1, 1);
		case 2: ApplyAnimationEx(playerid, "Attractors", "Stepsit_out", 4.1, 0, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_Eat3", 4.1, 0, 0, 0, 1, 1);
		case 4: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_In", 4.1, 0, 0, 0, 1, 1);
		case 5: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_In_L", 4.1, 0, 0, 0, 1, 1);
		case 6: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_In_R", 4.1, 0, 0, 0, 1, 1);
		case 7: ApplyAnimationEx(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 1);
		case 8: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 1);
		case 9: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 0, 1, 1, 1, 1);
	}
	JugadorSentado[playerid] = 1;
	return 1;
}

GCMD:bate(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/bate [1-2]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "CRACK", "Bbalbat_Idle_01", 4.1, 0, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "CRACK", "Bbalbat_Idle_02", 4.1, 0, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/bate [1-2]");
	}
	return 1;
}

GCMD:basket(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/basket [1-7]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_run", 4.1, 1, 1, 0, 1, 1);
		case 2: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_idleloop", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.1, 0, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_def_loop", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_Dnk", 4.1, 0, 1, 1, 1, 1);
		case 6: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_idle", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "BSKTBALL", "BBALL_idle2", 4.1, 1, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/basket [1-7]");
	}
	return 1;
}

GCMD:trafico(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/trafico [1-4]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Away", 4.1, 1, 0, 0, 1, 1);
		case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.1, 1, 0, 0, 1, 1);
		case 3: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Left", 4.1, 1, 0, 0, 1, 1);
		case 4: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.1, 1, 0, 0, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/trafico [1-4]");
	}
	return 1;
}

GCMD:apoyarse(playerid,  const params[])
{
	new animacion;
	if  (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/apoyarse [1-2]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.0, 1, 0, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.0, 1, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/apoyarse [1-2]");
	}
	return 1;
}

GCMD:billar(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/billar [1-3]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "POOL", "POOL_Med_Start", 4.1, 0, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "POOL", "POOL_Med_Shot", 4.1, 0, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/billar [1-3]");
	}
	return 1;
}

GCMD:correr(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/correr [1-6]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "PED", "run_civi", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "PED", "run_gang1", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "PED", "run_old", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "PED", "run_fat", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "PED", "woman_run", 4.1, 1, 1, 1, 1, 1);
		case 6: ApplyAnimationEx(playerid, "PED", "WOMAN_runsexy", 4.1, 1, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/correr [1-6]");
	}
	return 1;
}

GCMD:strip(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/strip [1-7]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1);
		case 6: ApplyAnimationEx(playerid, "STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/strip [1-7]");
	}
	return 1;
}

GCMD:tumbarse(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/tumbarse [1-5]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 0, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "BEACH", "BD_Fire3", 4.1, 0, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 0, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/tumbarse [1-5]");
	}
	return 1;
}

GCMD:mecanico(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/mecanico [1-2]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 1);
		case 2: ApplyAnimationEx(playerid, "CAR", "Fixn_Car_Out", 4.1, 0, 0, 0, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/mecanico [1-2]");
	}
	return 1;
}

GCMD:consola(playerid,  const params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/consola [1-3]");
	switch (animacion)
	{
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 0, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loose", 4.1, 0, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Win", 4.1, 0, 1, 1, 1, 1);
		default: _Mensaje(playerid, 3, "0", "/consola [1-3]");
	}
	return 1;
}

GCMD:bailar(playerid,  const params[])
{
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return _Mensaje(playerid, 0, "148", "No puedes utilizar una animación en este momento.");
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes hacer una animación en un vehículo.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return _Mensaje(playerid, 0, "647", "No puedes usar este comando en un evento.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return _Mensaje(playerid, 0, "12", "No puedes usar este comando mientras estás herido.");
	new animacion;
	if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/bailar [1-4]");
	switch (animacion)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		default: _Mensaje(playerid, 3, "0", "/bailar [1-4]");
	}
	return 1;
}

//- Sistema de teléfonos públicos
GCMD:creartelf(playerid,  const params[])
{
	new tpid;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", tpid)) return _Mensaje(playerid, 3, "0", "/creartelf [id libre]");
	if (tpid < 0 || tpid > MAX_TELEFONOS) return _Mensaje(playerid, 0, "266", "ID de télefono inválido.");
	if (i_PPhone[tpid][pp_Pos][0] != 0.0) return _Mensaje(playerid, 0, "267", "Esta ID está siendo utilizada.");

	GetPlayerPos(playerid, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1], i_PPhone[tpid][pp_Pos][2]);
	i_PPhone[tpid][ppObject] = CreateDynamicObject(1216, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1]+2, i_PPhone[tpid][pp_Pos][2], 0, 0, 0);
	_Mensaje(playerid, 2, "0", "Creaste el teléfono indicado, ahora editalo.");
	EditDynamicObject(playerid, i_PPhone[tpid][ppObject]);
	user[playerid][pEditingMode] = 6;
	save_phones();
	return 1;
}

GCMD:borrartelf(playerid,  const params[])
{
	new tpid;
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "d", tpid)) return _Mensaje(playerid, 3, "0", "/borrartelf [id teléfono]");
	if (i_PPhone[tpid][pp_Pos][0] == 0.0) return _Mensaje(playerid, 0, "264", "Ese teléfono no está creado.");

	i_PPhone[tpid][pp_Pos][0] = 0.0;
	i_PPhone[tpid][pp_Pos][1] = 0.0;
	i_PPhone[tpid][pp_Pos][2] = 0.0;
	i_PPhone[tpid][pp_Pos][3] = 0.0;
	i_PPhone[tpid][pp_Pos][4] = 0.0;
	i_PPhone[tpid][pp_Pos][5] = 0.0;
	DestroyDynamicObject(i_PPhone[tpid][ppObject]);
	DestroyDynamic3DTextLabel(Text3D: i_PPhone[tpid][ppLabel]);
	_Mensaje(playerid, 2, "0", "Borraste el teléfono indicado.");
	save_phones();
	return 1;
}

GCMD:editarcoche(playerid,  const params[])
{
	new carsaleid, input;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarcoche [Nombre] [autoid]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}precio - unidades");
		return 1;
	}
	if (!strcmp(params, "precio", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, carsaleid, input)) return _Mensaje(playerid, 3, "0", "/editarcoche precio [autoid] [precio]");
		if (!i_Conce[carsaleid][eModeloVeh]) return _Mensaje(playerid, 0, "571", "ID coche invalido.");
		i_Conce[carsaleid][ePrecioVeh] = input;
		_Mensaje(playerid, 1, "0", "Cambiaste el precio del vehículo indicado.");
	}
	if (!strcmp(params, "unidades", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, carsaleid, input)) return _Mensaje(playerid, 3, "0", "/editarcoche unidades [autoid] [monto]");
		if (!i_Conce[carsaleid][eModeloVeh]) return _Mensaje(playerid, 0, "571", "ID coche invalido.");
		i_Conce[carsaleid][eDisponibles] = input;
		_Mensaje(playerid, 2, "0", "Cambiaste la cantidad de unidades del vehículo indicado.");
	}
	return 1;
}

EstaGYM(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,4.0, 767.6719, 13.6320, 1000.7010)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid,4.0, 765.7796, -24.0472, 1000.5859)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid,4.0, 774.7818, -62.6608, 1000.7184)) { return 1; }
	return 0;
}
GCMD:practicar(playerid)
{
	if(!EstaGYM(playerid)) return _Mensaje(playerid, 0, "89", "No estás en el GYM.");

	ExPlayerDialog(playerid, D_Praticar, DIALOG_STYLE_LIST, "{D6E1EB}¿Qué le gustaría aprender?", "{ffffff}Kung Fu\t 40$\nBoxeo\t \t 30$\nEstilo normal", "Seleccionar", "Cancelar");

	return 1;
}

GCMD:nombreadmin(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");

	new string[128];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/nombreadmin [Nuevo Nombre]");
	if (user[playerid][jMascaraPD] == 0)
	{
		yield 1;
		if (!characterCheck(params))
		{

			format(string, sizeof(string), "Estás temporalmente con el nombre de %s.", params);
			_Mensaje(playerid, 4, "ffffff", string);
			_Mensaje(playerid, 4, "b0b0b0", "Nota: No se guardarán ningún stat con este nombre.");
			new name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			SetPVarString(playerid, "NombreP", name);
			new admName[MAX_PLAYER_NAME];
			strcat(admName, params);
			SetPlayerName(playerid, admName);
			user[playerid][jMascaraPD] = 1;

		} else  _Mensaje(playerid, 0, "1", "Este nombre se encuentra registrado.");
	}
	else
	{
		new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "NombreP", name, sizeof(name));
		format(string, sizeof(string), "Tu nombre a sido cambiado al anterior: %s", name);
		_Mensaje(playerid, 4, "ffffff", string);
		_Mensaje(playerid, 4, "b0b0b0", "Nota: Ahora tus stats se guardarán.");
		SetPlayerName(playerid, name);
		user[playerid][jMascaraPD] = 0;
	}
	return 1;
}

GCMD:visitar(playerid)
{
	new string[128];
	if (VisitaTimer2[playerid] > 0)
	{
		format(string, sizeof(string), "Debes esperar %d minutos, para visitar otra casa.", VisitaTimer2[playerid]);
		Mensaje_(playerid, 0xb0b0b0ff, string);
		return 1;
	}
	for (new i = 0; i < MAX_CASAS; i++)
	{
		if (en_pos(playerid, 1, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[i][c_VW])
		{
			if (i_Casa[i][cComprado] == 0)
			{
				if (i_Casa[i][c_alquilado] == 1) return _Mensaje(playerid, 0, "0", "Esta vivienda se encuentra en alquiler.");
				SetPlayerInterior(playerid, i_Casa[i][cInterior]);
				user[playerid][jInterior] = i_Casa[i][cInterior];
				user[playerid][jVirtualWorld] = i + 6000;
				SetPlayerVirtualWorld(playerid, i + 6000);
				SetPlayerPos(playerid, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Casa[i][cInteriorA]);
				SetCameraBehindPlayer(playerid);
				_Mensaje(playerid, 2, "0", "Posees 20 segundos para mirar la casa y salir.");
				if (Es_Faccion(playerid, 1)) EnCasaID[playerid] = i;
				VisitaTimer[playerid] = SetTimerEx("VisitandoCasa", 20000, false, "i", playerid);
			} else _Mensaje(playerid, 0, "541", "Esta casa no esta en venta.");
			return 1;
		}
	}
	return 1;
}

funcion VisitandoCasa(playerid)
{
	for (new i = 0; i < MAX_CASAS; i++)
	{
		if (user[playerid][jVirtualWorld] == i + 6000)
		{
			SetPlayerPos(playerid, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]);
			SetPlayerFacingAngle(playerid, i_Casa[i][cExteriorA]);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, i_Casa[i][c_VW]);
			user[playerid][jVirtualWorld] = i_Casa[i][c_VW];
			SetPlayerInterior(playerid, i_Casa[i][c_Int]);
			user[playerid][jInterior] = i_Casa[i][c_Int];
			EnCasaID[playerid] = INVALID_CASA_ID;
			KillTimer(VisitaTimer[playerid]);
			VisitaTimer2[playerid] = 10;
			return 1;
		}
	}
	return 1;
}
GCMD:entrar(playerid)
{
	for (new pid = 1; pid < MAX_PUERTAS; pid++) //- Sistema de puertas dinamicas
	{
		if (en_pos(playerid, 2, i_Puerta[pid][pPos_X], i_Puerta[pid][pPos_Y], i_Puerta[pid][pPos_Z]))
		{
			if (i_Puerta[pid][pSeguro] == 1) return textgame_player(playerid, "~w~Puerta ~r~Cerrada", 5000, 1);
			if (i_Puerta[pid][pPremium] > 0 && user[playerid][jPremium] < i_Puerta[pid][pPremium]) { return _Mensaje(playerid, 0, "541", "Sólo entrada a miembros con membresía VIP."); }
			if (i_Puerta[pid][pFaccion] > 0) { if(user[playerid][jMiembro] != i_Puerta[pid][pFaccion]) { return _Mensaje(playerid, 0, "542", "Sólo entrada a miembros de la Facción."); } }
			if (i_Puerta[pid][pFamilia] > 0) { if(user[playerid][jMiembroFam] != i_Puerta[pid][pFamilia]) { return _Mensaje(playerid, 0, "542", "Sólo entrada a miembros de la Facción NO."); } }
			SetPlayerPos(playerid, i_Puerta[pid][pInt_X], i_Puerta[pid][pInt_Y], i_Puerta[pid][pInt_Z]);
			SetPlayerFacingAngle(playerid, i_Puerta[pid][pInt_A]);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, i_Puerta[pid][pInt_VW]);
			user[playerid][jVirtualWorld] = i_Puerta[pid][pInt_VW];
			SetPlayerInterior(playerid, i_Puerta[pid][pInt_Int]);
			user[playerid][jInterior] = i_Puerta[pid][pInt_Int];
			CargarObjetos(playerid);
			return 1;
		}
	}
	for (new nid = 0; nid < MAX_NEGOCIOS; nid++) //- Sistema de negocios
	{
		if (en_pos(playerid, 1.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
		{
			if (i_Negocio[nid][nSeguro] == 0) return textgame_player(playerid, "~w~Puerta ~r~Cerrada", 5000, 1);
			SetPlayerPos(playerid, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]);
			SetPlayerFacingAngle(playerid, i_Negocio[nid][nInteriorR]);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, nid + 300);
			user[playerid][jVirtualWorld] = nid + 300;
			SetPlayerInterior(playerid, i_Negocio[nid][nInterior]);
			user[playerid][jInterior] = i_Negocio[nid][nInterior];
			CargarObjetos(playerid);
			textgame_player(playerid, "~w~Negocio", 3000, 1);
			if (i_Negocio[nid][nTipo] == 1 || i_Negocio[nid][nTipo] == 10) _Mensaje(playerid, 4, "ADC3E7", "/retirar - /depositar");
			return 1;
		}
	}
	for (new i = 0; i < MAX_CASAS; i++) //- Sistema de casas
	{
		if (en_pos(playerid, 1.0, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[i][c_VW])
		{
			if (i_Casa[i][cEstado] == 0) return textgame_player(playerid, "~w~Puerta ~r~Cerrada", 5000, 1);
			SetPlayerInterior(playerid, i_Casa[i][cInterior]);
			user[playerid][jInterior] = i_Casa[i][cInterior];
			user[playerid][jVirtualWorld] = i + 6000;
			SetPlayerVirtualWorld(playerid, i + 6000);
			SetPlayerPos(playerid, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]);
			SetPlayerFacingAngle(playerid, i_Casa[i][cInteriorA]);
			SetCameraBehindPlayer(playerid);
			new c_info[32];
			format(c_info, sizeof(c_info), "~y~%s", i_Casa[i][cNombre]);
			textgame_player(playerid, c_info, 3000, 1);
			if(Es_Faccion(playerid, 1)) EnCasaID[playerid] = i;
			DentroCasa[playerid] = i;
			return 1;
		}
		//entrar garaje
		if (en_pos(playerid, 2.0, i_Casa[i][cGarajePos][0], i_Casa[i][cGarajePos][1], i_Casa[i][cGarajePos][2]) && user[playerid][jVirtualWorld] == i + 6000)
		{
			new g_id;
			for(new x = 0; x <MAX_GARAJES; x++)
			{
				if(i_Garaje[x][gIDCasa] == i) g_id = x;
			}
			if (i_Casa[i][cGarajePos][4] == 0.0) return _Mensaje(playerid, 4, "b00000", "No has configurado el /gpos2.");
			SetPlayerPos(playerid, i_Casa[i][cGarajePos][4], i_Casa[i][cGarajePos][5], i_Casa[i][cGarajePos][6]);
			SetPlayerFacingAngle(playerid, i_Casa[i][cGarajePos][7]);

			SetPlayerInterior(playerid, i_Garaje[g_id][gInterior]);
			user[playerid][jInterior] = i_Garaje[g_id][gInterior];
			SetPlayerVirtualWorld(playerid, i_Garaje[g_id][gVirtualWorld]);
			user[playerid][jVirtualWorld] = i_Garaje[g_id][gVirtualWorld];
			DentroGarage[playerid] = g_id;
			EnCasaID[playerid] = INVALID_CASA_ID;
			return 1;
		}
	}
	for (new i = 0; i < MAX_EMPRESAS; i++) //- Sistema de empresas
	{
		if (en_pos(playerid, 1, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]) && i_Empresa[i][eTipo] == 1)
		{
			if (i_Empresa[i][eSeguro] == 0) return textgame_player(playerid, "~r~Cerrado", 5000, 1);

			SetPlayerInterior(playerid, i_Empresa[i][eInterior]);
			user[playerid][jInterior] = i_Empresa[i][eInterior];
			user[playerid][jVirtualWorld] = i + 666;
			SetPlayerVirtualWorld(playerid, i + 666);
			SetPlayerPos(playerid, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]);
			SetPlayerFacingAngle(playerid, i_Empresa[i][eInteriorR]);
			SetCameraBehindPlayer(playerid);
			textgame_player(playerid, "~w~Bienvenido a la empresa", 3000, 1);
			
			return 1;
		}
		else if (en_pos(playerid, 6.0, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]) && i_Empresa[i][eTipo] == 2)
		{
			if (i_Empresa[i][eSeguro] == 0) return textgame_player(playerid, "~r~Cerrado", 5000, 1);
			if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(i_Empresa[i][eEspacio] == 1) { SetPlayerPos(playerid, 1881.8655,-2208.4617,13.5469); SetPlayerFacingAngle(playerid, 357.8957); }
				else if(i_Empresa[i][eEspacio] == 2) { SetPlayerPos(playerid, 1886.1965,-2208.3889,13.5469); SetPlayerFacingAngle(playerid, 4.2893); }
				else if(i_Empresa[i][eEspacio] == 3) { SetPlayerPos(playerid, 1885.5272,-2209.2139,13.5469); SetPlayerFacingAngle(playerid, 88.6141); }
				SetPlayerInterior(playerid, i_Empresa[i][eInterior]);
				user[playerid][jInterior] = i_Empresa[i][eInterior];
				user[playerid][jVirtualWorld] = i + 666;
				SetPlayerVirtualWorld(playerid, i + 666);
				textgame_player(playerid, "~w~Bienvenido al taller", 3000, 1);
			}
			else
			{
				if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					for(new veh=0; veh <= MAX_VEHICLES; veh++)
					{
						if (VehicleToPoint(5.0, veh, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]) && (GetVehicleVirtualWorld(i) == i + 666))
						{
							_Mensaje(playerid, 0, "540", "Hay un vehículo cerca del portón, espera a que se mueva.");
							return 1;
						}
					}
					if (IsPlayerInVehicle(playerid, tmpcar))
					{
						SetPlayerVirtualWorld(playerid,i + 666);
						SetPlayerInterior(playerid, i_Empresa[i][eInterior]);
						SetVehicleVirtualWorld(tmpcar, i + 666);
						LinkVehicleToInterior(tmpcar, i_Empresa[i][eInterior]);
						user[playerid][jInterior] = i_Empresa[i][eInterior];
						user[playerid][jVirtualWorld] = i + 666;
						SetVehiclePos(tmpcar, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]);
						SetVehicleZAngle(tmpcar, i_Empresa[i][eInteriorR]);
						foreach(new p: Player)
						{
							if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
							{
								user[p][jInterior] = i_Empresa[i][eInterior];
								SetPlayerInterior(p, i_Empresa[i][eInterior]);
						 		user[p][jVirtualWorld] = i + 666;
								SetPlayerVirtualWorld(p, i + 666);
								textgame_player(p, "~w~Bienvenido al taller", 3000, 1);
							}
						}

						for (new v = 0; v < MAX_VEHICULOS; v++)
						{
							if(i_Vehiculo[v][vID] == tmpcar)
							{
								i_Vehiculo[v][vVirtualWorld] = i + 666;
								i_Vehiculo[v][vInterior] = i_Empresa[i][eInterior];
							}
						}
						return 1;
					}
				}
			}
		}
	}
	for (new i = 0; i < MAX_ALMACENES; i++) //almacenes
	{
		if (en_pos(playerid, 6.0, i_Almacen[i][aExteriorX], i_Almacen[i][aExteriorY], i_Almacen[i][aExteriorZ]))
		{
			if (user[playerid][jAlmacen] != i) return textgame_player(playerid, "~r~Sin llaves", 5000, 1);
			if (i_Almacen[i][aTipo] == 1)
			{
				SetPlayerInterior(playerid, i_Almacen[i][a_Int]);
				user[playerid][jInterior] = i_Almacen[i][a_Int];
				user[playerid][jVirtualWorld] = i_Almacen[i][a_VW];
				SetPlayerVirtualWorld(playerid, i_Almacen[i][a_VW]);
				SetPlayerPos(playerid, i_Almacen[i][aInteriorX], i_Almacen[i][aInteriorY], i_Almacen[i][aInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Almacen[i][aInteriorA]);
				SetCameraBehindPlayer(playerid);
				textgame_player(playerid, "~w~Bienvenido al almacen", 3000, 1);
				return 1;
			}
			if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				SetPlayerInterior(playerid, i_Almacen[i][a_Int]);
				user[playerid][jInterior] = i_Almacen[i][a_Int];
				user[playerid][jVirtualWorld] = i_Almacen[i][a_VW];
				SetPlayerVirtualWorld(playerid, i_Almacen[i][a_VW]);
				SetPlayerPos(playerid, i_Almacen[i][aInteriorX], i_Almacen[i][aInteriorY], i_Almacen[i][aInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Almacen[i][aInteriorA]);
				SetCameraBehindPlayer(playerid);
				textgame_player(playerid, "~w~Bienvenido al almacen", 3000, 1);
				return 1;
			}
			else
			{
			    new
			        Float: x_posalm,
			        Float: y_posalm,
			        Float: z_posalm,
			        Float: r_posalm
				;
				switch (i_Almacen[i][aTipo])
				{
				    case 2: {x_posalm = 2796.2075; y_posalm = 2631.6760; z_posalm = 10.5750; r_posalm = 90.4719;}
				    case 3: {x_posalm = 2845.1597; y_posalm = 2630.2117; z_posalm = 10.5403; r_posalm = 89.8101;}
				    default: {x_posalm = 2796.2075; y_posalm = 2631.6760; z_posalm = 10.5750; r_posalm = 90.4719;}
				}
				if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					if (IsPlayerInVehicle(playerid, tmpcar))
					{
						SetPlayerVirtualWorld(playerid, i_Almacen[i][a_VW]);
						SetPlayerInterior(playerid, i_Almacen[i][a_Int]);
						SetVehicleVirtualWorld(tmpcar, i_Almacen[i][a_VW]);
						LinkVehicleToInterior(tmpcar, i_Almacen[i][a_Int]);
						user[playerid][jInterior] = i_Almacen[i][a_Int];
						user[playerid][jVirtualWorld] = i_Almacen[i][a_VW];
						SetVehiclePos(tmpcar, x_posalm, y_posalm, z_posalm);
						SetVehicleZAngle(tmpcar, r_posalm);
						foreach(new p: Player)
						{
							if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
							{
								user[p][jInterior] = i_Almacen[i][a_Int];
								SetPlayerInterior(p, i_Almacen[i][a_Int]);
								user[p][jVirtualWorld] = i_Almacen[i][a_VW];
								SetPlayerVirtualWorld(p, i_Almacen[i][a_VW]);
								textgame_player(p, "~w~Bienvenido al almacen", 3000, 1);
							}
						}

						for (new v = 0; v < MAX_VEHICULOS; v++)
						{
							if(i_Vehiculo[v][vID] == tmpcar)
							{
								i_Vehiculo[v][vVirtualWorld] = i_Almacen[i][a_VW];
								i_Vehiculo[v][vInterior] = i_Almacen[i][a_Int];
							}
						}
						return 1;
					}
				}
			}
		}
	}
	characterSave(playerid);
	Streamer_Update(playerid);
	return 1;
}

GCMD:salir(playerid)
{
	for (new pid = 1; pid < MAX_PUERTAS; pid++) //- Sistema de puertas dinamicas
	{
		if (en_pos(playerid, 1.0, i_Puerta[pid][pInt_X], i_Puerta[pid][pInt_Y], i_Puerta[pid][pInt_Z]) && user[playerid][jVirtualWorld] == i_Puerta[pid][pInt_VW])
		{
			if(i_Puerta[pid][pFaccion] > 0) { if(user[playerid][jMiembro] != i_Puerta[pid][pFaccion]) { return _Mensaje(playerid, 0, "542", "Sólo salida a miembros de la facción."); } }
			SetPlayerPos(playerid, i_Puerta[pid][pPos_X], i_Puerta[pid][pPos_Y], i_Puerta[pid][pPos_Z]);
			SetPlayerFacingAngle(playerid, i_Puerta[pid][pPos_A]);
			SetPlayerInterior(playerid, i_Puerta[pid][pPos_Int]);
			user[playerid][jInterior] = i_Puerta[pid][pPos_Int];
			SetPlayerVirtualWorld(playerid, i_Puerta[pid][pPos_VW]);
			user[playerid][jVirtualWorld] = i_Puerta[pid][pPos_VW];
			return 1;
		}
	}
	for (new nid = 0; nid < MAX_NEGOCIOS; nid++) //- Sistema de negocios
	{
		if (en_pos(playerid, 1.0, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]) && user[playerid][jVirtualWorld] == nid + 300)
		{
			if (i_Negocio[nid][nSeguro] == 0) return textgame_player(playerid, "~w~Puerta ~r~Cerrada", 5000, 1);
			SetPlayerPos(playerid, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
			SetPlayerFacingAngle(playerid, i_Negocio[nid][nExteriorR]);
			SetPlayerInterior(playerid, 0);
            user[playerid][jInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
            user[playerid][jVirtualWorld] = 0;
			DentroNegocio[playerid] = -1;
			return 1;
		}
	}
	for (new i = 0; i < MAX_CASAS; i++) //- Sistema de casas
	{
		if (en_pos(playerid, 1.0, i_Casa[i][cInteriorX], i_Casa[i][cInteriorY], i_Casa[i][cInteriorZ]) && user[playerid][jVirtualWorld] == i + 6000)
		{
			if(VisitaTimer[playerid] == 0) if (i_Casa[i][cEstado] == 0) return textgame_player(playerid, "~w~Puerta ~r~Cerrada", 5000, 1);
			SetPlayerPos(playerid, i_Casa[i][cExteriorX], i_Casa[i][cExteriorY], i_Casa[i][cExteriorZ]);
			SetPlayerFacingAngle(playerid, i_Casa[i][cExteriorA]);
			SetPlayerVirtualWorld(playerid, i_Casa[i][c_VW]);
			user[playerid][jVirtualWorld] = i_Casa[i][c_VW];
			SetPlayerInterior(playerid, i_Casa[i][c_Int]);
			user[playerid][jInterior] = i_Casa[i][c_Int];
			EnCasaID[playerid] = INVALID_CASA_ID;
			KillTimer(VisitaTimer[playerid]);
			DentroCasa[playerid] = -1;
			return 1;
		}
		//salir garaje
		if (en_pos(playerid, 2.0, i_Casa[i][cGarajePos][4], i_Casa[i][cGarajePos][5], i_Casa[i][cGarajePos][6]))
		{
			for(new x = 0; x <MAX_GARAJES; x++)
			{
				if (GetPlayerVirtualWorld(playerid) == i_Garaje[x][gVirtualWorld])
				{
					if(i_Garaje[x][gIDCasa] == i)
					{
						if (i_Casa[i][cGarajePos][0] == 0.0) return _Mensaje(playerid, 4, "b00000", "No has configurado el /gpos1.");
						SetPlayerPos(playerid, i_Casa[i][cGarajePos][0], i_Casa[i][cGarajePos][1], i_Casa[i][cGarajePos][2]);
						SetPlayerFacingAngle(playerid, i_Casa[i][cGarajePos][3]);

						SetPlayerInterior(playerid, i_Casa[i][cInterior]);
						user[playerid][jInterior] = i_Casa[i][cInterior];
						user[playerid][jVirtualWorld] = i + 6000;
						SetPlayerVirtualWorld(playerid, i + 6000);
						SetCameraBehindPlayer(playerid);
						new c_info[32];
						format(c_info, sizeof(c_info), "~y~%s", i_Casa[i][cNombre]);
						textgame_player(playerid, c_info, 3000, 1);
						if(Es_Faccion(playerid, 1)) EnCasaID[playerid] = i;
						DentroGarage[playerid] = INVALID_CASA_ID;
						return 1;
					}
				}
			}
		}
	}
	for (new i = 0; i < MAX_EMPRESAS; i++) //- Sistema de empresas
	{
		if (i_Empresa[i][eTipo] == 1)
		{
			if (en_pos(playerid, 1.0, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]) && user[playerid][jVirtualWorld] == i + 666)
			{
				SetPlayerPos(playerid, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]);
				SetPlayerFacingAngle(playerid, i_Empresa[i][eExteriorR]);
				SetPlayerVirtualWorld(playerid, 0);
				user[playerid][jVirtualWorld] = 0;
				SetPlayerInterior(playerid, 0);
				user[playerid][jInterior] = 0;
				DentroEmpresa[playerid] = -1;
				return 1;
  			}
		}
		else if (i_Empresa[i][eTipo] == 2)
		{
			if (en_pos(playerid, 8.0, i_Empresa[i][eInteriorX], i_Empresa[i][eInteriorY], i_Empresa[i][eInteriorZ]) && user[playerid][jVirtualWorld] == i + 666)
			{
				if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					SetPlayerPos(playerid, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]);
					SetPlayerFacingAngle(playerid, i_Empresa[i][eExteriorR]);
					SetPlayerVirtualWorld(playerid, 0);
					user[playerid][jVirtualWorld] = 0;
					user[playerid][jInterior] = 0;
					SetPlayerInterior(playerid, 0);
					DentroEmpresa[playerid] = -1;
				}
				else
				{
					if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						for(new veh=0; veh <= MAX_VEHICLES; veh++)
						{
							if (VehicleToPoint(5.0, veh, i_Empresa[i][eExteriorX], i_Empresa[i][eExteriorY], i_Empresa[i][eExteriorZ]))
							{
								_Mensaje(playerid, 0, "540", "Hay un vehículo cerca del portón, espera a que se mueva.");
								return 1;
							}
						}
						new tmpcar = GetPlayerVehicleID(playerid);
						if (IsPlayerInVehicle(playerid, tmpcar))
						{
							LinkVehicleToInterior(tmpcar, 0);
							SetVehicleVirtualWorld(tmpcar, 0);
							SetVehiclePos(tmpcar, i_Empresa[i][eExteriorX_V], i_Empresa[i][eExteriorY_V], i_Empresa[i][eExteriorZ]);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, 0);
							user[playerid][jVirtualWorld] = 0;
							user[playerid][jInterior] = 0;
							SetVehicleZAngle(tmpcar, i_Empresa[i][eExteriorR]);
							DentroEmpresa[playerid] = -1;
							foreach(new p: Player)
							{
								if (IsPlayerInVehicle(p, tmpcar))
								{
									SetPlayerInterior(p, 0);
									SetPlayerVirtualWorld(p, 0);
									user[p][jVirtualWorld] = 0;
									user[p][jInterior] = 0;
									DentroEmpresa[p] = -1;
								}
							}

							for (new v = 0; v < MAX_VEHICULOS; v++)
							{
								if(i_Vehiculo[v][vID] == tmpcar)
								{
									i_Vehiculo[v][vVirtualWorld] = 0;
									i_Vehiculo[v][vInterior] = 0;
								}
							}
							return 1;
						}
					}
				}
			}
		}
		else if (i_Empresa[i][eTipo] == 3)
  		{
		//
		}
	}
	for (new i = 0; i < MAX_ALMACENES; i++) //almacenes
	{
		if (en_pos(playerid, 8.0, i_Almacen[i][aInteriorX], i_Almacen[i][aInteriorY], i_Almacen[i][aInteriorZ]) && user[playerid][jVirtualWorld] == i + 888)
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				SetPlayerPos(playerid, i_Almacen[i][aExteriorX], i_Almacen[i][aExteriorY], i_Almacen[i][aExteriorZ]);
				SetPlayerFacingAngle(playerid, i_Almacen[i][aExteriorA]);
				SetPlayerVirtualWorld(playerid, 0);
				user[playerid][jVirtualWorld] = 0;
				user[playerid][jInterior] = 0;
				SetPlayerInterior(playerid, 0);
			}
			else
			{
				if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					if (IsPlayerInVehicle(playerid, tmpcar))
					{
						LinkVehicleToInterior(tmpcar, 0);
						SetVehicleVirtualWorld(tmpcar, 0);
						SetVehiclePos(tmpcar, i_Almacen[i][aExteriorX_V], i_Almacen[i][aExteriorY_V], i_Almacen[i][aExteriorZ]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						user[playerid][jVirtualWorld] = 0;
						user[playerid][jInterior] = 0;
						SetVehicleZAngle(tmpcar, i_Almacen[i][aExteriorA]);
						DentroEmpresa[playerid] = -1;
						foreach(new p: Player)
						{
							if (IsPlayerInVehicle(p, tmpcar))
							{
								SetPlayerInterior(p, 0);
								SetPlayerVirtualWorld(p, 0);
								user[p][jVirtualWorld] = 0;
								user[p][jInterior] = 0;
							}
						}

						for (new v = 0; v < MAX_VEHICULOS; v++)
						{
							if(i_Vehiculo[v][vID] == tmpcar)
							{
								i_Vehiculo[v][vVirtualWorld] = 0;
								i_Vehiculo[v][vInterior] = 0;
							}
						}
						return 1;
					}
				}
			}
		}
	}
	characterSave(playerid);
	Streamer_Update(playerid);
	return 1;
}

//comandos de negocios
GCMD:vendernegocio(playerid)
{
	new string[128], nid = user[playerid][jNegocioKey];
	if (nid == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "736", "No tienes un negocio.");

	if (en_pos(playerid, 3.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
	{
		if (nid != INVALID_NEGOCIO_ID && strcmp(nombre_sin(playerid), i_Negocio[nid][nDueno], true) == 0)
		{
			if (i_Negocio[nid][nCuotas] != 0) return _Mensaje(playerid, 0, "106", "El negocio posee cuotas pendientes.");
			new sell = i_Negocio[nid][nPrecio];
			Ganancia(playerid, sell);
			format(string, sizeof(string), "Vendiste tu negocio. Recuperaste %d$", sell);
			Mensaje_(playerid, -1, string);
			vender_neg(nid);
			user[playerid][jNegocioKey] = INVALID_NEGOCIO_ID;
		} else _Mensaje(playerid, 0, "737", "Este negocio no está a tu nombre.");
	} else _Mensaje(playerid, 0, "738", "Debes estar cerca de tu negocio para venderlo.");
	return 1;
}
GCMD:vendernegocio2(playerid)
{
	new string[128], nid = user[playerid][jNegocioKey2];
	if (nid == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "736", "No tienes un negocio.");
	if (en_pos(playerid, 3.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
	{
		if (nid != INVALID_NEGOCIO_ID && strcmp(nombre_sin(playerid), i_Negocio[nid][nDueno], true) == 0)
		{
			if (i_Negocio[nid][nCuotas] != 0) return _Mensaje(playerid, 0, "106", "El negocio posee cuotas pendientes.");
			new sell = i_Negocio[nid][nPrecio];
			Ganancia(playerid, sell);
			format(string, sizeof(string), "Vendiste tu negocio. Recuperaste %d$", sell);
			Mensaje_(playerid, -1, string);
			vender_neg(nid);
			user[playerid][jNegocioKey2] = INVALID_NEGOCIO_ID;
		} else _Mensaje(playerid, 0, "737", "Este negocio no está a tu nombre.");
	} else _Mensaje(playerid, 0, "738", "Debes estar cerca de tu negocio para venderlo.");
	return 1;
}
vender_neg(nid)
{
	new
		name_tipo[32]
	;
	i_Negocio[nid][nSeguro] = 1;
	i_Negocio[nid][nComprado] = 0;
	i_Negocio[nid][nCuotas] = 0;
	i_Negocio[nid][nPedido] = 0;
	i_Negocio[nid][n_patente] = 0;
	format(i_Negocio[nid][nDueno], 32, "enventa");
	switch (i_Negocio[nid][nTipo])
	{
		case 1: name_tipo = "24-7";
		case 2: name_tipo = "Ropa";
		case 3: name_tipo = "Restaurante";
		case 4: name_tipo = "Cluckin bell";
		case 5: name_tipo = "Pizzeria";
		case 6: name_tipo = "Burger Shot";
		case 7: name_tipo = "Ammunation";
		case 8: name_tipo = "Peluquería";
		case 9: name_tipo = "Tienda Sexual";
		case 10: name_tipo = "Gasolinera";
		case 11: name_tipo = "Electrónica";
		case 12: name_tipo = "Bar";
		case 13: name_tipo = "Ferreteria";
		case 14: name_tipo = "Alhambra";
		case 15: name_tipo = "Strip club";
		case 16: name_tipo = "Club private";
		case 17: name_tipo = "Tienda empeño";
		case 18: name_tipo = "Joyería";
		case 19: name_tipo = "Cafetería";
		default: name_tipo = "no_tipo";
	}
	format(i_Negocio[nid][nNombre], 32, name_tipo);
	_NegocioP(nid);
	save_Negocio(nid);

	return 1;
}
GCMD:venderminegocio(playerid,  const params[])
{
	new nid = user[playerid][jNegocioKey];
	if (nid == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "736", "No tienes un negocio.");
	if (i_Negocio[nid][nCuotas] != 0) return _Mensaje(playerid, 0, "106", "El negocio posee cuotas pendientes.");
	new string[128], playerid2, price;
	if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "/venderminegocio [id jugador] [precio]");
	if (price < 1) return _Mensaje(playerid, 0, "384", "Precio debe ser mayor a 0.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "385", "No puedes venderte el negocio a ti mismo.");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (user[playerid2][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes venderle propiedades a usuarios con menos de dos horas de juego.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (haciend_[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Te encuentras en una operación, termina primero.");
	if (haciend_[playerid2] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ese jugador se encuentra en una operación, espera a que termine.");
	haciend_[playerid] = 1;
	haciend_[playerid2] = 1;

	NegocioOffer[playerid2] = playerid;
	NegocioPrice[playerid2] = price;
	format(string, sizeof(string), "* Ofreciste a %s para comprar tu negocio por $%d.", nombre_pj(playerid2, 0), price);
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "* %s te ha ofrecido su negocio por $%d, (/aceptar).", nombre_pj(playerid, 0), price);
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

GCMD:negocio(playerid) return cmd_minegocio(playerid);
GCMD:minegocio(playerid)
{
	new tDialogo[300];
	if(user[playerid][jNegocioKey] == INVALID_NEGOCIO_ID && user[playerid][jNegocioKey2] == INVALID_NEGOCIO_ID && user[playerid][jNegocioLlaves] == INVALID_NEGOCIO_ID) return _Mensaje(playerid, 0, "580", "No tienes ningun negocio o no tienes las llaves de uno.");
	new nid = user[playerid][jNegocioKey], nid2 = user[playerid][jNegocioKey2], nid3 = user[playerid][jNegocioLlaves];
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jNegocioKey] + 300)
	{
		format(tDialogo, sizeof(tDialogo), "{ffffff}Nombre ({0095B5}%s{ffffff})\nDinero ({00C200}$%d{ffffff})\nProductos ({0095B5}%d{ffffff}) - ({ffff00}%d{ffffff})\nLlaves (%s{ffffff})\nArmario\nMuebles", i_Negocio[nid][nNombre], i_Negocio[nid][nDinero], i_Negocio[nid][nProductos], i_Negocio[nid][nPedido], _estadoN(nid,2));
		ExPlayerDialog(playerid, D_Neg_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Menu del negocio", tDialogo, "Seleccionar", "Cancelar");
		DentroNegocio[playerid] = nid;
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jNegocioKey2] + 300)
	{
		format(tDialogo, sizeof(tDialogo), "{ffffff}Nombre ({0095B5}%s{ffffff})\nDinero ({00C200}$%d{ffffff})\nProductos ({0095B5}%d{ffffff}) - ({ffff00}%d{ffffff})\nLlaves (%s{ffffff})\nArmario\nMuebles", i_Negocio[nid2][nNombre], i_Negocio[nid2][nDinero], i_Negocio[nid2][nProductos], i_Negocio[nid2][nPedido], _estadoN(nid2,2));
		ExPlayerDialog(playerid, D_Neg_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Menu del negocio", tDialogo, "Seleccionar", "Cancelar");
		DentroNegocio[playerid] = nid2;
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jNegocioLlaves] + 300)
	{
		format(tDialogo, sizeof(tDialogo), "{ffffff}Nombre ({0095B5}%s{ffffff})\nDinero ({00C200}$%d{ffffff})\nProductos ({0095B5}%d{ffffff}) - ({ffff00}%d{ffffff})\nLlaves (%s{ffffff})", i_Negocio[nid3][nNombre], i_Negocio[nid3][nDinero], i_Negocio[nid3][nProductos], i_Negocio[nid3][nPedido], _estadoN(nid3,2));
		ExPlayerDialog(playerid, D_Neg_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Menu del negocio", tDialogo, "Seleccionar", "Cancelar");
		DentroNegocio[playerid] = nid3;
	} else _Mensaje(playerid, 0, "580", "No estás en ningun negocio.");
	return 1;
}

GCMD:editarn(playerid,  const params[])
{
	new nid, string[256], input;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarn [nombre] [negocio] [codigo]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}exterior - precio - productos - interior - comprar.");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, nid)) return _Mensaje(playerid, 3, "0", "/editarn exterior [negocio]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		GetPlayerPos(playerid, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
		_NegocioP(nid);
		_Mensaje(playerid, 4, "ffffff", "Editaste el exterior del negocio.");
		format(string, sizeof(string), "Registros: %s ha cambiado el exterior del negocio ID %d.", nombre_pj(playerid), nid);
		Log("Registros/Negocios.log", string);
	}
	else if (!strcmp(params, "precio", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, nid, input)) return _Mensaje(playerid, 3, "0", "/editarn precio [negocio] [precio]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		i_Negocio[nid][nPrecio] = input;
		save_Negocio(nid);
		_Mensaje(playerid, 4, "ffffff", "Editaste el precio del negocio.");
		format(string, sizeof(string), "Registros: %s ha puesto el negocio ID %d precio $%d.", nombre_pj(playerid), nid, input);
		Log("Registros/Negocios.log", string);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, nid)) return _Mensaje(playerid, 3, "0", "/editarn interior [negocio]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		GetPlayerPos(playerid, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ]);
		GetPlayerFacingAngle(playerid, i_Negocio[nid][nInteriorR]);
		i_Negocio[nid][nInterior] = GetPlayerInterior(playerid);
		_NegocioP(nid);
		_Mensaje(playerid, 4, "ffffff", "Editaste el interior del negocio.");
		format(string, sizeof(string), "Registros: %s ha cambiado el interior del negocio ID %d.", nombre_pj(playerid), nid);
		Log("Registros/Negocios.log", string);
	}
	else if (!strcmp(params, "comprar", true, 7))
	{
		if (sscanf(params, "s[32]i", params, nid)) return _Mensaje(playerid, 3, "0", "/editarn comprar [negocio]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		GetPlayerPos(playerid, i_Negocio[nid][nCompraX], i_Negocio[nid][nCompraY], i_Negocio[nid][nCompraZ]);
		_Mensaje(playerid, 4, "ffffff", "Editaste el lugar de compra del negocio.");
		format(string, sizeof(string), "Registros: %s ha cambiado el lugar de compra del negocio ID %d.", nombre_pj(playerid), nid);
		Log("Registros/Negocios.log", string);
	}
	else if (!strcmp(params, "productos", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, nid, input)) return _Mensaje(playerid, 3, "0", "/nedit productos [negocio] [amount]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		if (input < 0) return _Mensaje(playerid, 0, "549", "Productos no pueden ser negativos.");
		i_Negocio[nid][nProductos] = input;
		save_Negocio(nid);
		_Mensaje(playerid, 4, "ffffff", "Editaste productos del negocio.");
		format(string, sizeof(string), "Registros: %s ha puesto el negocio ID %d productos %d.", nombre_pj(playerid), nid, input);
		Log("Registros/Negocios.log", string);
	}
	else if (!strcmp(params, "pedido", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, nid, input)) return _Mensaje(playerid, 3, "0", "/nedit pedido [negocio] [amount]");
		if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
		if (input < 0) return _Mensaje(playerid, 0, "549", "Productos no pueden ser negativos.");
		i_Negocio[nid][nPedido] = input;
		save_Negocio(nid);
		_Mensaje(playerid, 4, "ffffff", "Editaste los pedidos del negocio.");
		format(string, sizeof(string), "Registros: %s ha puesto el negocio ID %d productos %d.", nombre_pj(playerid), nid, input);
		Log("Registros/Negocios.log", string);
	}
	save_Negocio(nid);
	return 1;
}

GCMD:irnegocio(playerid,  const params[])
{
	new nid, string[128];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", nid)) return _Mensaje(playerid, 3, "0", "/irnegocio [negocio]");
	if (nid < 0 || nid >= MAX_NEGOCIOS) return _Mensaje(playerid, 0, "453", "ID de negocio erróneo.");
	if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	user[playerid][jInterior] = 0;
	user[playerid][jVirtualWorld] = 0;
	SetPlayerPos(playerid, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
	format(string, sizeof(string), " Usted se teletransporto al negocio ID %d.", nid);
	_Mensaje(playerid, 2, "0", string);
	return 1;
}

GCMD:avenegocio(playerid,  const params[])
{
	new nid, string[256];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", nid)) return _Mensaje(playerid, 3, "0", "/avenegocio [negocio]");
	if (!i_Negocio[nid][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jNegocioKey] == nid)
			{
				user[i][jNegocioKey] = INVALID_NEGOCIO_ID;
				format(string, sizeof(string), " %s ha vendido tu negocio ranura 1 (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b00000", string);
			}
			else if (user[i][jNegocioKey2] == nid)
			{
				user[i][jNegocioKey2] = INVALID_NEGOCIO_ID;
				format(string, sizeof(string), " %s ha vendido tu negocio ranura 2 (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b00000", string);
			}
			else if (user[i][jNegocioLlaves] == nid)
			{
				user[i][jNegocioLlaves] = INVALID_CASA_ID;
				user[i][jNegocio2Llaves] = 0;
			}
		}
	}
	i_Negocio[nid][nComprado] = 0;
	i_Negocio[nid][nPedido] = 0;
	i_Negocio[nid][nCuotas] = 0;
	i_Negocio[nid][nDinero] = 0;
	i_Negocio[nid][nProductos] = 2000;
	i_Negocio[nid][nSeguro] = 1;
	i_Negocio[nid][n_patente] = 0;
	_Mensaje(playerid, 4, "b00000", " Has vendido el negocio indicado.");
	new
		name_tipo[32]
	;
	switch (i_Negocio[nid][nTipo])
	{
		case 1: name_tipo = "24-7";
		case 2: name_tipo = "Ropa";
		case 3: name_tipo = "Restaurante";
		case 4: name_tipo = "Cluckin bell";
		case 5: name_tipo = "Pizzeria";
		case 6: name_tipo = "Burger Shot";
		case 7: name_tipo = "Ammunation";
		case 8: name_tipo = "Peluquería";
		case 9: name_tipo = "Tienda Sexual";
		case 10: name_tipo = "Gasolinera";
		case 11: name_tipo = "Electrónica";
		case 12: name_tipo = "Bar";
		case 13: name_tipo = "Ferreteria";
		case 14: name_tipo = "Alhambra";
		case 15: name_tipo = "Strip club";
		case 16: name_tipo = "Club private";
		case 17: name_tipo = "Tienda empeño";
		case 18: name_tipo = "Joyería";
		case 19: name_tipo = "Cafetería";
		default: name_tipo = "no_tipo";
	}
	_NegocioP(nid);
	save_Negocio(nid);
	return 1;
}

GCMD:comprarnegocio(playerid)
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Función desactivada, próximamente solicitud de compra en foro.");
	new string[128];
	//if (user[playerid][jTiempos][7] != 0)  return decir_eltiempo(playerid, 7);
	if (user[playerid][j_Mascara] == 1) return _Mensaje(playerid, 0, "0", "No puedes comprar una propiedad con /mascara.");
	for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
	{
		if (en_pos(playerid, 2.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]))
		{
			if (i_Negocio[nid][nComprado] == 1) return _Mensaje(playerid, 0, "553", "Este negocio ya tiene dueño.");
			if(user[playerid][jNegocioKey] == INVALID_NEGOCIO_ID)
			{
				if (ComprobarDineroJ(playerid) >= i_Negocio[nid][nPrecio])
				{
					DarDineroGC(playerid, -i_Negocio[nid][nPrecio]);
					d_estado += i_Negocio[nid][nPrecio];
					user[playerid][jNegocioKey] = nid;
					i_Negocio[nid][nProductos] = 500;
					i_Negocio[nid][nComprado] = 1;
					i_Negocio[nid][n_patente] = nid+Random(-400000, 999999);
					strmid(i_Negocio[nid][nDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
					_NegocioP(nid);
					_Mensaje(playerid, 4, "b0b0b0", "¡Felicitaciones!, has comprado este negocio.");
					format(string, sizeof(string), "Registros: %s ha comprado el negocio id %d.", nombre_pj(playerid), nid);
					Log("Registros/Negocios.log", string);
					save_Negocio(nid);
					characterSave(playerid);
					user[playerid][jTiempos][7] = 250;
					return 1;
				} else _Mensaje(playerid, 0, "555", "No tienes fondos suficientes para comprarte este negocio.");
			} else if (user[playerid][jPremium] == 0 || user[playerid][jPremium] == 1) _Mensaje(playerid, 0, "578", "Ya posees un negocio en la ranura 1.");
			if (user[playerid][jPremium] >= 2)
			{
				if(user[playerid][jNegocioKey2] == INVALID_NEGOCIO_ID)
				{
					if (ComprobarDineroJ(playerid) >= i_Negocio[nid][nPrecio])
					{
						DarDineroGC(playerid, -i_Negocio[nid][nPrecio]);
						d_estado += i_Negocio[nid][nPrecio];
						user[playerid][jNegocioKey2] = nid;
						i_Negocio[nid][nProductos] = 500;
						i_Negocio[nid][nComprado] = 1;
						i_Negocio[nid][n_patente] = nid+Random(-400000, 999999);
						strmid(i_Negocio[nid][nDueno], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
						_NegocioP(nid);
						_Mensaje(playerid, 4, "b0b0b0", "¡Felicitaciones!, has comprado este negocio.");
						format(string, sizeof(string), "Registros: %s ha comprado el negocio id %d.", nombre_pj(playerid), nid);
						Log("Registros/Negocios.log", string);
						save_Negocio(nid);
						characterSave(playerid);
						user[playerid][jTiempos][7] = 250;
						return 1;
					} else _Mensaje(playerid, 0, "555", "No tienes fondos suficientes para comprarte este negocio.");
				} else _Mensaje(playerid, 0, "578", "Ya posees un negocio en la ranura 2.");
			}
		}
	}
	return 1;
}

GCMD:rellenarnegocios(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
	{
		if (i_Negocio[nid][nComprado] == 0) i_Negocio[nid][nProductos] = 5000;
		else if (i_Negocio[nid][nComprado] == 1) i_Negocio[nid][nProductos] += 1000;
		textgame_player(playerid, "~g~Negocios rellenados", 3500, 3);
	}
	return 1;
}

GCMD:crearnegocio(playerid,  const params[])
{
	new tipo, string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", tipo))
	{
		_Mensaje(playerid, 3, "0", "/crearnegocio [tipo]");
		_Mensaje(playerid, 1, "0", "1) 24-7 | 2) Ropa | 3) Restaurante | 4) Cluckin bell");
		_Mensaje(playerid, 1, "0", "5) Pizzeria | 6) Burger Shot | 7) Ammunation | 8) Peluquería");
		_Mensaje(playerid, 1, "0", "9) Sex shop | 10) Gasolinera | 11) Electrónica | 12) Bar");
		_Mensaje(playerid, 1, "0", "13) Ferreteria | 14) Alhambra | 15) Strip | 16) Club private");
		_Mensaje(playerid, 1, "0", "17) Empeño | 18) Joyería | 19) Cafetería");
		return 1;
	}
	if (tipo < 1 || tipo > 19) return _Mensaje(playerid, 1, "0", "Los negocios están entre 1 - 19.");
	for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
	{
		if (!i_Negocio[nid][nTipo])
		{
			new Float: X, Float: Y, Float: Z, Float: R;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, R);
			i_Negocio[nid][nTipo] = tipo;
			i_Negocio[nid][nSeguro] = 1;
			format(i_Negocio[nid][nDueno], 32, "enventa");
			GetPlayerPos(playerid, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
			GetPlayerFacingAngle(playerid, i_Negocio[nid][nExteriorR]);
			i_Negocio[nid][nProductos] = 5000;
			i_Negocio[nid][nComprado] = 0;
			if (tipo == 1) //24/7
			{
				i_Negocio[nid][nInteriorX] = 7677.9775;
				i_Negocio[nid][nInteriorY] = 14635.8135;
				i_Negocio[nid][nInteriorZ] = 1001.0700;
				i_Negocio[nid][nInteriorR] = 0.4679;
				i_Negocio[nid][nPrecio] = 206020;
				i_Negocio[nid][nInterior] = 26;
				format(i_Negocio[nid][nNombre], 32, "24-7");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 2) //ropa
			{
				i_Negocio[nid][nInteriorX] = 207.7245;
				i_Negocio[nid][nInteriorY] = -110.9889;
				i_Negocio[nid][nInteriorZ] = 1005.1328;
				i_Negocio[nid][nInteriorR] = 356.3849;
				i_Negocio[nid][nPrecio] = 218600;
				i_Negocio[nid][nInterior] = 15;
				format(i_Negocio[nid][nNombre], 32, "Ropa");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 3) //restaurante
			{
				i_Negocio[nid][nInteriorX] = -794.9186;
				i_Negocio[nid][nInteriorY] = 489.2863;
				i_Negocio[nid][nInteriorZ] = 1376.1953;
				i_Negocio[nid][nInteriorR] = 0.8184;
				i_Negocio[nid][nPrecio] = 170870;
				i_Negocio[nid][nInterior] = 1;
				format(i_Negocio[nid][nNombre], 32, "Restaurante");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 4) //cluckin bell
			{
				i_Negocio[nid][nInteriorX] = 364.9697;
				i_Negocio[nid][nInteriorY] = -11.2050;
				i_Negocio[nid][nInteriorZ] = 1001.8516;
				i_Negocio[nid][nInteriorR] = 356.3849;
				i_Negocio[nid][nPrecio] = 138870;
				i_Negocio[nid][nInterior] = 9;
				format(i_Negocio[nid][nNombre], 32, "Cluckin bell");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 5) //pizzeria
			{
				i_Negocio[nid][nInteriorX] = 372.3343;
				i_Negocio[nid][nInteriorY] = -133.2180;
				i_Negocio[nid][nInteriorZ] = 1001.4922;
				i_Negocio[nid][nInteriorR] = 356.3849;
				i_Negocio[nid][nPrecio] = 112060;
				i_Negocio[nid][nInterior] = 5;
				format(i_Negocio[nid][nNombre], 32, "Pizzeria");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 6) //burgerShot
			{
				i_Negocio[nid][nInteriorX] = 363.4130;
				i_Negocio[nid][nInteriorY] = -74.5787;
				i_Negocio[nid][nInteriorZ] = 1001.5078;
				i_Negocio[nid][nInteriorR] = 356.3849;
				i_Negocio[nid][nPrecio] = 94700;
				i_Negocio[nid][nInterior] = 10;
				format(i_Negocio[nid][nNombre], 32, "Burger Shot");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 7) //ammu-nation
			{
				i_Negocio[nid][nInteriorX] = 315.2409;
				i_Negocio[nid][nInteriorY] = -143.3522;
				i_Negocio[nid][nInteriorZ] = 999.6016;
				i_Negocio[nid][nInteriorR] = 355.6529;
				i_Negocio[nid][nPrecio] = 827160;
				i_Negocio[nid][nInterior] = 7;
				format(i_Negocio[nid][nNombre], 32, "Ammunation");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 8) //peluquería
			{
				i_Negocio[nid][nInteriorX] = 412.0487;
				i_Negocio[nid][nInteriorY] = -54.3948;
				i_Negocio[nid][nInteriorZ] = 1001.9000;
				i_Negocio[nid][nInteriorR] = 0.0000;
				i_Negocio[nid][nPrecio] = 85000;
				i_Negocio[nid][nInterior] = 12;
				format(i_Negocio[nid][nNombre], 32, "Peluquería");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 9) //sex shop
			{
				i_Negocio[nid][nInteriorX] = -100.6073;
				i_Negocio[nid][nInteriorY] = -24.8283;
				i_Negocio[nid][nInteriorZ] = 1000.7188;
				i_Negocio[nid][nInteriorR] = 358.8331;
				i_Negocio[nid][nPrecio] = 72500;
				i_Negocio[nid][nInterior] = 3;
				format(i_Negocio[nid][nNombre], 32, "Tienda Sexual");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 10) //gasolinera
			{
				i_Negocio[nid][nInteriorX] = -27.2924;
				i_Negocio[nid][nInteriorY] = -31.7512;
				i_Negocio[nid][nInteriorZ] = 1003.5573;
				i_Negocio[nid][nInteriorR] = 7.7609;
				i_Negocio[nid][nPrecio] = 77803;
				i_Negocio[nid][nInterior] = 4;
				format(i_Negocio[nid][nNombre], 32, "Gasolinera");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 11) //electrónica
			{
				i_Negocio[nid][nInteriorX] = 161.420852;
				i_Negocio[nid][nInteriorY] = -139.998916;
				i_Negocio[nid][nInteriorZ] = 1001.804687;
				i_Negocio[nid][nInteriorR] = 0.673766;
				i_Negocio[nid][nPrecio] = 546780;
				i_Negocio[nid][nInterior] = 18;
				format(i_Negocio[nid][nNombre], 32, "Electrónica");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 12) //bar
			{
				i_Negocio[nid][nInteriorX] = 501.8288;
				i_Negocio[nid][nInteriorY] = -67.5071;
				i_Negocio[nid][nInteriorZ] = 998.7578;
				i_Negocio[nid][nInteriorR] = 180.0000;
				i_Negocio[nid][nPrecio] = 157350;
				i_Negocio[nid][nInterior] = 11;
				format(i_Negocio[nid][nNombre], 32, "Bar");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 13) //ferreteria
			{
				i_Negocio[nid][nInteriorX] = 296.8466;
				i_Negocio[nid][nInteriorY] = -111.8738;
				i_Negocio[nid][nInteriorZ] = 1001.5156;
				i_Negocio[nid][nInteriorR] = 13.0877;
				i_Negocio[nid][nPrecio] = 139750;
				i_Negocio[nid][nInterior] = 6;
				format(i_Negocio[nid][nNombre], 32, "Ferretería");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 14) //alhambra
			{
				i_Negocio[nid][nInteriorX] = 520.2808838;
				i_Negocio[nid][nInteriorY] = 147.5494538;
				i_Negocio[nid][nInteriorZ] = 1000.6796878;
				i_Negocio[nid][nInteriorR] = 181.8517158;
				i_Negocio[nid][nPrecio] = 620750;
				i_Negocio[nid][nInterior] = 17;
				format(i_Negocio[nid][nNombre], 32, "Alhambra");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 15) //strip club
			{
				i_Negocio[nid][nInteriorX] = 1204.8970;
				i_Negocio[nid][nInteriorY] = -13.8423;
				i_Negocio[nid][nInteriorZ] = 1000.9219;
				i_Negocio[nid][nInteriorR] = 359.9443;
				i_Negocio[nid][nPrecio] = 530750;
				i_Negocio[nid][nInterior] = 2;
				format(i_Negocio[nid][nNombre], 32, "Strip club");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 16) //club private
			{
				i_Negocio[nid][nInteriorX] = 1212.0414;
				i_Negocio[nid][nInteriorY] = -25.8775;
				i_Negocio[nid][nInteriorZ] = 1000.9531;
				i_Negocio[nid][nInteriorR] = 175.7025;
				i_Negocio[nid][nPrecio] = 560100;
				i_Negocio[nid][nInterior] = 3;
				format(i_Negocio[nid][nNombre], 32, "Club private");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 17) //empeño
			{
				i_Negocio[nid][nInteriorX] = -2240.7686;
				i_Negocio[nid][nInteriorY] = 137.2062;
				i_Negocio[nid][nInteriorZ] = 1035.4141;
				i_Negocio[nid][nInteriorR] = 270.4910;
				i_Negocio[nid][nPrecio] = 497300;
				i_Negocio[nid][nInterior] = 6;
				format(i_Negocio[nid][nNombre], 32, "Tienda empeño");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 18) //joyería
			{
				i_Negocio[nid][nInteriorX] = -1757.5110;
				i_Negocio[nid][nInteriorY] = 775.5543;
				i_Negocio[nid][nInteriorZ] = 107.6844;
				i_Negocio[nid][nInteriorR] = 357.9248;
				i_Negocio[nid][nPrecio] = 197300;
				i_Negocio[nid][nInterior] = 7;
				format(i_Negocio[nid][nNombre], 32, "Joyería");
				configurar_compra(nid, tipo);
			}
			else if (tipo == 19) //cafetería
			{
				i_Negocio[nid][nInteriorX] = 377.2093;
				i_Negocio[nid][nInteriorY] = -193.2922;
				i_Negocio[nid][nInteriorZ] = 1000.6328;
				i_Negocio[nid][nInteriorR] = 351.3824;
				i_Negocio[nid][nPrecio] = 83900;
				i_Negocio[nid][nInterior] = 17;
				format(i_Negocio[nid][nNombre], 32, "Cafetería");
				configurar_compra(nid, tipo);
			}
			_NegocioP(nid);
			format(string, sizeof(string), "Registros: %s ha creado el negocio ID %d.", nombre_pj(playerid), nid);
			Log("Registros/Negocios.log", string);
			save_Negocio(nid);
			nid = MAX_NEGOCIOS;
		}
	}
	return 1;
}

GCMD:borrarnegocio(playerid,  const params[])
{
	new id, string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarnegocio [negocio]");
	if (!i_Negocio[id][nTipo]) return _Mensaje(playerid, 0, "548", "Id negocio invalida.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jNegocioKey] == id)
			{
				user[i][jNegocioKey] = INVALID_NEGOCIO_ID;
				format(string, sizeof(string), " %s ha vendido tu negocio ranura 1 (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b00000", string);
			}
			else if (user[i][jNegocioKey2] == id)
			{
				user[i][jNegocioKey2] = INVALID_NEGOCIO_ID;
				format(string, sizeof(string), " %s ha vendido tu negocio ranura 2 (STAFF).", nombre_pj(playerid));
				_Mensaje(i, 4, "b00000", string);
			}
			else if (user[i][jNegocioLlaves] == id)
			{
				user[i][jNegocioLlaves] = INVALID_CASA_ID;
				user[i][jNegocio2Llaves] = 0;
			}
		}
	}
	format(i_Negocio[id][nNombre], 32, "nada");
	format(i_Negocio[id][nDueno], 32, "enventa");
	i_Negocio[id][nTipo] = 0;
	i_Negocio[id][nSeguro] = 0;
	i_Negocio[id][nComprado] = 0;
	i_Negocio[id][nExteriorX] = 0.0;
	i_Negocio[id][nExteriorY] = 0.0;
	i_Negocio[id][n_patente] = 0;
	i_Negocio[id][nExteriorZ] = 0.0;
	i_Negocio[id][nExteriorR] = 0.0;
	i_Negocio[id][nInteriorX] = 0.0;
	i_Negocio[id][nInteriorY] = 0.0;
	i_Negocio[id][nInteriorZ] = 0.0;
	i_Negocio[id][nInteriorR] = 0.0;
	i_Negocio[id][nDinero] = 0;
	i_Negocio[id][nProductos] = 0;
	i_Negocio[id][nPrecio] = 0;
	i_Negocio[id][nInterior] = 0;
	i_Negocio[id][nCuotas] = 0;
	i_Negocio[id][nPedido] = 0;
	i_Negocio[id][nCompraX] = 0.0;
	i_Negocio[id][nCompraY] = 0.0;
	i_Negocio[id][nCompraZ] = 0.0;
	DestroyDynamicPickup(i_Negocio[id][nIcono]);
	_Negocio2P(id);
	new elban[128];
	format(elban, 128, DATOS_NEGOCIOS, id);
	fremove(elban);
	return 1;
}

GCMD:nseguro(playerid)
{
	new nid = user[playerid][jNegocioKey], nid2 = user[playerid][jNegocioKey2], nid3 = user[playerid][jNegocioLlaves], string[128];
	if (nid != INVALID_NEGOCIO_ID && (en_pos(playerid, 3.0, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]) || en_pos(playerid, 3.0, i_Negocio[nid][nInteriorX], i_Negocio[nid][nInteriorY], i_Negocio[nid][nInteriorZ])))
	{
		if (!i_Negocio[nid][nSeguro])
		{
			if (i_Negocio[nid][EnLlamas] == 1) return _Mensaje(playerid, 0, "560", "No puedes abrir un negocio en llamas.");
			if (i_Negocio[nid][nCuotas] != 0)
			{
				format(string, sizeof(string), "La Alcaldía ha clausurado tu negocio, debes pagar una cuota de $%d.", i_Negocio[nid][nCuotas]);
				_Mensaje(playerid, 4, "BA1E00", string);
				return 1;
			}
			i_Negocio[nid][nSeguro] = 1;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo abre.");
			textgame_player(playerid, "~g~Negocio abierto", 3500, 1);
		}
		else if (i_Negocio[nid][nSeguro])
		{
			i_Negocio[nid][nSeguro] = 0;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo cierra.");
			textgame_player(playerid, "~r~Negocio Cerrado", 3500, 1);
		}
		save_Negocio(nid);
	}
	else if (nid2 != INVALID_NEGOCIO_ID && (en_pos(playerid, 3.0, i_Negocio[nid2][nExteriorX], i_Negocio[nid2][nExteriorY], i_Negocio[nid2][nExteriorZ]) || en_pos(playerid, 3.0, i_Negocio[nid2][nInteriorX], i_Negocio[nid2][nInteriorY], i_Negocio[nid2][nInteriorZ])))
	{
		if (!i_Negocio[nid2][nSeguro])
		{
			if (i_Negocio[nid2][EnLlamas] == 1) return _Mensaje(playerid, 0, "560", "No puedes abrir un negocio en llamas.");
			if (i_Negocio[nid2][nCuotas] != 0)
			{
				format(string, sizeof(string), "La Alcaldía ha clausurado tu negocio, debes pagar una cuota de $%d.", i_Negocio[nid2][nCuotas]);
				_Mensaje(playerid, 4, "BA1E00", string);
				return 1;
			}
			i_Negocio[nid2][nSeguro] = 1;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo abre.");
			textgame_player(playerid, "~g~Negocio abierto", 3500, 1);
		}
		else if (i_Negocio[nid2][nSeguro])
		{
			i_Negocio[nid2][nSeguro] = 0;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo cierra.");
			textgame_player(playerid, "~r~Negocio Cerrado", 3500, 1);
		}
		save_Negocio(nid2);
	}
	else if (nid3 != INVALID_NEGOCIO_ID && (en_pos(playerid, 3.0, i_Negocio[nid3][nExteriorX], i_Negocio[nid3][nExteriorY], i_Negocio[nid3][nExteriorZ]) || en_pos(playerid, 3.0, i_Negocio[nid3][nInteriorX], i_Negocio[nid3][nInteriorY], i_Negocio[nid3][nInteriorZ])))
	{
		if (!i_Negocio[nid3][nSeguro])
		{
			if (i_Negocio[nid3][EnLlamas] == 1) return _Mensaje(playerid, 0, "560", "No puedes abrir un negocio en llamas.");
			if (i_Negocio[nid3][nCuotas] != 0)
			{
				format(string, sizeof(string), "La Alcaldía ha clausurado tu negocio, debes pagar una cuota de $%d.", i_Negocio[nid3][nCuotas]);
				_Mensaje(playerid, 4, "BA1E00", string);
				return 1;
			}
			i_Negocio[nid3][nSeguro] = 1;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo abre.");
			textgame_player(playerid, "~g~Negocio abierto", 3500, 1);
		}
		else if (i_Negocio[nid3][nSeguro])
		{
			i_Negocio[nid3][nSeguro] = 0;
			accion_rol(playerid, 0, "saca sus llaves de negocio y lo cierra.");
			textgame_player(playerid, "~r~Negocio Cerrado", 3500, 1);
		}
		save_Negocio(nid3);
	} else _Mensaje(playerid, 0, "560", "No tienes un negocio o no estás cerca de la puerta para hacer esto.");
	return 1;
}

GCMD:dados(playerid)
{
	new num = Random(1, 6), string[128];
	if(user[playerid][jm_Derecha] != 83 && user[playerid][jm_Izquierda] != 83){ _Mensaje(playerid, 0, "9", "No tienes unos dados en ninguna mano."); return 1;}
	if(!CheckTimer(10, IntentarD[playerid]))
	{
		accion_rol(playerid, 1, "arrojó sus dados.");
		format(string, sizeof(string), "[**%d | %s] Ha salido la cantidad de %d en el dado que tiró.", playerid, nombre_pj(playerid, 0), num);
		ProxDetector(15.0, playerid, string, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA);
		IntentarD[playerid] = gettime();
	}
	else
	{
		format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(10, IntentarD[playerid]));
		Mensaje_(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

GCMD:moneda(playerid)
{
	new coin = random(2) + 1, string[90], coinname[10];
	if (coin == 1) coinname = "cara";
	else coinname = "cruz";
	format(string, sizeof(string), "%s lanza una moneda al aire y cae %s", nombre_pj(playerid, 0), coinname);
	ProxDetector(10.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
	return 1;
}

GCMD:multar(playerid,  const params[])
{
	new string[256];
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "1", "No eres policía.");
	if (EnServicioPD[playerid] == 0) return _Mensaje(playerid, 0, "1", "No estás en servicio.");
	if (sscanf(params, "dds[128]", params[0], params[1], params[2])) return _Mensaje(playerid, 3, "0", "/multar [id jugador] [precio] [razón]");
	if (params[1] < 0 || params[1] > 3000) return _Mensaje(playerid, 0, "1", "El máximo de multa son 3,000$");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "0", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (FacturaMulta[playerid] == 1) return _Mensaje(playerid, 0, "1", "Este jugador ya tiene una petición pendiente");
	if (!CercaDelWeon(8.0, playerid, params[0])) return _Mensaje(playerid, 0, "1", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");

	Mensaje_(params[0], -1, "");
	Mensaje_(params[0], 0x537CDBFF, "Alcaldía de Los Santos");
	format(string, sizeof(string), "Demandante:{ffffff} %s", nombre_pj(playerid, 0));
	Mensaje_(params[0], 0x00B000FF, string);
	format(string, sizeof(string), "Infracción:{ffffff} %s", params[2]);
	Mensaje_(params[0], 0x00B000FF, string);
	format(string, sizeof(string), "Multa:{ffffff} %d$", params[1]);
	Mensaje_(params[0], 0x00B000FF, string);
	Mensaje_(params[0], -1, "");
	Mensaje_(playerid, -1, "");
	Mensaje_(playerid, 0xffff00ff, "Espera la respuesta del sujeto.");
	Mensaje_(params[0], 0xffff00ff, "Te han multado. Escribe [/aceptar ó /cancelar] para pagar la multa.");
	MultaOfrecer[params[0]] = playerid;
	MultaPrecio[params[0]] = params[1];
	FacturaMulta[params[0]] = 1;
	return 1;
}

configurar_compra(id, tipo)
{
	switch (tipo)
	{
		case 1:	i_Negocio[id][nCompraX] = -23.2972, i_Negocio[id][nCompraY] = -55.2225, i_Negocio[id][nCompraZ] = 1003.5469; // 24/7
		case 2:	i_Negocio[id][nCompraX] = 207.4369, i_Negocio[id][nCompraY] = -101.2387, i_Negocio[id][nCompraZ] = 1005.2578; // binco
		case 3:	i_Negocio[id][nCompraX] = -786.0474, i_Negocio[id][nCompraY] = 500.7073, i_Negocio[id][nCompraZ] = 1371.7422; // restuar
		case 4:	i_Negocio[id][nCompraX] = 369.5903, i_Negocio[id][nCompraY] = -6.8127, i_Negocio[id][nCompraZ] = 1001.8589; // neg4
		case 5:	i_Negocio[id][nCompraX] = 375.7425, i_Negocio[id][nCompraY] = -119.5847, i_Negocio[id][nCompraZ] = 1001.4995; // pizz
		case 6:	i_Negocio[id][nCompraX] = 377.7407, i_Negocio[id][nCompraY] = -68.0652, i_Negocio[id][nCompraZ] = 1001.5151; // burger
		case 7:	i_Negocio[id][nCompraX] = 308.3300, i_Negocio[id][nCompraY] = -140.8952, i_Negocio[id][nCompraZ] = 999.6016; // ammu
		case 8:	i_Negocio[id][nCompraX] = 414.7012, i_Negocio[id][nCompraY] = -51.2874, i_Negocio[id][nCompraZ] = 1001.8984; // pelu
		case 9:	i_Negocio[id][nCompraX] = -103.9058, i_Negocio[id][nCompraY] = -22.0784, i_Negocio[id][nCompraZ] = 1000.7188; // sex
		case 10: i_Negocio[id][nCompraX] = -31.0864, i_Negocio[id][nCompraY] = -28.1350, i_Negocio[id][nCompraZ] = 1003.5573; // gaso
		case 11: i_Negocio[id][nCompraX] = 161.389739, i_Negocio[id][nCompraY] = -127.478172, i_Negocio[id][nCompraZ] = 1000.5200; // electronica
		case 12: i_Negocio[id][nCompraX] = 497.0267, i_Negocio[id][nCompraY] = -75.2835, i_Negocio[id][nCompraZ] = 998.7578; // bar
		case 13: i_Negocio[id][nCompraX] = 290.2542, i_Negocio[id][nCompraY] = -109.3171, i_Negocio[id][nCompraZ] = 1001.5156; // ferre
		case 14: i_Negocio[id][nCompraX] = 513.503967, i_Negocio[id][nCompraY] = 141.850418, i_Negocio[id][nCompraZ] = 999.5000; // alha
		case 15: i_Negocio[id][nCompraX] = 1214.5349, i_Negocio[id][nCompraY] = -12.8577, i_Negocio[id][nCompraZ] = 1000.9219; // strip
		case 16: i_Negocio[id][nCompraX] = 1207.9276, i_Negocio[id][nCompraY] = -30.5312, i_Negocio[id][nCompraZ] = 1000.9531; // club pri
		case 17: i_Negocio[id][nCompraX] = -2237.1951, i_Negocio[id][nCompraY] = 130.6037, i_Negocio[id][nCompraZ] = 1035.4141; // empeño
		case 18: i_Negocio[id][nCompraX] = -1753.8350, i_Negocio[id][nCompraY] = 790.6375, i_Negocio[id][nCompraZ] = 106.6000; // joyería
		case 19: i_Negocio[id][nCompraX] = 379.0494, i_Negocio[id][nCompraY] = -186.7250, i_Negocio[id][nCompraZ] = 1000.6328; // cafetería
	}
}

GCMD:empeno(playerid) return cmd_comprar(playerid);
GCMD:comprar(playerid)
{
	new nid = -1;
	for (new x = 0; x < MAX_NEGOCIOS; x++)
	{
		if (GetPlayerVirtualWorld(playerid) == x+300)
		{
			nid = x;
		}
	}
	if (nid == -1) return _Mensaje(playerid, 0, "545", "No estás dentro de un negocio.");
	if (!en_pos(playerid, 4.0, i_Negocio[nid][nCompraX], i_Negocio[nid][nCompraY], i_Negocio[nid][nCompraZ]))
	{
		_MarcarPos(playerid, i_Negocio[nid][nCompraX], i_Negocio[nid][nCompraY], i_Negocio[nid][nCompraZ], "No estás en el lugar de compra, camina hasta el checkpoint.", 18);
		return 1;
	}
	IDNegocio[playerid] = nid;
	if (i_Negocio[nid][nTipo] == 0) return 1;
	else if (i_Negocio[nid][nTipo] == 1) //24-7
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_TIENDA247, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Recargar saldo\n\
		Modelos de teléfono\t$500\n\
		Loteria\t$2\n\
		Cigarros\t$6\n\
		Paquete de puros\t$12\n\
		Cámara\t$12\n\
		Encendedor\t$8\n\
		Sprunk\t$4\n\
		Agua\t$1\n\
		Bolsa de doritos\t$2\n\
		Bolsa de patatas\t$2\n\
		Bolsa de nachos\t$2\n\
		Dados\t$3\n\
		Codeine\t$3\n\
		Metadona\t$315\n\
		Sixpack Cerveza\t$54", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 2) //ropa
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_ROPA, DIALOG_STYLE_MSGBOX, "Productos de venta", "Opciones:", "Skins", "Toys");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 3) //restaurante
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_RESTAURANTES, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Botella de cerveza\t$8\n\
		Copa de vino\t$3\n\
		Vaso de whisky\t$4\n\
		Vaso de ron\t$5\n\
		Pierna de pavo\t$12\n\
		Pescado frito\t$7\n\
		Burrito\t$2\n\
		Pizza jamón y queso\t$4\n\
		Taco\t$3", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 4) //cluckin bell
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_CLUCKINBELL, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Burrito\t$4\n\
		Pierna de pavo\t$10\n\
		Refresco sprunk\t$3\n\
		Botella de agua\t$1\n\
		Café\t$2", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 5) //pizzeria
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_PIZZASTACK, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Pizza jamón y queso\t$9\n\
		Burrito\t$4\n\
		Refresco sprunk\t$3\n\
		Refresco pepsi\t$3\n\
		Botella de agua\t$1", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 6) //burger shot
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_BURGERSHOT, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Hamburguesa\t$6\n\
		Burrito\t$4\n\
		Refresco pepsi\t$3\n\
		Botella de agua\t$1\n\
		Café\t$2", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 7) //ammunation
	{
		if (user[playerid][jLicencias][0] == 0) return _Mensaje(playerid, 0, "0", "No posees una licencia de armas.");

		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_AMMUNATION, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		45. Colt\t$1,870\n\
		Rifle de Caza\t$4,500\n\
		Chaleco\t$1,500\n\
		Cartuchos/Cargadores", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 8) //peluquería
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		new i_peluca[7] =
		{
			19077, 19136, 19274, 18975,
			18640, 19350, 19351
		};
		menu_selectionEx(playerid, i_peluca, sizeof(i_peluca), "Productos de venta", D_Peluqueria, 0.0, 0.0, 0.0, 1.0);
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 9) //sexshop
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_SEXSHOP, DIALOG_STYLE_LIST, "Productos de venta", "{FFFFFF}Ropa de mujer\nRopa de hombre\nJuguetes de diversión", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 10) //gasolinera
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_GASOLINERA, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Recargar saldo\n\
		Lata gas\t$150\n\
		Bolsa patatas\t$2\n\
		Refresco\t$2\n\
		Cigarros\t$3\n\
		Encendedor\t$8\n\
		Piezas recambio\t$50\n\
		Sixpack Cerveza\t$68", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 11) //electronica
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_ELECTRONICA, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Teléfono\t$500\n\
		Cámara\t$12\n\
		Equipo sonido\t$40\n\
		Stereo music\t$100\n\
		Radio portable\t$50", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 12) //bar
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Botella de agua\t$4\n\
		Copa de vino\t$15\n\
		Vaso de whisky\t$20\n\
		Vaso de ron\t$14\n\
		Cerveza\t$8\n\
		Sixpack Cerveza\t$58\n\
		Botella de whisky\t$100\n\
		Caja de cigarros\t$20\n\
		Encendedor\t$10\n\
		Burrito\t$6", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 13) //ferreteria
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_FERRETERIA, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Lata de gasolina\t$150\n\
		Destornillador\t$2\n\
		Palanca\t$30\n\
		Pala\t$5\n\
		Spray\t$8\n\
		Caja especial\t$250\n\
		Cambiar cerradura (casa 1)\t$10\n\
		Cambiar cerradura (casa 2)\t$10\n\
		Cambiar cerradura (negocio 1)\t$30\n\
		Cambiar cerradura (negocio 2)\t$30\n\
		Cambiar cerradura (empresa)\t$50", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 14) //alhambra
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Botella de agua\t$4\n\
		Copa de vino\t$15\n\
		Vaso de whisky\t$20\n\
		Vaso de ron\t$14\n\
		Cerveza\t$8\n\
		Sixpack Cerveza\t$48\n\
		Botella de whisky\t$100\n\
		Caja de cigarros\t$20\n\
		Encendedor\t$10\n\
		Burrito\t$6\n\
		Botella de vino\t$85\n\
		Botella de ron\t$81", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 15) //strip club
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Botella de agua\t$4\n\
		Copa de vino\t$15\n\
		Vaso de whisky\t$20\n\
		Vaso de ron\t$14\n\
		Cerveza\t$8\n\
		Sixpack Cerveza\t$48\n\
		Botella de whisky\t$100\n\
		Caja de cigarros\t$20\n\
		Encendedor\t$10\n\
		Burrito\t$6\n\
		Botella de vino\t$85\n\
		Botella de ron\t$81", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 16) //club private
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Botella de agua\t$4\n\
		Copa de vino\t$15\n\
		Vaso de whisky\t$20\n\
		Vaso de ron\t$14\n\
		Cerveza\t$8\n\
		Sixpack Cerveza\t$48\n\
		Botella de whisky\t$100\n\
		Caja de cigarros\t$20\n\
		Encendedor\t$10\n\
		Burrito\t$6\n\
		Botella de vino\t$85\n\
		Botella de ron\t$81", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 17) //tienda de empeño
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio se quedó sin dinero.");
		ExPlayerDialog(playerid, D_Empeno, DIALOG_STYLE_TABLIST_HEADERS, "Empeño", "Objeto\tPaga\n\
		{18f88c}Retirar Objeto{ffffff}\t-\n\
		Rifle\t$1,000\n\
		Teléfono\t$8\n\
		Radio\t$35\n\
		GPS\t$450\n\
		Cámara\t$10", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 18) //joyería
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio se quedó sin dinero.");
		new i_joyeria[17] =
		{
			19039, 19040, 19041, 19042, 19043,
			19044, 19045, 19046, 19047, 19048,
			19049, 19050, 19051, 19052, 19053, 19942, 18641
		};
		menu_selectionEx(playerid, i_joyeria, sizeof(i_joyeria), "Productos de venta", D_joyeria, 0.0, 0.0, 0.0, 1.0);
		save_Negocio(nid);
	}
	else if (i_Negocio[nid][nTipo] == 19) //cafetería
	{
		if (i_Negocio[nid][nProductos] < 1) return _Mensaje(playerid, 0, "564", "Este negocio está actualmente sin productos.");
		ExPlayerDialog(playerid, D_Cafeteria, DIALOG_STYLE_TABLIST_HEADERS, "Productos de venta", "Producto\tPrecio\n\
		Burrito\t$4\n\
		Taco\t$3\n\
		Hot dog\t$7\n\
		Botella de agua\t$1\n\
		Café\t$4\n\
		Pepsi\t$3\n\
		Sprunk\t$3", "Seleccionar", "Cancelar");
		save_Negocio(nid);
	}
	return 1;
}

GCMD:crearregalo(playerid)
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new string[128], Float: Position[4];
	if (CajadeRegalo == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		CajadeRegalo = CreateDynamicObject(19056, Position[0], Position[1], Position[2] - 0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
		dynamicgift3DText = CreateDynamic3DTextLabel("Caja de regalo | /regalo.", 0xD6E1EBFF, Position[0], Position[1], Position[2] + 0.25, 8.0);
		SetPlayerPos(playerid, Position[0], Position[1], Position[2] + 3);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s pusó un regalo temporal en su posición.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	else
	{
		DestroyDynamicObject(CajadeRegalo);
		CajadeRegalo = 0;
		DestroyDynamic3DTextLabel(Text3D: dynamicgift3DText);
		format(string, sizeof(string), "[Administración]{FFFFFF} %s eliminó el regalo temporal.", nombre_pj(playerid));
		MensajeAdmin(string);
	}
	return 1;
}

GCMD:darcolor(playerid)
{
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	if (!strcmp(nick, "Matthew_Bishop", true))
	{
		foreach(new i: Player)
		{
			SetPlayerColor(i, C_PLAYERBLANCO);
		}
	} else _Mensaje(playerid, 4, "ffffff", "No tienes acceso a este comando ({00c200}Edinson{ffffff})");
	return 1;
}

GCMD:dios(playerid)
{
	new elpro[MAX_PLAYER_NAME], string[128];
	GetPlayerName(playerid, elpro, sizeof(elpro));
	if (!strcmp(elpro, "Matthew_Bishop", true))
	{
		format(string, sizeof(string), "Robar caja: %d / Regalo: %d / Entrenar: %d", user[playerid][jTiempos][16] , user[playerid][jTiempos][5], user[playerid][jTiempos][2]);
		_Mensaje(playerid, 4, "b0b0b0", string);
		Sangre_(playerid, 100);
	} else _Mensaje(playerid, 4, "ffffff", "No tienes acceso a este comando ({00c200}Edinson{ffffff})");
	return 1;
}

GCMD:dios1(playerid)
{
    new nick[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nick, sizeof(nick));
	if (!strcmp(nick, "Matthew_Bishop", true))
	{
        user[playerid][jTiempos][1] = 0;
        user[playerid][jTiempos][2] = 0;
        user[playerid][jTiempos][3] = 0;
        user[playerid][jTiempos][4] = 0;
        user[playerid][jTiempos][5] = 0;
        user[playerid][jTiempos][6] = 0;
        user[playerid][jTiempos][7] = 0;
        user[playerid][jTiempos][8] = 0;
        user[playerid][jTiempos][9] = 0;
    	user[playerid][jTiempos][10] = 0;
    	user[playerid][jTiempos][11] = 0;
    	user[playerid][jTiempos][12] = 0;
    	user[playerid][jTiempos][13] = 0;
    	user[playerid][jTiempos][14] = 0;
    	user[playerid][jTiempos][16] = 0;
    	user[playerid][jTiempos][17] = 0;
    	user[playerid][jTiempos][18] = 0;
    	user[playerid][jTiempos][19] = 0;
		_Mensaje(playerid, 4, "ffffff", "/dios1 con éxito.");
	} else _Mensaje(playerid, 4, "ffffff", "No tienes acceso a este comando ({ff0000}Dios{ffffff})");
    return 1;
}

GCMD:embargar(playerid,  const params[])
{
	new string[129];
	if (!en_pos(playerid,100,-522.0949, -480.8566, 27.0515)) return _Mensaje(playerid, 0, "126", "No estás en la zona de embargos (deposito).");
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "6", "Tu no tienes acceso a embargar vehículos.");
	new vehicleid;
	if (sscanf(params, "d", vehicleid)) return _Mensaje(playerid, 3, "0", "/embargar [id vehiculo]");
	if (!GetVehicleModel(vehicleid)) return Mensaje_(playerid, 0xb0b0b0ff, "El vehículo seleccionado no se encuentra spawneado.");
	if (!CercaDelVehiculo(playerid, vehicleid, 8.0)) return _Mensaje(playerid, 0, "6", "No estás cerca del vehículo indicado.");
	new Float: x,Float: y,Float: z,Float: angle,Float: health;
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if(i_Vehiculo[vid][vID] == vehicleid)
		{
			if (i_Vehiculo[vid][vMulta] <= 49) return _Mensaje(playerid, 0, "1", "Para embargar el vehículo, debe contener por lo menos una multa de 50$.");
			i_Vehiculo[vid][vEnDeposito] = 1;
			GetVehicleHealth(i_Vehiculo[vid][vID], health);
			GetVehicleDamageStatus(i_Vehiculo[vid][vID], i_Vehiculo[vid][vDanioSuperficie], i_Vehiculo[vid][vDanioPuertas], i_Vehiculo[vid][vDanioLuces], i_Vehiculo[vid][vDanioRuedas]);
			i_Vehiculo[vid][vVida] = health;
			GetVehiclePos(i_Vehiculo[vid][vID], x, y, z);
			GetVehicleZAngle(i_Vehiculo[vid][vID], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			CargarCoche(playerid, vid, x, y, z, angle, health);
			CargarVehMods(vid, i_Vehiculo[vid][vID]);
			SetExVehicleHealth(i_Vehiculo[vid][vID], health);
			UpdateVehicleDamageStatus(i_Vehiculo[vid][vID], i_Vehiculo[vid][vDanioSuperficie], i_Vehiculo[vid][vDanioPuertas], i_Vehiculo[vid][vDanioLuces], i_Vehiculo[vid][vDanioRuedas]);
			vehicleSave(vid);
			format(string, sizeof(string), "* Has confiscado el vehiculo de %s - Modelo %s.", i_Vehiculo[vid][vDueno], nombre_vehiculo[i_Vehiculo[vid][vModelo] - 400]);
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "CENTRAL: %s ha confiscado el vehiculo de %s - Modelo %s (No pagó $%i de multa).", nombre_pj(playerid, 0), i_Vehiculo[vid][vDueno], nombre_vehiculo[i_Vehiculo[vid][vModelo] - 400], i_Vehiculo[vid][vMulta]);
			_MensajeRfac(1, C_COLORRADIO, string);
			format(string, sizeof string, "%s embargo el vehículo %s - dueño: %s", nombre_pj(playerid), nombre_vehiculo[i_Vehiculo[vid][vModelo] - 400], i_Vehiculo[vid][vDueno]);
			Log("Registros/Embargos.log", string);
			return 1;
		}
	}
	_Mensaje(playerid, 0, "327", "Ese vehículo no es de ningún jugador o no existe.");
	return 1;
}

GCMD:ayuntamiento(playerid)
{
	if (!en_pos(playerid, 3.0, 361.8402, 173.5364, 1008.3828)) return _Mensaje(playerid, 0, "1", "No estás en el Ayuntamiento.");

	ExPlayerDialog(playerid, D_AYUNTAMIENTO, DIALOG_STYLE_LIST, "{D6E1EB}Ayuntamiento", "Documento\nMultas\nInformación de servicios\nCuotas de negocios\nCambio de patente vehicular", "Seleccionar", "Cancelar");
	return 1;
}

GCMD:pagarmulta(playerid) return cmd_pagarm(playerid);
GCMD:pagarm(playerid)
{
	new
		string[256],
		dialog[1024],
		multad,
		stext[62]
	;
	if (!en_pos(playerid, 3.0, 862.3019, 2334.1997, 1910.4048)) return _Mensaje(playerid, 0, "1", "No estás en el departamento de policías.");
	for(new i = 0; i < 6; i++)
	{
		new veh = user[playerid][jLlaveCoche][i];
		if(veh == 0) { format(string, sizeof(string), "\n{b0b0b0}#%d - Ranura vacía", i+1); }
		else
		{
			switch(i_Vehiculo[veh-1000][vSpawned])
			{
				case 0: stext = "{ff0000}Guardado{ffffff}";
				case 1: format(stext, sizeof(stext), "{00BE00}ID: %d{ffffff}", i_Vehiculo[veh-1000][vID]);
			}
			if(i_Vehiculo[veh-1000][vEnDeposito] == 1) { format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - {CA3022}Embargado $%d", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext, i_Vehiculo[veh-1000][vMulta] + (user[playerid][jNivel]+1 * 3)); ++multad; }
			else if(i_Vehiculo[veh-1000][vMulta]) { format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s] - Multa: {00c200}%d", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400], stext, i_Vehiculo[veh-1000][vMulta]); ++multad; }
			else format(string, sizeof(string), "\n{b0b0b0}#%d - {ffffff}%s [%s]", i+1, nombre_vehiculo[i_Vehiculo[veh-1000][vModelo] - 400]);
		}
		strcat(dialog, string);
	}
	if (multad)
	{
		ExPlayerDialog(playerid, D_MULTA, DIALOG_STYLE_LIST, "{D6E1EB}Vehículos", dialog, "Seleccionar", "Cancelar");
	} else _Mensaje(playerid, 0, "1", "No tienes multas para pagar o vehículos embargados.");
	return 1;
}

GCMD:enganchar(playerid)
{
	if (Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "1", "No eres de la PD.");
	if (IsPlayerInAnyVehicle(playerid))
	{
		new carid = GetPlayerVehicleID(playerid);
		if (EstaAutoEnganche(carid))
		{
			new closestcar = DetectarCerrado(playerid, carid);
			if (CercaDeVehiculo(playerid, closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
			{
				AttachTrailerToVehicle(closestcar, carid);
				return 1;
			}
		} else _Mensaje(playerid, 0, "1", "No puedes remolcar en este tipo de vehículo.");
	} else _Mensaje(playerid, 0, "1", "Tienes que estar en un coche.");
	return 1;
}
GCMD:desnganchar(playerid)
{
	if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		_Mensaje(playerid, 4, "00c200", "Has desenganchado el vehículo que traías.");
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	} else _Mensaje(playerid, 0, "1", "Aún no has enganchado nada.");
	return 1;
}

GCMD:dejarmulta(playerid,  const params[])
{
	if (!Es_Faccion(playerid, 1)) return _Mensaje(playerid, 0, "1", "No eres policía.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/dejarmulta [id vehículo]");
	new Float: x, Float: y, Float: z, vehicleid = strval(params), string[128];
	for (new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			GetVehiclePos(vehicleid, x, y, z);
			if (en_pos(playerid, 5.0, x, y, z))
			{
				if (i_Vehiculo[v][vMulta] >= 3000) return _Mensaje(playerid, 0, "1", "Este vehiculo ya excedio el máximo de multas, se debe embargar!");
				i_Vehiculo[v][vMulta] += 250;
				format(string, sizeof(string), "* Dejaste una multa de $250 en el coche de %s, modelo %s.", i_Vehiculo[v][vDueno], NombreVehiculo(i_Vehiculo[v][vID]));
				_Mensaje(playerid, 4, "33CCFF", string);
				format(string, sizeof string, "%s dejó una multa en el vehículo %s - dueño: %s ($250).", nombre_pj(playerid), NombreVehiculo(i_Vehiculo[v][vID]), i_Vehiculo[v][vDueno]);
				Log("Registros/DejarMulta.log", string);
				vehicleSave(v);
				return 1;
			} else _Mensaje(playerid, 0, "1", "Necesitas estar cerca del vehículo seleccionado vehículo.");
		}
	}
	return 1;
}

//comandos de garages
GCMD:creargarage(playerid,  const params[])
{
	new tipo,extra,string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "iii",params[0], tipo, extra))
	{
		_Mensaje(playerid, 3, "0", "/creargarage [id casa] [tipo garage] [extra]");
		_Mensaje(playerid, 1, "0", "1) Tamaño Pequeño | 2) Tamaño Mediano | 3) Tamaño Grande.");
		return 1;
	}
	if(tipo < 1 || tipo > 3) return _Mensaje(playerid, 1, "0", "Los Garages estan entre 1 y 3 Tamaños.");
	for(new gid=0; gid<MAX_GARAJES; gid++)
	{
		if(!i_Garaje[gid][gTipo])
		{
			i_Garaje[gid][gIDCasa] = params[0];
			i_Garaje[gid][gTipo] = tipo;
			i_Garaje[gid][gSeguro] = 0;
			i_Garaje[gid][gInterior] = 10;
			i_Garaje[gid][gVirtualWorld] = gid+100;
			GetPlayerPos(playerid,i_Garaje[gid][gExteriorX],i_Garaje[gid][gExteriorY],i_Garaje[gid][gExteriorZ]);
			GetPlayerFacingAngle(playerid,i_Garaje[gid][gExteriorA]);
			GetPosInFrontOfPlayer(playerid,i_Garaje[gid][gExteriorX_V],i_Garaje[gid][gExteriorY_V],extra);
			if(tipo == 1)//pequeño
			{
				i_Garaje[gid][gInteriorX] = -2459.9412;
				i_Garaje[gid][gInteriorY] = -629.6068;
				i_Garaje[gid][gInteriorZ] = 12.4679;
				i_Garaje[gid][gInteriorA] = 180.0000;
			}
			else if(tipo == 2)//mediano
			{
				i_Garaje[gid][gInteriorX] = -2412.8394;
				i_Garaje[gid][gInteriorY] = -638.7484;
				i_Garaje[gid][gInteriorZ] = 12.4856;
				i_Garaje[gid][gInteriorA] = 0.0000;
			}
			else if(tipo == 3)//grande
			{
				i_Garaje[gid][gInteriorX] = -2399.5564;
				i_Garaje[gid][gInteriorY] = -595.9595;
				i_Garaje[gid][gInteriorZ] = 12.4332;
				i_Garaje[gid][gInteriorA] = 44.4002;
			}
			_gajCP[gid] = CreateDynamicCP(i_Garaje[gid][gExteriorX], i_Garaje[gid][gExteriorY], i_Garaje[gid][gExteriorZ] - 1, 4.0, -1, -1, -1, 5.0);
			format(string, sizeof(string), "Registros: %s ha creado el Garage ID %d.", nombre_pj(playerid), gid);
			Log("Registros/Garages.log", string);
			save_Garaje(gid);
			gid = MAX_GARAJES;
		}
	}
	return 1;
}

GCMD:borrargarage(playerid,  const params[])
{
	new id;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrargarage [garageid]");
	if (!i_Garaje[id][gTipo]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	i_Garaje[id][gIDCasa] = -1;
	i_Garaje[id][gInterior] = 0;
	i_Garaje[id][gVirtualWorld] = 0;
	i_Garaje[id][gSeguro] = 0;
	i_Garaje[id][gTipo] = 0;
	i_Garaje[id][gExteriorX] = 0;
	i_Garaje[id][gExteriorY] = 0;
	i_Garaje[id][gExteriorZ] = 0;
	i_Garaje[id][gExteriorA] = 0;
	i_Garaje[id][gExteriorX_V] = 0;
	i_Garaje[id][gExteriorY_V] = 0;
	i_Garaje[id][gInteriorX] = 0;
	i_Garaje[id][gInteriorY] = 0;
	i_Garaje[id][gInteriorZ] = 0;
	i_Garaje[id][gInteriorA] = 0;
	DestroyDynamicCP(_gajCP[id]);
	new elban[128];
	format(elban, 128, DATOS_GARAGES, id);
	fremove(elban);
	return 1;
}

GCMD:gseguro(playerid)
{
	for(new i = 0; i< sizeof(i_Garaje); i++)
	{
		if(en_pos(playerid, 7, i_Garaje[i][gExteriorX], i_Garaje[i][gExteriorY], i_Garaje[i][gExteriorZ]) || en_pos(playerid, 10, i_Garaje[i][gInteriorX], i_Garaje[i][gInteriorY], i_Garaje[i][gInteriorZ]))
		{
			if(strmatch(i_Casa[i_Garaje[i][gIDCasa]][cComprador],nombre_sin(playerid)))
			{
				if(!i_Garaje[i][gSeguro])
				{
					i_Garaje[i][gSeguro] = 1;
					accion_rol(playerid, 0, "saca sus llaves de su garage y lo abre.");
					textgame_player(playerid, "~g~Garage abierto", 3500, 3);
				}
				else if(i_Garaje[i][gSeguro])
				{
					i_Garaje[i][gSeguro] = 0;
					accion_rol(playerid, 0, "saca sus llaves de su garage y lo cierra.");
					textgame_player(playerid, "~r~Garage Cerrado", 3500, 3);
				}
				save_Garaje(i);
			}
		}
	}
	return 1;
}
GCMD:entrarg(playerid)
{
	for(new gid=0; gid<MAX_GARAJES; gid++)
	{
		if(en_pos(playerid, 7, i_Garaje[gid][gExteriorX], i_Garaje[gid][gExteriorY], i_Garaje[gid][gExteriorZ]))
		{
			if(i_Garaje[gid][gSeguro] == 0) return textgame_player(playerid, "~w~Garage ~r~Cerrado", 5000, 1);
			if(i_Garaje[gid][gTipo] == 1 || i_Garaje[gid][gTipo] == 2 || i_Garaje[gid][gTipo] == 3)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					SetPlayerPos(playerid,i_Garaje[gid][gInteriorX],i_Garaje[gid][gInteriorY],i_Garaje[gid][gInteriorZ]);
					SetPlayerFacingAngle(playerid,i_Garaje[gid][gInteriorA]);
					SetPlayerInterior(playerid, i_Garaje[gid][gInterior]);
					user[playerid][jInterior] = i_Garaje[gid][gInterior];
					SetPlayerVirtualWorld(playerid, i_Garaje[gid][gVirtualWorld]);
					user[playerid][jVirtualWorld] = i_Garaje[gid][gVirtualWorld];
					DentroGarage[playerid] = gid;
					EnGarajeID[playerid] = gid;
				}
				else
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						if(IsPlayerInVehicle(playerid, tmpcar))
						{
							SetPlayerVirtualWorld(playerid, i_Garaje[gid][gVirtualWorld]);
							SetVehicleVirtualWorld(tmpcar, i_Garaje[gid][gVirtualWorld]);
							SetPlayerInterior(playerid,i_Garaje[gid][gInterior]);
							LinkVehicleToInterior(tmpcar, i_Garaje[gid][gInterior]);
							SetVehiclePos(tmpcar,i_Garaje[gid][gInteriorX],i_Garaje[gid][gInteriorY],i_Garaje[gid][gInteriorZ]);
							SetVehicleZAngle(tmpcar,i_Garaje[gid][gInteriorA]);
							foreach(new p: Player)
							{
								if(IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
								{
									SetPlayerInterior(p, i_Garaje[gid][gInterior]);
									user[p][jInterior] = i_Garaje[gid][gInterior];
									SetPlayerVirtualWorld(p, i_Garaje[gid][gVirtualWorld]);
									user[p][jVirtualWorld] = i_Garaje[gid][gVirtualWorld];
								}
							}
							for (new v = 0; v < MAX_VEHICULOS; v++)
							{
								if(i_Vehiculo[v][vID] == tmpcar)
								{
									i_Vehiculo[v][vVirtualWorld] = i_Garaje[gid][gVirtualWorld];
									i_Vehiculo[v][vInterior] = i_Garaje[gid][gInterior];
								}
							}
							DentroGarage[playerid] = gid;
							EnGarajeID[playerid] = gid;
							return 1;
						}
					}
				}
			}
		}
	}
	return 1;
}
GCMD:salirg(playerid)
{
	for(new gid=0; gid<MAX_GARAJES; gid++)
	{
		if(en_pos(playerid,7,i_Garaje[gid][gInteriorX],i_Garaje[gid][gInteriorY],i_Garaje[gid][gInteriorZ]) && (GetPlayerVirtualWorld(playerid) == i_Garaje[gid][gVirtualWorld]))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				SetPlayerPos(playerid, i_Garaje[gid][gExteriorX], i_Garaje[gid][gExteriorY], i_Garaje[gid][gExteriorZ]);
				SetPlayerFacingAngle(playerid,i_Garaje[gid][gExteriorA]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				user[playerid][jInterior] = 0;
				user[playerid][jVirtualWorld] = 0;
				DentroGarage[playerid] = -1;
				EnGarajeID[playerid] = -1;
			}
			else
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					if(IsPlayerInVehicle(playerid, tmpcar))
					{
						LinkVehicleToInterior(tmpcar,0);
						SetVehicleVirtualWorld(tmpcar,0);
						SetVehiclePos(tmpcar,i_Garaje[gid][gExteriorX_V],i_Garaje[gid][gExteriorY_V],i_Garaje[gid][gExteriorZ]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetVehicleZAngle(tmpcar,i_Garaje[gid][gExteriorA]);
						foreach(new p: Player)
						{
							if(IsPlayerInVehicle(p,tmpcar))
							{
								SetPlayerInterior(p,0);
								SetPlayerVirtualWorld(p,0);
								user[p][jInterior] = 0;
								user[p][jVirtualWorld] = 0;
								DentroGarage[p] = INVALID_CASA_ID;
							}
						}
						for (new v = 0; v < MAX_VEHICULOS; v++)
						{
							if(i_Vehiculo[v][vID] == tmpcar)
							{
								i_Vehiculo[v][vVirtualWorld] = 0;
								i_Vehiculo[v][vInterior] = 0;
							}
						}
						DentroGarage[playerid] = -1;
						EnGarajeID[playerid] = -1;
						return 1;
					}
				}
			}
		}
	}
	return 1;
}

//comandos de casas
GCMD:editarcasa(playerid,  const params[])
{
	new cid, input;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarcasa [Nombre] [casaid]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}exterior - interior - precio");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, cid)) return _Mensaje(playerid, 3, "0", "/editarcasa exterior [casaid]");
		if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
		GetPlayerPos(playerid, i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ]);
		GetPlayerFacingAngle(playerid, i_Casa[cid][cExteriorA]);
		i_Casa[cid][c_Int] = GetPlayerInterior(playerid);
		i_Casa[cid][c_VW] = GetPlayerVirtualWorld(playerid);
		save_Casa(cid);
		DestroyDynamicCP(_casaCP[cid]);
		_casaCP[cid] = CreateDynamicCP(i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ] - 1, 1.5, i_Casa[cid][c_VW], i_Casa[cid][c_Int], -1, 5.0);
		_Mensaje(playerid, 1, "0", "Cambiaste el exterior de la casa.");
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, cid)) return _Mensaje(playerid, 3, "0", "/editarcasa interior [casaid]");
		if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
		GetPlayerPos(playerid, i_Casa[cid][cInteriorX], i_Casa[cid][cInteriorY], i_Casa[cid][cInteriorZ]);
		GetPlayerFacingAngle(playerid, i_Casa[cid][cInteriorA]);
		i_Casa[cid][cInterior] = GetPlayerInterior(playerid);
		save_Casa(cid);
		DestroyDynamicCP(_casaCP[cid]);
		_casaCP[cid] = CreateDynamicCP(i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ] - 1, 1.5, i_Casa[cid][c_VW], i_Casa[cid][c_Int], -1, 5.0);
		_Mensaje(playerid, 1, "0", "Cambiaste el interior de la casa.");
	}
	else if (!strcmp(params, "precio", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, cid, input)) return _Mensaje(playerid, 3, "0", "/editarcasa precio [casaid] [precio]");
		if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
		if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "570", "Tú no tienes acceso a el comando /Editarcasa.");
		i_Casa[cid][cPrecio] = input;
		save_Casa(cid);
		DestroyDynamicCP(_casaCP[cid]);
		_casaCP[cid] = CreateDynamicCP(i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ] - 1, 1.5, i_Casa[cid][c_VW], i_Casa[cid][c_Int], -1, 5.0);
		_Mensaje(playerid, 1, "0", "Cambiaste el precio de la casa.");
	}
	save_Casa(cid);
	return 1;
}

GCMD:ainterior(playerid,  const params[])
{
	new
		interior
	;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", interior)) return _Mensaje(playerid, 3, "0", "/ainterior [id interior]");
	if (interior < 1 || interior > 27) return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 27.");

	change_interior(0, interior, 0, playerid, 77); //_creación de interior
	return 1;
}

GCMD:crearcasa(playerid,  const params[])
{
	new
		interior,
		precio,
		string[128]
	;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "ii", interior, precio)) return _Mensaje(playerid, 3, "0", "/crearcasa [id interior] [precio]");
	if (interior < 1 || interior > 27) return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 27.");
	for (new cid = 0; cid < MAX_CASAS; cid++)
	{
		if (!i_Casa[cid][cEspacio])
		{
		    i_Casa[cid][c_VW] = GetPlayerVirtualWorld(playerid);
		    i_Casa[cid][c_Int] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ]);
			GetPlayerFacingAngle(playerid, i_Casa[cid][cExteriorA]);
			i_Casa[cid][cEstado] = 0; //_puerta cerrada
			change_interior(cid, interior, precio, playerid, 1); //_creación de interior
			DestroyDynamicCP(_casaCP[cid]);
			_casaCP[cid] = CreateDynamicCP(i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ] - 1, 1.5, i_Casa[cid][c_VW], i_Casa[cid][c_Int], -1, 5.0);
			format(string, sizeof(string), "Registros: %s ha creado la casa ID %d (precio: %d$).", nombre_pj(playerid), cid, precio);
			Log("Registros/Casas.log", string);
			save_Casa(cid);
			cid = MAX_CASAS;
		}
	}
	return 1;
}

GCMD:changear(playerid,  const params[])
{
	new
	    cid,
		interior,
		precio
	;
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "iii", cid, interior, precio)) return _Mensaje(playerid, 3, "0", "/changear [id casa] [id interior] [precio]");
	if (interior < 1 || interior > 27) return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 27.");
	if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");

	change_interior(cid, interior, precio, playerid); //_creación de interior
	save_Casa(cid);
	return 1;
}

GCMD:borrarcasa(playerid,  const params[])
{
	new id, string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarcasa [casa id]");
	if (!i_Casa[id][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jCasaKey] == id)
			{
				user[i][jCasaKey] = INVALID_CASA_ID;
				format(string, sizeof(string), "Administrator %s ha suprimido su casa ranura 1.", nombre_pj(playerid));
				_Mensaje(i, 2, "0", string);
			}
			else if (user[i][jCasaKey2] == id)
			{
				user[i][jCasaKey2] = INVALID_CASA_ID;
				format(string, sizeof(string), "Administrator %s ha suprimido su casa ranura 2.", nombre_pj(playerid));
				_Mensaje(i, 2, "0", string);
			}
			else if (user[i][jCasaLlaves] == id)
			{
				user[i][jCasaLlaves] = INVALID_CASA_ID, user[i][jCasa2Llaves] = 0;
			}
			else if (user[i][j2CasaLlaves] == id)
			{
				user[i][j2CasaLlaves] = INVALID_CASA_ID, user[i][j2Casa2Llaves] = 0;
			}
		}
	}
	Log("Registros/Casas.log", string);
	format(i_Casa[id][cNombre], 32, "Dulce Hogar");
	i_Casa[id][cEstado] = 0;
	i_Casa[id][cComprado] = 0;
	format(i_Casa[id][cComprador], 32, "enventa");
	i_Casa[id][cEspacio] = 0;
	i_Casa[id][croiretnI] = 0;
	i_Casa[id][cExteriorX] = 0;
	i_Casa[id][cExteriorY] = 0;
	i_Casa[id][cExteriorZ] = 0;
	i_Casa[id][cExteriorA] = 0;
	i_Casa[id][cInteriorX] = 0;
	i_Casa[id][cInteriorY] = 0;
	i_Casa[id][cInteriorZ] = 0;
	i_Casa[id][cInteriorA] = 0;
	i_Casa[id][cInterior] = 0;
	i_Casa[id][cPrecio] = 0;
	i_Casa[id][cDinero] = 0;
	i_Casa[id][c_alquiler] = 0;
	i_Casa[id][c_alquilado] = 0;
	i_Casa[id][c_patente] = 0;
	i_Casa[id][cArmarioPos][0] = 0.0;
	i_Casa[id][cArmarioPos][1] = 0.0;
	i_Casa[id][cArmarioPos][2] = 0.0;
	i_Casa[id][cGarajePos][0] = 0.0;
	i_Casa[id][cGarajePos][1] = 0.0;
	i_Casa[id][cGarajePos][2] = 0.0;
	i_Casa[id][cGarajePos][3] = 0.0;
	i_Casa[id][cGarajePos][4] = 0.0;
	i_Casa[id][cGarajePos][5] = 0.0;
	i_Casa[id][cGarajePos][6] = 0.0;
	i_Casa[id][cGarajePos][7] = 0.0;
	i_Casa[id][cArmario][0] = 0;
	i_Casa[id][cArmario][1] = 0;
	i_Casa[id][cArmario][2] = 0;
	i_Casa[id][cArmario][3] = 0;
	i_Casa[id][cArmario][4] = 0;
	i_Casa[id][cArmario][5] = 0;
	i_Casa[id][cArmario][6] = 0;
	i_Casa[id][cArmario][7] = 0;
	i_Casa[id][cArmario][8] = 0;
	i_Casa[id][cArmario][9] = 0;
	i_Casa[id][cArmario][10] = 0;
	i_Casa[id][cArmario][11] = 0;
	i_Casa[id][cArmario][12] = 0;
	i_Casa[id][cArmario][13] = 0;
	i_Casa[id][cArmario][14] = 0;
	i_Casa[id][cArmarioCantidad][0] = 0;
	i_Casa[id][cArmarioCantidad][1] = 0;
	i_Casa[id][cArmarioCantidad][2] = 0;
	i_Casa[id][cArmarioCantidad][3] = 0;
	i_Casa[id][cArmarioCantidad][4] = 0;
	i_Casa[id][cArmarioCantidad][5] = 0;
	i_Casa[id][cArmarioCantidad][6] = 0;
	i_Casa[id][cArmarioCantidad][7] = 0;
	i_Casa[id][cArmarioCantidad][8] = 0;
	i_Casa[id][cArmarioCantidad][9] = 0;
	i_Casa[id][cArmarioCantidad][10] = 0;
	i_Casa[id][cArmarioCantidad][11] = 0;
	i_Casa[id][cArmarioCantidad][12] = 0;
	i_Casa[id][cArmarioCantidad][13] = 0;
	i_Casa[id][cArmarioCantidad][14] = 0;
	DestroyDynamicCP(_casaCP[id]);
	new elban[128];
	format(elban, 128, DATOS_CASAS, id);
	fremove(elban);
	return 1;
}

GCMD:avecasa(playerid,  const params[])
{
	new casaid, string[128];
	if (user[playerid][jAdmin] < 10) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", casaid)) return _Mensaje(playerid, 3, "0", "/avecasa [casa id]");
	if (!i_Casa[casaid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
	if (!strcmp("enventa", i_Casa[casaid][cComprador], true)) return _Mensaje(playerid, 0, "576", "Esta Casa no es poseída por nadie.");
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i))
		{
			if (user[i][jCasaKey] == casaid)
			{
				user[i][jCasaKey] = INVALID_CASA_ID;
				format(string, sizeof(string), "Administrator %s ha vendido tu casa ranura 1.", nombre_pj(playerid));
				_Mensaje(i, 2, "0", string);
			}
			else if (user[i][jCasaKey2] == casaid)
			{
				user[i][jCasaKey2] = INVALID_CASA_ID;
				format(string, sizeof(string), "Administrator %s ha vendido tu casa ranura 2.", nombre_pj(playerid));
				_Mensaje(i, 2, "0", string);
			}
			else if (user[i][jCasaLlaves] == i)
			{
				user[i][jCasaLlaves] = INVALID_CASA_ID, user[i][jCasa2Llaves] = 0;
			}
			else if (user[i][j2CasaLlaves] == i)
			{
				user[i][j2CasaLlaves] = INVALID_CASA_ID, user[i][j2Casa2Llaves] = 0;
			}
		}
	}
	format(i_Casa[casaid][cNombre], 32, "Dulce Hogar");
	i_Casa[casaid][cEstado] = 0;
	i_Casa[casaid][cComprado] = 0;
	format(i_Casa[casaid][cComprador], 32, "enventa");
	i_Casa[casaid][cDinero] = 0;
	i_Casa[casaid][c_alquilado] = 0;
	i_Casa[casaid][c_patente] = 0;
	_Mensaje(playerid, 2, "0", "Has vendido la casa indicada.");
	save_Casa(casaid);
	return 1;
}

/*stock qi_puesto(nombre[])
{
	new
		N[24]
	;
	strmid(N, nombre, 0, strlen(nombre), 24);
	for(new i = 0; i < MAX_PLAYER_NAME; i++)
	{
		if(N[i] == ' ') N[i] = '_';
	}
	return N;
}

GCMD:ncasa(playerid,  const params[])
{
	new
		string[128],
		casa
	;
	if (sscanf(params, "d", casa)) return _Mensaje(playerid, 3, "0", "/ncasa [id casa]");
	if (i_Casa[casa][cComprado] == 0) return SendClientMessage(playerid, -1, "Esa casa no está comprada.");
	new name[24];
	alm(name, qi_puesto(i_Casa[casa][cComprador]));
	new dinero=i_Casa[casa][cPrecio]+i_Casa[casa][cDinero];
	if (characterCheck(name))
	{
		new fcuenta[256];
		format(fcuenta, sizeof(fcuenta), DATOS_Personajes, name);
		if(!fexist(fcuenta)) return Mensaje_(playerid, -1, "Esta cuenta no existex2.");
		INI_ParseFile(fcuenta, "CARGARDinero", .bExtra = true, .extra = playerid);
		new data[60];
		format(data, sizeof data, DATOS_Personajes, name);
		new INI: File = INI_Open(data);
		INI_WriteInt(File, "Dinero", dinero+x_jail[playerid]);
		INI_WriteInt(File, "Casa", -1);
		INI_Close(File);
		format(string, 128, "Ahora tiene %d$ (antes %d$) [%s] por su casa.", dinero+x_jail[playerid], x_jail[playerid], name);
		SendClientMessage(playerid, 0xffff00ff, string);
		i_Casa[casa][cComprado] = 0;
		return 1;
	} else _Mensaje(playerid, 0, "179", "Esa cuenta no existe.");
	return 1;
}

funcion CARGARDinero(playerid, name[], value[])
{
	INI_Int("Dinero", x_jail[playerid]);
	return 1;
}

GCMD:test_1(playerid,  const params[])
{
	new string[128];
	for (new i = 0; i < MAX_CASAS; i++) //- Sistema de casas
	{
		if (i_Casa[i][cComprado])
		{
		    format(string, sizeof(string), "Casa ID: %d - Dar: %d - Dueño: %s", i, i_Casa[i][cPrecio]+i_Casa[i][cDinero], i_Casa[i][cComprador]);
			Mensaje_(playerid, 0xb0b0b0ff, string);
		}
	}
    return 1;
}*/

GCMD:comprarcasa(playerid)
{
	if (user[playerid][j_Mascara] == 1) return _Mensaje(playerid, 0, "0", "No puedes comprar una propiedad con /mascara.");
	for (new h = 0; h < sizeof(i_Casa); h++)
	{
		if (en_pos(playerid, 2.0, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[h][c_VW])
		{
			if (i_Casa[h][cComprado] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Esta casa ya tiene dueño.");
			if(user[playerid][jCasaKey] == INVALID_CASA_ID)
			{
				if (ComprobarDineroJ(playerid) >= i_Casa[h][cPrecio])
				{
					user[playerid][jCasaKey] = h;
					i_Casa[h][cComprado] = 1;
					i_Casa[h][c_alquilado] = 0;
					i_Casa[h][c_patente] = h+Random(-400000, 999999);
					strmid(i_Casa[h][cComprador], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
					format(i_Casa[h][cNombre], 32, "Dulce Hogar");
					DarDineroGC(playerid, -i_Casa[h][cPrecio]);
					d_estado += i_Casa[h][cPrecio];
					SetPlayerInterior(playerid, i_Casa[h][cInterior]);
					CargarObjetos(playerid);
					SetPlayerPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]);
					SetPlayerFacingAngle(playerid, i_Casa[h][cInteriorA]);
					user[playerid][jInterior] = i_Casa[h][cInterior];
					Mensaje_(playerid, 0xFFEA5FFF, "Felicitaciones por tu nueva compra.");
					Mensaje_(playerid, 0xFFEA5FFF, "Escribe ({FFFFFF}/ayuda propiedades{FFEA5F}) para ver los comandos disponibles!");
					user[playerid][jVirtualWorld] = h + 6000;
					SetPlayerVirtualWorld(playerid, h + 6000);
    				save_Casa(h);
               		return 1;
	 			} else _Mensaje(playerid, 0, "579", "No tienes fondos suficientes para comprarte esta casa.");
	 		} else if (user[playerid][jPremium] == 0 || user[playerid][jPremium] == 1) _Mensaje(playerid, 0, "578", "Ya posees una casa en la ranura 1.");
			if (user[playerid][jPremium] >= 2)
			{
        		if(user[playerid][jCasaKey2] == INVALID_CASA_ID)
				{
					if (ComprobarDineroJ(playerid) >= i_Casa[h][cPrecio])
					{
						user[playerid][jCasaKey2] = h;
						i_Casa[h][cComprado] = 1;
						i_Casa[h][c_alquilado] = 0;
						i_Casa[h][c_patente] = h+Random(-400000, 999999);
						strmid(i_Casa[h][cComprador], nombre_sin(playerid), 0, strlen(nombre_sin(playerid)), 32);
						format(i_Casa[h][cNombre], 32, "Dulce Hogar");
						DarDineroGC(playerid, -i_Casa[h][cPrecio]);
						d_estado += i_Casa[h][cPrecio];
						SetPlayerInterior(playerid, i_Casa[h][cInterior]);
						CargarObjetos(playerid);
						SetPlayerPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]);
						SetPlayerFacingAngle(playerid, i_Casa[h][cInteriorA]);
						user[playerid][jInterior] = i_Casa[h][cInterior];
						Mensaje_(playerid, 0xFFEA5FFF, "Felicitaciones por tu nueva compra.");
						Mensaje_(playerid, 0xFFEA5FFF, "Escribe ({FFFFFF}/ayuda propiedades{FFEA5F}) para ver los comandos disponibles!");
						user[playerid][jVirtualWorld] = h + 6000;
						SetPlayerVirtualWorld(playerid, h + 6000);
						save_Casa(h);
						return 1;
	 				} else _Mensaje(playerid, 0, "579", "No tienes fondos suficientes para comprarte esta casa.");
				} else _Mensaje(playerid, 0, "578", "Ya posees una casa en la ranura 1 y 2.");
			}
		}
	}
    return 1;
}

GCMD:darllaves(playerid,  const params[])
{
	new string[256];
	if (sscanf(params, "ds[128]", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darllaves [id jugador] [casa - negocio - empresa]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "367", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid == params[0]) return _Mensaje(playerid, 0, "133", "No puedes darte las llaves a ti mismo.");
	if (!CercaDelWeon(3.0, playerid, params[0])) return _Mensaje(playerid, 0, "0", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (!strcmp(params[1], "casa", true))
	{
		if (user[playerid][jCasaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 1.");
		if (user[params[0]][jCasaLlaves] == INVALID_CASA_ID)
		{
			format(string, sizeof(string), "Has dado una copia de llaves de tu casa a %s.", nombre_pj(params[0]));
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "%s te ha dado una copia de llave de su casa.", nombre_pj(playerid));
			_Mensaje(params[0], 4, "33CCFF", string);
			user[params[0]][jCasaLlaves] = user[playerid][jCasaKey];
			user[params[0]][jCasa2Llaves] = i_Casa[user[playerid][jCasaKey]][c_patente];
			return 1;
		}
		else if (user[params[0]][j2CasaLlaves] == INVALID_CASA_ID)
		{
			format(string, sizeof(string), "Has dado una copia de llaves (ranura 2) de tu casa a %s.", nombre_pj(params[0]));
			_Mensaje(playerid, 4, "33CCFF", string);
			format(string, sizeof(string), "%s te ha dado una copia de llave (ranura 2) de su casa.", nombre_pj(playerid));
			_Mensaje(params[0], 4, "33CCFF", string);
			user[params[0]][j2CasaLlaves] = user[playerid][jCasaKey];
			user[params[0]][j2Casa2Llaves] = i_Casa[user[playerid][jCasaKey]][c_patente];
			return 1;
		}
		_Mensaje(playerid, 0, "2", "Ese jugador ya posee dos llaves de casas.");
		return 1;
	}
	else if (!strcmp(params[1], "negocio", true))
	{
		if (user[playerid][jNegocioKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes un negocio en la ranura 1.");
		if (user[params[0]][jNegocioLlaves] != INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "Ese jugador ya posee unas llaves de negocio.");

		format(string, sizeof(string), "Has dado una copia de llaves de tu negocio a %s.", nombre_pj(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "%s te ha dado una copia de llave de su negocio.", nombre_pj(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);
		user[params[0]][jNegocioLlaves] = user[playerid][jNegocioKey];
		user[params[0]][jNegocio2Llaves] = i_Negocio[user[playerid][jNegocioKey]][n_patente];
		return 1;
	}
	else if (!strcmp(params[1], "empresa", true))
	{
		if (user[playerid][jEmpresaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una empresa en la ranura 1.");
		if (user[params[0]][jEmpresaLlaves] != INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "Ese jugador ya posee unas llaves de empresa.");

		format(string, sizeof(string), "Has dado una copia de llaves de tu empresa a %s.", nombre_pj(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "%s te ha dado una copia de llave de su empresa.", nombre_pj(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);
		user[params[0]][jEmpresaLlaves] = user[playerid][jEmpresaKey];
		user[params[0]][jEmpresa2Llaves] = i_Empresa[user[playerid][jEmpresaKey]][e_patente];
		return 1;
	}
	return 1;
}

GCMD:quitarllaves(playerid,  const params[])
{
	new string[256];
	if (sscanf(params, "ds[128]", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/quitarllaves [id jugador] [casa - negocio - empresa]");
	if (!IsPlayerConnected(params[0])) return _Mensaje(playerid, 0, "367", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(3.0, playerid, params[0])) return _Mensaje(playerid, 0, "0", "Estás lejos del jugador.");
	if (Spectando[params[0]] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (playerid == params[0]) return _Mensaje(playerid, 0, "133", "No puedes quitarte las llaves a ti mismo.");

	if (!strcmp(params[1], "casa", true))
	{
		if (user[playerid][jCasaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 1.");
		if (user[params[0]][jCasaLlaves] == -1) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene ningunas llaves de casa.");
		if (user[params[0]][jCasaLlaves] != user[playerid][jCasaKey]) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene una copia de llaves de tu casa.");

		format(string, sizeof(string), "Le has quitado a %s la copia de llaves de tu casa.", nombre_pj(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "%s te quitó las llaves de su casa.", nombre_pj(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);
		user[params[0]][jCasaLlaves] = INVALID_CASA_ID;
		user[params[0]][jCasa2Llaves] = 0;
		return 1;
	}
	else if (!strcmp(params[1], "negocio", true))
	{
		if (user[playerid][jNegocioKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes un negocio en la ranura 1.");
		if (user[params[0]][jNegocioLlaves] == -1) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene ningunas llaves de negocio.");
		if (user[params[0]][jNegocioLlaves] != user[playerid][jNegocioKey]) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene una copia de llaves de tu negocio.");

		format(string, sizeof(string), "Le has quitado a %s la copia de llaves de tu negocio.", nombre_pj(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "%s te quitó las llaves de su negocio.", nombre_pj(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);
		user[params[0]][jNegocioLlaves] = INVALID_CASA_ID;
		user[params[0]][jNegocio2Llaves] = 0;
		return 1;
	}
	else if (!strcmp(params[1], "empresa", true))
	{
		if (user[playerid][jEmpresaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una empresa en la ranura 1.");
		if (user[params[0]][jEmpresaLlaves] == -1) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene ningunas llaves de empresa.");
		if (user[params[0]][jEmpresaLlaves] != user[playerid][jEmpresaKey]) return _Mensaje(playerid, 0, "2", "Ese jugador no tiene una copia de llaves de tu empresa.");

		format(string, sizeof(string), "Le has quitado a %s la copia de llaves de tu empresa.", nombre_pj(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof(string), "%s te quitó las llaves de su empresa.", nombre_pj(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);
		user[params[0]][jEmpresaLlaves] = INVALID_CASA_ID;
		user[params[0]][jEmpresa2Llaves] = 0;
		return 1;
	}
	return 1;
}

GCMD:vendercasa(playerid)
{
	new casa = user[playerid][jCasaKey], string[128];
	if (user[playerid][jCasaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 1.");
	if (en_pos(playerid, 1.5, i_Casa[casa][cExteriorX], i_Casa[casa][cExteriorY], i_Casa[casa][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[casa][c_VW])
	{
		if (casa != INVALID_CASA_ID && strcmp(nombre_sin(playerid), i_Casa[casa][cComprador], true) == 0)
		{
			new sell = i_Casa[casa][cPrecio];
			Ganancia(playerid, sell);
			format(string, sizeof(string), "Vendiste tu casa. Recuperaste %d$", sell);
			Mensaje_(playerid, -1, string);
			vender_casa(casa);
			user[playerid][jCasaKey] = INVALID_CASA_ID;
		} else _Mensaje(playerid, 0, "580", "No tienes una casa o no esta a tu nombre.");
	} else _Mensaje(playerid, 0, "580", "Necesitas estar cerca su casa para venderla.");
	return 1;
}

GCMD:vendercasa2(playerid)
{
	new casa2 = user[playerid][jCasaKey2], string[128];
	if (user[playerid][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 2.");
	if (en_pos(playerid, 1.5, i_Casa[casa2][cExteriorX], i_Casa[casa2][cExteriorY], i_Casa[casa2][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[casa2][c_VW])
	{
		if (casa2 != INVALID_CASA_ID && strcmp(nombre_sin(playerid), i_Casa[casa2][cComprador], true) == 0)
		{
			new sell = i_Casa[casa2][cPrecio];
			Ganancia(playerid, sell);
			format(string, sizeof(string), "Vendiste tu casa. Recuperaste %d$", sell);
			Mensaje_(playerid, -1, string);
			vender_casa(casa2);
			user[playerid][jCasaKey2] = INVALID_CASA_ID;
		} else _Mensaje(playerid, 0, "580", "No tienes una casa o no esta a tu nombre.");
	} else _Mensaje(playerid, 0, "580", "Necesitas estar cerca su casa para venderla.");
	return 1;
}

GCMD:vendermicasa(playerid,  const params[])
{
	if (user[playerid][jCasaKey] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "2", "No tienes una casa en la ranura 1.");
	new string[128], playerid2, price;
	if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "/vendermicasa [id jugador] [precio]");
	if (price < 1) return _Mensaje(playerid, 0, "384", "Precio debe ser mayor a 0.");
	if (playerid == playerid2) return _Mensaje(playerid, 0, "385", "No puedes venderte la casa a ti mismo.");
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "75", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return _Mensaje(playerid, 0, "133", "Estás lejos del jugador.");
	if (user[playerid2][j_Horas] < 2) return _Mensaje(playerid, 0, "9", "No puedes venderle propiedades a usuarios con menos de dos horas de juego.");
	if (Spectando[playerid2] == 1) return _Mensaje(playerid, 0, "9", "Estás lejos del jugador.");
	if (haciend_[playerid] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Te encuentras en una operación, termina primero.");
	if (haciend_[playerid2] == 1) return _Mensaje(playerid, 4, "b0b0b0", "Ese jugador se encuentra en una operación, espera a que termine.");
	haciend_[playerid] = 1;
	haciend_[playerid2] = 1;

	CasaOffer[playerid2] = playerid;
	CasaPrice[playerid2] = price;
	format(string, sizeof(string), "* Ofreciste a %s para comprar tu casa por $%d.", nombre_pj(playerid2, 0), price);
	_Mensaje(playerid, 4, "33CCFF", string);
	format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d, (/aceptar).", nombre_pj(playerid, 0), price);
	_Mensaje(playerid2, 4, "33CCFF", string);
	return 1;
}

vender_casa(houseid)
{
	format(i_Casa[houseid][cNombre], 32, "Dulce Hogar");
	i_Casa[houseid][cComprado] = 0;
	i_Casa[houseid][cEstado] = 0;
	i_Casa[houseid][cDinero] = 0;
	i_Casa[houseid][c_alquilado] = 0;
	i_Casa[houseid][c_patente] = 0;
	format(i_Casa[houseid][cComprador], 32, "enventa");
	save_Casa(houseid);
	return 1;
}

GCMD:set_player_1999(playerid)
{
	new
		Str[500],
		Ropa[MAX_ROPA][20],
		ver_stas[128],
		ropita
	;
	if(user[playerid][jPremium] == 0) ropita = 4;
	else if(user[playerid][jPremium] == 1) ropita = 6;
	else if(user[playerid][jPremium] == 2) ropita = MAX_ROPA;
	Loop(i, ropita, 0)
	{
		if(!user[playerid][jRopaArmario][i])
		{
			Ropa[i] = "Nada";
		}
		else
		{
			new id_skin = user[playerid][jRopaArmario][i];
			if (id_skin >= 25000) id_skin-=24689;
			format(Ropa[i], 20, "%d", id_skin);
		}
		format(ver_stas, sizeof(ver_stas), "Ranura %d : (%s)\n", i, Ropa[i]);
		strins(Str, ver_stas, strlen(Str));
	}
	SetPVarInt(playerid, "ROPA_EDITAR", 0);
	ExPlayerDialog(playerid, D_EDITARROPA, DIALOG_STYLE_LIST, "{D6E1EB}Selección de vestuario", Str, ">>", "<<");
	return 1;
}

GCMD:ropa(playerid)
{
	if (!Esta_Ropa(playerid)) return _Mensaje(playerid, 0, "583", "Necesitas estar en una tienda de ropa o en el armario de tu casa");
	cmd_set_player_1999(playerid);
	return 1;
}

GCMD:ponerarmario(playerid)
{
	if (user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "580", "No tienes ninguna casa.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey] + 6000)
	{
		GetPlayerPos(playerid, i_Casa[user[playerid][jCasaKey]][cArmarioPos][0], i_Casa[user[playerid][jCasaKey]][cArmarioPos][1], i_Casa[user[playerid][jCasaKey]][cArmarioPos][2]);
		_Mensaje(playerid, 4, "33CCFF", "Configuraste la posición del armario. Recuerda donde está.");
		save_Casa(user[playerid][jCasaKey]);
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey2] + 6000)
	{
		GetPlayerPos(playerid, i_Casa[user[playerid][jCasaKey2]][cArmarioPos][0], i_Casa[user[playerid][jCasaKey2]][cArmarioPos][1], i_Casa[user[playerid][jCasaKey2]][cArmarioPos][2]);
		_Mensaje(playerid, 4, "33CCFF", "Configuraste la posición del armario. Recuerda donde está.");
		save_Casa(user[playerid][jCasaKey2]);
	}
	else return _Mensaje(playerid, 0, "582", "Debes poner el armario en el interior de tu casa.");
	return 1;
}

GCMD:armario(playerid)
{
	if(user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID && user[playerid][jCasaLlaves] == INVALID_CASA_ID && user[playerid][j2CasaLlaves] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "580", "No tienes ninguna casa o llaves de alguna.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey] + 6000)
	{
		if (en_pos(playerid, 3.0, i_Casa[user[playerid][jCasaKey]][cArmarioPos][0], i_Casa[user[playerid][jCasaKey]][cArmarioPos][1], i_Casa[user[playerid][jCasaKey]][cArmarioPos][2]))
		{
			ExPlayerDialog(playerid, D_Carmario, DIALOG_STYLE_LIST, "{D6E1EB}Opciones", "{ffffff}Ropero\nArmario", "Seleccionar", "Cerrar");
			DentroCasa[playerid] = user[playerid][jCasaKey];
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario o no lo has creado usa el comando /ponerarmario.");
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey2] + 6000)
	{
		if (en_pos(playerid, 3.0, i_Casa[user[playerid][jCasaKey2]][cArmarioPos][0], i_Casa[user[playerid][jCasaKey2]][cArmarioPos][1], i_Casa[user[playerid][jCasaKey2]][cArmarioPos][2]))
		{
			ExPlayerDialog(playerid, D_Carmario, DIALOG_STYLE_LIST, "{D6E1EB}Opciones", "{ffffff}Ropero\nArmario", "Seleccionar", "Cerrar");
			DentroCasa[playerid] = user[playerid][jCasaKey2];
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario o no lo has creado usa el comando /ponerarmario.");
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaLlaves] + 6000)
	{
		if (en_pos(playerid, 3.0, i_Casa[user[playerid][jCasaLlaves]][cArmarioPos][0], i_Casa[user[playerid][jCasaLlaves]][cArmarioPos][1], i_Casa[user[playerid][jCasaLlaves]][cArmarioPos][2]))
		{
			ExPlayerDialog(playerid, D_Carmario, DIALOG_STYLE_LIST, "{D6E1EB}Opciones", "{ffffff}Ropero\nArmario", "Seleccionar", "Cerrar");
			DentroCasa[playerid] = user[playerid][jCasaLlaves];
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario.");
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][j2CasaLlaves] + 6000)
	{
		if (en_pos(playerid, 3.0, i_Casa[user[playerid][j2CasaLlaves]][cArmarioPos][0], i_Casa[user[playerid][j2CasaLlaves]][cArmarioPos][1], i_Casa[user[playerid][j2CasaLlaves]][cArmarioPos][2]))
		{
			ExPlayerDialog(playerid, D_Carmario, DIALOG_STYLE_LIST, "{D6E1EB}Opciones", "{ffffff}Ropero\nArmario", "Seleccionar", "Cerrar");
			DentroCasa[playerid] = user[playerid][j2CasaLlaves];
		} else return _Mensaje(playerid, 0, "584", "No estás en el armario.");
	} else return _Mensaje(playerid, 0, "585", "No estás en ninguna casa.");
	return 1;
}
GCMD:garaje(playerid)
{
	if(user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "580", "No tienes ninguna casa.");
	if (DentroGarage[playerid] == -1) return _Mensaje(playerid, 0, "580", "No se ha detectado el garage, si estas dentro sal y vuelve a entrar o si estas fuera entra.");
	new g_id = DentroGarage[playerid];
	if (strmatch(i_Casa[i_Garaje[g_id][gIDCasa]][cComprador], nombre_pj(playerid, 0)))
	{
		ExPlayerDialog(playerid, D_gArmario, DIALOG_STYLE_LIST, "{D6E1EB}Menú del garaje", "{FFFFFF}Ver armario\nConfigurar armario\nMuebles", "Seleccionar", "Cancelar");
	}
	return 1;
}

stock Opc_casa(playerid, c_id = -1)
{
	if (c_id != -1)
	{
		new tDialogo[300];
		format(tDialogo, sizeof(tDialogo), "{FFFFFF}Nombre ({FFEA5F}%s{FFFFFF})\nDinero ({00C200}$%d{FFFFFF})\nMuebles", i_Casa[c_id][cNombre], i_Casa[c_id][cDinero]);
		ExPlayerDialog(playerid, D_Casa_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Opciones:", tDialogo, "Seleccionar", "Cancelar");
		DentroCasa[playerid] = c_id;
	}
	return 1;
}

GCMD:gpos1(playerid)
{
	if (user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(playerid, 4, "b00000", "No tienes ninguna casa.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey] + 6000)
	{
		for(new x = 0; x <MAX_GARAJES; x++)
		{
			if(i_Garaje[x][gIDCasa] == user[playerid][jCasaKey])
			{
				if (GetPVarInt(playerid, "g_pos1") == 0)
				{
					SetPVarInt(playerid, "g_pos1", 1);
					Mensaje_(playerid, 0x00c200ff, "¿Ésta será la entrada al garaje?, si es así re-escriba /gpos1.");
					return 1;
				}
				else
				{
					DeletePVar(playerid, "g_pos1");
					new c_id = user[playerid][jCasaKey];
					GetPlayerPos(playerid, i_Casa[c_id][cGarajePos][0], i_Casa[c_id][cGarajePos][1], i_Casa[c_id][cGarajePos][2]);
					GetPlayerFacingAngle(playerid, i_Casa[c_id][cGarajePos][3]);
					Mensaje_(playerid, 0x33CCFFFF, "Configuraste correctamente la entrada al garaje.");
					save_Casa(c_id);
					return 1;
				}
			}
		}
		Mensaje_(playerid, 0xb0b0b0ff, "Ésta casa no posee garaje.");
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey2] + 6000)
	{
		for(new x = 0; x <MAX_GARAJES; x++)
		{
			if(i_Garaje[x][gIDCasa] == user[playerid][jCasaKey2])
			{
				if (GetPVarInt(playerid, "g_pos2") == 0)
				{
					SetPVarInt(playerid, "g_pos2", 1);
					Mensaje_(playerid, 0x00c200ff, "¿Ésta será la entrada al garaje?, si es así re-escriba /gpos1.");
					return 1;
				}
				else
				{
					DeletePVar(playerid, "g_pos2");
					new c_id = user[playerid][jCasaKey2];
					GetPlayerPos(playerid, i_Casa[c_id][cGarajePos][0], i_Casa[c_id][cGarajePos][1], i_Casa[c_id][cGarajePos][2]);
					GetPlayerFacingAngle(playerid, i_Casa[c_id][cGarajePos][3]);
					Mensaje_(playerid, 0x33CCFFFF, "Configuraste correctamente la entrada al garaje.");
					save_Casa(c_id);
					return 1;
				}
			}
		}
		Mensaje_(playerid, 0xb0b0b0ff, "Ésta casa no posee garaje.");
	}
	else return _Mensaje(playerid, 4, "b0b0b0", "No estás en el interior de tu casa.");
	return 1;
}

GCMD:gpos2(playerid)
{
	if (user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID) return _Mensaje(playerid, 4, "b00000", "No tienes ninguna casa.");

	for(new x = 0; x <MAX_GARAJES; x++)
	{
		if (GetPlayerVirtualWorld(playerid) == i_Garaje[x][gVirtualWorld])
		{
			if(i_Garaje[x][gIDCasa] == user[playerid][jCasaKey])
			{
				if (GetPVarInt(playerid, "g_xpos1") == 0)
				{
					SetPVarInt(playerid, "g_xpos1", 1);
					Mensaje_(playerid, 0x00c200ff, "¿Ésta será la entrada a la casa?, si es así re-escriba /gpos2.");
					return 1;
				}
				else
				{
					DeletePVar(playerid, "g_xpos1");
					new c_id = user[playerid][jCasaKey];
					GetPlayerPos(playerid, i_Casa[c_id][cGarajePos][4], i_Casa[c_id][cGarajePos][5], i_Casa[c_id][cGarajePos][6]);
					GetPlayerFacingAngle(playerid, i_Casa[c_id][cGarajePos][7]);
					Mensaje_(playerid, 0x33CCFFFF, "Configuraste correctamente la entrada a la casa.");
					save_Casa(c_id);
					return 1;
				}
			}
		}
		else if (GetPlayerVirtualWorld(playerid) == i_Garaje[x][gVirtualWorld])
		{
			if(i_Garaje[x][gIDCasa] == user[playerid][jCasaKey2])
			{
				if (GetPVarInt(playerid, "g_zpos1") == 0)
				{
					SetPVarInt(playerid, "g_zpos1", 1);
					Mensaje_(playerid, 0x00c200ff, "¿Ésta será la entrada a la casa?, si es así re-escriba /gpos2.");
					return 1;
				}
				else
				{
					DeletePVar(playerid, "g_zpos1");
					new c_id = user[playerid][jCasaKey2];
					GetPlayerPos(playerid, i_Casa[c_id][cGarajePos][4], i_Casa[c_id][cGarajePos][5], i_Casa[c_id][cGarajePos][6]);
					GetPlayerFacingAngle(playerid, i_Casa[c_id][cGarajePos][7]);
					Mensaje_(playerid, 0x33CCFFFF, "Configuraste correctamente la entrada a la casa.");
					save_Casa(c_id);
					return 1;
				}
			}
		}
	}
	Mensaje_(playerid, 0xb0b0b0ff, "No estás en el garaje de tu casa.");
	return 1;
}

GCMD:casa(playerid) return cmd_micasa(playerid);
GCMD:micasa(playerid)
{
	if (user[playerid][jCasaKey] == INVALID_CASA_ID && user[playerid][jCasaKey2] == INVALID_CASA_ID && user[playerid][jCasaLlaves] == INVALID_CASA_ID && user[playerid][j2CasaLlaves] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "580", "No tienes ninguna casa o llaves de una.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey] + 6000)
	{
		Opc_casa(playerid, user[playerid][jCasaKey]);
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaKey2] + 6000)
	{
		Opc_casa(playerid, user[playerid][jCasaKey2]);
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][jCasaLlaves] + 6000)
	{
		Opc_casa(playerid, user[playerid][jCasaLlaves]);
	}
	else if (GetPlayerVirtualWorld(playerid) == user[playerid][j2CasaLlaves] + 6000)
	{
		Opc_casa(playerid, user[playerid][j2CasaLlaves]);
	} else return _Mensaje(playerid, 4, "b0b0b0", "No estás en ninguna casa.");
	return 1;
}

GCMD:cseguro(playerid)
{
	new
		casa = user[playerid][jCasaKey],
		casa2 = user[playerid][jCasaKey2],
		casa3 = user[playerid][jCasaLlaves],
		casa4 = user[playerid][j2CasaLlaves],
		casa5 = user[playerid][jAlquiler]
	;
	if (casa != INVALID_CASA_ID && (en_pos(playerid, 2.0, i_Casa[casa][cExteriorX], i_Casa[casa][cExteriorY], i_Casa[casa][cExteriorZ]) || en_pos(playerid, 5.0, i_Casa[casa][cInteriorX], i_Casa[casa][cInteriorY], i_Casa[casa][cInteriorZ])))
	{
		if (i_Casa[casa][cEstado] == 1)
		{
			i_Casa[casa][cEstado] = 0;
			accion_rol(playerid, 0, "saca sus llaves de casa y la cierra.");
		}
		else
		{
			i_Casa[casa][cEstado] = 1;
			accion_rol(playerid, 0, "saca sus llaves de casa y la abre.");
		}
		save_Casa(casa);
		save_Casa(casa, false, -1, true);
	}
	else if (casa2 != INVALID_CASA_ID && (en_pos(playerid, 2.0, i_Casa[casa2][cExteriorX], i_Casa[casa2][cExteriorY], i_Casa[casa2][cExteriorZ]) || en_pos(playerid, 5.0, i_Casa[casa2][cInteriorX], i_Casa[casa2][cInteriorY], i_Casa[casa2][cInteriorZ])))
	{
		if (i_Casa[casa2][cEstado] == 1)
		{
			i_Casa[casa2][cEstado] = 0;
			accion_rol(playerid, 0, "saca sus llaves de casa y la cierra.");
		}
		else
		{
			i_Casa[casa2][cEstado] = 1;
			accion_rol(playerid, 0, "saca sus llaves de casa y la abre.");
		}
		save_Casa(casa2);
		save_Casa(casa2, false, -1, true);
	}
	else if (casa3 != INVALID_CASA_ID && (en_pos(playerid, 2.0, i_Casa[casa3][cExteriorX], i_Casa[casa3][cExteriorY], i_Casa[casa3][cExteriorZ]) || en_pos(playerid, 5.0, i_Casa[casa3][cInteriorX], i_Casa[casa3][cInteriorY], i_Casa[casa3][cInteriorZ])))
	{
		if (i_Casa[casa3][cEstado] == 1)
		{
			i_Casa[casa3][cEstado] = 0;
			accion_rol(playerid, 0, "saca sus llaves de casa y la cierra.");
		}
		else
		{
			i_Casa[casa3][cEstado] = 1;
			accion_rol(playerid, 0, "saca sus llaves de casa y la abre.");
		}
		save_Casa(casa3, false, -1, true);
	}
	else if (casa4 != INVALID_CASA_ID && (en_pos(playerid, 2.0, i_Casa[casa4][cExteriorX], i_Casa[casa4][cExteriorY], i_Casa[casa4][cExteriorZ]) || en_pos(playerid, 5.0, i_Casa[casa4][cInteriorX], i_Casa[casa4][cInteriorY], i_Casa[casa4][cInteriorZ])))
	{
		if (i_Casa[casa4][cEstado] == 1)
		{
			i_Casa[casa4][cEstado] = 0;
			accion_rol(playerid, 0, "saca sus llaves de casa y la cierra.");
		}
		else
		{
			i_Casa[casa4][cEstado] = 1;
			accion_rol(playerid, 0, "saca sus llaves de casa y la abre.");
		}
		save_Casa(casa4, false, -1, true);
	}
	else if (casa5 != INVALID_CASA_ID && (en_pos(playerid, 2.0, i_Casa[casa5][cExteriorX], i_Casa[casa5][cExteriorY], i_Casa[casa5][cExteriorZ]) || en_pos(playerid, 5.0, i_Casa[casa5][cInteriorX], i_Casa[casa5][cInteriorY], i_Casa[casa5][cInteriorZ])))
	{
		if (i_Casa[casa5][cEstado] == 1)
		{
			i_Casa[casa5][cEstado] = 0;
			accion_rol(playerid, 0, "saca sus llaves de casa y la cierra.");
		}
		else
		{
			i_Casa[casa5][cEstado] = 1;
			accion_rol(playerid, 0, "saca sus llaves de casa y la abre.");
		}
		save_Casa(casa5, false, -1, true);
	} else _Mensaje(playerid, 0, "590", "No tienes una casa o no estás cerca de la puerta para hacer esto.");
	return 1;
}

GCMD:rentar(playerid) return cmd_alquilar(playerid);
GCMD:alquilar(playerid)
{
	if(user[playerid][j_Horas] < 10) return _Mensaje(playerid, 0, "9", "Debes poseer al menos diez horas de juego para alquilar una vivienda.");
	new
		string[128]
	;

	for (new h = 0; h < sizeof(i_Casa); h++)
	{
		if (en_pos(playerid, 2.0, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[h][c_VW])
		{
			if (i_Casa[h][cComprado] == 1) return _Mensaje(playerid, 0, "0", "No puedes alquilar una vivienda con propietario.");
			if (i_Casa[h][c_alquilado] == 1) return _Mensaje(playerid, 0, "0", "Esta vivienda ya se encuentra en alquiler.");
			if (i_Casa[h][c_alquiler] == 0) return _Mensaje(playerid, 0, "0", "Esta vivienda no se encuentra en alquiler.");
			if (user[playerid][jAlquiler] != INVALID_CASA_ID) return _Mensaje(playerid, 0, "0", "Posees un alquiler activo. Si quieres dejar de rentar en la actual, escribe /desalq.");

			if (ComprobarDineroJ(playerid) > i_Casa[h][c_alquiler])
			{
				user[playerid][jAlquiler] = h;                      // cede alquiler
				DarDineroGC(playerid, -i_Casa[h][c_alquiler]);      // pago alquiler
				i_Casa[h][c_alquilado] = 1; 						// alquilado
				SetPlayerInterior(playerid, i_Casa[h][cInterior]);
				CargarObjetos(playerid);
				SetPlayerPos(playerid, i_Casa[h][cInteriorX], i_Casa[h][cInteriorY], i_Casa[h][cInteriorZ]);
				SetPlayerFacingAngle(playerid, i_Casa[h][cInteriorA]);
				textgame_player(playerid, "~w~Bienvenido", 5000, 3);
				user[playerid][jInterior] = i_Casa[h][cInterior];
				user[playerid][jVirtualWorld] = 6000 + h;
				SetPlayerVirtualWorld(playerid, h + 6000);
				save_Casa(h, false, -1, true);
				Mensaje_(playerid, 0xFFEA5FFF, "Has alquilado una vivienda. Felicidades!");
				Mensaje_(playerid, 0xFFEA5FFF, "Escribe /ayuda propiedades para ver los comandos disponibles.");
				format(string, sizeof(string), "%s rento la casa id %d por $%d.", nombre_pj(playerid), h, i_Casa[h][c_alquiler]);
				Log("Registros/Alquilers.log", string);
				return 1;
			} else return _Mensaje(playerid, 0, "596", "Usted no posee suficiente dinero.");
		}
	}
	return 1;
}

GCMD:alquiler(playerid)
{
	if (user[playerid][jAlquiler] == -1) return SendClientMessage(playerid, 0xFF6347AA, "No estás alquilando ninguna vivienda.");
	if (GetPlayerVirtualWorld(playerid) == user[playerid][jAlquiler] + 6000)
	{
		ver_alquiler(playerid, user[playerid][jAlquiler]);
		DentroCasa[playerid] = user[playerid][jAlquiler];
	} else return SendClientMessage(playerid, 0xFF6347AA, "No estás en ninguna vivienda.");
	return 1;
}

GCMD:desrentar(playerid) return cmd_desalq(playerid);
GCMD:desalquilar(playerid) return cmd_desalq(playerid);
GCMD:desalq(playerid)
{
	if (user[playerid][jAlquiler] == INVALID_CASA_ID) return _Mensaje(playerid, 0, "0", "No posees ningún alquiler de vivienda activo.");
	if (GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return _Mensaje(playerid, 0, "0", "Debes encontrarte en exteriores.");

	if (un_rent[playerid] != 1)
	{
		un_rent[playerid] = 1;
		_Mensaje(playerid, 4, "ffff00", "¿Estás seguro de dejar de pagar el alquiler? De ser sí, re-escribe /desalq.");
	}
	else //
	{
		new
			h = user[playerid][jAlquiler]
		;
		if (i_Casa[h][cEspacio])
		{
			i_Casa[h][c_alquilado] = 0;
			save_Casa(h, false, -1, true);
		}
		un_rent[playerid] = 0;
		user[playerid][j_timeunrent] = 0;
		user[playerid][jAlquiler] = INVALID_CASA_ID;
		_Mensaje(playerid, 5, "0", "Has dejado de pagar el alquiler de una vivienda.");
	}
	return 1;
}

GCMD:timbre(playerid)
{
	for (new h; h < sizeof(i_Casa); h++) if (en_pos(playerid, 2.0, i_Casa[h][cExteriorX], i_Casa[h][cExteriorY], i_Casa[h][cExteriorZ]) && user[playerid][jVirtualWorld] == i_Casa[h][c_VW])
	{
		foreach(new i: Player) if (GetPlayerVirtualWorld(i) == h + 6000 && GetPlayerInterior(i) == i_Casa[h][cInterior])
		{
			textgame_player(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Timbre...", 4000, 3);
		}
		accion_rol(playerid, 0, "presiona el botón de timbre de la casa.");
	}
	return 1;
}

GCMD:iicasa(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new housenum;
	if (sscanf(params, "d", housenum)) return _Mensaje(playerid, 3, "0", "/iicasa [casa id]");
	if (housenum < 0 || housenum >= MAX_CASAS) return _Mensaje(playerid, 0, "453", "ID de casa errónea.");

	SetPlayerInterior(playerid, i_Casa[housenum][cInterior]);
	SetPlayerVirtualWorld(playerid, housenum + 6000);
	SetPlayerPos(playerid, i_Casa[housenum][cInteriorX], i_Casa[housenum][cInteriorY], i_Casa[housenum][cInteriorZ]);
	textgame_player(playerid, "~w~Teletransportado", 5000, 1);
	user[playerid][jInterior] = i_Casa[housenum][cInterior];
	user[playerid][jVirtualWorld] = housenum + 6000;
	return 1;
}

GCMD:ircasa(playerid,  const params[])
{
	new cid, string[128];
	if (user[playerid][jAdmin] < 2) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "i", cid)) return _Mensaje(playerid, 3, "0", "/ircasa [casa id]");
	if (cid < 0 || cid >= MAX_CASAS) return _Mensaje(playerid, 0, "453", "ID de casa errónea.");
	if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "138", "ID Invalida.");

	SetPlayerVirtualWorld(playerid, i_Casa[cid][c_VW]);
	SetPlayerInterior(playerid, i_Casa[cid][c_Int]);
	user[playerid][jInterior] = i_Casa[cid][c_Int];
	user[playerid][jVirtualWorld] = i_Casa[cid][c_VW];
	SetPlayerPos(playerid, i_Casa[cid][cExteriorX], i_Casa[cid][cExteriorY], i_Casa[cid][cExteriorZ]);
	format(string, sizeof(string), "Usted se teletransporto a la Casa ID %d.", cid);
	_Mensaje(playerid, 2, "0", string);
	return 1;
}

GCMD:eliminarcp(playerid) return cmd_eliminarcheckpoint(playerid);
GCMD:eliminarcheckpoint(playerid)
{
	if (Granjero[playerid] != 0) return _Mensaje(playerid, 0, "0", "Te encuentras cosechando, termina antes.");
	DisablePlayerCheckpoint(playerid);
	DeletePVar(playerid, "EnCheckPoint");
	_Bomb2Call[playerid] = 0;
	_Medic2Call[playerid] = 0;
	_CamVeh[playerid] = INVALID_VEHICLE_ID;
	TogglePlayerAllDynamicCPs(playerid, true);
	_Mensaje(playerid, 2, "0", "El checkpoint que tenías pendiente fue eliminado, junto a los posibles bugeados.");
	return 1;
}

GCMD:recon(playerid,  const params[]) return cmd_spec(playerid, params);
GCMD:spec(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new tmp[32];
	if (sscanf(params, "s[32]", tmp)) return _Mensaje(playerid, 0, "158", "/spec [id jugador / off]");
	if (strcmp("off", tmp, true, strlen(tmp)) == 0)
	{
		if(Spectando[playerid] > 0 && user[playerid][jAdmin] >= 1)
		{
			SpectadorID[Spectate[playerid]] = 999;
			Spectando[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecState", -1);
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
			SetPlayerInterior(playerid, user[playerid][jInterior]);
			SetPlayerVirtualWorld(playerid, user[playerid][jVirtualWorld]);
			CargarObjetos(playerid);
			return 1;
		}
		else
		{
			_Mensaje(playerid, 0, "158", "No puedes spectar a esta persona.");
			return 1;
		}
	}
	if (EnServicioADM[playerid] == 0) return _Mensaje(playerid, 0, "158", "Utiliza /staffon para usar este comando.");
	new playerid2 = ReturnUser(tmp);
	if (!IsPlayerConnected(playerid2)) return _Mensaje(playerid, 0, "158", "ERROR: El jugador seleccionado no se encuentra conectado.");
	if (playerid2 != INVALID_PLAYER_ID)
	{
		if(Spectando[playerid] == 0)
		{
			GetPlayerPos(playerid, user[playerid][jPosicion_X], user[playerid][jPosicion_Y], user[playerid][jPosicion_Z]);
			user[playerid][jInterior] = GetPlayerInterior(playerid);
			user[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
			if(IsPlayerInAnyVehicle(playerid2))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(playerid2);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
				SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, playerid2);
				SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
				SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
			}
			SpectadorID[playerid2] = playerid;
			Spectate[playerid] = playerid2;
			Spectando[playerid] = 1;
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid2))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(playerid2);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
				SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, playerid2);
				SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
				SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
			}
			SpectadorID[Spectate[playerid]] = 999;
			SpectadorID[playerid2] = playerid;
			Spectate[playerid] = playerid2;
			Spectando[playerid] = 1;
		}
	}
	return 1;
}

GCMD:cambiarhora(playerid,  const params[])
{
	SendClientMessage(playerid, -1, "no existe el comando amigo.");
	return 1;
}

GCMD:cambiarclima(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new weather, string[128];
	if (sscanf(params, "d", weather)) return _Mensaje(playerid, 3, "0", "/cambiarclima [id clima]");
	if (weather < 0 || weather > 45) { _Mensaje(playerid, 0, "158", "Id's de climas de 0 a 45."); return 1; }
	clima = weather;
	SetWeather(weather);
	SetPlayerWeather(playerid, weather);
	format(string, sizeof(string), "[Administración]{FFFFFF} %s utilizó /cambiarclima, Clima: %d.", nombre_pj(playerid), weather);
	MensajeAdmin(string);
	return 1;
}

//sistema de eventos
GCMD:adminevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	_Mensaje(playerid, 4, "A7CE00", "/lugarevento /tipoevento /editarevento /abrirevento");
	_Mensaje(playerid, 4, "A7CE00", "/anunciar /cerrarevento /iniciarevento /borrarevento");
	return 1;
}

GCMD:tipoevento(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (isnull(params))
	{
		_Mensaje(playerid, 3, "0", "/tipoevento [tipo]");
		_Mensaje(playerid, 1, "0", "Tipos disponibles: normal, cocheb, ninguno.");
		return 1;
	}
	if (strcmp(params, "normal", true) == 0)
	{
		InfoEvento[iTipo] = 1;
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste el tipo de evento a normal.");
	}
	else if (strcmp(params, "cocheb", true) == 0)
	{
		InfoEvento[iTipo] = 2;
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste el tipo de evento a coche bomba.");
    }
	else if (strcmp(params, "ninguno", true) == 0)
	{
		InfoEvento[iTipo] = 0;
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste el tipo de evento a Ninguno.");
    }
    return 1;
}

GCMD:editarevento(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iTipo] == 0) return _Mensaje(playerid, 0, "1", "No se ha establecido un tipo de evento.");

	new option[32], opstring[256];
	if (sscanf(params, "s[32]S[256]", option, opstring))
	{
		_Mensaje(playerid, 3, "0", "/editarevento [nombre]");
		_Mensaje(playerid, 1, "0", "Opciones: {b0b0b0}mensaje, musica, vida, chaleco");
	}
	if (strcmp(option, "mensaje", true) == 0)
	{
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento mensaje [texto]");
		strmid(InfoEvento[iMensaje], opstring, 0, strlen(opstring), 256);
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste el mensaje del evento.");
	}
	else if (strcmp(option, "musica", true) == 0)
	{
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento música [link]");
		strmid(InfoEvento[iMusica], opstring, 0, strlen(opstring), 256);
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste la música del evento.");
	}
	else if (strcmp(option, "vida", true) == 0)
	{
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento vida [cantidad]");
		new Float: health;
		health = floatstr(opstring);
		InfoEvento[iVida] = health;
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste el spawn vida del evento.");
	}
	else if (strcmp(option, "chaleco", true) == 0)
	{
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento chaleco [cantidad]");
		new Float: armor;
		armor = floatstr(opstring);
		InfoEvento[iChaleco] = armor;
		_Mensaje(playerid, 4, "f2ff00", "Ajustaste la armadura del evento.");
	}
	return 1;
}

GCMD:abrirevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] != 0) return _Mensaje(playerid, 0, "12", "Ya hay un evento creado escribe /borrarevento.");
	if (InfoEvento[iTipo] == 0) return _Mensaje(playerid, 0, "12", "No se ha definido el tipo de evento.");
	if (InfoEvento[iVida] == 0) return _Mensaje(playerid, 0, "12", "No se ha definido la salud del evento.");
	if (InfoEvento[iPosicionX] == 0 || InfoEvento[iPosicionY] == 0 || InfoEvento[iPosicionZ] == 0) return _Mensaje(playerid, 0, "12", "No se ha definido la posición de evento.");

	InfoEvento[iEtapa] = 1;
	if (InfoEvento[iTipo] == 2)
	{
		EventoVBomba();
    	iObjeto[0] = CreateObject(2990, 1374.70349, 2192.37427, 9.32361,   0.00000, 0.00000, 0.00000);
		iObjeto[1] = CreateObject(2990, 1364.79016, 2192.39355, 9.32361,   0.00000, 0.00000, 0.00000);
		iObjeto[2] = CreateObject(1533, 1358.29321, 2192.39966, 9.88074,   0.00000, 0.00000, 0.00000);
	}
	EscucharMusica(playerid, InfoEvento[iMusica]);
	_Mensaje(playerid, 0, "12", "Has abierto el evento, escribe /anunciar para avisar el mismo.");
	return 1;
}

GCMD:salirevento(playerid)
{
	if (GetPVarInt(playerid, "EnEvento") == 0) return _Mensaje(playerid, 0, "12", "No estás dentro de ningún evento.");
	if (InfoEvento[iEtapa] == 1 || InfoEvento[iEtapa] == 2) return _Mensaje(playerid, 0, "12", "No puedes salir del evento, hasta que comience.");
	SetPVarInt(playerid, "EnEvento", 0);
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, true);
	SetPlayerSkin(playerid, user[playerid][jRopa]);
	SetPlayerPos(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
	SetPlayerVirtualWorld(playerid, jEvento[playerid][eVW]);
	SetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
	SetPlayerInterior(playerid, jEvento[playerid][eInterior]);
	Sangre_(playerid, jEvento[playerid][eVariable][4]);
	Chaleco_(playerid, jEvento[playerid][eVariable][5]);
	SetPlayerColor(playerid, C_PLAYERBLANCO);
	StopAudioStreamForPlayer(playerid);
	for (new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0; }
	jEvento[playerid][eVW] = 0;
	jEvento[playerid][eInterior] = 0;
	if (InfoEvento[iTipo] != 2) _Mensaje(playerid, 4, "33CCFF", "Saliste del evento staff.");
	return 1;
}

GCMD:lugarevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	GetPlayerPos(playerid, InfoEvento[iPosicionX], InfoEvento[iPosicionY], InfoEvento[iPosicionZ]);
	InfoEvento[iInterior] = GetPlayerInterior(playerid);
	InfoEvento[iVirtualWorld] = GetPlayerVirtualWorld(playerid);
	_Mensaje(playerid, 4, "f2ff00", "Ajustaste el lugar de spawn del evento.");
	return 1;
}

GCMD:borrarevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 0) return _Mensaje(playerid, 0, "12", "No hay ningún evento creado.");
	StopAudioStreamForPlayer(playerid);
	foreach(new i: Player)
	{
		if (GetPVarInt(i, "EnEvento") == 1)
		{
			DeletePVar(i, "Congelado");
			TogglePlayerControllable(i, 1);
			SetPlayerSkin(i, user[i][jRopa]);
			SetPlayerPos(i, jEvento[i][eVariable][1], jEvento[i][eVariable][2], jEvento[i][eVariable][3]);
			SetPlayerVirtualWorld(i, jEvento[i][eVW]);
			SetPlayerFacingAngle(i, jEvento[i][eVariable][0]);
			SetPlayerInterior(i, jEvento[i][eInterior]);
			Sangre_(i, jEvento[i][eVariable][4]);
			Chaleco_(i, jEvento[i][eVariable][5]);
			SetPlayerColor(i, C_PLAYERBLANCO);
			StopAudioStreamForPlayer(i);
			for (new d = 0; d < 6; d++) { jEvento[i][eVariable][d] = 0.0; }
			jEvento[i][eVW] = 0;
			jEvento[i][eInterior] = 0;
			SetPVarInt(i, "EnEvento", 0);
			_Mensaje(i, 4, "f2ff00", "Fuiste expulsado del evento dado que el mismo ha terminado.");
		}
	}
	if(InfoEvento[iTipo] == 2)
	{
		DestroyObject(iObjeto[0]);
		DestroyObject(iObjeto[1]);
		DestroyObject(iObjeto[2]);
		for(new i = 0; i < 40; i++)
		{
			if (iVehiculo[i] != 0) DestroyVehicle(iVehiculo[i]);
		}
	}
	InfoEvento[iPosicionX] = 0;
	InfoEvento[iPosicionY] = 0;
	InfoEvento[iPosicionZ] = 0;
	InfoEvento[iEtapa] = 0;
	InfoEvento[iTipo] = 0;
	InfoEvento[iVida] = 0;
	EnviarMensajeTodos(0x90C3D4FF, "El evento ha sido terminado por un administrador.");
	return 1;
}

GCMD:iniciarevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 3)
	{
		InfoEvento[iEtapa] = 4;
		foreach(new i: Player)
		{
			if (GetPVarInt(i, "EnEvento") == 1)
			{
				if (InfoEvento[iTipo] == 1)
				{
					SetPlayerHealth(i, InfoEvento[iVida]);
					SetPlayerArmour(i, InfoEvento[iChaleco]);
					TogglePlayerControllable(i, 1);
					EscucharMusica(i, InfoEvento[iMusica]);
					_Mensaje(i, 4, "33CCFF", "Ha iniciado el evento 'escondidas'.");
				}
				else if (InfoEvento[iTipo] == 2)
				{
				    for(new v = 0; v < 40; v++) VehSeguro[iVehiculo[v]] = 1;
					if (!IsPlayerInAnyVehicle(i))
					{
					    new Float: slx, Float: sly, Float: slz;
					    GetPlayerPos(i, slx, sly, slz);
            			SetPlayerPos(i, slx, sly, slz + 10);
						SetPVarInt(i, "EnEvento", 0);
						TogglePlayerControllable(i, 1);
						SetPlayerSkin(i, user[playerid][jRopa]);
						SetPlayerPos(i, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
						SetPlayerVirtualWorld(i, jEvento[playerid][eVW]);
						SetPlayerFacingAngle(i, jEvento[playerid][eVariable][0]);
						SetPlayerInterior(i, jEvento[playerid][eInterior]);
						Sangre_(i, jEvento[playerid][eVariable][4]);
						Chaleco_(i, jEvento[playerid][eVariable][5]);
						SetPlayerColor(i, C_PLAYERBLANCO);
						StopAudioStreamForPlayer(i);
						for (new c = 0; c < 6; c++) { jEvento[i][eVariable][c] = 0; }
						jEvento[i][eVW] = 0;
						jEvento[i][eInterior] = 0;
						_Mensaje(i, 4, "33CCFF", "Fuiste expulsado del evento, no te encontrabas dentro de un coche.");
					}
					else
					{
						TogglePlayerControllable(i, 0);
						SetPVarInt(i, "Congelado", 1);
						SetPlayerHealth(i, 20);
						EscucharMusica(i, InfoEvento[iMusica]);
						_Mensaje(i, 4, "33CCFF", "Ha iniciado el evento 'coche bomba'.");
					}
				}
			} else _Mensaje(i, 4, "ffff00", "El evento ha iniciado. Si deseas unirte en el próximo entras con /evento.");
		}
	} else _Mensaje(playerid, 0, "12", "Aún no has cerrado el evento, escribe /cerrarevento.");
	return 1;
}

GCMD:anunciar(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 1)
	{
		InfoEvento[iEtapa] = 2;
		_Mensaje(playerid, 4, "b0b0b0", "Para bloquear el evento usa /cerrarevento");
		EnviarMensajeTodos(0x90C3D4FF, "Ha comenzado un evento, si deseas entrar escribe /evento.");
	} else _Mensaje(playerid, 0, "12", "Aún no has abierto un evento, escribe /abrirevento.");
    return 1;
}

GCMD:cerrarevento(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 2)
	{
		InfoEvento[iEtapa] = 3;
		if (InfoEvento[iTipo] == 2) DestroyObject(iObjeto[2]);
		_Mensaje(playerid, 2, "0", "Has bloqueado el evento, utiliza /inicarevento para iniciar oficialmente el evento.");
		EnviarMensajeTodos(0x90C3D4FF, "El evento actual ha sido bloqueado, intenta entrar la próxima.");
	} else _Mensaje(playerid, 0, "12", "Aún no has anunciado el evento, escribe /anunciar.");
    return 1;
}

GCMD:evento(playerid)
{
	if (user[playerid][jm_Derecha] > 0) { return _Mensaje(playerid, 0, "9", "Debes guardar tu objeto de la mano derecha."); }
	if (user[playerid][jm_Izquierda] > 0) { return _Mensaje(playerid, 0, "9", "Debes guardar tu objeto de la mano izquierda."); }
	if (IsPlayerInAnyVehicle(playerid)) return _Mensaje(playerid, 0, "151", "No puedes ingresar al evento dentro de un vehículo.");
	if (InfoEvento[iEtapa] == 0) return _Mensaje(playerid, 0, "12", "La administración no ha creado ningún evento.");
	if (InfoEvento[iEtapa] == 1) return _Mensaje(playerid, 0, "12", "La administración se encuentra configurando el evento.");
	if (InfoEvento[iEtapa] == 3) return _Mensaje(playerid, 0, "12", "El evento se encuentra bloqueado, intentalo la próxima vez.");
	if (InfoEvento[iEtapa] == 4) return _Mensaje(playerid, 0, "12", "El evento se encuentra iniciado, intentalo la próxima vez.");

	SetPVarInt(playerid, "EnEvento", 1);
	GetPlayerHealth(playerid, jEvento[playerid][eVariable][4]);
	jEvento[playerid][eVW] = GetPlayerVirtualWorld(playerid);
	jEvento[playerid][eInterior] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
	GetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
	SetPlayerPos(playerid, InfoEvento[iPosicionX], InfoEvento[iPosicionY], InfoEvento[iPosicionZ]);
	SetPlayerInterior(playerid, InfoEvento[iInterior]);
	SetPlayerVirtualWorld(playerid, InfoEvento[iVirtualWorld]);
	_Mensaje(playerid, 4, "7ADA4F", InfoEvento[iMensaje]);
	SetPlayerHealth(playerid, InfoEvento[iVida]);
	SetPlayerArmour(playerid, InfoEvento[iChaleco]);
	SetPlayerColor(playerid, 0x7ADA4F00);
	EscucharMusica(playerid, InfoEvento[iMusica]);
	return 1;
}

GCMD:repetir(playerid)
{
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 0) return _Mensaje(playerid, 0, "12", "No hay ningún vehículo creado.");
	foreach(new i: Player)
	{
		if (GetPVarInt(i, "EnEvento") == 1)
		{
			EscucharMusica(i, InfoEvento[iMusica]);
		}
	}
	EscucharMusica(playerid, InfoEvento[iMusica]);
	return 1;
}

GCMD:explotarv(playerid,  const params[])
{
	new string[128];
	if (user[playerid][jAdmin] < 5) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (InfoEvento[iEtapa] == 0) return _Mensaje(playerid, 0, "12", "No hay ningún vehículo creado.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/explotarv [id veh]");

    SetTimerEx("veh_evento", 2000, false, "ii", params[0], playerid);
	format(string, 128, "Vehículo %d va explotar en 2 segundos.", params[0]);
	SendClientMessage(playerid, 0x7ADA4FFF, string);
	return 1;
}

funcion veh_evento(veh, playerid)
{
	if (iVehiculo[veh] == 0) return _Mensaje(playerid, 0, "0", "Error, repite el comando.");

	foreach(new p: Player)
	{
		if(IsPlayerInVehicle(p, iVehiculo[veh]))
		{
			SendClientMessage(p, 0x33AA33FF, "Fin del juego, tu vehículo ha explotado.");
			cmd_salirevento(p);
		}
	}

	SetTimerEx("veh_evento2", 1500, false, "i", veh);
	return 1;
}

funcion veh_evento2(veh)
{
	// Get the player's position
	new Float:x, Float:y, Float:z;
	GetVehiclePos(iVehiculo[veh], x, y, z);

	// Create an explosion at the player's position
	CreateExplosion(x, y, z, 0, 10.0);
	if (iVehiculo[veh] != 0) DestroyVehicle(iVehiculo[veh]);
	return 1;
}

// Último comando - Ultimo comando.
funcion EventoVBomba()
{
	iVehiculo[0] = CreateVehicle(402, 1310.9651, 2110.0562, 10.7504, -33.7200, -1, -1, -1);
	iVehiculo[1] = CreateVehicle(411, 1308.2483, 2125.0144, 10.8224, -87.1200, -1, -1, -1);
	iVehiculo[2] = CreateVehicle(429, 1308.5771, 2137.5442, 10.8224, -91.2000, -1, -1, -1);
	iVehiculo[3] = CreateVehicle(434, 1315.7668, 2147.5129, 10.9760, 0.0000, -1, -1, -1);
	iVehiculo[4] = CreateVehicle(451, 1312.7961, 2159.9956, 10.6622, 94.0800, -1, -1, -1);
	iVehiculo[5] = CreateVehicle(457, 1304.5322, 2168.7542, 10.6622, 84.0000, -1, -1, -1);
	iVehiculo[6] = CreateVehicle(457, 1317.1053, 2185.3264, 10.6622, 136.2000, -1, -1, -1);
	iVehiculo[7] = CreateVehicle(480, 1305.8528, 2191.2937, 10.7823, -52.0800, -1, -1, -1);
	iVehiculo[8] = CreateVehicle(494, 1325.6036, 2111.6230, 10.9556, 11.1600, -1, -1, -1);
	iVehiculo[9] = CreateVehicle(504, 1320.2612, 2122.5769, 10.7923, -44.8200, -1, -1, -1);
	iVehiculo[10] = CreateVehicle(541, 1340.6625, 2109.3628, 10.6088, 90.9600, -1, -1, -1);
	iVehiculo[11] = CreateVehicle(568, 1354.2887, 2116.2705, 10.7344, 50.0400, -1, -1, -1);
	iVehiculo[12] = CreateVehicle(568, 1320.9767, 2135.5952, 10.7344, 140.3400, -1, -1, -1);
	iVehiculo[13] = CreateVehicle(504, 1346.1202, 2123.1887, 10.8092, -20.1000, -1, -1, -1);
	iVehiculo[14] = CreateVehicle(541, 1389.9148, 2108.7920, 10.6716, 37.6200, -1, -1, -1);
	iVehiculo[15] = CreateVehicle(568, 1394.5869, 2129.1372, 10.9376, 65.4600, -1, -1, -1);
	iVehiculo[16] = CreateVehicle(400, 1371.3719, 2111.7405, 11.1067, 0.0000, -1, -1, -1);
	iVehiculo[17] = CreateVehicle(411, 1389.8992, 2186.3542, 10.9113, 79.0200, -1, -1, -1);
	iVehiculo[18] = CreateVehicle(404, 1383.2152, 2123.3845, 11.1067, -30.7800, -1, -1, -1);
	iVehiculo[19] = CreateVehicle(409, 1390.1497, 2147.8616, 10.7304, 52.8000, -1, -1, -1);
	iVehiculo[20] = CreateVehicle(419, 1376.5797, 2133.7551, 10.8500, -20.8200, -1, -1, -1);
	iVehiculo[21] = CreateVehicle(424, 1366.9066, 2125.1128, 10.8500, -19.8600, -1, -1, -1);
	iVehiculo[22] = CreateVehicle(426, 1345.3226, 2140.5635, 10.7492, -66.0000, -1, -1, -1);
	iVehiculo[23] = CreateVehicle(438, 1328.6670, 2151.4824, 11.0387, -122.9400, -1, -1, -1);
	iVehiculo[24] = CreateVehicle(494, 1329.7375, 2193.0247, 10.8727, 0.0000, -1, -1, -1);
	iVehiculo[25] = CreateVehicle(451, 1343.8817, 2189.5344, 10.7526, -45.0000, -1, -1, -1);
	iVehiculo[26] = CreateVehicle(470, 1343.8616, 2175.6528, 10.9426, -221.7000, -1, -1, -1);
	iVehiculo[27] = CreateVehicle(477, 1328.9724, 2176.8906, 10.7583, -177.6600, -1, -1, -1);
	iVehiculo[28] = CreateVehicle(485, 1333.7385, 2162.6697, 10.6972, -158.4600, -1, -1, -1);
	iVehiculo[29] = CreateVehicle(490, 1360.1342, 2150.3208, 11.1791, 22.6800, -1, -1, -1);
	iVehiculo[30] = CreateVehicle(500, 1374.7117, 2163.6003, 11.1601, 10.3200, -1, -1, -1);
	iVehiculo[31] = CreateVehicle(516, 1362.6511, 2168.5615, 10.9090, -41.7600, -1, -1, -1);
	iVehiculo[32] = CreateVehicle(560, 1357.6565, 2136.1519, 10.7492, -13.1400, -1, -1, -1);
	iVehiculo[33] = CreateVehicle(560, 1382.4320, 2175.4417, 10.7492, -101.1000, -1, -1, -1);
	iVehiculo[34] = CreateVehicle(536, 1334.2384, 2127.9849, 10.8092, 9.9600, -1, -1, -1);
	iVehiculo[35] = CreateVehicle(565, 1372.0688, 2186.1042, 10.7492, -169.8600, -1, -1, -1);
	iVehiculo[36] = CreateVehicle(479, 1348.8741, 2161.0332, 10.9426, -369.9601, -1, -1, -1);
	iVehiculo[37] = CreateVehicle(400, 1357.1571, 2180.3728, 11.1791, -169.8600, -1, -1, -1);
	iVehiculo[38] = CreateVehicle(580, 1318.1058, 2171.5540, 10.7583, -148.2600, -1, -1, -1);
	iVehiculo[39] = CreateVehicle(490, 1374.4858, 2150.1909, 11.1791, -48.4800, -1, -1, -1);
}

GCMD:crearalquiler(playerid,  const params[])
{
	new
	    cid,
		interior,
		precio
	;
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	if (sscanf(params, "iii", cid, interior, precio)) return _Mensaje(playerid, 3, "0", "/crearalquiler [id casa] [id interior] [precio]");
	if (interior < 1 || interior > 7) return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 7.");
	if (!i_Casa[cid][cEspacio]) return _Mensaje(playerid, 0, "571", "ID casa Invalida.");
	if (i_Casa[cid][cComprado] == 1) return _Mensaje(playerid, 0, "571", "No es posible crear alquiler en casas con dueño.");

	change_alquiler(cid, interior, precio, playerid); //_creación de interior
	save_Casa(cid, true, -1, true);
	return 1;
}

stock change_alquiler(cid = -1, id_interior = 0, precio = 0, playerid)
{
	if (cid == -1) SendClientMessage(playerid, 0xFF6347AA, "No hay ninguna casa seleccionada.");
	new
		Float: x,
		Float: y,
		Float: z,
		Float: r,
		int,
		name[32],
		espacio,
		string[128]
	;

	switch (id_interior)
	{
		case 1: { 	espacio = 1;	int = 5;	x = 2233.7219; 	y = -1115.2562;		z = 1050.8828;		r = 0.9467;   	name = "Safe 1"; }
		case 2: { 	espacio = 1;	int = 1;	x = 2218.3958; 	y = -1076.2593;		z = 1050.4844;		r = 93.0441;   	name = "Safe 2"; }
		case 3: { 	espacio = 2;	int = 6;	x = 2333.1538; 	y = -1077.3425;		z = 1049.0234;		r = 358.1266;   name = "Safe 3"; }
		case 4: { 	espacio = 2;	int = 15;	x = 327.9633; 	y = 1477.8995;		z = 1084.4375;		r = 1.5733;   	name = "Safe 4"; }
		case 5: { 	espacio = 3;	int = 2;	x = 447.0063; 	y = 1397.3315;		z = 1084.3047;		r = 3.7667;   	name = "Safe 5"; }
		case 6: { 	espacio = 3;	int = 9;	x = 83.0978; 	y = 1322.4746;		z = 1083.8662;		r = 357.8367;   name = "Safe 6"; }
		case 7: { 	espacio = 4;	int = 5;	x = 226.3047; 	y = 1114.2816;		z = 1080.9929;		r = 267.3060;   name = "Safe 7"; }
		default: return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 7.");
	}
	i_Casa[cid][cInteriorX] = x;
	i_Casa[cid][cInteriorY] = y;
	i_Casa[cid][cInteriorZ] = z;
	i_Casa[cid][cInteriorA] = r;
	i_Casa[cid][cInterior] = int;
	if (precio == -1)
	{
		i_Casa[cid][c_alquiler] = 0;
		i_Casa[cid][c_alquilado] = 0;
	}
	else
	{
		if (precio != 0) i_Casa[cid][c_alquiler] = precio, i_Casa[cid][c_alquilado] = 0;
	}
	i_Casa[cid][croiretnI] = id_interior+100;
	i_Casa[cid][cEspacio] = espacio;
	if (precio == -1) format(string, sizeof(string), "Eliminado alquiler de CASA-ID %d.", cid);
	else if (precio == 0) format(string, sizeof(string), "Nuevo interior %s - Alquiler: %d$ - CASA-ID %d.", name, i_Casa[cid][c_alquiler], cid);
	else format(string, sizeof(string), "Nueva ALQUILER-ID %d - Alquiler: %d$ - Interior: %s.", cid, precio, name);
	SendClientMessage(playerid, 0x90C3D4FF, string);

	return 1;
}

//house system
stock change_interior(cid = -1, id_interior = 0, precio = 0, playerid, tipo = 0)
{
	if (cid == -1) SendClientMessage(playerid, 0xFF6347AA, "No hay ninguna casa seleccionada.");
	new
		Float: x,
		Float: y,
		Float: z,
		Float: r,
		int,
		name[32],
		espacio,
		string[128]
	;

	switch (id_interior)
	{
		case 1: { 	espacio = 1;	int = 5;	x = 2254.8953; 	y = -1112.8101;		z = 1049.1305;		r = 1.9238;   	name = "Safe House 1";			}
		case 2: { 	espacio = 4;	int = 6;	x = 2149.8394; 	y = -1216.5927;		z = 1049.1169;		r = 178.3323; 	name = "Safe House 2";			}
		case 3: { 	espacio = 1;	int = 10;	x = 2260.7288; 	y = -1121.1395;		z = 1048.8853;		r = 266.1459; 	name = "Safe House 4";			}
		case 4: { 	espacio = 1;	int = 1;	x = 191.3062; 	y = 1288.8041;		z = 1082.1399;		r = 359.9061; 	name = "Burglary X3";			}
		case 5: { 	espacio = 4;	int = 5;	x = 199.1149; 	y = 1110.6598;		z = 1083.2120;		r = 359.5114; 	name = "Burglary X4";			}
		case 6: { 	espacio = 2;	int = 15;	x = 289.9261; 	y = 1501.8516;		z = 1078.4204;		r = 1.3914;   	name = "Burglary Houses";		}
		case 7: { 	espacio = 2;	int = 2;	x = 448.3072; 	y = 1353.8822;		z = 1082.2172;		r = 355.7513; 	name = "Pair Burglary";			}
		case 8: { 	espacio = 2;	int = 4;	x = 295.0951; 	y = 1285.1425;		z = 1078.4471;		r = 359.5113; 	name = "Burglary X12";			}
		case 9: { 	espacio = 3;	int = 4;	x = 311.0731; 	y = 326.2518;		z = 1003.3047;		r = 84.5705;  	name = "Michelle's Love Nest";	}
		case 10: { 	espacio = 3;	int = 10;	x = 7.7253; 	y = 1305.3005;		z = 1082.8309;		r = 358.7165; 	name = "Burglary X14";			}
		case 11: { 	espacio = 2;	int = 4;	x = 244.2567;	y = 1145.4951;		z = 1081.1672;		r = 358.7164; 	name = "Burglary X13";			}
		case 12: { 	espacio = 1;	int = 6;	x = 360.4425;	y = 304.0760;		z = 996.8972;		r = 268.4990; 	name = "Millie's Room";			}
		case 13: { 	espacio = 2;	int = 5;	x = 46.0271;	y = 1439.4216;		z = 1082.4193;		r = 90.5239;  	name = "Burglary X16";			}
		case 14: { 	espacio = 4;	int = 5;	x = 156.1010;	y = 1409.5881;		z = 1086.4325;		r = 353.3897; 	name = "Burglary X17";			}
		case 15: { 	espacio = 4;	int = 6;	x = 278.0960;	y = 1057.7456;		z = 1083.4534;		r = 358.4031; 	name = "House X18";				}
		case 16: { 	espacio = 2;	int = 6;	x = -79.9072;	y = 1383.2272;		z = 1078.9551;		r = 1.2232;   	name = "House X19";				}
		case 17: { 	espacio = 1;	int = 1;	x = 2189.7007;	y = -1073.5254;		z = 1050.4823;		r = 85.8240;  	name = "The Camel's Safehouse";	}
		case 18: { 	espacio = 4;	int = 12;	x = 2373.4717;	y = -1184.0616;		z = 1053.2129;		r = 354.9565; 	name = "Unused House";			}
		case 19: { 	espacio = 3;	int = 8;	x = 2370.5181;	y = -1094.5428;		z = 1049.6283;		r = 177.0283; 	name = "Verdant Bluffs House";	}
		case 20: { 	espacio = 2;	int = 8;	x = -48.3374;	y = 1458.4960;		z = 1085.6138;		r = 86.4741;  	name = "Burglary X21";			}
		case 21: { 	espacio = 2;	int = 11;	x = 2284.8208;	y = -1126.3821;		z = 1050.9229;		r = 0.0166;   	name = "Willowfield House";		}
		case 22: { 	espacio = 3;	int = 9;	x = 82.9581;	y = 1271.7540;		z = 1079.8889;		r = 358.7633; 	name = "House X20";				}
		case 23: { 	espacio = 2;	int = 9;	x = 290.9253;	y = 1242.4250;		z = 1082.6812;		r = 355.0032; 	name = "Burglary X22";			}
		case 24: { 	espacio = 1;	int = 2;	x = 265.5340;	y = 321.4514;		z = 997.1435;		r = 262.5690; 	name = "Burglary X23";			}
		case 25: { 	espacio = 1;	int = 1;	x = 242.2664;	y = 323.0922;		z = 999.5914;		r = 269.7758; 	name = "Barbara's Love nest";	}
		case 26: { 	espacio = 2;	int = 5;	x = 2313.4053;	y = -1230.9330;		z = 1047.4082;		r = 357.1732; 	name = "Pirates Mens";			}
		case 27: { 	espacio = 3;	int = 5;	x = 326.2144;	y = 1074.7075;		z = 1082.2539;		r = 357.7999; 	name = "Crack den";				}
		default: return SendClientMessage(playerid, 0xFF6347AA, "Error de id_interior, intenta entre 1 - 27.");
	}
	if (tipo == 77)
	{
		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, int);
		format(string, sizeof(string), "Interior %s", name);
		SendClientMessage(playerid, -1, string);
		return 1;
	}
	i_Casa[cid][cInteriorX] = x;
	i_Casa[cid][cInteriorY] = y;
	i_Casa[cid][cInteriorZ] = z;
	i_Casa[cid][cInteriorA] = r;
	i_Casa[cid][cInterior] = int;
	if (precio != 0) i_Casa[cid][cPrecio] = precio;
	i_Casa[cid][croiretnI] = id_interior;
	i_Casa[cid][cEspacio] = espacio;
	if (tipo == 1) alm(i_Casa[cid][cComprador], "enventa");
	if (tipo != 1) format(string, sizeof(string), "Nuevo interior %s - Precio: %d - CASA-ID %d.", name, i_Casa[cid][cPrecio], cid);
	else format(string, sizeof(string), "Nueva CASA-ID %d - Precio: %d - Interior: %s.", cid, precio, name);
	SendClientMessage(playerid, 0x90C3D4FF, string);

	return 1;
}

//Hud system
funcion UpdatePlayerHud(playerid, vehicleid)
{
	new
		speed[200],
		radio_info,
		id_m = comando_pd[playerid],
		Ano, Mes, Dia
	;
	getdate(Ano, Mes, Dia);

	if (EnServicioPD[playerid] == 1) radio_info = 911;
	else
	{
		if (user[playerid][jFrecuencia] == -1) radio_info = 0;
		else radio_info = user[playerid][jFrecuencia];
	}

	switch(user[playerid][pHud])
	{
		case 1:
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
					PlayerTextDrawShow(playerid, Player_Hud[playerid][1]);
					if(EstaEnBicis(vehicleid))
					{
						format(speed, sizeof(speed), "~b~%s~n~~b~KM/H:_~g~%d", NombreVehiculo(vehicleid), floatround(GetVehicleSpeed(vehicleid)));
					}
					else
					{
						if (comando_pd[playerid] != 0) format(speed, sizeof(speed), "~b~%s_~g~%d~n~~b~KM/H:_~g~%d~n~~b~ALPR:_~w~LS-%d~n~%s~n~~g~%s", NombreVehiculo(vehicleid), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)), i_Vehiculo[id_m][vLlave], i_Vehiculo[id_m][vDueno], nombre_vehiculo[i_Vehiculo[id_m][vModelo] - 400]);
						else format(speed, sizeof(speed), "~b~%s_~g~%d~n~~b~KM/H:_~g~%d", NombreVehiculo(vehicleid), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)));
					}
					PlayerTextDrawSetString(playerid, Player_Hud[playerid][1], speed);
				}
			}
			else
			{
				PlayerTextDrawHide(playerid, Player_Hud[playerid][1]);
			}
			format(speed, sizeof(speed), "_~n~~b~Radio info~n~~b~Canal:_~g~%d~n~~b~Slot:_~g~%d", radio_info, 1);
			PlayerTextDrawSetString(playerid, Player_Hud[playerid][0], speed);
		}
		case 2:
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
					PlayerTextDrawShow(playerid, Player_Hud[playerid][3]);
					new Float: carhp;
					GetVehicleHealth(vehicleid, carhp);

					if(EstaEnBicis(vehicleid))
					{
						format(speed, sizeof(speed), "_~n~_~n~_~n~~l~%s___~w~%d", NombreVehiculo(vehicleid), floatround(GetVehicleSpeed(vehicleid)));
					}
					else
					{
						if (comando_pd[playerid] != 0) format(speed, sizeof(speed), "~l~ALPR:~w~_LS-%d_~l~-_%s~n~~w~%s~n~~l~%s~n~~l~%d___~w~%d___~l~%d", i_Vehiculo[id_m][vLlave], nombre_vehiculo[i_Vehiculo[id_m][vModelo] - 400], i_Vehiculo[id_m][vDueno], NombreVehiculo(vehicleid), floatround(carhp), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)));
						else format(speed, sizeof(speed), "_~n~_~n~~l~%s~n~~l~%d___~w~%d___~l~%d", NombreVehiculo(vehicleid), floatround(carhp), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)));
					}
					PlayerTextDrawSetString(playerid, Player_Hud[playerid][3], speed);
				}
			}
			else
			{
				PlayerTextDrawHide(playerid, Player_Hud[playerid][3]);
			}
			format(speed, sizeof(speed), "%02d - %02d - %02d~n~~g~%d:~w~_%d", Dia, Mes, Ano, 1, radio_info);
			PlayerTextDrawSetString(playerid, Player_Hud[playerid][2], speed);
		}
		case 3:
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
				    PlayerTextDrawShow(playerid, Player_Hud[playerid][5]);

					if(EstaEnBicis(vehicleid))
					{
						format(speed, sizeof(speed), "~w~Km/h: ~r~%d~n~%s", floatround(GetVehicleSpeed(vehicleid)), NombreVehiculo(vehicleid));
					}
					else
					{
						if (comando_pd[playerid] != 0) format(speed, sizeof(speed), "~w~Km/h: ~r~%d~n~Gas: ~w~%d / 300~n~ALPR: LS-%d~n~%s~n~~b~%s", floatround(GetVehicleSpeed(vehicleid)), veh_gasolina[vehicleid], i_Vehiculo[id_m][vLlave], i_Vehiculo[id_m][vDueno], nombre_vehiculo[i_Vehiculo[id_m][vModelo] - 400]);
						else format(speed, sizeof(speed), "~w~Km/h: ~r~%d~n~Gas: ~w~%d / 300", floatround(GetVehicleSpeed(vehicleid)), veh_gasolina[vehicleid]);
					}
					PlayerTextDrawSetString(playerid, Player_Hud[playerid][5], speed);
				}
			}
			else
			{
				PlayerTextDrawHide(playerid, Player_Hud[playerid][5]);
			}
			format(speed, sizeof(speed), "~w~%02d/%02d/%02d~n~~b~Radio info~n~~w~Canal:_~b~%d~n~~w~Slot:_~b~%d", Dia, Mes, Ano, radio_info, 1);
			PlayerTextDrawSetString(playerid, Player_Hud[playerid][4], speed);
		}
		case 4:
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
					if (comando_pd[playerid] != 0)
					{
						PlayerTextDrawShow(playerid, Player_Hud[playerid][7]);

						format(speed, sizeof(speed), "~r~ALPR:~w~ LS-%d ~y~%s~n~~w~%s", i_Vehiculo[id_m][vLlave], nombre_vehiculo[i_Vehiculo[id_m][vModelo] - 400], i_Vehiculo[id_m][vDueno]);
						PlayerTextDrawSetString(playerid,Player_Hud[playerid][7], speed);
					}

					if(EstaEnBicis(vehicleid)) format(speed, sizeof(speed), "~w~%s_~y~KM/H:_~r~%d~n~~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", NombreVehiculo(vehicleid), floatround(GetVehicleSpeed(vehicleid)), radio_info, 1);
					else format(speed, sizeof(speed), "~w~%s_~r~%d_~y~KM/H:_~r~%d~n~~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", NombreVehiculo(vehicleid), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)), radio_info, 1);

					PlayerTextDrawSetString(playerid,Player_Hud[playerid][6], speed);
				}
			}
			else
			{
				PlayerTextDrawHide(playerid, Player_Hud[playerid][7]);
				format(speed, sizeof(speed), "~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", radio_info, 1);
				PlayerTextDrawSetString(playerid,Player_Hud[playerid][6], speed);
			}
		}
		default:
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
					if (comando_pd[playerid] != 0)
					{
						PlayerTextDrawShow(playerid, Player_Hud[playerid][7]);

						format(speed, sizeof(speed), "~r~ALPR:~w~ LS-%d ~y~%s~n~~w~%s", i_Vehiculo[id_m][vLlave], nombre_vehiculo[i_Vehiculo[id_m][vModelo] - 400], i_Vehiculo[id_m][vDueno]);
						PlayerTextDrawSetString(playerid,Player_Hud[playerid][7], speed);
					}

					if(EstaEnBicis(vehicleid)) format(speed, sizeof(speed), "~w~%s_~y~KM/H:_~r~%d~n~~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", NombreVehiculo(vehicleid), floatround(GetVehicleSpeed(vehicleid)), radio_info, 1);
					else format(speed, sizeof(speed), "~w~%s_~r~%d_~y~KM/H:_~r~%d~n~~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", NombreVehiculo(vehicleid), veh_gasolina[vehicleid], floatround(GetVehicleSpeed(vehicleid)), radio_info, 1);

					PlayerTextDrawSetString(playerid,Player_Hud[playerid][6], speed);
				}
			}
			else
			{
				if (comando_pd[playerid] != 0)
				{
					PlayerTextDrawHide(playerid, Player_Hud[playerid][7]);
				}
				format(speed, sizeof(speed), "~w~Radio_Info:_~y~%d~n~~w~Slot:_~y~%d", radio_info, 1);
				PlayerTextDrawSetString(playerid,Player_Hud[playerid][6], speed);
			}
		}
	}
}

funcion OnPlayerChangeHud(playerid)
{
	if(user[playerid][pUseHud] == 0)
	{
		switch(user[playerid][pHud])
		{
			case 1: PlayerTextDrawShow(playerid, Player_Hud[playerid][0]);
			case 2: PlayerTextDrawShow(playerid, Player_Hud[playerid][2]);
			case 3: PlayerTextDrawShow(playerid, Player_Hud[playerid][4]);
			case 4: PlayerTextDrawShow(playerid, Player_Hud[playerid][6]);
			default: PlayerTextDrawShow(playerid, Player_Hud[playerid][6]);
		}
	}
	return 1;
}

//Licenses System

Exam_End(playerid, bool:success)
{
    if(success)
    {
        Mensaje_(playerid, -1, "Terminaste el examen, resultado: {00c200}Positivo{ffffff}. Revisa /licencias");
        switch (user[playerid][Type])
        {
            case 1: user[playerid][jLicencias][1] = 1, user[playerid][jPuntosLic] = 10; //conducir
            case 2: user[playerid][jLicencias][5] = 1; //botes
            case 3: user[playerid][jLicencias][4] = 1; //avión
        }
	}
	else
	{
		new itemid = user[playerid][Type] - 1;

		static const licensesPrice[3] = {400, 950, 1500};
		DarDineroGC(playerid, licensesPrice[itemid]);
		Mensaje_(playerid, -1, "Terminaste el examen, resultado: {b00000}Negativo{ffffff}.");
		Mensaje_(playerid, -1, "Recibiste la mitad del dinero que pagaste.");
	}

	new type = user[playerid][Type] - 1;
	new vehicleid = user[playerid][Vehicle];

	SetPlayerPos(playerid, LicensesPoint[type][licenseX], LicensesPoint[type][licenseY], LicensesPoint[type][licenseZ]);
	DisablePlayerRaceCheckpoint(playerid);

	DestroyVehicle(vehicleid);
	//Iter_Remove(Vehicles, vehicleid);
	Exam_ResetVars(playerid);

	return 1;
}

Exam_ResetVars(playerid)
{
	user[playerid][Started] = false;
    user[playerid][Vehicle] = -1;
    user[playerid][Checkpoint] = 0;
    user[playerid][Type] = -1;

	return 1;
}

Exam_Init(playerid, type)
{
	user[playerid][Type] = type;

	TogglePlayerControllable(playerid, false);
	//user[playerid][pFreezed] = 1;

	switch(user[playerid][Type])
	{
		case EXAM_TYPE_VEHICLES:
		{
			InterpolateCameraPos(playerid, 1106.767333, -1784.787231, 17.752008, 1124.609375, -1738.023071, 17.425840, 7500);
			InterpolateCameraLookAt(playerid, 1108.695922, -1789.340698, 17.012544, 1120.142578, -1740.245239, 17.094053, 7500);
		}
		case EXAM_TYPE_BOATS:
		{
			InterpolateCameraPos(playerid, 705.998229, -1764.273315, 24.726591, 710.644775, -1633.787353, 4.085257, 7500);
			InterpolateCameraLookAt(playerid, 706.047546, -1759.399536, 23.611059, 715.337707, -1635.431518, 3.562774, 7500);
		}
		case EXAM_TYPE_PLANES:
		{
			InterpolateCameraPos(playerid, 1413.5602, -2591.1299, 30.5984, 1901.133422, -2495.109619, 22.692070, 7500);
			InterpolateCameraLookAt(playerid, 1414.4908, -2590.7676, 30.4233, 1906.040893, -2495.717773, 21.952604, 7500);
		}
		default: return 1;
	}
	return SetTimerEx("Exam_ShowMenu", 6500, false, "d", playerid);
}

Exam_ShowMenu(playerid); public Exam_ShowMenu(playerid)
{
    switch(user[playerid][Type])
    {
        case EXAM_TYPE_VEHICLES:
        {
			new licens[]=
			"Bienvenido a la escuela de autos, aquí puedes tomar\n\
			el examen para obtener una licencia de conducir ($800)\n\n\
			¿Estás seguro de que quieres continuar?";
			ExPlayerDialog(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Autoescuela Verona Beach", licens, "Continuar", "Cancelar");
		}
        case EXAM_TYPE_BOATS:
        {
			new licens[]=
			"Bienvenido al centro de navegación, aquí puede tomar\n\
			el examen para obtener un permiso de conducir para botes ($1,900)\n\n\
			¿Estás seguro de que quieres continuar?";
            ExPlayerDialog(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Centro de navegación", licens, "Continuar", "Cancelar");

		}
        case EXAM_TYPE_PLANES:
        {
			new licens[]=
			"Bienvenido a la sede del aeropuerto, aquí puede tomar\n\
			el examen para obtener un permiso de conducir para aviones ($3,000)\n\n\
			¿Estás seguro de que quieres continuar?";
            ExPlayerDialog(playerid, DialogLicense, DIALOG_STYLE_MSGBOX, "Aeropuerto - Licencias", licens, "Continuar", "Cancelar");
    	}
	}
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	new nextCheckpoint = user[playerid][Checkpoint] + 1, Float:vhealth;
    GetVehicleHealth(user[playerid][Vehicle], vhealth);

    if(IsPlayerInAnyVehicle(playerid) && user[playerid][Started] && user[playerid][Type] == EXAM_TYPE_VEHICLES)
	{
 		#define lastCheckpoint sizeof(VehiclesCheckpoints) - 1
   		#define finishCheckpoint sizeof(VehiclesCheckpoints)

        switch(user[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 1, VehiclesCheckpoints[lastCheckpoint][0], VehiclesCheckpoints[lastCheckpoint][1], VehiclesCheckpoints[lastCheckpoint][2], VehiclesCheckpoints[lastCheckpoint][0], VehiclesCheckpoints[lastCheckpoint][1], VehiclesCheckpoints[lastCheckpoint][2], 5.0);
                user[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 0, VehiclesCheckpoints[user[playerid][Checkpoint]][0], VehiclesCheckpoints[user[playerid][Checkpoint]][1], VehiclesCheckpoints[user[playerid][Checkpoint]][2], VehiclesCheckpoints[nextCheckpoint][0], VehiclesCheckpoints[nextCheckpoint][1], VehiclesCheckpoints[nextCheckpoint][2], 5.0), user[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }
    else if(IsPlayerInAnyVehicle(playerid) && user[playerid][Started] && user[playerid][Type] == EXAM_TYPE_BOATS)
    {
 		#define lastCheckpoint sizeof(BoatCheckpoints) - 1
   		#define finishCheckpoint sizeof(BoatCheckpoints)

        switch(user[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 1, BoatCheckpoints[lastCheckpoint][0], BoatCheckpoints[lastCheckpoint][1], BoatCheckpoints[lastCheckpoint][2], BoatCheckpoints[lastCheckpoint][0], BoatCheckpoints[lastCheckpoint][1], BoatCheckpoints[lastCheckpoint][2], 6.0);
                user[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 0, BoatCheckpoints[user[playerid][Checkpoint]][0], BoatCheckpoints[user[playerid][Checkpoint]][1], BoatCheckpoints[user[playerid][Checkpoint]][2], BoatCheckpoints[nextCheckpoint][0], BoatCheckpoints[nextCheckpoint][1], BoatCheckpoints[nextCheckpoint][2], 6.0), user[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }
    else if(IsPlayerInAnyVehicle(playerid) && user[playerid][Started] && user[playerid][Type] == EXAM_TYPE_PLANES)
    {
 		#define lastCheckpoint sizeof(PlaneCheckpoints) - 1
   		#define finishCheckpoint sizeof(PlaneCheckpoints)

        switch(user[playerid][Checkpoint])
        {
            case lastCheckpoint:
            {
                SetPlayerRaceCheckpoint(playerid, 4, PlaneCheckpoints[lastCheckpoint][0], PlaneCheckpoints[lastCheckpoint][1], PlaneCheckpoints[lastCheckpoint][2], PlaneCheckpoints[lastCheckpoint][0], PlaneCheckpoints[lastCheckpoint][1], PlaneCheckpoints[lastCheckpoint][2], 6.0);
                user[playerid][Checkpoint]++;
            }
            case finishCheckpoint: Exam_End(playerid, (vhealth >= 995.0) ? true : false);
            default: SetPlayerRaceCheckpoint(playerid, 3, PlaneCheckpoints[user[playerid][Checkpoint]][0], PlaneCheckpoints[user[playerid][Checkpoint]][1], PlaneCheckpoints[user[playerid][Checkpoint]][2], PlaneCheckpoints[nextCheckpoint][0], PlaneCheckpoints[nextCheckpoint][1], PlaneCheckpoints[nextCheckpoint][2], 6.0), user[playerid][Checkpoint]++;
        }

        #undef lastCheckpoint
        #undef finishCheckpoint
    }

    return 1;
}

/////////////////////////////---------------------------

stock EscucharMusica(playerid, const url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if(user[playerid][j_uAudio] == 0) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PlayStream(playerid, const url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "MusBB")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "MusBB", 1);
	if(user[playerid][j_uAudio] == 0) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock ReproducirMVeh(playerid, const url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "MusVeh")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "MusVeh", 1);
	if(user[playerid][j_uAudio] == 0) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == area_lenador)
	{
		if(en_lenador[playerid] == 1)
		{
			SendClientMessage(playerid, -1, "{999999}Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
			CancelLumberjackWork(playerid);
		}
	}
	////////////////
	if(MusicaEsc[playerid] != 1)
	{
		foreach(new i: Player)
		{
			if(i_boox[i][BB_area])
			{
				if(areaid == i_boox[i][BB_area])
				{
					StopStream(playerid);
					return 1;
				}
			}
		}
		foreach(new i: Player)
		{
			if(GetPVarType(i, "AreaVehMus"))
			{
				if(areaid == GetPVarInt(i, "AreaVehMus"))
				{
					PararMVeh(playerid);
					return 1;
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(MusicaEsc[playerid] != 1)
	{
    	foreach(new i: Player)
		{
			if(i_boox[i][BB_area])
			{
				if(areaid == i_boox[i][BB_area])
				{
					new station[256];
					GetPVarString(i, "BBStation", station, sizeof(station));
					if(!isnull(station))
					{
						if(user[playerid][j_uAudio] == 0)
						{
							Mensaje_(playerid, 0x9EC73DAA, "[ENTORNO] Comienzas a oír música proveniente de un equipo de sonido.");
							PlayStream(playerid, station, i_boox[i][BB_x], i_boox[i][BB_y], i_boox[i][BB_z], 30.0, 1);
						}
					}
					return 1;
				}
			}
		}
		foreach(new i: Player)
		{
			if(GetPVarType(i, "AreaVehMus"))
			{
				if(areaid == GetPVarInt(i, "AreaVehMus"))
				{
					new station[256];
					GetPVarString(i, "AreaVehAud", station, sizeof(station));
					if(!isnull(station))
					{
						if(user[playerid][j_uAudio] == 0)
						{
							new string[128];
    						format(string, sizeof(string), "[ENTORNO] Comienzas a oír música proveniente de un %s.", NombreVehiculo(GetPVarInt(i, "AreaVehID")));
    						Mensaje_(playerid, 0x9EC73DAA, string);
							ReproducirMVeh(playerid, station, GetPVarFloat(i, "AreaVehPosX"), GetPVarFloat(i, "AreaVehPosY"), GetPVarFloat(i, "AreaVehPosZ"), 50.0, 1);
						}
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

funcion StopStream(playerid)
{
	DeletePVar(playerid, "MusBB");
	StopAudioStreamForPlayer(playerid);
}

funcion PararMVeh(playerid)
{
	DeletePVar(playerid, "MusVeh");
	StopAudioStreamForPlayer(playerid);
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetPlayerState(playerid) == 1) return 1;
	enter_vehicle[playerid] = 0;
	if(user[playerid][Started] && user[playerid][Vehicle] == vehicleid)
	{
	    arr_Engine {user[playerid][Vehicle]} = 0;
		Exam_End(playerid, false);
		Mensaje_(playerid, 0xb00000ff, "Saliste del vehículo y no pasaste el examen.");
	}

	if (escuchandop[playerid] == 1)
	{
		StopAudioStreamForPlayer(playerid);
		escuchandop[playerid] = 0;
		estacionp[playerid] = 0;
	}
	//en tractor
	if (veh_Granjero(vehicleid))
	{
	    new string[128];
		SetVehicleToRespawn(vehicleid);
		DeletePVar(playerid, "EnCheckPoint");
		if (Granjero[playerid] == 1)
		{
			PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
			DisablePlayerCheckpoint(playerid);
			Granjero[playerid] = 0;
			format(string, sizeof(string), "Dejaste de cosechar, el tractor %d se respawneo.", vehicleid);
			SendClientMessage(playerid, 0x007798ff, string);
			DisableRemoteVehicleCollisions(playerid, false);
		}
		else
		{
			format(string, sizeof(string), "Saliste del tractor %d, el mismo se respawneo.", vehicleid);
			SendClientMessage(playerid, 0x007798ff, string);
			DisableRemoteVehicleCollisions(playerid, false);
		}
	}
	if(LSPD_Veh(vehicleid))
	{
		comando_pd[playerid] = 0;
	}
	switch(Casco[playerid])
	{
		case 1:
		{
			if(EnMotos_Bicis(vehicleid)) accion_rol(playerid, 0, "pone las manos en su casco, y se lo quita.");
			else accion_rol(playerid, 0, "pone las manos en su cinturón y se lo quita.");
			Casco[playerid] = 0;
		}
	}
	if(VehSeguro[vehicleid] >= 1)
	{
		if (veh_asiento[playerid] != -1)
		{
			ClearAnimations(playerid);
			PutPlayerInVehicle(playerid, vehicleid, veh_asiento[playerid]);
		    return 1;
		}
	}
	veh_asiento[playerid] = -1;
	SetPVarInt(playerid, "veh_bajo", vehicleid);
	return 1;
}

stock GetPlayerPartName(playerid)
{
	new x, name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	while (x < strlen(name))
	{
		if (name[x] == '_')
		{
			strdel(name, x, MAX_PLAYER_NAME);
			return name;
		}
		x++;
	}
	return name;
}

stock GetPlayerSecondName(playerid)
{
	new x, name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	while (x < strlen(name))
	{
		if (name[x] == '_')
		{
			strdel(name, 0, x + 1);
			return name;
		}
		x++;
	}
	return name;
}

stock PezCosto(playerid, fish)
{
	new cost = 0;
	switch (fish)
	{
		case 1: cost = 2;
		case 2: cost = 2;
		case 3: cost = 2;
		case 5: cost = 3;
		case 6: cost = 2;
		case 8: cost = 3;
		case 9: cost = 4;
		case 11: cost = 2;
		case 12: cost = 2;
		case 14: cost = 3;
		case 15: cost = 4;
		case 16: cost = 3;
		case 17: cost = 2;
		case 18: cost = 2;
		case 19: cost = 3;
		case 21: cost = 2;
		case 22: cost = 5;
	}
	return cost;
}

StaffEnLinea()
{
	new count;
	foreach(new i: Player)
	{
		if(user[i][jAdmin] >= 1)
		{
			count++;
		}
	}
	return count;
}

funcion CheckBan(const ip[])
{
	new string[20];
	new File: file = fopen("Baneados.rp", io_read);
	while(fread(file, string))
	{
		if(strcmp(ip, string, true, strlen(ip)) == 0)
		{
			fclose(file);
			return 1;
		}
	}
	fclose(file);
	return 0;
}

stock ban_ip(const ip[], const razon[] = "x razón", const baneador[] = "x baneador")
{
	new elban[128];
	format(elban, 128, "Baneados/%s.rp", ip);
	fcreate(elban);
	new INI: File = INI_Open(elban);
	INI_WriteString(File, "Culpable", baneador);
	INI_WriteString(File, "Razon", razon);
	INI_WriteString(File, "Momento", el_tiempo());
	INI_Close(File);
}

funcion unban_ip(const ip[])
{
	if(veri_ip(ip))
	{
		new elban[128];
		format(elban, 128, "Baneados/%s.rp", ip);
		fremove(elban);
	}
	return 1;
}

funcion AddBan(ip[])
{
	if(CheckBan(ip) == 0)
	{
		new File: file = fopen("Baneados.rp", io_append);
		new string[20];
		format(string, sizeof(string), "\n%s", ip);
		fwrite(file, string);
		fclose(file);
		foreach(new playerid: Player)
		{
			new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if(strcmp(playerIP, ip) == 0)
			{
				_Mensaje(playerid, 4, "b0b0b0", "Fuiste baneado del servidor.");
				Expulsar(playerid, 1);
			}
		}
		return 1;
	}
	return 0;
}

funcion RemoveBan(const ip[])
{
	if(CheckBan(ip) == 1)
	{
		new string[20];
		new File: file = fopen("Baneados.rp", io_read);
		fcreate("BaneadosTemp.rp");
		new File: file2 = fopen("BaneadosTemp.rp", io_append);
		while(fread(file, string))
		{
			if(strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
			{
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("Baneados.rp", io_write);
		file2 = fopen("BaneadosTemp.rp", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("BaneadosTemp.rp");
		return 1;
	}
	return 0;
}

stock RegaloTodos(playerid)
{
	new gift = Random(1, 3);
	switch(gift)
	{
		case 1:
		{
			DarDineroGC(playerid, 500);
			_Mensaje(playerid, 4, "ffff00", "Felicidades - recibiste $500 del regalo!");
		}
		case 2:
		{
			user[playerid][jExperiencia] += 2;
			_Mensaje(playerid, 4, "ffff00", "Felicidades - recibiste dos puntos de experiencia del regalo!");
		}
		case 3:
		{
			user[playerid][jExperiencia] += 1;
			_Mensaje(playerid, 4, "ffff00", "Felicidades - recibiste un punto de experiencia del regalo!");
		}
		default: return RegaloTodos(playerid);
	}
	return 1;
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

limpiar_chat(playerid, rows)
{
	for(new j; j < rows; j++)
		SendClientMessage(playerid, -1, "");
	return 1;
}

stock IsWeaponWithAmmo(weaponid)
{
	switch(weaponid)
	{
		case 16..18, 22..39, 41..42, 409: return 1;
		default: return 0;
	}
	return 0;

}

stock GetPlayerWeaponAmmo(playerid,weaponid)
{
	new wd[2][13];
	for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
	for(new i; i<13; i++)
	{

		if(weaponid == wd[0][i]) return wd[1][i];
	}
	return 0;
}

/*stock _GiveWeapon(playerid, arma, balas)
{
	new _Dmano = user[playerid][jm_Derecha], _MDmano = user[playerid][jm_DerechaCant];
	user[playerid][jm_DerechaCant] = _MDmano+balas;
	if(_MDmano > InfoObjeto[_Dmano][Capacidad])
	{
		ResetPlayerWeapons(playerid);
		user[playerid][jm_DerechaCant] = InfoObjeto[_Dmano][Capacidad];
		GivePlayerWeapon(playerid, arma, InfoObjeto[_Dmano][Capacidad]);
	} else {
	    GivePlayerWeapon(playerid, arma, user[playerid][jm_DerechaCant]);
	}
	if(_Dmano < 16 && _MDmano <= 0)
	{
		ResetPlayerWeapons(playerid);
		user[playerid][jm_DerechaCant] = InfoObjeto[_Dmano][Capacidad];
		return GivePlayerWeapon(playerid, arma, 1);
	}
	return 0;
}*/

public OnPlayerWeaponShot(playerid, WEAPON:weaponid, BULLET_HIT_TYPE:hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new idobj = user[playerid][jm_Derecha];/* balas = GetPlayerAmmo(playerid);*/
	if(IsPlayerConnectedEx(playerid))
	{
		if(IsWeaponWithAmmo(weaponid))
		{
			if (InfoObjeto[idobj][IDArma] != weaponid && user[playerid][jNivel] <= 1) // "armas invisibles"
			{
			    new text_[144];
				format(text_, sizeof(text_), "{FF6347}Administración: %s fue expulsado. Razón:[Arma no sincronizada (posible whitebug o cheat)]", nombre_pj(playerid));
				MensajeAdmin(text_);
				_Expulsar(playerid, 0, "Arma no sincronizada");
				return 1;
			} // el viejo sistema lo borré a la mierda, este de abajo es el efectivo.
			if(user[playerid][jm_DerechaCant])
			{
       			user[playerid][jm_DerechaCant]--;
				//fix para que no se le cedan balas extras al jugador
			    if(GetPlayerWeaponAmmo(playerid, InfoObjeto[idobj][IDArma]) != 0 && GetPlayerWeaponAmmo(playerid, InfoObjeto[idobj][IDArma]) < user[playerid][jm_DerechaCant])
			    {
			        user[playerid][jm_DerechaCant] = GetPlayerWeaponAmmo(playerid, InfoObjeto[idobj][IDArma]);
			    }
				if(user[playerid][jm_DerechaCant] == 0) // remueve arma si no tienes balas, si continua disparando abajo está el check para dar kick <-
				{
				    ResetPlayerWeapons(playerid);
				}
			}
			else
			{
			    Anti[playerid][BalasW]++;
			    ResetPlayerWeapons(playerid);
			   	if(Anti[playerid][BalasW] == 3 && AntiG[Balas]) // 3 advertencias de tolerancia ^^
			    {
   					new text_[144];
					format(text_, sizeof(text_), "{FF6347}Administración: %s fue expulsado y limpiado. Razón:[Cheat de munición]", nombre_pj(playerid));
					_MensajeOOC(0xFF6347FF, text_);
					format(text_, sizeof(text_), "%s ha utilizado cheat de munición. [%s]", nombre_pj(playerid), InfoObjeto[user[playerid][jm_Derecha]][NombreObjeto]);
					Log("Registros/cheatsbalas.log", text_);
					QuitarManos(playerid);
					_Expulsar(playerid, 0, "Munición desincronizada con el servidor");
					return 1;
				}
			}
		}
	}
	if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
		if(fX > 20.0 || fX < -20.0 || fY > 20.0 || fY < -20.0 || fZ > 20.0 || fZ < -20.0)
		{
			return 0b0;
		}
		new Float:VehVida;
		GetVehicleHealth(hitid, VehVida);
		if(VehVida > 400)
		{
			switch(weaponid)
			{
				case 22: SetExVehicleHealth(hitid, VehVida - 20); // 45. Colt
				case 23: SetExVehicleHealth(hitid, VehVida - 25); // Silenced 45. Colt
				case 24: SetExVehicleHealth(hitid, VehVida - 30); // Deagle
				case 25: SetExVehicleHealth(hitid, VehVida - 50); // Escopeta
				case 26: SetExVehicleHealth(hitid, VehVida - 55); // Escopeta recortada
				case 27: SetExVehicleHealth(hitid, VehVida - 70); // Escopeta de combate
				case 28: SetExVehicleHealth(hitid, VehVida - 15); // Uzi
				case 29: SetExVehicleHealth(hitid, VehVida - 20); // MP5K
				case 30: SetExVehicleHealth(hitid, VehVida - 30); // M4
				case 31: SetExVehicleHealth(hitid, VehVida - 30); // AK-47
				case 32: SetExVehicleHealth(hitid, VehVida - 15); // Tec-9
				case 33: SetExVehicleHealth(hitid, VehVida - 25); // Rifle de caza
				case 34: SetExVehicleHealth(hitid, VehVida - 50); // Sniper Rifle
				case 35: SetExVehicleHealth(hitid, 0); // RPG
				case 36: SetExVehicleHealth(hitid, 0); // HS Rocket
				case 38: SetExVehicleHealth(hitid, VehVida - 200); // Minigun
				default: SetExVehicleHealth(hitid, VehVida);
			}
		}
	}
	if(hittype==BULLET_HIT_TYPE_PLAYER)
	{
		if(!(-100.0<=fX<=100.0)||!(-1000.0<=fY<=100.0)||!(-100.0<=fZ<=100.0))
		{
           //kickorbanthecrasher
			return 0b0;
		}
	}
	if(user[playerid][jm_Derecha] == 40 && weaponid == 23){TaserRecarga[playerid] = 1; SetTimerEx("RecargarTaser", 5000, false, "i", playerid);} //Sistema de recarga de taser
    return 1;
}

stock K_Cheat(jugador, texto[])
{
    new _mnjs[256];
	if(user[jugador][jAdmin] == 0)
	{
		new ip[32];
        GetPlayerIp(jugador, ip, sizeof(ip));
        format(_mnjs, sizeof(_mnjs), "{000000}[ANTICHEAT]{FFFFFF} %s fue expulsado 666 horas por %s.", nombre_pj(jugador), texto);
		MensajeAdmin(_mnjs);
		banipA(jugador, texto, "SERVER", 666);
		format(_mnjs, sizeof(_mnjs), "Registros: %s fue baneado por %s (IP: %s).", nombre_pj(jugador), texto, ip);
		Log("Registros/Cheats.log", _mnjs);
		ban_ip(ip, texto, "SERVER");
		AddBan(ip);
	}
	else
	{
		format(_mnjs, sizeof(_mnjs), "{000000}[STAFF]{FFFFFF} %s está usando %s.", nombre_pj(jugador), texto);
		MensajeAdmin(_mnjs);
	}
	return 1;
}

funcion RecargarTaser(playerid)
{
	TaserRecarga[playerid] = 0;
	return 1;
}


funcion CargarObjetos(playerid)
{
	TogglePlayerControllable(playerid, 0);
	textgame_player(playerid, "~g~Cargando~n~   ~w~~h~~h~Objetos", 4000, 1);
	SetPVarInt(playerid, "CargandoObjetos", 1);
	return SetTimerEx("RemoverObjetosC", 4000, 0, "d", playerid);
}



stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

/*public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(user[playerid][pUseGUI])
	{
		if(playertextid == PhoneSwitch[playerid])
		{
		    if(!user[playerid][pCooldown])
		    {
		        user[playerid][pCooldown] = true;
            	Phone_Switch(playerid);
			}
		}
		if(playertextid == PhoneBtnL[playerid])
		{
		    if(cache_phone[playerid][current_page] == Page_Home) return 1;
		    cache_phone[playerid][current_page] = Page_Menu;
  			showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		}
		if(playertextid == PhoneBtnR[playerid])
		{
		    if(user[playerid][pCalling]) return callcmd::hangup(playerid, "");

		    switch(cache_phone[playerid][current_page])
		    {
		        case Page_Menu: showPhoneMenu(playerid, false, cache_phone[playerid][current_page]);
		        case Page_Notebook: cache_phone[playerid][current_page] = Page_Menu, showPhoneMenu(playerid, false, cache_phone[playerid][current_page]), showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		        case Page_Contact: cache_phone[playerid][current_page] = Page_Menu, showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		        case Page_Setting: cache_phone[playerid][current_page] = Page_Menu, showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		    }
		}
		if(playertextid == PhoneList[playerid][0])
		{
		    if(cache_phone[playerid][current_page] == Page_Menu)
		    {
		    	cache_phone[playerid][current_page] = Page_Notebook;
		    	showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		    	return 1;
			}
			switch(cache_phone[playerid][current_page])
			{
			    case Page_Notebook: sendMessage(playerid, -1, "call called"); // dialog stuff
			    case Page_Contact: sendMessage(playerid, -1, "add contact called"); // dialog stuff
			    case Page_Setting: sendMessage(playerid, -1, "ringtone called"); // dialog stuff
			}

		}
		if(playertextid == PhoneList[playerid][1])
		{
		    if(cache_phone[playerid][current_page] == Page_Menu)
		    {
		    	cache_phone[playerid][current_page] = Page_Contact;
		    	showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		    	return 1;
			}
			switch(cache_phone[playerid][current_page])
			{
			    case Page_Notebook: sendMessage(playerid, -1, "sms called");// dialog stuff
			    case Page_Contact: sendMessage(playerid, -1, "edit contact called");// dialog stuff
			    case Page_Setting: sendMessage(playerid, -1, "theme called");// dialog stuff
			}
		}
		if(playertextid == PhoneList[playerid][2])
		{
		    if(cache_phone[playerid][current_page] == Page_Menu)
		    {
		    	cache_phone[playerid][current_page] = Page_Setting;
		    	showPhoneMenu(playerid, true, cache_phone[playerid][current_page]);
		    	return 1;
			}
			switch(cache_phone[playerid][current_page])
			{
			    case Page_Notebook: sendMessage(playerid, -1, "Contact List called");// dialog stuff
			    case Page_Contact: sendMessage(playerid, -1, "Delete contact called");// dialog stuff
			    case Page_Setting: sendMessage(playerid, -1, "silent mode called");// dialog stuff
			}
		}
	}
    return 0;
}*/

new playerGraffitiTimer[ MAX_PLAYERS ];

public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
	/*
	 16 - 1	= Enter 			- Entrar a un coche
	  2 	= C       			- Agacharse
	 32 	= CONTROL 			- Saltar
	  8 	= SHIFT Y ESPACIO	- Correr
	  4     = Click izquierdo (MAYUS)  - Golpear, acciones
	128     = Click derecho		- Apuntar (Sin coche)
	128     = ESPACIO			- Frenar (En coche)
	8     	= ESPACIO			- Frenar (En coche)
	512     = Rueda del ratón   - Rueda del ratón
	  1     = TAB               - Musestra los jugadores online
  1024      = DEL               - Andar (Caminar suave)
  2048      = J                 - Nada
  4096      = K                 - Nada
	*/
	if(IsPlayerNPC(playerid)) return 1;
	if(!IsPlayerConnected(playerid)) return 1;
	if(PRESSED( KEY_FIRE ) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "modo_spray") == 0)
	{
		new faccion = user[playerid][jMiembroFam];
		if (faccion != 0 || user[playerid][jGraffito] == 1)
		{
			if (i_Familia[faccion][fTipo] == 1 || user[playerid][jGraffito] == 1)
			{
				new
					bool: nearGraffiti;

				for(new i; i < sizeof i_graffito; i++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, i_graffito[i][gr_PosX], i_graffito[i][gr_PosY], i_graffito[i][gr_PosZ]))
					{
						nearGraffiti = true;

						SetPVarInt(playerid, "modo_spray", 1);
						SetPVarInt(playerid, "graffs_ID", i);
					}
				}
				if(nearGraffiti)
					playerGraffitiTimer [ playerid ] = SetTimerEx("pintando_spray", 1000, true, "i", playerid);
			}
		}
	}

	if(RELEASED(KEY_FIRE) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "modo_spray") == 1)
	{
		KillTimer( playerGraffitiTimer[playerid] );

		DeletePVar(playerid, "modo_spray");
		DeletePVar(playerid, "graffs_ID");

		textgame_player(playerid, "~n~~r~Pintura cancelada", 3000, 5);
	}

	if(PRESSED(KEY_SPRINT) || PRESSED(KEY_JUMP))
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
			{
				if(user[playerid][jMuerto] == 0)
				{
					ClearAnimations(playerid);
					ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0, 1);
				}
			}
		}
	}

	if(PRESSED(KEY_SPRINT) || PRESSED(KEY_JUMP))
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
			if(InfoHeridas[playerid][PiernaDr] != 0 || InfoHeridas[playerid][PiernaIr] != 0 || InfoHeridas[playerid][EntrePr] != 0)
			{
			    if(user[playerid][jMuerto] == 0)
			    {
			    	ClearAnimations(playerid);
					ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0, 1);
				}
			}
		}
	}

	if(newkeys == KEY_FIRE || newkeys == KEY_HANDBRAKE)
	{
		if(user[playerid][jm_Derecha] == 32 || user[playerid][jm_Derecha] == 33)
		{
			if(GetPlayerWeaponAmmo(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma]) != 0 && GetPlayerWeaponAmmo(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma]) < user[playerid][jm_DerechaCant])
			{
				user[playerid][jm_DerechaCant] = GetPlayerWeaponAmmo(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma]);
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK) //Al pulsar intro F
	{
		cmd_puerta(playerid);
	}
	if(newkeys == KEY_CTRL_BACK)
	{
		cmd_entrar(playerid);
		cmd_salir(playerid);
	}//entrar-salir
	if(newkeys == KEY_YES)
	{
		if(EnServicioPD[playerid] == 0){ver_inventario(playerid);} //abre inventario
		if(user[playerid][jm_Derecha] == 40 && user[playerid][jm_DerechaCant] == 0 && EnServicioPD[playerid] > 0)
		{
			if(TaserRecarga[playerid] != 0){_Mensaje(playerid, 0, "0", "Espera 5 segundos antes de recargar."); return 1;}
			accion_rol(playerid, 0, "recarga su pistola táser (400V).");
			_GiveWeapon(playerid, 23, 2);
			user[playerid][jm_DerechaCant] = 2;
			ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0,1);
		}
	}
	if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys) && con_animacion[playerid] == 1)
	{
		JugadorSentado[playerid] = 0;
		con_animacion[playerid] = 0;
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	}
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 1.5, 0, 0, 0, 0, 0, 1);
	if(newkeys & KEY_SPRINT && !(oldkeys & KEY_SPRINT) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 1.5, 0, 0, 0, 0, 0, 1);
	if((newkeys & KEY_FIRE))
	{
		if(HaciendoPressBanca[playerid] == 1)
		{
			RepeticionesPressBanca[playerid]++;
			ProgresoPressBanca[playerid]++;
			if(ProgresoPressBanca[playerid] >= 20)
			{
				ApplyAnimation(playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1);
				ProgresoPressBanca[playerid] = 0;
			}
		}
	}
	else if(newkeys & KEY_NO)
	{
		//
		if(IsPlayerInAnyVehicle(playerid))
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
	            cmd_motor(playerid);
			}
		}
		//
		if(IsPlayerInDynamicArea(playerid, area_lenador))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(en_lenador[playerid] == 1)
				{
					if(user[playerid][pLenador_free] == -1)
					{
						if(user[playerid][pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,0xCCCCCCCC,"Lleva los troncos al punto marcado para talar más árboles.");

						for(new i = 0; i != sizeof i_Lenador; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, i_Lenador[i][l_posicionX], i_Lenador[i][l_posicionY], i_Lenador[i][l_posicionZ]))
							{
								if(i_Lenador[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
								{
									TogglePlayerControllable(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0, true);
									i_Lenador[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
									user[playerid][pLenador_free] = i;

									new Float:offset = floatdiv(30, 10);
									if(offset > 30.0) offset = 30.0;

									user[playerid][pLenador_free_PROG] = frandom(10.0, 8.0, 2) + offset;

									RemovePlayerAttachedObject(playerid, 9);
									SetPlayerAttachedObject(playerid, 9, 341, 6);
									SetPlayerArmedWeapon(playerid, 0);

									new label_str[256];
									format(label_str, sizeof label_str, "\n\nTalando... {CCCCCC}(%.1f%%)", user[playerid][pLenador_free_PROG]);
									UpdateDynamic3DTextLabelText(i_Lenador[ user[playerid][pLenador_free] ][l_3dlabel], -1, label_str);

									KillTimer(timer_lenador[playerid]);
									timer_lenador[playerid] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, user[playerid][pLenador_free]);
								}
								break;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	return 1;
}

forward pintando_spray(playerid);
public pintando_spray(playerid)
{
	new sprayCounter, sprayingGraffiti;
	new counter[60], graffitiText[65];

	sprayCounter = GetPVarInt(playerid, "letra_i");
	sprayingGraffiti = GetPVarInt(playerid, "graffs_ID");

	GetPVarString(playerid, "graffs_texto", graffitiText, sizeof graffitiText);

	if(IsPlayerInRangeOfPoint(playerid, 2.0, i_graffito[sprayingGraffiti][gr_PosX], i_graffito[sprayingGraffiti][gr_PosY], i_graffito[sprayingGraffiti][gr_PosZ]))
	{
		sprayCounter--;
		SetPVarInt(playerid, "letra_i", sprayCounter);

		format(counter, sizeof counter, "~g~Pintando~n~~w~&%d]", sprayCounter);
		textgame_player(playerid, counter, 3000, 3);

		if(sprayCounter <= 0)
		{
			new
				fuente = GetPVarInt(playerid, "graffs_fuente"),
				fuente2[32],
				tamano;
			switch (fuente)
			{
				case 1: fuente2 = "comic sans ms", tamano = 28;
				case 2: fuente2 = "diploma", tamano = 30;
				case 3: fuente2 = "Arial", tamano = 32;
				case 4: fuente2 = "LEVIBRUSH", tamano = 32;
				case 5: fuente2 = "street Soul", tamano = 40;
			}
			alm(i_graffito[sprayingGraffiti][gr_mensaje], graffitiText);
			strreplace(graffitiText, "(n)", "\n");
			strreplace(graffitiText, "(a)", "{0000FF}"); //azul
			strreplace(graffitiText, "(b)", "{FFFFFF}"); //blanco
			strreplace(graffitiText, "(am)", "{FFFF00}"); //amarillo
			strreplace(graffitiText, "(v)", "{00c200}"); //verde
			strreplace(graffitiText, "(ne)", "{000000}"); //negro
			strreplace(graffitiText, "(na)", "{FF8000}"); //naranja
			strreplace(graffitiText, "(r)", "{FF0000}"); //rojo
			strreplace(graffitiText, "(ce)", "{00FFFF}"); //celeste

			SetDynamicObjectMaterialText(g_GraffitiObject[sprayingGraffiti], 0, graffitiText, OBJECT_MATERIAL_SIZE_256x256, fuente2, tamano, trazo_graffiti[playerid], 0xFFFFFFFF, 0, 1);
			textgame_player(playerid, "~g~Terminado", 2000, 3);

			i_graffito[sprayingGraffiti][gr_tiempohacer] = 1;
			alm(i_graffito[sprayingGraffiti][gr_creador], nombre_pj(playerid));
			
			SetPVarInt(playerid, "letra_i", GetPVarInt(playerid, "letra_s"));
			DeletePVar(playerid, "graffs_ID");
			DeletePVar(playerid, "modo_spray");

			KillTimer(playerGraffitiTimer[playerid]);
		}
	}
	else
	{
		SetPVarInt(playerid, "letra_i", GetPVarInt(playerid, "letra_s"));

		DeletePVar(playerid, "graffs_ID");
		DeletePVar(playerid, "modo_spray");

		KillTimer(playerGraffitiTimer[playerid]);
		textgame_player(playerid, "~n~~r~Pintura cancelada", 3000, 5);
	}
	return 1;
}

stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string))
{
    // No need to do anything if the limit is 0.
    if (limit == 0)
        return 0;

    new
             sublen = strlen(search),
             replen = strlen(replacement),
        bool:packed = ispacked(string),
             maxlen = maxlength,
             len = strlen(string),
             count = 0
    ;


    // "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
    // Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
    if (packed)
        maxlen *= 4;

    // If the length of the substring is 0, we have nothing to look for..
    if (!sublen)
        return 0;

    // In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        // Delete the string we found
        strdel(string, pos, pos + sublen);

        len -= sublen;

        // If there's anything to put as replacement, insert it. Make sure there's enough room first.
        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
        }

        // Is there a limit of number of replacements, if so, did we break it?
        if (limit != -1 && ++count >= limit)
            break;
    }

    return count;
}



forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (es_hablando[playerid] == 1) return 1;
 	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return 1;
    if (GetPVarInt(playerid, "EnCrack") == 1) return 1;
    if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	if (GetPlayerWalkingStyle(playerid) == WALK_PED) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_OLD) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_FAT) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_LADY) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	}
	return 1;
}

stock SetPlayerWalkingStyle(playerid, style) {
	WalkStyle[playerid] = style;
}

stock GetPlayerWalkingStyle(playerid) {
	return WalkStyle[playerid];
}

/*funcion RemovePlayerWeapon(playerid, weaponid) //quitar un arma de un jugador
{
	if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 29309) return;
	new saveweapon[13], saveammo[13];
	for(new slot = 0; slot < 13; slot++)
	GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
	ResetPlayerWeapons(playerid);
	for(new slot; slot < 13; slot++)
	{
		if(saveweapon[slot] == weaponid || saveammo[slot] == 0) continue;
		GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
	}
	GivePlayerWeapon(playerid, 0, 1);
}*/

funcion FinEntrenar(playerid, entrenamiento)
{
	if(HaciendoPressBanca[playerid] == 1)
	{
		new string[128];
		if(RepeticionesPressBanca[playerid] / 20 <= 30) { format(string, sizeof(string), "Has hecho {537CDB}%d{ffffff} repeticiones en press banca.", RepeticionesPressBanca[playerid] / 20); }
		else { format(string, sizeof(string), "Has hecho {537CDB}30{ffffff} repeticiones en press banca."); RepeticionesPressBanca[playerid] = 600; }
		Mensaje_(playerid, 0xffffffff, string);
		TogglePlayerControllable(playerid, 1);
		ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 0, 0, 1);
		RemovePlayerAttachedObject(playerid, 9);
		new fuerza = RepeticionesPressBanca[playerid] / 20 / 2 + random(3);
		if(user[playerid][jDbonus][1] == 1)
		{
			user[playerid][jFuerza] += fuerza*2;
		}
		else user[playerid][jFuerza] += fuerza;
		format(string, sizeof(string), "Tu fuerza ha aumentado a {537CDB}%.2f{ffffff}.", float(user[playerid][jFuerza]) / 10);
		_Mensaje(playerid, 4, "ffffff", string);
		RepeticionesPressBanca[playerid] = 0;
		HaciendoPressBanca[playerid] = 0;
		user[playerid][jTiempos][2] += 120;
		new id=entrenamiento-1;
		UsandoGym[id] = 0;
		UsandoGym2[playerid] = 0;
		PressBancaBarraObjeto[id] = CreateObject(2913, barbell_pos[id][0], barbell_pos[id][1], barbell_pos[id][2], barbell_pos[id][3], barbell_pos[id][4], barbell_pos[id][5]);
		return 1;
	}
	return 1;
}

stock Compra(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		new a[14];
		format(a, sizeof(a), "~r~ -%d$", amount);
		textgame_player(playerid, a, 3000, 1);
		DarDineroGC(playerid, -amount);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock Ganancia(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		new a[12];
		format(a, sizeof(a), "~g~ %d$", amount);
		textgame_player(playerid, a, 3000, 1);
		DarDineroGC(playerid, amount);
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock RevisarDinero(playerid, money)
{
	if(IsPlayerConnected(playerid))
	{
		new b[64];
		new xx;
		xx = money - (ComprobarDineroJ(playerid));
		if(ComprobarDineroJ(playerid) >= money)
		{
			return 1;
		}
		else
		{
			format(b, sizeof(b), "Usted no posee suficiente dinero. Te faltan %d$", xx);
			_Mensaje(playerid, 0, "33", b);
			return 0;
		}
	}
	return 0;
}

stock Admin(lvl, playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new admin = user[playerid][jAdmin];
		if(admin >= lvl)
		{
			return 1;
		}
	}
	return 0;
}

stock ApplyAnimationEx(playerid, const animlib[], const animname[], Float: Speed, looping, lockx, locky, lockz, lp, rep = 1, bool:Veh = false)
{
	if (en_lenador[playerid] == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar animaciones en este momento.");

	if (GetPVarInt(playerid, "HaciendoMueble") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar animaciones en este momento.");

	if (Veh == false)
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar esta animación en un vehículo.");

	if (GetPVarInt(playerid, "EnEvento") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar animaciones en un evento.");

	if (GetPVarInt(playerid, "EnCrack") == 1)
		return SendClientMessage(playerid, 0xFF6347AA, "No puedes usar animaciones mientras estás herido.");

	if (looping == 1) con_animacion[playerid] = 1;
	if (lockz == 1) con_animacion[playerid] = 1;

	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, rep);
	return 1;
}

//Stock functions:
PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++)
	{
		ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 0.0, 0, 0, 0, 0, 0);
	}
	return 1;
} // Credits to Emmet, South Central Roleplay

stock set_pos(playerid, Float: X, Float: Y, Float: Z, Float: A, interiorid = 0, worldid = 0)
{
	SetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, A);
	SetPlayerInterior(playerid, interiorid);
	SetPlayerVirtualWorld(playerid, worldid);
	user[playerid][jVirtualWorld] = interiorid;
	user[playerid][jInterior] = worldid;
}

funcion RemoverObjetosC(playerid)
{
	if(GetPVarType(playerid, "CargandoObjetos"))
	{
		DeletePVar(playerid, "CargandoObjetos");
		TogglePlayerControllable(playerid, 1);
	}
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		/*if (user[playerid][pAFKTime] > 4)
		{
			format(string, sizeof(string), "Estuviste afk: %s.", Segundostiempo(user[playerid][pAFKTime]));
			Mensaje_(playerid, -1, string);
			user[playerid][pAFKTime] = 0;
		}
		else user[playerid][pAFKTime] = 0;*/
		user[playerid][pAFKTime] = 0;
		//
		if (GetPVarInt(playerid, "EnEvento") == 0)
		{
			if (user[playerid][jEncarcelado] != 1) CheckHunger(playerid);
			SetPlayerArmour(playerid, user[playerid][jChaleco]);
			if (user[playerid][jMuerto2] == 0) SetPlayerHealth(playerid, user[playerid][jSangre]);
			else if (user[playerid][jMuerto2] == 2) SetPlayerHealth(playerid, 15.0);
		}
		if(GetPVarInt(playerid, "Congelado") == 1) TogglePlayerControllable(playerid, 0);
		if(user[playerid][jm_Derecha] > 0)
		{
			if(GetPlayerWeapon(playerid) != InfoObjeto[user[playerid][jm_Derecha]][IDArma] && user[playerid][jm_DerechaCant] > 0)
			{
			    if(user[playerid][jm_DerechaCant] > 0 && GetPlayerWeaponAmmo(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma]) == 0)
				{
			        ResetPlayerWeapons(playerid);
			        _GiveWeapon(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma], user[playerid][jm_DerechaCant]);
			    }
				SetPlayerArmedWeapon(playerid, InfoObjeto[user[playerid][jm_Derecha]][IDArma]);
			}
			else if(user[playerid][jm_DerechaCant] == 0)
			{ //Si no le queda munición
				if(GetPlayerWeapon(playerid) != 0) SetPlayerArmedWeapon(playerid, 0);
			}
		}
		if (color_general != 0) color_global(playerid);
		else
		{
			if(EnServicioADM[playerid] == 1) SetPlayerColor(playerid, 0x587B9500);
		}
	}
	return 1;
}

funcion RevisarVIP(playerid)
{
	new year, month, day;
	getdate(year, month, day);
	if(user[playerid][jPremium] == 0)
	{
		user[playerid][jD_premium] = -1;
		user[playerid][jM_premium] = -1;
		return 1;
	}
	if(user[playerid][jD_premium] >= 1 && user[playerid][jM_premium] >= 1)
	{
		if(user[playerid][jPremium] >= 1)
		{
			if(day >= user[playerid][jD_premium] && month >= user[playerid][jM_premium])
			{
				user[playerid][jD_premium] = -1;
				user[playerid][jM_premium] = -1;
				user[playerid][jPremium] = 0;
				SetPlayerColor(playerid, C_PLAYERBLANCO);
				user[playerid][jColorP] = 0;
				return _Mensaje(playerid, 2, "0", "Tu beneficio premium ha expirado, puedes hacer tu orden de renovación ahora mismo.");
			}
		}
	}
	return 1;
}

stock m_radioP(playerid, const string[])
{
	new MiscString[256], Float: aaaPositions[3];
	foreach(new i: Player)
	{
		if(user[i][jFrecuencia] == user[playerid][jFrecuencia] && user[i][j_uRadio] != 1)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "**[CH: %d, S: %d] %s dice: %s", user[playerid][jFrecuencia], 1, nombre_pj(playerid, 0), string);
			SendSplitMessage(i, 0xB5AF8FFF, MiscString);
		}
	}
	format(MiscString, sizeof(MiscString), "%s por radio: %s", nombre_pj(playerid, 0), string);
	ProxExDetector(3.0, playerid, MiscString, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
}

stock fcreate(const filename[])
{
	if(fexist(filename)) return false;
	new File: fhnd;
	fhnd = fopen(filename, io_write);
	if(fhnd)
	{
		fclose(fhnd);
		return true;
	}
	return false;
}

funcion splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

funcion IsValidIP(const ip[]) {
    new a;
    for(new i = 0; i < strlen(ip); i++) {
        if(ip[i] == '.') {
            a++;
        }
    }
    if(a != 3) {
        return 1;
    }
    return 0;
}

IsVehicleBusy(vehicleid)// The_Chaoz ¿?¿?¿
{
	for(new i; i<GetMaxPlayers(); i++)
		if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid))
		return 1;
	return 0;
}

//ALEX DONUTS ZC 2012.
funcion ReturnUser(text[])
{
	new strPos, returnID = 0, bool: isnum = true;
	while(text[strPos])
	{
		if(isnum)
		{
			if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if(isnum)
	{
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else
	{
		new sz_playerName[MAX_PLAYER_NAME];

		foreach(new i: Player)
		{
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock guardar_vehiculo(vid = 0)
{
	if (vid == 0) return 1;
	if (!IsVehicleBusy(i_Vehiculo[vid][vID]))
	{
		VehiculoGuardar(vid);
	}
	else
	{
		i_Vehiculo[vid][v_timer] = 16;
	}
	return 1;
}

stock cancelar_robo(playerid, c_men = 0)
{
	if (checkcoche[playerid] != 0)
	{
		new vid = checkcoche[playerid]-666;
		cocherobo[playerid] = 0;
		checkcoche[playerid] = 0;
		veh_robo[playerid] = 0;
		i_Vehiculo[vid][v_robo] = 0;
		if (c_men != 0)
		{
			_Mensaje(playerid, 5, "0", "Se te agoto el tiempo o el vehículo ya no está en la zona, perdiste un punto de habilidad.");
			user[playerid][jHabilidad][3]--;
		}
	}
	return 1;
}

funcion secuencia_veh(playerid)
{
	for(new i = 0; i < 6; i++)
	{
		new veh = user[playerid][jLlaveCoche][i];
		if(veh != 0)
		{
			if(i_Vehiculo[veh-1000][vSpawned] == 1)
			{
				i_Vehiculo[veh-1000][v_timer] = 16;
			}
		}
	}
}

funcion reiniciar_veh(playerid)
{
	for(new i = 0; i < 6; i++)
	{
		new veh = user[playerid][jLlaveCoche][i];
		if(veh != 0)
		{
			if(i_Vehiculo[veh-1000][vSpawned] == 1)
			{
				i_Vehiculo[veh-1000][v_timer] = 0;
				foreach(new xd: Player)
					if (checkcoche[xd]-666 == veh-1000) cancelar_robo(xd, 1);
			}
		}
	}
}

//sistema de vehículos;
funcion VehiculoSacar(vid, playerid)
{
	if(i_Vehiculo[vid][vModelo] != 0)
	{
	    new
			Coche
		;
		if (i_Vehiculo[vid][v_reload] != 1)
		{
			new
				Float:X,
				Float:Y,
				Float:Z
			;
			GetPlayerPos(playerid, X, Y, Z);

			Coche = CreateVehicle(i_Vehiculo[vid][vModelo], X, Y, Z, i_Vehiculo[vid][vPosicionR], i_Vehiculo[vid][vColor_1], i_Vehiculo[vid][vColor_2], -1);
            random_veh[Coche] = Coche + random(899999);
			i_Vehiculo[vid][v_reload] = 1;
			if (!IsPlayerInAnyVehicle(playerid)) PutPlayerInVehicle(playerid, Coche, 0);
		}
		else
		{
			Coche = CreateVehicle(i_Vehiculo[vid][vModelo], i_Vehiculo[vid][vPosicionX], i_Vehiculo[vid][vPosicionY], i_Vehiculo[vid][vPosicionZ], i_Vehiculo[vid][vPosicionR], i_Vehiculo[vid][vColor_1], i_Vehiculo[vid][vColor_2], -1);
            random_veh[Coche] = Coche + random(899999);
		}
		i_Vehiculo[vid][vID] = Coche;
		spawn_veh(Coche);
		i_Vehiculo[vid][vSpawned] = 1;
		veh_gasolina[Coche] = i_Vehiculo[vid][vGasolina];
		SetExVehicleHealth(Coche, i_Vehiculo[vid][vVida]);
		SetVehicleVirtualWorld(Coche, i_Vehiculo[vid][vVirtualWorld]);
		LinkVehicleToInterior(Coche, i_Vehiculo[vid][vInterior]);
		UpdateVehicleDamageStatus(Coche, i_Vehiculo[vid][vDanioSuperficie], i_Vehiculo[vid][vDanioPuertas], i_Vehiculo[vid][vDanioLuces], i_Vehiculo[vid][vDanioRuedas]);
		DarMatricula(Coche, i_Vehiculo[vid][vLlave]);
		CargarVehMods(vid, Coche);
		i_Vehiculo[vid][v_Guantera] = 0;
		i_Vehiculo[vid][v_timer] = 0;
		i_Vehiculo[vid][v_robo] = 0;
		estacionveh[Coche] = 0;
		VehSeguro[Coche] = 0;
		alm(veh_music[Coche], "nadauwu");
		if(i_Vehiculo[vid][vUSeguro] == 1) { VehSeguro[Coche] = 1; vehicle_lock_doors(Coche); }
		vehicleSave(vid);
    }
}

stock VehiculoGuardar(vid, playerid = -1, tip = 0)
{
	if(i_Vehiculo[vid][vModelo] != 0)
	{
		if(VehSeguro[i_Vehiculo[vid][vID]] != 0) VehSeguro[i_Vehiculo[vid][vID]] = 0;
		if(tip == 0)
		{
			new oldfuel;
			oldfuel = veh_gasolina[i_Vehiculo[vid][vID]];
			i_Vehiculo[vid][vGasolina] = oldfuel;
			GetVehiclePos(i_Vehiculo[vid][vID], i_Vehiculo[vid][vPosicionX], i_Vehiculo[vid][vPosicionY], i_Vehiculo[vid][vPosicionZ]);
			GetVehicleZAngle(i_Vehiculo[vid][vID], i_Vehiculo[vid][vPosicionR]);
			GetVehicleHealth(i_Vehiculo[vid][vID], i_Vehiculo[vid][vVida]);
			GetVehicleDamageStatus(i_Vehiculo[vid][vID], i_Vehiculo[vid][vDanioSuperficie], i_Vehiculo[vid][vDanioPuertas], i_Vehiculo[vid][vDanioLuces], i_Vehiculo[vid][vDanioRuedas]);
		}
		if(playerid != -1)
		{
			i_Vehiculo[vid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
			i_Vehiculo[vid][vInterior] = GetPlayerInterior(playerid);
		}
		ActualizarMods(i_Vehiculo[vid][vID]);
		DestroyVehicle(i_Vehiculo[vid][vID]);
		random_veh[i_Vehiculo[vid][vID]] = 0;
		i_Vehiculo[vid][vID] = INVALID_PLAYER_VEHICLE_ID;
		i_Vehiculo[vid][vSpawned] = 0;
		i_Vehiculo[vid][v_Guantera] = 0;
		i_Vehiculo[vid][v_timer] = 0;
		i_Vehiculo[vid][v_robo] = 0;
		vehicleSave(vid);
	}
}

funcion VehiculoBorrar(vid)
{
	if(i_Vehiculo[vid][vID] != INVALID_PLAYER_VEHICLE_ID)
	{
		DestroyVehicle(i_Vehiculo[vid][vID]);
		random_veh[i_Vehiculo[vid][vID]] = 0;
		i_Vehiculo[vid][vID] = INVALID_PLAYER_VEHICLE_ID;
		i_Vehiculo[vid][vPatente] = 0;
		format(i_Vehiculo[vid][vDueno], 32, "sindueño");
		i_Vehiculo[vid][vLlave] = 0;
		i_Vehiculo[vid][vModelo] = 0;
		i_Vehiculo[vid][vVida] = 1000.0;
		i_Vehiculo[vid][vPosicionX] = 0.0;
		i_Vehiculo[vid][vPosicionY] = 0.0;
		i_Vehiculo[vid][vPosicionZ] = 0.0;
		i_Vehiculo[vid][vPosicionR] = 0.0;
		i_Vehiculo[vid][vVirtualWorld] = 0;
		i_Vehiculo[vid][vInterior] = 0;
		i_Vehiculo[vid][vPrecio] = 0;
		i_Vehiculo[vid][vGuantera][0] = 0;
		i_Vehiculo[vid][vGuantera][1] = 0;
		i_Vehiculo[vid][vGuantera][2] = 0;
		i_Vehiculo[vid][vGuantera][3] = 0;
		i_Vehiculo[vid][vGuantera][4] = 0;
		i_Vehiculo[vid][vGuantera][5] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][0] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][1] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][2] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][3] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][4] = 0;
		i_Vehiculo[vid][vGuanteraCantidad][5] = 0;
		i_Vehiculo[vid][vMaletero][0] = 0;
		i_Vehiculo[vid][vMaletero][1] = 0;
		i_Vehiculo[vid][vMaletero][2] = 0;
		i_Vehiculo[vid][vMaletero][3] = 0;
		i_Vehiculo[vid][vMaletero][4] = 0;
		i_Vehiculo[vid][vMaletero][5] = 0;
		i_Vehiculo[vid][vMaletero][6] = 0;
		i_Vehiculo[vid][vMaletero][7] = 0;
		i_Vehiculo[vid][vMaletero][8] = 0;
		i_Vehiculo[vid][vMaletero][9] = 0;
		i_Vehiculo[vid][vMaletero][10] = 0;
		i_Vehiculo[vid][vMaletero][11] = 0;
		i_Vehiculo[vid][vMaletero][12] = 0;
		i_Vehiculo[vid][vMaletero][13] = 0;
		i_Vehiculo[vid][vMaletero][14] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][0] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][1] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][2] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][3] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][4] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][5] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][6] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][7] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][8] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][9] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][10] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][11] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][12] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][13] = 0;
		i_Vehiculo[vid][vMaleteroCantidad][14] = 0;
		i_Vehiculo[vid][vSpawned] = 0;
		i_Vehiculo[vid][vGasolina] = 200;
		i_Vehiculo[vid][vStereo] = 0;
		i_Vehiculo[vid][vNeon] = 0;
		i_Vehiculo[vid][vUSeguro] = 0;
		i_Vehiculo[vid][vPaintJob] = -1;
		i_Vehiculo[vid][vColor_1] = 0;
		i_Vehiculo[vid][vColor_2] = 0;
		i_Vehiculo[vid][vMulta] = 0;
		i_Vehiculo[vid][vEnDeposito] = 0;
		i_Vehiculo[vid][v_Guantera] = 0;
		i_Vehiculo[vid][v_timer] = 0;
		i_Vehiculo[vid][v_robo] = 0;
		i_Vehiculo[vid][vDanioSuperficie] = 0;
		i_Vehiculo[vid][vDanioPuertas] = 0;
		i_Vehiculo[vid][vDanioLuces] = 0;
		i_Vehiculo[vid][vDanioRuedas] = 0;
		i_Vehiculo[vid][v_reload] = 1;
		for(new m = 0; m < MAX_MODVEHICULOS; m++)
		{
			i_Vehiculo[vid][vModificaciones][m] = 0;
		}
		vehicleSave(vid);
	}
}

funcion TieneLlavesCoche(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
	for(new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			for(new x = 0; x < 6; x++)
			{
				if(user[playerid][jLlaveCoche][x] == i_Vehiculo[v][vLlave] || user[playerid][j2Vehiculos][x] == i_Vehiculo[v][vPatente]){
					return v;
				}
			}
		}
	}
	return -1;
}

stock TieneLlavesVeh(playerid, vehicleid)
{
	for(new v = 0; v < MAX_VEHICULOS; v++)
	{
		if(i_Vehiculo[v][vID] == vehicleid)
		{
			new TieneLlave;
			for(new x = 0; x < 6; x++)
			{
				if(user[playerid][jLlaveCoche][x] == i_Vehiculo[v][vLlave] || user[playerid][j2Vehiculos][x] == i_Vehiculo[v][vPatente]){
				TieneLlave = 1; break; }
			}
			if(TieneLlave != 0){return 1;}
		}
	}
	return 0;
}

funcion CVehiculos(playerid)
{
	new cars = 0;
	for(new i = 0; i < 6; i++)
	{
		if(user[playerid][jLlaveCoche][i] != 0)
		{
			cars++;
		}
	}
	return cars;
}

funcion CargarVehMods(vid, vehiculo)
{
	if(i_Vehiculo[vid][vSpawned] == 1)
	{
		new paintjob = i_Vehiculo[vid][vPaintJob], color1 = i_Vehiculo[vid][vColor_1], color2 = i_Vehiculo[vid][vColor_2];
		if(i_Vehiculo[vid][vPaintJob] != -1)
		{
			ChangeVehiclePaintjob(vehiculo, paintjob);
		}
		ChangeVehicleColor(vehiculo, color1, color2);
		for(new m = 0; m < MAX_MODVEHICULOS; m++)
		{
			AddVehicleComponent(vehiculo, i_Vehiculo[vid][vModificaciones][m]);
		}
	}
}

funcion CrearUCoche(jugador, modelo, Float: x, Float: y, Float: z, Float: angle, color1, color2, precio, d)
{
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if (!i_Vehiculo[vid][vModelo])
		{
			new EspacioLibre;
			for(new xd = 0; xd < 6; xd++)
			{
				if(user[jugador][jLlaveCoche][xd] == 0)
				{
					EspacioLibre = 1;
					break;
				}
			}
			if(EspacioLibre == 0) { _Mensaje(jugador, 0, "0", "Posees todas las ranuras de llaves propias ocupadas."); return 1; }
			for(new xd; xd < 6; xd++)
			{
				if(user[jugador][jLlaveCoche][xd] == 0)
				{
					user[jugador][jLlaveCoche][xd] = vid+1000;
					break;
				}
			}
			i_Vehiculo[vid][vPatente] = vid+Random(-400000, 999999); //
			strmid(i_Vehiculo[vid][vDueno], nombre_sin(jugador), 0, strlen(nombre_sin(jugador)), 32);
			i_Vehiculo[vid][vLlave] = vid+1000;
			i_Vehiculo[vid][vModelo] = modelo;
			i_Vehiculo[vid][vPosicionX] = x;
			i_Vehiculo[vid][vPosicionY] = y;
			i_Vehiculo[vid][vPosicionZ] = z;
			i_Vehiculo[vid][vPosicionR] = angle;
			i_Vehiculo[vid][vSpawned] = 1;
			i_Vehiculo[vid][vVirtualWorld] = GetPlayerVirtualWorld(jugador);
			i_Vehiculo[vid][vInterior] = GetPlayerInterior(jugador);
			i_Vehiculo[vid][vColor_1] = color1;
        	i_Vehiculo[vid][vColor_2] = color2;
        	i_Vehiculo[vid][vPrecio] = precio;
        	i_Vehiculo[vid][vGasolina] = i_Usado[d][uGasolina];
        	i_Vehiculo[vid][vEnDeposito] = 0;
        	i_Vehiculo[vid][v_Guantera] = 0;
        	i_Vehiculo[vid][v_timer] = 0;
        	i_Vehiculo[vid][vVida] = i_Usado[d][uVida];
         	i_Vehiculo[vid][vStereo] = i_Usado[d][uStereo];
         	i_Vehiculo[vid][vNeon] = i_Usado[d][uNeon];
			i_Vehiculo[vid][v_reload] = 1;
       		new Coche = CreateVehicle(modelo, x, y, z, angle, color1, color2, -1);
            random_veh[Coche] = Coche + random(899999);
			i_Vehiculo[vid][vID] = Coche;
        	SetVehicleVirtualWorld(Coche, i_Vehiculo[vid][vVirtualWorld]);
        	LinkVehicleToInterior(Coche, i_Vehiculo[vid][vInterior]);
        	new paintjob = i_Usado[d][uPaintJob];
         	if(i_Usado[d][uPaintJob] != -1) {
          		ChangeVehiclePaintjob(Coche, paintjob);
            }
            for(new m = 0; m < MAX_MODVEHICULOS; m++) {
            	AddVehicleComponent(Coche, i_Usado[d][uModificaciones][m]);
             	i_Vehiculo[vid][vModificaciones][m] = i_Usado[d][uModificaciones][m];
            }
            veh_gasolina[Coche] = i_Usado[d][uGasolina];
            SetExVehicleHealth(Coche, i_Usado[d][uVida]);
   	 	    UpdateVehicleDamageStatus(Coche, i_Usado[d][uDanioSuperficie], i_Usado[d][uDanioPuertas], i_Usado[d][uDanioLuces], i_Usado[d][uDanioRuedas]);
			DarMatricula(Coche, vid+1000);
			SetPlayerPos(jugador, x, y, z);
			PutPlayerInVehicle(jugador, i_Vehiculo[vid][vID], 0);
        	vehicleSave(vid);
            vid = MAX_VEHICULOS;
        }
    }
    return 1;
}

funcion CrearCoche(jugador, modelo, Float: x, Float: y, Float: z, Float: angle, color1, color2, precio)
{
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if (!i_Vehiculo[vid][vModelo])
		{
			new EspacioLibre;
			for(new xd = 0; xd < 6; xd++)
			{
				if(user[jugador][jLlaveCoche][xd] == 0)
				{
					EspacioLibre = 1;
					break;
				}
			}
			if(EspacioLibre == 0) { _Mensaje(jugador, 0, "0", "Posees todas las ranuras de llaves propias ocupadas."); return 1; }
			for(new xd; xd < 6; xd++)
			{
				if(user[jugador][jLlaveCoche][xd] == 0)
				{
					user[jugador][jLlaveCoche][xd] = vid+1000;
					break;
				}
			}
			i_Vehiculo[vid][vPatente] = vid+Random(-400000, 999999); //
			strmid(i_Vehiculo[vid][vDueno], nombre_sin(jugador), 0, strlen(nombre_sin(jugador)), 32);
			i_Vehiculo[vid][vLlave] = vid+1000;
			i_Vehiculo[vid][vModelo] = modelo;
			i_Vehiculo[vid][vPosicionX] = x;
			i_Vehiculo[vid][vPosicionY] = y;
			i_Vehiculo[vid][vPosicionZ] = z;
			i_Vehiculo[vid][vSpawned] = 1;
			i_Vehiculo[vid][vPaintJob] = -1;
			i_Vehiculo[vid][v_reload] = 1;
			i_Vehiculo[vid][vPosicionR] = angle;
			i_Vehiculo[vid][vVirtualWorld] = GetPlayerVirtualWorld(jugador);
			i_Vehiculo[vid][vInterior] = GetPlayerInterior(jugador);
			i_Vehiculo[vid][vColor_1] = color1;
			i_Vehiculo[vid][vColor_2] = color2;
			i_Vehiculo[vid][vStereo] = 0;
			i_Vehiculo[vid][vNeon] = 0;
			i_Vehiculo[vid][vPrecio] = precio;
			i_Vehiculo[vid][vGasolina] = 200;
			i_Vehiculo[vid][vEnDeposito] = 0;
			i_Vehiculo[vid][v_Guantera] = 0;
			i_Vehiculo[vid][v_timer] = 0;
			i_Vehiculo[vid][vVida] = 1000.0;
			for(new m = 0; m < MAX_MODVEHICULOS; m++) { i_Vehiculo[vid][vModificaciones][m] = 0; }
			new Coche = CreateVehicle(modelo, x, y, z, angle, color1, color2, -1);
            random_veh[Coche] = Coche + random(899999);
			i_Vehiculo[vid][vID] = Coche;
			SetVehicleVirtualWorld(Coche, i_Vehiculo[vid][vVirtualWorld]);
			LinkVehicleToInterior(Coche, i_Vehiculo[vid][vInterior]);
			DarMatricula(Coche, vid+1000);
			veh_gasolina[Coche] = 150;
			SetPlayerPos(jugador, x, y, z);
			PutPlayerInVehicle(jugador, i_Vehiculo[vid][vID], 0);
			vehicleSave(vid);
			vid = MAX_VEHICULOS;
		}
	}
	return 1;
}

funcion ActualizarMods(vehiculo)
{
	new vid;
	for(new veh = 0; veh < MAX_VEHICULOS; veh++)
	{
		if(i_Vehiculo[veh][vID] == vehiculo)
		{
			vid = veh;
		}
	}
	new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
	sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
	exhaust = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_EXHAUST);
	frontbumper = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_FRONT_BUMPER);
	rearbumper = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_REAR_BUMPER);
	roof = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_ROOF);
	spoilers = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SPOILER);
	sideskirt1 = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SIDESKIRT);
	sideskirt2 = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SIDESKIRT);
	wheels = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_WHEELS);
	hydraulics = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_HYDRAULICS);
	nitro = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_NITRO);
	hood = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_HOOD);
	lamps = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_LAMPS);
	stereo = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_STEREO);
	ventright = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_VENT_RIGHT);
	ventleft = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_VENT_LEFT);
	if(spoilers >= 1000) i_Vehiculo[vid][vModificaciones][0] = spoilers;
	if(hood >= 1000) i_Vehiculo[vid][vModificaciones][1] = hood;
	if(roof >= 1000) i_Vehiculo[vid][vModificaciones][2] = roof;
	if(sideskirt1 >= 1000) i_Vehiculo[vid][vModificaciones][3] = sideskirt1;
	if(lamps >= 1000) i_Vehiculo[vid][vModificaciones][4] = lamps;
	if(nitro >= 1000) i_Vehiculo[vid][vModificaciones][5] = nitro;
	if(exhaust >= 1000) i_Vehiculo[vid][vModificaciones][6] = exhaust;
	if(wheels >= 1000) i_Vehiculo[vid][vModificaciones][7] = wheels;
	if(stereo >= 1000) i_Vehiculo[vid][vModificaciones][8] = stereo;
	if(hydraulics >= 1000) i_Vehiculo[vid][vModificaciones][9] = hydraulics;
	if(frontbumper >= 1000) i_Vehiculo[vid][vModificaciones][10] = frontbumper;
	if(rearbumper >= 1000) i_Vehiculo[vid][vModificaciones][11] = rearbumper;
	if(ventright >= 1000) i_Vehiculo[vid][vModificaciones][12] = ventright;
	if(ventleft >= 1000) i_Vehiculo[vid][vModificaciones][13] = ventleft;
	if(sideskirt2 >= 1000) i_Vehiculo[vid][vModificaciones][14] = sideskirt2;
}

funcion ColocarMods(vehiculo, vid)
{
	new paintjob = i_Vehiculo[vid][vPaintJob], color1 = i_Vehiculo[vid][vColor_1], color2 = i_Vehiculo[vid][vColor_2];
	if(i_Vehiculo[vid][vPaintJob] != -1)
	{
		ChangeVehiclePaintjob(vehiculo, paintjob);
		ChangeVehicleColor(vehiculo, color1, color2);
	}
	for(new m = 0; m < MAX_MODVEHICULOS; m++)
	{
		AddVehicleComponent(vehiculo, i_Vehiculo[vid][vModificaciones][m]);
	}
}

//asientos
new OneSeatVehicles[38] =
{
	425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

funcion IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for(new i = 0; i < sizeof(OneSeatVehicles); i++)
	{
		if(carmodel == OneSeatVehicles[i]) return 0;
	}
	foreach(new i: Player)
	{
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

funcion VehiculoLuces(vehicleid, playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Luces del vehiculo fueron apagadas.");
	}
	else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Luces del vehiculo encendidas con éxito.");
	}
	return 1;
}

funcion VehiculoCapo(vehicleid, playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Capó del vehiculo fue cerrado.");
	}
	else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Capó del vehiculo fue abierto.");
	}
	return 1;
}

stock DetectarCerrado(playerid, exception = INVALID_VEHICLE_ID)
{
	new Float: Distance, target = -1;
	for(new v; v < MAX_VEHICLES; v++) if(VehNoExiste(v))
	{
		if(v != exception && (target < 0 || Distance > CercaDeVehiculo(playerid, v)))
		{
			target = v;
			Distance = CercaDeVehiculo(playerid, v);
		}
	}
	return target;
}

funcion VehiculoMaletero(vehicleid, playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Maletero del vehiculo fue cerrado.");
	}
	else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
		Mensaje_(playerid, 0xF8D48CFF, "Maletero del vehiculo fue abierto.");
	}
	return 1;
}

funcion CercaDelVehiculo(playerid, vehicleid, Float: radius)
{
	new Float: Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return en_pos(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock VehNoExiste(vehicleid)
{
	if(GetVehicleModel(vehicleid) >= 400)
	{
		return 1;
	}
	return 0;
}

funcion CercaDeVehiculo(playerid, veh)
{
	new Float: Floats[7];
	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3] - Floats[0]) * (Floats[3] - Floats[0]) + (Floats[4] - Floats[1]) * (Floats[4] - Floats[1]) + (Floats[5] - Floats[2]) * (Floats[5] - Floats[2]));
	return floatround(Floats[6]);
}

funcion EncenderVehiculo(vehicleid, playerid)
{
	check_motor[playerid] = 0;
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		accion_rol(playerid, 0, "apaga el motor del vehículo.");
		arr_Engine {vehicleid} = 0;
		PlayerTextDrawHide(playerid, info_w[playerid][Velocimetro]);
	}
	else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new Float: f_vHealth;
		GetVehicleHealth(vehicleid, f_vHealth);
		if(f_vHealth < 350.0) return _Mensaje(playerid, 0, "641", "Vehículo averiado, lo mejor sería llamar un mecánico o comprar piezas de recambio.");
		if(veh_gasolina[vehicleid] <= 0) return _Mensaje(playerid, 0, "642", "Vehículo sin gasolina, lo mejor sería llamar un mecánico o comprar una lata de gasolina.");
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		arr_Engine {vehicleid} = 1;
		OnPlayerChangeHud(playerid);
	}
	return 1;
}

// Función: Otros Timers.
stock salario_user(i)
{
	new sueldo = 0;
	if(user[i][jMiembro] != 0)
	{
		if(user[i][jMiembro] == 1) //lspd
		{
			switch(user[i][jRango])//rangos
			{
				case 1: sueldo = 150;
    			case 2: sueldo = 175;
       			case 3: sueldo = 200;
	            case 4: sueldo = 255;
	            case 5: sueldo = 320;
	            case 6: sueldo = 375;
             	case 7: sueldo = 400;
			 	case 8: sueldo = 465;
     			case 9: sueldo = 500;
        		case 10: sueldo = 555;
          		case 11: sueldo = 600;
          		case 12: sueldo = 630;
                default: sueldo = 50;
			}
		}
		else if(user[i][jMiembro] == 2)//sadoc
		{
			switch(user[i][jRango])//rangos
			{
				case 1: sueldo = 120;
    			case 2: sueldo = 155;
       			case 3: sueldo = 190;
	            case 4: sueldo = 225;
	            case 5: sueldo = 250;
	            case 6: sueldo = 275;
             	case 7: sueldo = 300;
			 	case 8: sueldo = 325;
     			case 9: sueldo = 350;
        		case 10: sueldo = 375;
          		case 11: sueldo = 400;
                default: sueldo = 50;
			}
		}
		else if(user[i][jMiembro] == 3)//san
		{
			switch(user[i][jRango])//rangos
			{
				case 1: sueldo = 95;
				case 2: sueldo = 160;
				case 3: sueldo = 205;
				case 4: sueldo = 240;
				case 5: sueldo = 275;
				case 6: sueldo = 310;
				case 7: sueldo = 355;
				default: sueldo = 35;
			}
		}
		else if(user[i][jMiembro] == 4)//alcaldía
		{
			switch(user[i][jRango])//rangos
			{
				case 1: sueldo = 190;
				case 2: sueldo = 270;
				case 3: sueldo = 350;
	            case 4: sueldo = 420;
	            case 5: sueldo = 600;
	            default: sueldo = 60;
			}
		}
		else if(user[i][jMiembro] == 5)//LSFD
		{
			switch(user[i][jRango])//rangos
			{
				case 1: sueldo = 180;
				case 2: sueldo = 210;
				case 3: sueldo = 250;
				case 4: sueldo = 285;
				case 5: sueldo = 310;
				case 6: sueldo = 350;
				case 7: sueldo = 400;
				case 8: sueldo = 550;
				default: sueldo = 80;
			}
		}
	}
	return sueldo;
}
// Función: Otros Timers.
funcion PagoDiario(i)
{
	new banco = user[i][jBanco], string[128], casai = 0, negi = 0, vehi = 0, alquiler = 0;
	//- alquiler
	if(user[i][jAlquiler] != -1)
	{
		new al_id = user[i][jAlquiler];
		if (i_Casa[al_id][c_alquilado] != 0)
		{
			alquiler += i_Casa[al_id][c_alquiler];
		}
	}
	//- impuestos
	if(user[i][jPremium] == 0)
	{
		if(user[i][jCasaKey] != -1)
		{
			new c_id=user[i][jCasaKey];
			if (i_Casa[c_id][cEspacio] == 1) casai += 30;
			else if (i_Casa[c_id][cEspacio] == 2) casai += 50;
			else if (i_Casa[c_id][cEspacio] == 3) casai += 80;
			else if (i_Casa[c_id][cEspacio] == 4) casai += 105;
		}
		else
		{
			casai = 0;
		}
		if(user[i][jNegocioKey] != -1)
		{
			new n_id=user[i][jNegocioKey];
			if (i_Negocio[n_id][nTipo] == 1) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 2) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 3) negi += 30;
			else if (i_Negocio[n_id][nTipo] == 4) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 5) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 6) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 7) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 8) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 9) negi += 30;
			else if (i_Negocio[n_id][nTipo] == 10) negi += 12;
			else if (i_Negocio[n_id][nTipo] == 11) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 12) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 13) negi += 20;
			else if (i_Negocio[n_id][nTipo] == 14) negi += 60;
			else if (i_Negocio[n_id][nTipo] == 15) negi += 40;
			else if (i_Negocio[n_id][nTipo] == 16) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 17) negi += 40;
			else if (i_Negocio[n_id][nTipo] == 18) negi += 50;
			else if (i_Negocio[n_id][nTipo] == 19) negi += 20;
		}
		else
		{
			negi = 0;
		}
		if(user[i][jLlaveCoche][0] != 0) { vehi += 28; }
		if(user[i][jLlaveCoche][1] != 0) { vehi += 28; }
		if(user[i][jLlaveCoche][2] != 0) { vehi += 28; }
		if(user[i][jLlaveCoche][3] != 0) { vehi += 28; }
		if(user[i][jLlaveCoche][4] != 0) { vehi += 28; }
		if(user[i][jLlaveCoche][5] != 0) { vehi += 28; }
	}
	if(user[i][jFuerza] > 1000) user[i][jFuerza] = 999;

	Mensaje_(i, -1, "|__ BANCO LOS SANTOS __|");
	format(string, sizeof(string), "  Balance: %s$", diner_coma(banco));
	Mensaje_(i, 0xb0b0b0ff, string);
	format(string, sizeof(string), "  Intereses: 0.%i", d_impuestos);
	Mensaje_(i, 0xb0b0b0ff, string);
	format(string, sizeof(string), "  Impuestos: -%i$", casai+negi+vehi);
	Mensaje_(i, 0xb0b0b0ff, string);
	if (alquiler != 0)
	{
		format(string, sizeof(string), "  Alquiler: -%i$", alquiler);
		Mensaje_(i, 0xb0b0b0ff, string);
	}
	d_estado += casai+negi+vehi+alquiler;
 	user[i][jBanco] -= casai+negi+vehi+alquiler;
	//- ingresos
	d_estado -= salario_user(i)+dinero_e;
	user[i][jBanco] += salario_user(i)+dinero_e;
	user[i][jBanco] += user[i][jCheques];
	switch(user[i][jPremium])
	{
		case 1:  user[i][jBanco] += 150;
		case 2:  user[i][jBanco] += 300;
		default: user[i][jBanco] += 0;
	}

	format(string, sizeof(string), "  Ganancias: %s$", diner_coma((salario_user(i)+dinero_e)+user[i][jCheques]+(150*user[i][jPremium])));
	Mensaje_(i, 0xb0b0b0ff, string);
	Mensaje_(i, 0xb0b0b0ff, "|_________________________|");
	format(string, sizeof(string), "  Nuevo balance: %s$", diner_coma(user[i][jBanco]));
	Mensaje_(i, 0xffffffff, string);
	user[i][jCheques] = 0;
	textgame_player(i, "~y~Payday", 5000, 1);
	//- extras
	if(user[i][jDbonus][0])
	{
		user[i][jDbonus][0] = 0;
		user[i][jExperiencia] ++;
		SendClientMessage(i, -1, "Aumentaste un punto de experiencia extra por el consumo de heroína.");
 	}
 	else
 	{
		if (user[i][jPremium] == 2) user[i][jExperiencia] += 2;
		else
		{
			if (d2_experiencia == 0) user[i][jExperiencia] += 1;
			else user[i][jExperiencia] += 2;
		}
	}
	/////
	if (FalsoPD == 1) Regalo = 1;
	if (FalsoPD == 0) {
		user[i][j_Horas] += 1;
		if(user[i][jContrato] != -1) user[i][jHorasE]++;
	}
	user[i][jTiempos][9] = 0;
	new proximonvl = user[i][jNivel] + 1, cantidadexp = proximonvl * nivelexp;
	switch (user[i][j_Horas])
	{
	    case 100: user[i][jEdad]++;
	    case 200: user[i][jEdad]++;
	    case 300: user[i][jEdad]++;
	    case 400: user[i][jEdad]++;
	    case 500: user[i][jEdad]++;
	}
	if (user[i][jExperiencia] >= cantidadexp)
	{
		if (user[i][jNivel] == -1) Kick(i);
		format(string, sizeof(string), "~w~nivel ~g~%d", proximonvl);
		textgame_player(i, string, 5000, 1);
		PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
		user[i][jNivel]++;
		user[i][jExperiencia] = 0;
		characterSave(i);
		SetPlayerScore(i, user[i][jNivel]);
		if (user[i][jNivel] == 1)
		{
			user[i][jBanco] += 5000;
			SendClientMessage(i, 0x537CDBFF, "Se te acreditaron $5,000 en tu cuenta bancaria por llegar al nivel 1.");
		}
		if (user[i][jNivel] == 2)
		{
			user[i][jBanco] += 3500;
			SendClientMessage(i, 0x537CDBFF, "Se te acreditaron $3,500 en tu cuenta bancaria por llegar al nivel 2.");
		}
		if (user[i][jNivel] == 3)
		{
			user[i][jBanco] += 2000;
			SendClientMessage(i, 0x537CDBFF, "Se te acreditaron $2,000 en tu cuenta bancaria por llegar al nivel 3.");
		}
	} //subirnivel
	FalsoPD = 0;
	verificar_hambre(i);
    return 1;
}

funcion A_MedioSegundo()
{
    foreach(new playerid: Player)
	{
        foreach(new i: Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Es_Faccion(i, 1) && EnServicioPD[i] == 1 && SolicitaRefuerzos[playerid] == 1)
				{
				    if (tipo_ref[playerid] == 1) SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
				    else if (tipo_ref[playerid] == 2) SetPlayerMarkerForPlayer(i, playerid, 0xFFFF00FF);
				}
				if(Es_Faccion(i, 1) && EnServicioPD[i] == 1 && BotonPanico[playerid] == 1) SetPlayerMarkerForPlayer(i, playerid, 0xFFB400FF);
			}
		}
        if(GetPlayerState(playerid) == 1) { //- Si NO está subido a un vehículo
            if(Taseado[playerid] > 0) { //- Animación Táser
                if(GetPlayerAnimationIndex(playerid) != 1209) {
                    ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0, 1);
                }
            }
            if(_Gomas[playerid] > 0) { //- Animación gomas
                if(GetPlayerAnimationIndex(playerid) != 1533) {
                    ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0, 1);
                }
            }
            if(GetPVarInt(playerid, "EnCrack") == 1) { //- herido/muerto
                if(GetPlayerAnimationIndex(playerid) != 1701) {
                    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
                }
            }
        }
        update_manos(playerid); //- Actualiza los objetos de manos del jugador
    }
    return 1;
}

funcion A_Segundo()
{
	new
		string[256]
	;

    for (new ad = 0; ad < MAX_ANUNCIOS; ad++)
	{
		if (ad_info[ad][num_ad] != 0)
		{
			ad_info[ad][tiempo_ad]++;
		}
	}
    for (new g = 0; g < MAX_GRAFFITIS; g++)
	{
		if (i_graffito[g][gr_tiempohacer] != 0)
		{
			i_graffito[g][gr_tiempohacer]++;
		}
	}
	
	foreach(new i: Player)
	{
		if (IsPlayerConnectedEx(i))
		{
			if (GetPlayerPing(i) > 1500) { _Expulsar(i, 1, "Ping mayor a 1500."); }
			if (tp_trabajo[i] != 0) tp_trabajo[i]--;
			if (ComprobarDineroJ(i) != GetPlayerMoney(i))
			{
				ReiniciarDinero(i);
				ActualizarDinero(i, GetPVarInt(i, "Money"));
			}
			if (user[i][jTiempoServicio] != 0) user[i][jTiempoServicio]--;
			if (user[i][jRegistrado] != 0) user[i][ptimegame]++;
            if (boombox[i] != 0)
            {
                 boombox[i]--;
                 if(boombox[i] == 0)
                 {
					DestroyDynamicObject(i_boox[i][BB_obj]);
					DestroyDynamic3DTextLabel(Text3D: i_boox[i][BB_label]);
			    	user[i][pEditingMode] = 0;
			    	boombox[i] = 0;
			    	Mensaje_(i, 0xFF6347AA, "Cancelaste la colocación del estéreo.");
				}
            }
			if (EnServicioADM[i] != 2) user[i][pAFKTime]++;
			new weaponid = GetPlayerWeapon(i);
			if (user[i][j_Horas] < 10)
			{
				if (weaponid >= 22 && weaponid <= 29309)
				{
					_Mensaje(i, 4, "ADC3E7", "No posees quince horas de juego, no puedes tener un objeto weapon.");
					ResetPlayerWeapons(i);
					QuitarManos(i);
					format(string, sizeof(string), "{b00000}[Atención]{FFFFFF} %s recibió limpieza de armas (menos 10 horas)", nombre_pj(i));
					MensajeAdmin(string);
				}
			}
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && AntiG[reparacion])
			{
				GetVehicleHealth(GetPlayerVehicleID(i), Anti[i][vidac1]);
				if(Anti[i][vidac1] > Anti[i][vidac2]+1.0)
				{
					format(string, 128, "[Atención]{FFFFFF} %s(%d) es posible que use cheat de reparación.", nombre_pj(i), i);
					MensajeAdmin(string);
					GetVehicleHealth(GetPlayerVehicleID(i), Anti[i][vidac1]);
					GetVehicleHealth(GetPlayerVehicleID(i), Anti[i][vidac2]);
				}
				GetVehicleHealth(GetPlayerVehicleID(i), Anti[i][vidac2]);
			}
			if (Atado[i] > 0) TogglePlayerControllable(i, 0);
			if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && user[i][jAdmin] < 1)
			{
				format(string, sizeof(string), "Registros: %s (ID %d) es posible que use cheat de jetPack.", nombre_pj(i), i);
				Log("Registros/Hack.log", string);
				format(string, sizeof(string), "[Administración]{FFFFFF} %s ha sido expulsado. {E00000}Razón: jetpack hack.", nombre_pj(i), i);
				MensajeAdmin(string);
				Kick(i);
			}
			//sistema de incendios.
			if(Es_Faccion(i, 5))
			{
				if(user[i][jm_Derecha] == 37 && user[i][jm_DerechaCant] > 1)
				{
					new Keys,ud,lr;
					GetPlayerKeys(i, Keys, ud, lr);
					if(Keys == KEY_FIRE)
					{
						new FireID = CercaIncendio(i);
						if (FireID != -1)
						{
							if(Incendios[FireID][pIntensidad] > 0)
							{
								if(Incendios[FireID][pIntensidad]-3 < 0) Incendios[FireID][pIntensidad] = 0;
								else Incendios[FireID][pIntensidad]-=3;
								if(Incendios[FireID][pIntensidad] != 0)
								{
									format(string, sizeof(string), "{ff4000}Incendio\n{ffc100}Intensidad: {ffffff}%d", Incendios[FireID][pIntensidad]);
									UpdateDynamic3DTextLabelText(Incendios[FireID][pInfoIncendio], -1, string);
								}
								else
								{
								    format(string, sizeof(string), "{ff4000}Incendio\n{ffc100}Intensidad: {ffffff}Baja");
								    UpdateDynamic3DTextLabelText(Incendios[FireID][pInfoIncendio], -1, string);

								}
							}
  						}
                    }
                }
            }
			//repaircar
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				new Float: cvida;
				GetVehicleHealth(GetPlayerVehicleID(i), cvida);
				if(cvida > 1001.0)
				{
					SetExVehicleHealth(GetPlayerVehicleID(i), 1000.0);
					format(string, 128, "[Atención]{FFFFFF} %s puede ser posible RepairCar.", nombre_pj(i));
					MensajeAdmin(string);
				}
			}
			//
		}
	}
}

terminardroga(playerid, d_tipo)
{
	new si_no = 0;
	switch (d_tipo)
	{
	    case 1: // cocaína
	    {
            si_no = 1;
	    }
	    case 2: //crack
	    {
            si_no = 1;
	    }
	    case 3: //metanfetamina
	    {
            si_no = 1;
	    }
	    case 4: //extasis
	    {
            si_no = 0;
	    }
	    case 5: //lsd
	    {
            si_no = 1;
	    }
	    case 6: //ketamina
	    {
            si_no = 1;
	    }
		case 7: //pcp
		{
            si_no = 1;
		}
		case 8: //heroina
		{
            si_no = 0;
		}
		case 9: //marihuana
		{
            si_no = 0;
		}
		case 10: //hachis
		{
            si_no = 0;
		}
	}
	_Mensaje(playerid, 4, "00B0C4", "Los efectos de la droga culminaron.");
	SetPlayerWeather(playerid, clima);

	new hora_s, minuto_s, segundo_s;
	gettime(hora_s, minuto_s, segundo_s);
	SetPlayerTime(playerid, hora_s, minuto_s);
	user[playerid][jDtipo] = 0;
	user[playerid][jDtiempo] = 0;
	user[playerid][jDpower] = 0;
	user[playerid][jDbonus][0] = 0;
	user[playerid][jDbonus][1] = 0;
	if (si_no == 1)
	{
		if(user[playerid][jAdiccion][0] >= 10 || user[playerid][jAdiccion][1] >= 10 || user[playerid][jAdiccion][2] >= 10 || user[playerid][jAdiccion][3] >= 10 || user[playerid][jAdiccion][4] >= 10 || user[playerid][jAdiccion][5] >= 10)
			random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
	}
}

funcion RandomAbstinence(playerid)
{
    // En un futuro, hacer que las probabilidades de obtener abstinencia sean mayores, mientras mayor sea el nivel de adicción
    new abstinence = random(11)+1;
    switch(abstinence)
    {
        case 1,5,6,10: random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
        case 2,9: abstinence_power[playerid] = 1, GiveAbstinence(playerid);
        case 3,8: abstinence_power[playerid] = 2, GiveAbstinence(playerid);
        case 4: abstinence_power[playerid] = 3, GiveAbstinence(playerid);
        case 7: abstinence_power[playerid] = 4, GiveAbstinence(playerid);
    }
    return 1;
}

funcion GiveAbstinence(playerid)
{
    if(user[playerid][pAbstinenceEffect] == 0)
    {
        switch(abstinence_power[playerid])
        {
            case 1: user[playerid][pAbstinenceTime] = 10;
            case 2: user[playerid][pAbstinenceTime] = 15;
            case 3: user[playerid][pAbstinenceTime] = 20;
            case 4: user[playerid][pAbstinenceTime] = 25;
        }
        user[playerid][pAbstinenceEffect] = 1;
    }
    SendClientMessage(playerid, 0xFF6347AA, "Estás adicto a alguna droga y la abstinencia te consume.");
    SendClientMessage(playerid, 0x822828FF, "Puedes aguantar el efecto, consumir una droga a la que eres adicto, o desintoxicarte con metadona.");
    return 1;
}

funcion A_Minuto()
{
	new string[128];
	for (new vid = 0; vid < MAX_VEHICULOS; vid++)
	{
		if (i_Vehiculo[vid][vID] != INVALID_VEHICLE_ID)
		{
			if (i_Vehiculo[vid][v_timer] != 0)
			{
				if (i_Vehiculo[vid][v_timer] > 0) i_Vehiculo[vid][v_timer]--;
				if (i_Vehiculo[vid][v_timer] == 0)
				{
					guardar_vehiculo(vid);
					foreach(new i: Player)
						if (checkcoche[i]-666 == vid) cancelar_robo(i, 1);
				}
			}
			if (i_Vehiculo[vid][vNeon] != 0)
			{
				if (i_Vehiculo[vid][vNeon] > 0) i_Vehiculo[vid][vNeon]--;
			}
		}
	}
	for (new vehicleid = 0; vehicleid < MAX_VEHICLES; vehicleid++)
	{
		//sistema renta
		if (renta_Veh[vehicleid][veh_renta] != 0)
		{
			if (renta_Veh[vehicleid][veh_tiempo] > 0) renta_Veh[vehicleid][veh_tiempo]--;
			if (renta_Veh[vehicleid][veh_tiempo] == 2)
			{
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p, vehicleid))
					{
						SendClientMessage(p, 0x33AA33FF, "Le quedan sólo dos minutos de renta a este vehículo.");
					}
				}
			}
			if (renta_Veh[vehicleid][veh_tiempo] == 0)
			{
				foreach(new p: Player)
				{
					if(IsPlayerInVehicle(p, vehicleid))
					{
						SendClientMessage(p, 0xFF6347AA, "El vehículo en el que estabas fue respawneado, su tiempo de renta termino.");
					}
				}
				renta_Veh[vehicleid][veh_renta] = 0;
				renta_Veh[vehicleid][veh_tiempo] = 0;
				alm(renta_Veh[vehicleid][veh_dueno], "sin_dueño");

				SetVehicleToRespawn(vehicleid);
			}
		}
	}
	for(new f=0;f<MAX_PLANTAS;f++)
	{
		if(InfoMaria[f][sSlot])
		{
		    if(InfoMaria[f][sTime] > 1)
			{
				InfoMaria[f][sTime]--;
				format(string, sizeof(string), "Planta de marihuana\n{ffffff}Madura en %s", Mins_time(InfoMaria[f][sTime]));
				UpdateDynamic3DTextLabelText(InfoMaria[f][sLabel], 0x009F46FF, string);
			}
			else
			{
   				new gramos = random(6);
				InfoMaria[f][sGramos] = gramos;
				UpdateDynamic3DTextLabelText(InfoMaria[f][sLabel], 0x009F46FF, "Planta de marihuana\n{ffffff}Lista a cosechar");
			}
		}
	}
    for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if (user[playerid][jAlquiler] != -1)
		{
			new id = user[playerid][jAlquiler];
			if (i_Casa[id][c_alquilado] == 0)
			{
			    if (user[playerid][j_timeunrent] == 0)
				{
					user[playerid][j_timeunrent] = 21;
					SendClientMessage(playerid, 0xcccc00ff, "Posees 20 minutos para desalojar la vivienda (/desalquilar). Ahora posee un nuevo propietario.");
				}
				if (user[playerid][j_timeunrent] > 0) user[playerid][j_timeunrent]--;
				if (user[playerid][j_timeunrent] == 16) SendClientMessage(playerid, 0xcccc00ff, "Posees 15 minutos para desalojar de la vivienda (/desalquilar).");
				if (user[playerid][j_timeunrent] == 11) SendClientMessage(playerid, 0xcccc00ff, "Posees 10 minutos para desalojar de la vivienda (/desalquilar).");
				if (user[playerid][j_timeunrent] == 6) SendClientMessage(playerid, 0xcccc00ff, "Posees 5 minutos para desalojar de la vivienda (/desalquilar).");
				if (user[playerid][j_timeunrent] == 1)
				{
					if (i_Casa[id][cEspacio])
					{
						i_Casa[id][c_alquilado] = 0;
						save_Casa(id, false, -1, true);
					}
					un_rent[playerid] = 0;
					user[playerid][jAlquiler] = -1;
					user[playerid][j_timeunrent] = 0;
					SendClientMessage(playerid, 0xccccccff, "El nuevo propietario de la vivienda te botó, echando a la calle tus cosas. (ALQUILER)");
				}
			}
		}
	    if (user[playerid][jCasaLlaves] != -1)
	    {
			if (user[playerid][jCasa2Llaves] != i_Casa[user[playerid][jCasaLlaves]][c_patente])
			{
				user[playerid][jCasaLlaves] = -1;
				user[playerid][jCasa2Llaves] = 0;
				SendClientMessage(playerid, 0x33CCFFFF, "La casa de la cual tenias llaves, cambió de cerradura.");
			}
	    }
	    if (user[playerid][j2CasaLlaves] != -1)
	    {
			if (user[playerid][j2Casa2Llaves] != i_Casa[user[playerid][j2CasaLlaves]][c_patente])
			{
				user[playerid][j2CasaLlaves] = -1;
				user[playerid][j2Casa2Llaves] = 0;
				SendClientMessage(playerid, 0x33CCFFFF, "La casa de la cual tenias llaves (ranura 2), cambió de cerradura.");
			}
	    }
	    if (user[playerid][jNegocioLlaves] != -1)
	    {
			if (user[playerid][jNegocio2Llaves] != i_Negocio[user[playerid][jNegocioLlaves]][n_patente])
			{
				user[playerid][jNegocioLlaves] = -1;
				user[playerid][jNegocio2Llaves] = 0;
				SendClientMessage(playerid, 0x33CCFFFF, "El negocio del cual tenias llaves, cambió de cerradura.");
			}
	    }
	    if (user[playerid][jEmpresaLlaves] != -1)
	    {
			if (user[playerid][jEmpresa2Llaves] != i_Empresa[user[playerid][jEmpresaLlaves]][e_patente])
			{
				user[playerid][jEmpresaLlaves] = -1;
				user[playerid][jEmpresa2Llaves] = 0;
				SendClientMessage(playerid, 0x33CCFFFF, "La empresa de la cual tenias llaves, cambió de cerradura.");
			}
	    }
	    //robo coches
	    if (veh_robo[playerid] != 0)
		{
			if (veh_robo[playerid] > 0) veh_robo[playerid]--;
			if (veh_robo[playerid] == 0) cancelar_robo(playerid, 1);
		}
		//- drogas
		if(user[playerid][pAbstinenceEffect] == 1)
		{
			SetPlayerDrunkLevel(playerid, 5000);
			if(user[playerid][pAbstinenceTime] > 0) user[playerid][pAbstinenceTime]--;
			else
			{
				user[playerid][pAbstinenceEffect] = 0;
				user[playerid][pAbstinenceTime] = 0;
				if(user[playerid][jAdiccion][0] >= 2) user[playerid][jAdiccion][0] -= 2;
				if(user[playerid][jAdiccion][1] >= 2) user[playerid][jAdiccion][1] -= 2;
				if(user[playerid][jAdiccion][2] >= 2) user[playerid][jAdiccion][2] -= 2;
				if(user[playerid][jAdiccion][3] >= 2) user[playerid][jAdiccion][3] -= 2;
				if(user[playerid][jAdiccion][4] >= 2) user[playerid][jAdiccion][4] -= 2;
				if(user[playerid][jAdiccion][5] >= 2) user[playerid][jAdiccion][5] -= 2;
				SendClientMessage(playerid, 0x9ACD32AA, "Lograste aguantar el efecto de la abstinencia, bajaste un poco la adicción.");
				if(user[playerid][jDtipo] != 0) random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
			}
		}
	    if (user[playerid][jDtipo] != 0)
	    {
		    if(user[playerid][jDtipo] == 4) SetPlayerDrunkLevel(playerid, 5000);
		    if(user[playerid][jDtipo] == 11) SetPlayerDrunkLevel(playerid, 5000);

			new d_tipo = user[playerid][jDtipo];
			if (user[playerid][jDtiempo] == 0) terminardroga(playerid, d_tipo);
			if (user[playerid][jDtiempo] > 0) user[playerid][jDtiempo]--;
	    }
		if (user[playerid][pAFKTime] < 3) //en modo afk
		{
			//payday
			user[playerid][jPayday] ++;
			if(user[playerid][jPayday] >= 60)
			{
				user[playerid][jPayday] = 0;
				PagoDiario(playerid);
			}
			if (user[playerid][jTiempos][13] > 0) user[playerid][jTiempos][13]--; //- trafico armas
			if (user[playerid][jTiempos][17] > 0) user[playerid][jTiempos][17]--; //- robo coches
		}
		//conteo de 3 horas
		user[playerid][jtimeP] ++;
		if(user[playerid][jtimeP] >= 180)
		{
			user[playerid][jtimeP] = 0;
		}
        if (user[playerid][jTiempos][1] > 0) user[playerid][jTiempos][1]--; //- Llenar Vida
        if (user[playerid][jTiempos][2] > 0) user[playerid][jTiempos][2]--; //- /entrenar
        if (user[playerid][jTiempos][3] > 0) user[playerid][jTiempos][3]--; //- Robo banco
        if (user[playerid][jTiempos][4] > 0) user[playerid][jTiempos][4]--; //- Robo negocio
        if (user[playerid][jTiempos][5] > 0) user[playerid][jTiempos][5]--; //- Tiempo Regalo
        if (user[playerid][jTiempos][7] > 0) user[playerid][jTiempos][7]--; //- /comprarnegocio
        if (user[playerid][jTiempos][8] > 0) user[playerid][jTiempos][8]--; //- /comprar > ammunation
        if (user[playerid][jTiempos][11] > 0) user[playerid][jTiempos][11]--; //- /Regalo
        if (user[playerid][jTiempos][12] > 0) user[playerid][jTiempos][12]--; //- /Ads
        if (user[playerid][jAlcohol] > 0) user[playerid][jAlcohol]--; //- /Beber
		if (user[playerid][jTiempos][14] > 0) user[playerid][jTiempos][14]--; //comer
        if (user[playerid][jTiempos][16] > 0) user[playerid][jTiempos][16]--; //- delincuente
        if (user[playerid][jTiempos][18] > 0) user[playerid][jTiempos][18]--; //- /fseguro
        if (user[playerid][jTiempos][19] > 0) user[playerid][jTiempos][19]--; //- /comprar > ammunation
        if (user[playerid][jTiempos][20] > 0) user[playerid][jTiempos][20]--; //- /ayudar 1
        if (user[playerid][jTiempos][21] > 0) user[playerid][jTiempos][21]--; //- /ayudar 2
        if (VisitaTimer2[playerid] > 0) VisitaTimer2[playerid]--;
		if (user[playerid][jEncarcelado] > 0)
		{
			//sistema pf
			if (user[playerid][jEncarcelado] == 1) user[playerid][jTiempoCarcel]--; //OOC
			else if(user[playerid][jEncarcelado] == 2) user[playerid][jTiempoCarcel]--; //OOC
			else
			{
			    if (sadocs != 0)
				{
					if (user[playerid][pAFKTime] < 3) //comisaría-PF
					{
						if (user[playerid][jtiempito] != 0)
						{
							if (user[playerid][jtiempito] < gettime())
							{
								user[playerid][jtiempito] = 0;
								user[playerid][jTiempoCarcel]--;
							}
						}
						if (user[playerid][jtiempito] == 0) user[playerid][jTiempoCarcel]--;
				    }
		    	}
		    	else
		    	{
					if (user[playerid][jtiempito] != 0)
					{
						if (user[playerid][jtiempito] < gettime())
						{
							user[playerid][jtiempito] = 0;
							user[playerid][jTiempoCarcel]--;
						}
					}
					if (user[playerid][jtiempito] == 0) user[playerid][jTiempoCarcel]--;
		    	}
			}
			if (user[playerid][jTiempoCarcel] <= 0)
			{
				user[playerid][jTiempoCarcel] = 0;
				user[playerid][jtiempito] = 0;
				switch (user[playerid][jEncarcelado])
				{
					case 1: //ooc
					{
						EliminarHerido(playerid);
						Sangre_(playerid, 100);
						format(InfoHeridas[playerid][Cabeza], 24, "-"); InfoHeridas[playerid][Cabezar] = 0;
						format(InfoHeridas[playerid][Torso], 24, "-"); InfoHeridas[playerid][Torsor] = 0;
						format(InfoHeridas[playerid][BrazoD], 24, "-"); InfoHeridas[playerid][BrazoDr] = 0;
						format(InfoHeridas[playerid][BrazoI], 24, "-"); InfoHeridas[playerid][BrazoIr] = 0;
						format(InfoHeridas[playerid][EntreP], 24, "-"); InfoHeridas[playerid][EntrePr] = 0;
						format(InfoHeridas[playerid][PiernaD], 24, "-"); InfoHeridas[playerid][PiernaDr] = 0;
						format(InfoHeridas[playerid][PiernaI], 24, "-"); InfoHeridas[playerid][PiernaIr] = 0;
						format(InfoHeridas[playerid][Lesiones], 24, "-"); InfoHeridas[playerid][Lesionesr] = 0;
						SetPlayerInterior(playerid, 0);
						user[playerid][jInterior] = 0;
						SetPlayerVirtualWorld(playerid, 0);
						user[playerid][jVirtualWorld] = 0;
						_Mensaje(playerid, 4, "b0b0b0", "Tu condena administrativa termino, recuerda respetar las normativas del servidor.");
						set_pos(playerid, 1163.5610, -1752.7770, 13.5479, 0.0000, 0, 0);
						DeletePVar(playerid, "Congelado");
						TogglePlayerControllable(playerid, 1);
						format(user[playerid][jJculpable], 50, "Ninguno");
						PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
					}
					case 2: //comisaría
					{
						EliminarHerido(playerid);
						Sangre_(playerid, 100);
						format(InfoHeridas[playerid][Cabeza], 24, "-"); InfoHeridas[playerid][Cabezar] = 0;
						format(InfoHeridas[playerid][Torso], 24, "-"); InfoHeridas[playerid][Torsor] = 0;
						format(InfoHeridas[playerid][BrazoD], 24, "-"); InfoHeridas[playerid][BrazoDr] = 0;
						format(InfoHeridas[playerid][BrazoI], 24, "-"); InfoHeridas[playerid][BrazoIr] = 0;
						format(InfoHeridas[playerid][EntreP], 24, "-"); InfoHeridas[playerid][EntrePr] = 0;
						format(InfoHeridas[playerid][PiernaD], 24, "-"); InfoHeridas[playerid][PiernaDr] = 0;
						format(InfoHeridas[playerid][PiernaI], 24, "-"); InfoHeridas[playerid][PiernaIr] = 0;
						format(InfoHeridas[playerid][Lesiones], 24, "-"); InfoHeridas[playerid][Lesionesr] = 0;
						SetPlayerInterior(playerid, 0);
						user[playerid][jInterior] = 0;
						_Mensaje(playerid, 4, "8D8DFF", ">{ffffff} Cumpliste el tiempo estimado, te han dejado en libertad.");
						set_pos(playerid, 1163.5610, -1752.7770, 13.5479, 0.0000, 0, 0);
					}
					case 3: //prision federal
					{
						EliminarHerido(playerid);
						Sangre_(playerid, 100);
						format(InfoHeridas[playerid][Cabeza], 24, "-"); InfoHeridas[playerid][Cabezar] = 0;
						format(InfoHeridas[playerid][Torso], 24, "-"); InfoHeridas[playerid][Torsor] = 0;
						format(InfoHeridas[playerid][BrazoD], 24, "-"); InfoHeridas[playerid][BrazoDr] = 0;
						format(InfoHeridas[playerid][BrazoI], 24, "-"); InfoHeridas[playerid][BrazoIr] = 0;
						format(InfoHeridas[playerid][EntreP], 24, "-"); InfoHeridas[playerid][EntrePr] = 0;
						format(InfoHeridas[playerid][PiernaD], 24, "-"); InfoHeridas[playerid][PiernaDr] = 0;
						format(InfoHeridas[playerid][PiernaI], 24, "-"); InfoHeridas[playerid][PiernaIr] = 0;
						format(InfoHeridas[playerid][Lesiones], 24, "-"); InfoHeridas[playerid][Lesionesr] = 0;
						SetPlayerInterior(playerid, 0);
						user[playerid][jInterior] = 0;
						SetPlayerVirtualWorld(playerid, 0);
						user[playerid][jVirtualWorld] = 0;
						_Mensaje(playerid, 4, "8D8DFF", ">{ffffff} Cumpliste el tiempo estimado, te han dejado en libertad.");
						set_pos(playerid, 1163.5610, -1752.7770, 13.5479, 0.0000, 0, 0);
						for(new x = 0; x < 10; x++)
						{
							user[playerid][jBolsillo][x] = user[playerid][job_PF][x];
							user[playerid][jBolsilloCant][x] = user[playerid][job_PFCant][x];
							user[playerid][job_PF][x] = 0;
							user[playerid][job_PFCant][x] = 0;
						}
						user[playerid][jm_Derecha] = user[playerid][job_PF][10], user[playerid][jm_DerechaCant] = user[playerid][job_PFCant][10];
						user[playerid][jm_Izquierda] = user[playerid][job_PF][11], user[playerid][jm_IzquierdaCant] = user[playerid][job_PFCant][11];
						user[playerid][job_PF][10] = 0, user[playerid][job_PFCant][10] = 0;
						user[playerid][job_PF][11] = 0, user[playerid][job_PFCant][11] = 0;
						DarDineroGC(playerid, user[playerid][jDineroPF]);
						user[playerid][jDineroPF] = 0;
						update_manos(playerid);
						characterSave(playerid);
					}
				}
				user[playerid][jEncarcelado] = 0;
				user[playerid][j_uTelefono] = 0;
				textgame_player(playerid, "~g~Libre", 5000, 1);
				user[playerid][jEstrellas] = 0;
			}
		}
	}
	return 1;
}

funcion A_Hora()
{
    for (new nid = 0; nid < MAX_NEGOCIOS; nid++)
	{
    	if (i_Negocio[nid][nComprado] == 1)
		{
		    if (i_Negocio[nid][EnLlamas] == 1)
		    {
				new cuota;
				if (i_Negocio[nid][nTipo] == 1) cuota = 50;
				else if (i_Negocio[nid][nTipo] == 2) cuota = 58;
				else if (i_Negocio[nid][nTipo] == 3) cuota = 55;
				else if (i_Negocio[nid][nTipo] == 4) cuota = 35;
				else if (i_Negocio[nid][nTipo] == 5) cuota = 32;
				else if (i_Negocio[nid][nTipo] == 6) cuota = 29;
				else if (i_Negocio[nid][nTipo] == 7) cuota = 175;
				else if (i_Negocio[nid][nTipo] == 8) cuota = 35;
				else if (i_Negocio[nid][nTipo] == 9) cuota = 30;
				else if (i_Negocio[nid][nTipo] == 10) cuota = 35;
				else if (i_Negocio[nid][nTipo] == 11) cuota = 195;
				else if (i_Negocio[nid][nTipo] == 12) cuota = 80;
				else if (i_Negocio[nid][nTipo] == 13) cuota = 75;
				else if (i_Negocio[nid][nTipo] == 14) cuota = 215;
				else if (i_Negocio[nid][nTipo] == 15) cuota = 150;
				else if (i_Negocio[nid][nTipo] == 16) cuota = 189;
				else if (i_Negocio[nid][nTipo] == 17) cuota = 130;
				else if (i_Negocio[nid][nTipo] == 18) cuota = 50;
				else if (i_Negocio[nid][nTipo] == 19) cuota = 35;
				i_Negocio[nid][nCuotas] += cuota;
				if (i_Negocio[nid][nProductos] > 25) i_Negocio[nid][nProductos] -= 25;
				save_Negocio(nid);
		    }
    	    if (i_Negocio[nid][nSeguro] == 1)
			{
    	        if (i_Negocio[nid][nProductos] > 10 && i_Negocio[nid][EnLlamas] != 1)
				{
	    			new pagan, tipo = i_Negocio[nid][nTipo];
	    			if (tipo == 1) pagan = 118;
	    			else if (tipo == 2) pagan = 122;
	    			else if (tipo == 3) pagan = 130;
	    			else if (tipo == 4) pagan = 95;
	    			else if (tipo == 5) pagan = 90;
	    			else if (tipo == 6) pagan = 87;
	    			else if (tipo == 7) pagan = 455;
	    			else if (tipo == 8) pagan = 85;
	    			else if (tipo == 9) pagan = 80;
	    			else if (tipo == 10) pagan = 75;
	    			else if (tipo == 11) pagan = 295;
	    			else if (tipo == 12) pagan = 120;
	    			else if (tipo == 13) pagan = 95;
	    			else if (tipo == 14) pagan = 315;
	    			else if (tipo == 15) pagan = 270;
	    			else if (tipo == 16) pagan = 289;
	    			else if (tipo == 17) pagan = 210;
	    			else if (tipo == 18) pagan = 112;
	    			else if (tipo == 19) pagan = 95;
			 		i_Negocio[nid][nDinero] += pagan;
	      			i_Negocio[nid][nProductos] -= 15;
	      			save_Negocio(nid);
				}
			}
		}
	}
	for (new e_id = 0; e_id < MAX_EMPRESAS; e_id++)
	{
    	if (i_Empresa[e_id][eComprado] == 1)
		{
			new pagae = 0;
	    	if (i_Empresa[e_id][eTipo] == 1) pagae = 500;//repartos
	    	else if (i_Empresa[e_id][eTipo] == 2) pagae = 800;//mecánica
			else if (i_Empresa[e_id][eTipo] == 3) pagae = 122;//taxista-prox
			i_Empresa[e_id][eDinero] += pagae;
			save_Empresa(e_id);
		}
	}
    save_stuff();
    //incendio_random();
    //save_incendios();
    Regalo = 1;
    foreach(new i: Player)
	{
		if (EnServicioADM[i] == 0)
		{
			user[i][jFuerza] -= 2;
            if (user[i][jFuerza] < 12) user[i][jFuerza] = 12;
     	}
     	new pro[144];
     	for(new a = 0; a < 5; a++)
     	{
	     	if(user[i][jEmpeno2][a] > 0 && user[i][jEmpeno][a] != 0)
	     	{
	     	    user[i][jEmpeno2][a]--;
	     	    if(user[i][jEmpeno2][a] == 2 || user[i][jEmpeno2][a] == 1)
			 	{
					format(pro, sizeof(pro), "[SMS n°Desconocido]:{ffffff} Te queda menos de 1 hora para pagar tu %s (%d) o me quedaré el objeto.", InfoObjeto[user[i][jEmpeno][a]][NombreObjeto], PrecioEmpeno(user[i][jEmpeno][a]));
			 		_Mensaje(i, 4, "E7E600", pro);
				}
				if(user[i][jEmpeno2][a] == 0)
				{
					format(pro, sizeof(pro), "[SMS n°Desconocido]:{ffffff} No has pagado, ahora tu %s me pertenece.", InfoObjeto[user[i][jEmpeno][a]][NombreObjeto]);
			 		_Mensaje(i, 4, "E7E600", pro);
			 		user[i][jEmpeno][a] = 0;
				}
	     	}
     	}
    }
    return 1;
}

funcion A_Vehiculos()
{
	new engine, lights, alarm, doors, bonnet, boot, objective, modelid;
	for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v))
	{
		modelid = GetVehicleModel(v);
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
		switch(modelid)
		{
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: veh_gasolina[v] = 500;
			case 509, 481, 510: veh_gasolina[v] = 500, arr_Engine {v} = 1, SetVehicleParamsEx(v, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		}
		if(engine == VEHICLE_PARAMS_ON)
		{
			if(veh_gasolina[v] > 0 && !veh_Pescador(v) && !veh_Granjero(v))
			{
				veh_gasolina[v] -= 1;
				if(veh_gasolina[v] <= 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
			}
			if(arr_Engine {v} == 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		}
	}
}

funcion A_Microbeat()
{
	new vehiculo, _danoveh[4], arrVehParams[7], texttrab[80];
	foreach(new i: Player)
	{
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			vehiculo = GetPlayerVehicleID(i);
			for(new s = 0; s < 10; s++) {
				if(SpikeStrips[s][sX] != 0) {
					if(VehicleToPoint(3.0, vehiculo, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ])) {
						GetVehicleDamageStatus(vehiculo, _danoveh[0], _danoveh[1], _danoveh[2], _danoveh[3]);
						_danoveh[3] = encode_tires(1, 1, 1, 1);
						UpdateVehicleDamageStatus(vehiculo, _danoveh[0], _danoveh[1], _danoveh[2], _danoveh[3]);
					}
				}
			}
			if (InfoEvento[iEtapa] == 0)
			{
				if (GetVehicleModel(vehiculo))
				{
					new Float:vehVi;
					GetVehicleHealth(vehiculo, vehVi);
					if(_rVeh[i] == 0)
					{
						if(vehVi < 350.0)
						{
						    if (EstaEnBicis(vehiculo))
							{
								SetExVehicleHealth(vehiculo, 1000.0);
								RepairExVehicle(vehiculo);
							}
							else
							{
								SetExVehicleHealth(vehiculo, 251.0);
								GetVehicleParamsEx(vehiculo, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
								if(arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(vehiculo, VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
								textgame_player(i, "~w~Motor ~r~averiado", 2500, 3);
								arr_Engine {vehiculo} = 0;
							}
						}
					}
				}
			}
		} //-
		EstaEnFuego(i); //- Incendios
		//
		if(Granjero[i] == 1) {
			format(texttrab, sizeof(texttrab), "Gramos: ~g~~h~%d", user[i][jCosechas]);
			PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
        if(Carpintero[i] == 1) {
            format(texttrab, sizeof(texttrab), "Muebles: ~g~~h~%d", user[i][jMuebles]);
            PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
		if(Carguero[i] == 1) {
			format(texttrab, sizeof(texttrab), "Cargas: ~g~~h~%d", user[i][jCargas]);
			PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
		if(en_lenador[i] == 1) {
			format(texttrab, sizeof(texttrab), "Troncos: ~g~~h~%d", user[i][jTroncos]);
			PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
		if(user[i][jEncarcelado] == 1) {
			format(texttrab, sizeof(texttrab), "Tiempo: ~g~~h~%dmin", user[i][jTiempoCarcel]);
			PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
	}
	return 1;
}

funcion A_Spec()
{
	foreach(new i: Player)
	{
		if(user[i][jAdmin] >= 1)
		{
			if(Spectando[i] >= 1)
			{
				if(Spectate[i] < 553)
				{
					new playerid2 = Spectate[i];
					if(!IsPlayerConnected(playerid2))
					{
						_Mensaje(i, 1, "0", "El jugador que estabas specteando salio del servidor.");
						SpectadorID[Spectate[i]] = 999;
						Spectando[i] = 0;
						Spectate[i] = 999;
						TogglePlayerSpectating(i, false);
						SetPlayerPos(i, user[i][jPosicion_X], user[i][jPosicion_Y], user[i][jPosicion_Z]);
						SetPlayerInterior(i, user[i][jInterior]);
						SetPlayerVirtualWorld(i, user[i][jVirtualWorld]);
						SetCameraBehindPlayer(i);
					}
				}
				if(Spectate[i] == 554)
				{
					TogglePlayerControllable(i, 1);
					SetPlayerInterior(i, Unspec[i][sPint]);
					user[i][jInterior] = Unspec[i][sPint];
					SetPlayerPos(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
					Spectate[i] = 999;
				}
				if(Spectate[i] == 556) Spectate[i] = 999;
				if(Spectate[i] == 557) Spectate[i] = 554;
			}
		}
	}
}

forward arpon1(playerid);
public arpon1(playerid)
{
	FinHablar(playerid);
	set_checkpoint(playerid, 2974.0786, -1454.8707, -0.1233, 7.0);
	tp_trabajo[playerid] = 60;
	_Pesca[playerid] = 1;
	new vehch = GetPlayerNearestVehicle(playerid);
	pescador[playerid] = CreateObject(1609,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(pescador[playerid], vehch, -0.075000,-6.524995,2.175000,80.999992,0.000000,0.000000);
	_Mensaje(playerid, 5, "0", "Atrapaste una tortuga, llévala al muelle para recibir el dinero.");
	pesca[playerid] = 1;
}

forward arpon2(playerid);
public arpon2(playerid)
{
	FinHablar(playerid);
	set_checkpoint(playerid, 2974.0786, -1454.8707, -0.1233, 7.0);
	tp_trabajo[playerid] = 60;
	_Pesca[playerid] = 1;
	new vehch = GetPlayerNearestVehicle(playerid);
	pescador[playerid] = CreateObject(1607,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(pescador[playerid], vehch, 0.000000,-6.899994,-0.675000,86.399986,0.000000,0.000000);
	_Mensaje(playerid, 5, "0", "Atrapaste un delfin, llévalo al muelle para recibir el dinero.");
	pesca[playerid] = 2;
}

forward arpon3(playerid);
public arpon3(playerid)
{
	FinHablar(playerid);
	tp_trabajo[playerid] = 60;
	set_checkpoint(playerid, 2974.0786, -1454.8707, -0.1233, 7.0);
	_Pesca[playerid] = 1;
	new vehch = GetPlayerNearestVehicle(playerid);
	pescador[playerid] = CreateObject(1608,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(pescador[playerid], vehch, 0.000000,-6.674995,-2.550000,91.799980,0.000000,0.000000);
	_Mensaje(playerid, 5, "0", "Atrapaste un tiburón, llévalo al muelle para recibir el dinero.");
	pesca[playerid] = 3;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	new string[128];
	new text_[240];
	if (listid == ob_muebles)
	{
		if (!response) return cmd_muebles(playerid);

		new OBJ_INDEX;
		buscar_modelo_obj(modelid, OBJ_INDEX);

		new precio = objetos_interior[OBJ_INDEX][1];
		MuebleActual[playerid] = modelid;
		format(text_, sizeof(text_), "{FFFFFF}Modelo: %d\nPrecio: %d\nNombre: %s\n\n¿Quieres comprar este mueble?", modelid, precio, objetos_interior[OBJ_INDEX][2]);
		ExPlayerDialog(playerid, D_Comprar_Muebles2, DIALOG_STYLE_MSGBOX, "{D6E1EB}Adquirir mueble", text_, "Comprar", "Inicio");
		return 1;
	}
	//........
	else if (listid == SkinsHombre || listid == SkinsMujer || listid == SkinsAdolescenteH || listid == SkinsAdolescenteF || listid == SkinsAdolescenteH2)
	{
		if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Saliste del catalogo de skins.");
		if (ComprobarDineroJ(playerid) < 35) return _Mensaje(playerid, 0, "32", "No tienes suficiente dinero.");
		if ((1 <= modelid <= 311) || (25001 <= modelid <= 30000))
		{
			SendClientMessage(playerid, 0xB9E35EFF, "Ahora posees un nuevo skin en /ropa (35$).");
			user[playerid][jRopa] = modelid;
			ElegirRopa(playerid, modelid);
			DarDineroGC(playerid, -35);
			if(IDNegocio[playerid] != -1)
			{
				i_Negocio[IDNegocio[playerid]][nDinero] += 35;
				i_Negocio[IDNegocio[playerid]][nProductos]--;
				IDNegocio[playerid] = -1;
			}
		}
		return 1;
	}
	//........
	else if (listid == AccesoriosN)
	{
		if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de accesorios.");
		for(new i; i < sizeof(Accesorios); i++)
		{
			if(Accesorios[i][ModeloAccesorio] == modelid)
			{
				format(string, sizeof(string),
				"{ffffff}[%d] %s - Precio: {1CB54C}$%d\n\n\
				{ffffff}¿Estás seguro que quieres comprarlo?\n", modelid, Accesorios[i][NombreAccesorio], Accesorios[i][PrecioAccesorio]);
			}
		}
		SetPVarInt(playerid, "c_accesorio", modelid);
		ExPlayerDialog(playerid, D_cToys, DIALOG_STYLE_MSGBOX, "{537CDB}Información:", string, "Comprar", "Cancelar");
		return 1;
	}
	//........
	else if (listid == AccesoriosVIP)
	{
		if (!response) return _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de accesorios vip.");

		new ranura = RanuraSeleccionada[playerid];
		InfoAccesorio[playerid][ranura][aModelo] = modelid;
		InfoAccesorio[playerid][ranura][aParte] = 1;
		InfoAccesorio[playerid][ranura][aPosicionX] = 0.0;
		InfoAccesorio[playerid][ranura][aPosicionY] = 0.0;
		InfoAccesorio[playerid][ranura][aPosicionZ] = 0.0;
		InfoAccesorio[playerid][ranura][aRotacionX] = 0.0;
		InfoAccesorio[playerid][ranura][aRotacionY] = 0.0;
		InfoAccesorio[playerid][ranura][aRotacionZ] = 0.0;
		InfoAccesorio[playerid][ranura][aEscalaX] = 1;
		InfoAccesorio[playerid][ranura][aEscalaY] = 1;
		InfoAccesorio[playerid][ranura][aEscalaZ] = 1;
		SendClientMessage(playerid, 0xB9E35EFF, "Ahora posees un nuevo accesorio en /toys.");
		return 1;
	}
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid, index)
{
	new string[128];
	if (extraid == D_joyeria)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de joyería."); return 1; }
		for(new i; i < sizeof(Accesorios); i++)
		{
			if(Accesorios[i][ModeloAccesorio] == modelid)
			{
				format(string, sizeof(string),
				"{ffffff}[%d] %s - Precio: {1CB54C}$%d\n\n\
				{ffffff}¿Estás seguro que quieres comprarlo?\n", modelid, Accesorios[i][NombreAccesorio], Accesorios[i][PrecioAccesorio]);
			}
		}
		SetPVarInt(playerid, "c_joyeria", modelid);
		ExPlayerDialog(playerid, D_cJoyeria, DIALOG_STYLE_MSGBOX, "{537CDB}Información:", string, "Comprar", "Cancelar");
	}
	else if (extraid == D_Peluqueria)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de pelucas."); return 1; }
		for(new i; i < sizeof(Accesorios); i++)
		{
			if(Accesorios[i][ModeloAccesorio] == modelid)
			{
				format(string, sizeof(string),
				"{ffffff}[%d] %s - Precio: {1CB54C}$%d\n\n\
				{ffffff}¿Estás seguro que quieres comprarlo?\n", modelid, Accesorios[i][NombreAccesorio], Accesorios[i][PrecioAccesorio]);
			}
		}
		SetPVarInt(playerid, "c_peluqueria", modelid);
		ExPlayerDialog(playerid, D_cPeluqueria, DIALOG_STYLE_MSGBOX, "{537CDB}Información:", string, "Comprar", "Cancelar");
	}
	else if (extraid == Models_cVehiculo)
	{
		if(!response) { _Mensaje(playerid, 4, "b0b0b0", "Cerraste el catalogo de compras."); return 1; }
		new ID = index,StrPVar[40];
		Formato(StrPVar,"GPS_vehC_%d",ID);
		new i = GetPVarInt(playerid,StrPVar);
		compra_Veh[playerid] = i;
		format(string, sizeof(string),
		"{ffffff}¿Estás seguro que quieres comprar este vehículo?\n\n\
		{ffffff}     Modelo: %s - Precio: {1CB54C}$%d\n", nombre_vehiculo[i_Conce[i][eModeloVeh] - 400], i_Conce[i][ePrecioVeh]);
		ExPlayerDialog(playerid, D_Cvehiculo, DIALOG_STYLE_MSGBOX, "{537CDB}Información:", string, "Efectivo", "T. Débito");
	}
	else if(extraid == D_OBJETOSADMIN)
	{
		if(response)
		{
		    new objeto = -1;
		    for(new a = 0; a < MAX_POBJETOS;a++)
		    {
				if(cObjeto[a][pOID] == 0)
				{
					objeto = a;
					break;
				}
		    }
		    if(objeto == -1) return _Mensaje(playerid, 4, "b00000", "Se alcanzó el límite de objetos admin.");
			GetPlayerPos(playerid, cObjeto[objeto][pPosX], cObjeto[objeto][pPosY], cObjeto[objeto][pPosZ]);
			cObjeto[objeto][pOID] = modelid;
			cObjeto[objeto][pObjeto]  = CreateDynamicObject(modelid, cObjeto[objeto][pPosX]-2.0, cObjeto[objeto][pPosY]-1.0, cObjeto[objeto][pPosZ], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
			cObjeto[objeto][pInt] = GetPlayerInterior(playerid);
			cObjeto[objeto][pVw] = GetPlayerVirtualWorld(playerid);
			EditDynamicObject(playerid, cObjeto[objeto][pObjeto]);
			user[playerid][pEditingMode] = 4;
		}
	}
	else if(extraid == D_MODELOS)
	{
		if(response)
		{
			new objeto, nid = IDNegocio[playerid];
			for (new i = 0; i < sizeof(InfoObjeto); i++) { if(InfoObjeto[i][ModeloObjeto] == modelid) objeto = i; }
			if(user[playerid][jm_Derecha] != 0 && user[playerid][jm_Izquierda] != 0){_Mensaje(playerid, 0, "32", "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(user[playerid][jm_Derecha] == 0){PonerObjeto(playerid, 1, objeto); user[playerid][jm_Derecha] = objeto, user[playerid][jm_DerechaCant] = 1;}
			else if(user[playerid][jm_Izquierda] == 0){PonerObjeto(playerid, 2, objeto); user[playerid][jm_Izquierda] = objeto, user[playerid][jm_IzquierdaCant] = 1;}
			_Mensaje(playerid, 5, "0", "Compraste un teléfono, comandos: /telefono");
			if(user[playerid][jPremium] == 0)
			{
				Compra(playerid, 500);
				if (i_Negocio[nid][nComprado] != 0)
				{
					i_Negocio[nid][nDinero] += 500;
					i_Negocio[nid][nProductos]--;
				}
			}
			else
			{
				Compra(playerid, 370);
				if (i_Negocio[nid][nComprado] != 0)
				{
					i_Negocio[nid][nDinero] += 370;
					i_Negocio[nid][nProductos]--;
				}
				_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $500, a ti te costó $370.");
			}
		} else _Mensaje(playerid, 0, "0", "Has salido del catalogo de teléfonos.");
	}
	else if(extraid == D_UNIFORMESnoticias || extraid == D_UNIFORMESFD || extraid == D_UNIFORMESPD)
	{
		if(response)
		{
			user[playerid][jSkin] = user[playerid][jRopa];
			SetPlayerSkin(playerid, modelid);
			user[playerid][jRopa] = modelid;
			ShowPlayerFooter(playerid, "Te has ~b~colocado~w~ un ~b~uniforme~w~.");
		} else _Mensaje(playerid, 0, "0", "Has salido del catalogo de uniformes.");
	}
	else if(extraid == D_OBJETOS_TRAFICO)
	{
		if(!response)return 0;

		for (new bar = 0; bar < MAX_BARRERAS; bar++)
		{
			if (InfoBar[bar][bObjeto] == 0)
			{
				new
					Float:pX,
					Float:pY,
					Float:pZ,
					Float:pAngle
				;

				GetPlayerPos(playerid, pX, pY, pZ);
				GetPlayerFacingAngle(playerid, pAngle);

				InfoBar[bar][bPosX] = pX;
				InfoBar[bar][bPosY] = pY;
				InfoBar[bar][bPosZ] = pZ;
				InfoBar[bar][bModelo] = modelid;
				InfoBar[bar][bObjeto] = CreateDynamicObject(modelid, pX, pY + 2.0, pZ, 0.0, 0.0, pAngle + 90.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
				EditDynamicObject(playerid, InfoBar[bar][bObjeto]);

				user[playerid][pEditingMode] = 5;
				u_objeto[playerid] = bar;
				return 1;
			}
		}
		_Mensaje(playerid, 0, "0", "Todos los objetos de trafico se han colocado (40).");
	}
	return 1;
}

stock buscar_modelo_obj(model, &dest)
{
	Loop(i, sizeof objetos_interior, 0)
	{
		if(model == objetos_interior[i][0]) dest = i;
	}
	return 0;
}

stock adquirir_mueble(playerid, tipo, modelid, price, id = -1)
{
	switch (tipo)
	{
		case 1://casas
		{
			new m = 0;
			while (m < MAX_MUEBLES_C)
			{
				if (i_Casa[id][cObjModel][m] == INVALID_MUEBLES_ID) break;
				m++;
			}
			if (m == MAX_MUEBLES_C) return _Mensaje(playerid, 0, "641", "No puedes comprar más objetos para tu casa (300).");
			i_Casa[id][cObjModel][m] = modelid;
			MuebleActual[playerid] = 0;
			DarDineroGC(playerid, -price);
			i_Casa[id][cPrecio] += price;
			d_estado += price;
			save_Casa(id, true, m);
		}
	    case 2://negocios
	    {
			new m = 0;
			while (m < MAX_MUEBLES_N)
			{
				if (i_Negocio[id][nObjModel][m] == INVALID_MUEBLES_ID) break;
				m++;
			}
			if (m == MAX_MUEBLES_N) return _Mensaje(playerid, 0, "641", "No puedes comprar más objetos para tu negocio (150).");
			i_Negocio[id][nObjModel][m] = modelid;
			MuebleActual[playerid] = 0;
			DarDineroGC(playerid, -price);
			i_Negocio[id][nPrecio] += price;
			d_estado += price;
			save_Negocio(id, true, m);
		}
		case 3://garajes
		{
			new m = 0;
			while (m < MAX_MUEBLES_G)
			{
				if (i_Garaje[id][gObjModel][m] == INVALID_MUEBLES_ID) break;
				m++;
			}
			if (m == MAX_MUEBLES_G) return _Mensaje(playerid, 0, "641", "No puedes comprar más objetos para tu garage (50).");
			i_Garaje[id][gObjModel][m] = modelid;
			MuebleActual[playerid] = 0;
			DarDineroGC(playerid, -price);
			d_estado += price;
			save_Garaje(id, true, m);
		}
		case 4://empresas
		{
			new m = 0;
			while (m < MAX_MUEBLES_E)
			{
				if (i_Empresa[id][eObjModel][m] == INVALID_MUEBLES_ID) break;
				m++;
			}
			if (m == MAX_MUEBLES_E) return _Mensaje(playerid, 0, "641", "No puedes comprar más objetos para tu empresa (150).");
			i_Empresa[id][eObjModel][m] = modelid;
			MuebleActual[playerid] = 0;
			DarDineroGC(playerid, -price);
			i_Empresa[id][ePrecio] += price;
			d_estado += price;
			save_Empresa(id, true, -1, m);
		}
	}
	return 1;
}

//sistema de incendios.
funcion CargarIncendios()
{
    new DirBD[50];
    format(DirBD, sizeof(DirBD), "Incendios2.rp");
    if(fexist(DirBD))
	{
        new FireData[510];
        new FireDataSlots[50][30];
        new File: LoadFire = fopen(DirBD, io_read);
        fread(LoadFire, FireData);
        fclose(LoadFire);
        new PosSplitAfter = 0;
        for(new i = 0; i < MAX_INCENDIOS; i++)
		{
            PosSplitAfter = strfind(FireData, ",", false);
            strmid(FireDataSlots[i], FireData, 0, PosSplitAfter, sizeof(FireData));
            strdel(FireData, 0, PosSplitAfter + 1);
            Incendios[i][pIDI] = strval(FireDataSlots[i]);
            PosSplitAfter = strfind(FireData, ",", false);
            strmid(FireDataSlots[i], FireData, 0, PosSplitAfter, sizeof(FireData));
            strdel(FireData, 0, PosSplitAfter + 1);
            Incendios[i][pType] = strval(FireDataSlots[i]);
			if(Incendios[i][pIDI] != 0) CrearIncendioP(Incendios[i][pIDI], Incendios[i][pType]);
        }
        print(" » Incendios cargados perro.");
    }
	else
	{
        print("No se encontraron los incendios, creando archivo.!");
    }
}

funcion save_incendios()
{
    new DirBD[50];
    format(DirBD, sizeof(DirBD), "Incendios2.rp");
    new FireData[510];
    new TempConvert[510];
    for(new i = 0; i < MAX_INCENDIOS; i++) {
        format(TempConvert, sizeof(TempConvert), "%i,%i,", Incendios[i][pIDI], Incendios[i][pType]);
        strcat(FireData, TempConvert, sizeof(TempConvert));
    }
    new File: SaveFire = fopen(DirBD, io_write);
    fwrite(SaveFire, FireData);
    fclose(SaveFire);
}

funcion FuegoSiguiente()
{
    for(new i; i < MAX_INCENDIOS; i++)
	{
        if(!Incendios[i][pIDI])
		{
            return i;
        }
    }
    return -1;
}

funcion DestroyFire(fireid)
{
	if(Incendios[fireid][pIDI] != 0)
	{
		if(Incendios[fireid][pType] == 1)
		{
		    new n_id = Incendios[fireid][pIDI];
			if(i_Negocio[n_id][nComprado] == 0) i_Negocio[n_id][nSeguro] = 1;
			i_Negocio[n_id][EnLlamas] = 0;
		}
		Incendios[fireid][pIDI] = 0;
		Incendios[fireid][pType] = 0;
		for(new i = 0; i < 15; i++)
		{
			if(Incendios[fireid][pObject][i])
			{
				DestroyDynamicObject(Incendios[fireid][pObject][i]);
			}
		}
		DestroyDynamic3DTextLabel(Incendios[fireid][pInfoIncendio]);
		return true;
	}
	return false;
}

funcion CercaIncendio(playerid)
{
	for(new i = 0; i < MAX_INCENDIOS; i++)
	{
		if(Incendios[i][pIDI] != 0)
		{
			new Float: PosFire[3];
			if(Incendios[i][pType] == 0)
			{
				PosFire[0] = i_Casa[Incendios[i][pIDI]][cExteriorX];
				PosFire[1] = i_Casa[Incendios[i][pIDI]][cExteriorY];
				PosFire[2] = i_Casa[Incendios[i][pIDI]][cExteriorZ];
				if(en_pos(playerid, 10.0, PosFire[0], PosFire[1], PosFire[2])) return i;
			}
			else
			{
				PosFire[0] = i_Negocio[Incendios[i][pIDI]][nExteriorX];
				PosFire[1] = i_Negocio[Incendios[i][pIDI]][nExteriorY];
				PosFire[2] = i_Negocio[Incendios[i][pIDI]][nExteriorZ];
				if(en_pos(playerid, 10.0, PosFire[0], PosFire[1], PosFire[2])) return i;
			}
		}
	}
	return -1;
}

funcion LIncendios(playerid)
{
    new IncendiosDialog[700], TempConvert[60], ConteoFire = -1;
    for(new i = 0; i < MAX_INCENDIOS; i++)
	{
        if(Incendios[i][pIDI] != 0)
		{
            if(ConteoFire != -1)
			{
                if(Incendios[i][pType] == 0)format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][pIDI]);
                else format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Negocio ID[%i]", i, Incendios[i][pIDI]);
            }
			else
			{
			    if(Incendios[i][pType] == 0) format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][pIDI]);
			    else format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Negocio ID[%i]", i, Incendios[i][pIDI]);
            }
            strcat(IncendiosDialog, TempConvert, sizeof(IncendiosDialog));
            ConteoFire++;
            sel_incendio[playerid][ConteoFire] = i;
        }
    }
    if(ConteoFire != -1)
	{
        ExPlayerDialog(playerid, D_Ibuscar, DIALOG_STYLE_LIST, "{D6E1EB}Incendios - Lista", IncendiosDialog, "Buscar", "Salir");
    }
	else
	{
        ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Incendios - Información", "{F0F0F0}No se encontrarón incendios.", "Aceptar", "");
    }
}

funcion ListaIncendios(playerid)
{
    new IncendiosDialog[700], TempConvert[60], ConteoFire = -1;
    for(new i = 0; i < MAX_INCENDIOS; i++)
	{
        if(Incendios[i][pIDI] != 0)
		{
            if(ConteoFire != -1)
			{
                if(Incendios[i][pType] == 0)format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][pIDI]);
                else format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Negocio ID[%i]", i, Incendios[i][pIDI]);
            }
			else
			{
			    if(Incendios[i][pType] == 0) format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][pIDI]);
			    else format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Negocio ID[%i]", i, Incendios[i][pIDI]);
            }
            strcat(IncendiosDialog, TempConvert, sizeof(IncendiosDialog));
            ConteoFire++;
            sel_incendio[playerid][ConteoFire] = i;
        }
    }
    if(ConteoFire != -1)
	{
        ExPlayerDialog(playerid, D_Ilista, DIALOG_STYLE_LIST, "{D6E1EB}Incendios - Lista", IncendiosDialog, "Destruir", "Salir");
    }
	else
	{
        ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Incendios - Información", "{F0F0F0}No se encontrarón incendios.", "Aceptar", "");
    }
}

funcion EstaEnFuego(playerid)
{
    for(new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if(Incendios[i][pIDI] != 0)
	    {
	        if(Incendios[i][pType] == 0)
	        {
	            if(en_pos(playerid, 1.5, i_Casa[Incendios[i][pIDI]][cExteriorX], i_Casa[Incendios[i][pIDI]][cExteriorY], i_Casa[Incendios[i][pIDI]][cExteriorZ]))
				{
	                _Sangre(playerid, -2);
	            }
	        }
	        else
	        {
	            if(en_pos(playerid, 1.5, i_Negocio[Incendios[i][pIDI]][nExteriorX], i_Negocio[Incendios[i][pIDI]][nExteriorY], i_Negocio[Incendios[i][pIDI]][nExteriorZ]))
				{
	                _Sangre(playerid, -2);
	            }
	        }
	    }
    }
}

funcion incendio_random()
{
	if(members_fd < 2) return 1;
	new a = random(4), location[MAX_ZONE_NAME], string[258];
	if(a == 0 || a == 1)
	{
		new casaid = random(totalcasas)-1;
		if(i_Casa[casaid][croiretnI] && i_Casa[casaid][c_Int] == 0)
		{
			Get2DZone(location, MAX_ZONE_NAME, i_Casa[casaid][cExteriorX], i_Casa[casaid][cExteriorY], i_Casa[casaid][cExteriorZ]);
			format(string, sizeof(string), "CENTRAL: se ha producido un incendio en la casa de %s, dirección [%i - %s].", i_Casa[casaid][cComprador], casaid, location);
			_MensajeRfac(5, C_COLORPOLICIA, string);
			CrearIncendioP(casaid, 0);
			printf("[Incendios]: La casa ID[%i] se incendió!", casaid);
			return 1;
		}
	}
	if(a == 2 || a == 3)
	{
		new negocioid = random(totalnegs)-1;
		if(i_Negocio[negocioid][nTipo] != 0)
		{
			Get2DZone(location, MAX_ZONE_NAME, i_Negocio[negocioid][nExteriorX], i_Negocio[negocioid][nExteriorY], i_Negocio[negocioid][nExteriorZ]);
			format(string, sizeof(string), "CENTRAL: se ha producido un incendio en el negocio de %s, dirección [%i - %s].", i_Negocio[negocioid][nDueno], negocioid, location);
			_MensajeRfac(5, C_COLORPOLICIA, string);
			CrearIncendioP(negocioid, 1);
			printf("[Incendios]: El negocio ID[%i] se incendió!", negocioid);
			return 1;
		}
	}
	return 0;
}

funcion CrearIncendioP(houseid, tipo)
{
	new a = FuegoSiguiente();
	if(a == -1) return 0;
	new intensidad = random(40)+10;
	for(new c = 0; c < MAX_INCENDIOS;c++)
	{
	    if(Incendios[c][pIDI] == houseid) return 0;
	}
	if(tipo == 0)
	{
		new string[70];
		format(string, sizeof(string), "{ff4000}Incendio\n{ffc100}Intensidad: {ffffff}%d", intensidad);
 		Incendios[a][pInfoIncendio] = CreateDynamic3DTextLabel(string, -1, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ] + 0.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	    Incendios[a][pType] = 0;
		Incendios[a][pIntensidad] = intensidad;
        Incendios[a][pIDI] = houseid;
        Incendios[a][pObject][14] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][13] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][12] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY] + 2, i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][11] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] + 2, i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][10] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] + 2, i_Casa[houseid][cExteriorY] + 2, i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][9] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY] + 2, i_Casa[houseid][cExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][8] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] + 2, i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][7] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][6] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY] - 2, i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][5] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] - 2, i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][4] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] - 2, i_Casa[houseid][cExteriorY] - 2, i_Casa[houseid][cExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][3] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX], i_Casa[houseid][cExteriorY] - 2, i_Casa[houseid][cExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][2] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] - 2, i_Casa[houseid][cExteriorY], i_Casa[houseid][cExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][1] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] + 2, i_Casa[houseid][cExteriorY] + 2, i_Casa[houseid][cExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][0] = CreateDynamicObject(18691, i_Casa[houseid][cExteriorX] - 2, i_Casa[houseid][cExteriorY] - 2, i_Casa[houseid][cExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        return 1;
	}
	if(tipo == 1)
	{
		new string[70];
		format(string, sizeof(string), "{ff4000}Incendio\n{ffc100}Intensidad: {ffffff}%d", intensidad);
 		Incendios[a][pInfoIncendio] = CreateDynamic3DTextLabel(string, -1, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ] + 0.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	    Incendios[a][pType] = 1;
        Incendios[a][pIntensidad] = intensidad;
		Incendios[a][pIDI] = houseid;
        Incendios[a][pObject][14] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][13] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][12] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY] + 2, i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][11] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] + 2, i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][10] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] + 2, i_Negocio[houseid][nExteriorY] + 2, i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][9] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY] + 2, i_Negocio[houseid][nExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][8] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] + 2, i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][7] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][6] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY] - 2, i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][5] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] - 2, i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][4] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] - 2, i_Negocio[houseid][nExteriorY] - 2, i_Negocio[houseid][nExteriorZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][3] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX], i_Negocio[houseid][nExteriorY] - 2, i_Negocio[houseid][nExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][2] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] - 2, i_Negocio[houseid][nExteriorY], i_Negocio[houseid][nExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][1] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] + 2, i_Negocio[houseid][nExteriorY] + 2, i_Negocio[houseid][nExteriorZ] + 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
        Incendios[a][pObject][0] = CreateDynamicObject(18691, i_Negocio[houseid][nExteriorX] - 2, i_Negocio[houseid][nExteriorY] - 2, i_Negocio[houseid][nExteriorZ] - 2, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		i_Negocio[houseid][EnLlamas] = 1;
		i_Negocio[houseid][nSeguro] = 0;
        return 1;
	}
	return 0;
}

//concesionarias
funcion bV_usado(veh)
{
	i_Usado[veh][uModeloVeh] = 0;
	i_Usado[veh][uPrecioVeh] = 0;
	i_Usado[veh][uSeguro] = 0;
	i_Usado[veh][uPaintJob] = 0;
	i_Usado[veh][uColor_1] = 0;
	i_Usado[veh][uColor_2] = 0;
	i_Usado[veh][uDanioSuperficie] = 0;
	i_Usado[veh][uDanioPuertas] = 0;
	i_Usado[veh][uDanioLuces] = 0;
	i_Usado[veh][uDanioRuedas] = 0;
	i_Usado[veh][uVida] = 0;
	i_Usado[veh][uModificaciones][0] = 0;
	i_Usado[veh][uModificaciones][1] = 0;
	i_Usado[veh][uModificaciones][2] = 0;
	i_Usado[veh][uModificaciones][3] = 0;
	i_Usado[veh][uModificaciones][4] = 0;
	i_Usado[veh][uModificaciones][5] = 0;
	i_Usado[veh][uModificaciones][6] = 0;
	i_Usado[veh][uModificaciones][7] = 0;
	i_Usado[veh][uModificaciones][8] = 0;
	i_Usado[veh][uModificaciones][9] = 0;
	i_Usado[veh][uModificaciones][10] = 0;
	i_Usado[veh][uModificaciones][11] = 0;
	i_Usado[veh][uModificaciones][12] = 0;
	i_Usado[veh][uModificaciones][13] = 0;
	i_Usado[veh][uModificaciones][14] = 0;
	i_Usado[veh][uGasolina] = 0;
	i_Usado[veh][uStereo] = 0;
	i_Usado[veh][uNeon] = 0;
}

funcion bV_nuevo(veh)
{
	i_Conce[veh][eModeloVeh] = 0;
	i_Conce[veh][ePrecioVeh] = 0;
	i_Conce[veh][eDisponibles] = 0;
}

stock GetPlayer2DZone(playerid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4] && z >= NombreZona[i][sz_Area][2] && z <= NombreZona[i][sz_Area][5]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock IsPlayerInZone(playerid, zone[]) {
    new TmpZone[MAX_ZONE_NAME];
    GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(strfind(TmpZone, zone, true) != -1) return 1;
    }
    return 0;
}

stock GetCar3DZone(vehicleid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4] && z >= NombreZona[i][sz_Area][2] && z <= NombreZona[i][sz_Area][5]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock _MapIcon(Float: x, Float: y, Float: z, tipo, distancia = 300)
{
	CreateDynamicMapIcon(x, y, z, tipo, 0, 0, 0, -1, distancia);
}

stock puerta_Pickup(p_id)
{
	DestroyDynamicPickup(i_Puerta[p_id][pModeloExt]);
	DestroyDynamicPickup(i_Puerta[p_id][pModeloInt]);
	DestroyDynamicMapIcon(i_Puerta[p_id][pModeloMap]);

	if (i_Puerta[p_id][pMapIcon] != 0)
		i_Puerta[p_id][pModeloMap] = _MapIcon(i_Puerta[p_id][pPos_X], i_Puerta[p_id][pPos_Y], i_Puerta[p_id][pPos_Z], i_Puerta[p_id][pMapIcon]);
	if (i_Puerta[p_id][pIcono] != 0)
	{
		i_Puerta[p_id][pModeloExt] = CreateDynamicPickup(i_Puerta[p_id][pIcono], 1, i_Puerta[p_id][pPos_X], i_Puerta[p_id][pPos_Y], i_Puerta[p_id][pPos_Z], i_Puerta[p_id][pPos_VW], i_Puerta[p_id][pPos_Int]);
		i_Puerta[p_id][pModeloInt] = CreateDynamicPickup(i_Puerta[p_id][pIcono], 1, i_Puerta[p_id][pInt_X], i_Puerta[p_id][pInt_Y], i_Puerta[p_id][pInt_Z], i_Puerta[p_id][pInt_VW], i_Puerta[p_id][pInt_Int]);
	}
	else
	{
		i_Puerta[p_id][pModeloExt] = CreateDynamicPickup(1239, 1, i_Puerta[p_id][pPos_X], i_Puerta[p_id][pPos_Y], i_Puerta[p_id][pPos_Z], i_Puerta[p_id][pPos_VW], i_Puerta[p_id][pPos_Int]);
		i_Puerta[p_id][pModeloInt] = CreateDynamicPickup(1239, 1, i_Puerta[p_id][pInt_X], i_Puerta[p_id][pInt_Y], i_Puerta[p_id][pInt_Z], i_Puerta[p_id][pInt_VW], i_Puerta[p_id][pInt_Int]);
	}
}

funcion puerta_2Pickup(p_id)
{
	DestroyDynamicPickup(i_Puerta[p_id][pModeloExt]);
	DestroyDynamicPickup(i_Puerta[p_id][pModeloInt]);
	DestroyDynamicMapIcon(i_Puerta[p_id][pModeloMap]);
	i_Puerta[p_id][pModeloExt] = CreateDynamicPickup(1239, 1, -2190.7974,165.9186,58.2604);
	i_Puerta[p_id][pModeloInt] = CreateDynamicPickup(1239, 1, -2190.7974,165.9186,58.2604);
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[256];
	for(new i_e = 0; i_e != MAX_EMPRESAS; i_e++)
	{
		if(pickupid == i_Empresa[i_e][eIcono])
		{
 			if (i_Empresa[i_e][eComprado] == 1) format(string, sizeof(string), "~n~~n~~y~%s - (%d) ~n~~w~Dueño: %s",
			i_Empresa[i_e][eNombre], i_e, i_Empresa[i_e][eDueno]);
			else format(string, sizeof(string), "~n~~n~~y~%s - (%d)~n~~g~En venta ~n~~w~Precio: ~g~%d~n~",
			i_Empresa[i_e][eNombre], i_e, i_Empresa[i_e][ePrecio]);
			textgame_player(playerid, _text(string), 3000, 3);
		}
	}
	for(new i_n = 0; i_n != MAX_NEGOCIOS; i_n++)
	{
		if(pickupid == i_Negocio[i_n][nIcono])
		{
 			if (i_Negocio[i_n][nComprado] == 0)
			{
				format(string, sizeof(string), "~n~~n~~w~%s ~n~~g~En venta ~n~~w~Precio: ~g~%d~n~~p~Usa /entrar",
				_tipoN(i_n), i_Negocio[i_n][nPrecio]);
				textgame_player(playerid, _text(string), 3000, 3);
			}
			else
			{
				format(string, sizeof(string), "~n~~n~%s ~n~~w~%s ~n~~w~Dueño: %s ~n~~w~%s - (%d)",
				 _estadoN(i_n,1), i_Negocio[i_n][nNombre], i_Negocio[i_n][nDueno], _tipoN(i_n), i_n);
				textgame_player(playerid, _text(string), 3000, 3);
			}
		}
	}
	for(new i_p = 1; i_p != MAX_PUERTAS; i_p++)
	{
		if(pickupid == i_Puerta[i_p][pModeloExt])
		{
		    if (i_Puerta[i_p][pTipo] == 0) //normal
		    {
 				format(string, sizeof(string), "~n~~n~n: %d~n~~w~%s", i_p, i_Puerta[i_p][pNombre]);
				textgame_player(playerid, _text(string), 3000, 3);
		    }
			else //propiedad
			{
 				if (i_Puerta[i_p][pComprado] == 0)
				{
					format(string, sizeof(string), "~n~~n~~w~%s ~n~~g~En venta ~n~~w~Precio: ~g~%d~n~~p~Usa /entrar",
					i_Puerta[i_p][pNombre], i_Puerta[i_p][pPrecio]);
					textgame_player(playerid, _text(string), 3000, 3);
				}
				else
				{
					format(string, sizeof(string), "~n~~n~%s~n~~w~Dueño: %s ~n~~w~%s - (%d)",
					i_Puerta[i_p][pNombre], i_Puerta[i_p][pDueno], _estadoP(i_p), i_p);
					textgame_player(playerid, _text(string), 3000, 3);
				}
			}
		}
		else if(pickupid == i_Puerta[i_p][pModeloInt])
		{
 			format(string, sizeof(string), "~n~~n~Salida n: %d~n~~w~%s", i_p, i_Puerta[i_p][pNombre]);
			textgame_player(playerid, _text(string), 3000, 3);
		}
	}
    return 1;
}

funcion _NegocioP(nid)
{
	DestroyDynamicPickup(i_Negocio[nid][nIcono]);
	if (i_Negocio[nid][nComprado] == 0) i_Negocio[nid][nIcono] = CreateDynamicPickup(1272, 1, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
	else i_Negocio[nid][nIcono] = CreateDynamicPickup(1273, 1, i_Negocio[nid][nExteriorX], i_Negocio[nid][nExteriorY], i_Negocio[nid][nExteriorZ]);
	return 1;
}

funcion _Negocio2P(nid)
{
	DestroyDynamicPickup(i_Negocio[nid][nIcono]);
	i_Negocio[nid][nIcono] = CreateDynamicPickup(1273, 1, -2190.7974,165.9186,58.2604);
	return 1;
}

stock _tipoN(nid)
{
	new
		name_tipo[32],
		tipo = i_Negocio[nid][nTipo]
	;
	switch (tipo)
	{
		case 1: name_tipo = "24-7";
		case 2: name_tipo = "Ropa";
		case 3: name_tipo = "Restaurante";
		case 4: name_tipo = "Cluckin bell";
		case 5: name_tipo = "Pizzeria";
		case 6: name_tipo = "Burger Shot";
		case 7: name_tipo = "Ammunation";
		case 8: name_tipo = "Peluquería";
		case 9: name_tipo = "Tienda Sexual";
		case 10: name_tipo = "Gasolinera";
		case 11: name_tipo = "Electrónica";
		case 12: name_tipo = "Bar";
		case 13: name_tipo = "Ferreteria";
		case 14: name_tipo = "Alhambra";
		case 15: name_tipo = "Strip club";
		case 16: name_tipo = "Club private";
		case 17: name_tipo = "Tienda empeño";
		case 18: name_tipo = "Joyería";
		case 19: name_tipo = "Cafetería";
		default: name_tipo = "no_tipo";
	}
	return name_tipo;
}

stock _estadoP(p_id)
{
	new string[50];
	if (!i_Puerta[p_id][pSeguro]) format(string, sizeof(string), "~r~Cerrado");
	else if (i_Puerta[p_id][pSeguro]) format(string, sizeof(string), "~b~Abierto");
	return string;
}

stock _estadoN(i_n, tipo)
{
	new string[50];
	if (tipo == 1)
	{
		if (!i_Negocio[i_n][nSeguro]) format(string, sizeof(string), "~r~Cerrado");
		else if (i_Negocio[i_n][nSeguro]) format(string, sizeof(string), "~b~Abierto");
	}
	else if (tipo == 2)
	{
		if (!i_Negocio[i_n][nSeguro]) format(string, sizeof(string), "{FF0000}Cerrada");
		else if (i_Negocio[i_n][nSeguro]) format(string, sizeof(string), "{00C200}Abierta");
	}
	return string;
}

//mensajes
new C_MESSAGES[6] =
{
	0xFF6347FF, // 0 - Error
	0xffffffff, // 1 - Mensaje color blanco
	0xD74E00FF, // 2 - Información
	0xb0b0b0FF, // 3 - Comando
	-1, // 4 - Elección.
	0x1EB032FF // 5 - Verde.
};

funcion _Mensaje(playerid, type, const optional[], const message[])
{
	switch (type)
	{
		case 0:{
			SendClientMessage(playerid, C_MESSAGES[type], "%s", message); // Error
		}
		case 1:{
			SendClientMessage(playerid, C_MESSAGES[type], "%s", message); // Mensaje color blanco
		}
		case 2:{
			SendClientMessage(playerid, C_MESSAGES[type], "[INFO] %s", message); // Información
		}
		case 3:{
			SendClientMessage(playerid, C_MESSAGES[type], "USO: %s", message); // CMD
		}
		case 4:{
			SendClientMessage(playerid, C_MESSAGES[type], "{%s}%s", optional, message); // Con color mensaje
		}
		case 5:{
			SendClientMessage(playerid, C_MESSAGES[type], "%s", message); // Color verde
		}
	}
	return 1;
}

stock colocar_estado(tipo = 0, playerid, const text[], color, tiempo = -1)
{
	if (usandoYo[playerid] != 0) return 1;
	switch (tipo)
	{
		case 1:
		{
			mensaje_bubble(playerid, text, color, 15.0);
			if (tiempo != -1) SetTimerEx("quitarestado", tiempo, false, "i", playerid);
		}
		case 2: quitarestado(playerid);
	}
	return 1;
}

funcion quitarestado(playerid)
{
	mensaje_bubble(playerid, "", 0xBFC0C2FF, 1.0, 1000, 1);
	mensaje_bubble(playerid, "", 0xBFC0C2FF, 1.0, 1000, 1);
}

stock mensaje_bubble(playerid, const text[], color, Float: distancia, tiempo = 999999, tipo = 0)
{
	SetPlayerChatBubble(playerid, text, color, distancia, tiempo);
	if (tipo == 1) contador_balas[playerid] = 0;
}

stock accion_rol(playerid, type, const text[], extra = 0)
{
	new MensajeAR[150];
	switch (type)
	{
		case 0:
		{
			if (extra == 1) format(MensajeAR, sizeof(MensajeAR), "%s %s", nombre_pj(playerid, 0), text);
			else format(MensajeAR, sizeof(MensajeAR), "* %s %s", nombre_pj(playerid, 0), text);
		} // 0 - /me (Acciones largas)
		case 1:
		{
			format(MensajeAR, sizeof(MensajeAR), "* %s %s", nombre_pj(playerid, 0), text);
			colocar_estado(1, playerid, MensajeAR, 0xC2A2DAFF, 3000);
			if (extra == 0)
			{
				format(MensajeAR, sizeof(MensajeAR), "> %s", text);
				SendClientMessage(playerid, AccionesColors[1], MensajeAR);
			}
		} // 1 - /ame (Acciones cortas)
		case 2: format(MensajeAR, sizeof(MensajeAR), "[%d] %s ", playerid, text); // 2 - /do (Entorno o Aclaración)
		case 3: format(MensajeAR, sizeof(MensajeAR), "%s grita: ¡%s!", nombre_pj(playerid, 0), text); // 3 - Gritar
		case 4: format(MensajeAR, sizeof(MensajeAR), "%s dice [voz baja]: %s", nombre_pj(playerid, 0), text); // 4 - Susurrar
		case 5: format(MensajeAR, sizeof(MensajeAR), "[Megafóno: [ID]:%d] %s o< %s]", playerid, nombre_pj(playerid, 0), text); // 5 - Megafóno
	}
	new Float: PosMensajeX, Float: PosMensajeY, Float: PosMensajeZ, MyWorrld = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, Float: PosMensajeX, Float: PosMensajeY, Float: PosMensajeZ);
	foreach(new i: Player)
	{
		if (IsPlayerConnected(i) && en_pos(i,AccionesRadios[type],Float: PosMensajeX,Float: PosMensajeY, Float: PosMensajeZ) && GetPlayerVirtualWorld(i) == MyWorrld && user[i][State] == 3)
		{
			if (type == 0) SendSplitMessage(i, AccionesColors[type], MensajeAR);
			else if (type == 1) return 1;
			else SendSplitMessage(i, AccionesColors[type], MensajeAR);
		}
	}
	return 1;
}

stock Get2DZone(zone[], len, Float: x, Float: y, Float: z)
{
	#pragma unused z
	for (new i = 0; i != sizeof(NombreZona); i++)
	{
		if (x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4])
		{
			return format(zone, len, NombreZona[i][sz_Nombre]);
		}
	}
	return format(zone, len, "Bullworth");
}


public OnPlayerEditObject(playerid, playerobject, objectid, EDIT_RESPONSE:response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		switch (user[playerid][EditandoM])
		{
			case 1: // casas
			{
				new ID = GetPVarInt(playerid, "ID_MUEBLEC"), i = DentroCasa[playerid];
				if(response == EDIT_RESPONSE_CANCEL)
				{
					if(objectid == OBJ_MuebleC[playerid][ID])
					{
						AjustarMueble_P(i, ID, i_Casa[i][cObjPosX][ID], i_Casa[i][cObjPosY][ID], i_Casa[i][cObjPosZ][ID]);
						AjustarMueble_R(i, ID, i_Casa[i][cObjRotX][ID], i_Casa[i][cObjRotY][ID], i_Casa[i][cObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						return 1;
					}
				}
				else if(response == EDIT_RESPONSE_FINAL)
				{
					if(objectid == OBJ_MuebleC[playerid][ID])
					{
						i_Casa[i][cObjPosX][ID] = fX;
						i_Casa[i][cObjPosY][ID] = fY;
						i_Casa[i][cObjPosZ][ID] = fZ;
						i_Casa[i][cObjRotX][ID] = fRotX;
						i_Casa[i][cObjRotY][ID] = fRotY;
						i_Casa[i][cObjRotZ][ID] = fRotZ;
						AjustarMueble_P(i, ID, i_Casa[i][cObjPosX][ID], i_Casa[i][cObjPosY][ID], i_Casa[i][cObjPosZ][ID]);
						AjustarMueble_R(i, ID, i_Casa[i][cObjRotX][ID], i_Casa[i][cObjRotY][ID], i_Casa[i][cObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						save_Casa(i, false, ID);
						return 1;
					}
				}
			}
			case 2: // negocios
			{
				new ID = GetPVarInt(playerid, "ID_MUEBLEN"), i = DentroNegocio[playerid];
				if(response == EDIT_RESPONSE_CANCEL)
				{
					if(objectid == OBJ_MuebleN[playerid][ID])
					{
						AjustarMueble_P(i,ID,i_Negocio[i][nObjPosX][ID],i_Negocio[i][nObjPosY][ID],i_Negocio[i][nObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Negocio[i][nObjRotX][ID],i_Negocio[i][nObjRotY][ID],i_Negocio[i][nObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						return 1;
					}
				}
				else if(response == EDIT_RESPONSE_FINAL)
				{
					if(objectid == OBJ_MuebleN[playerid][ID])
					{
						i_Negocio[i][nObjPosX][ID] = fX;
						i_Negocio[i][nObjPosY][ID] = fY;
						i_Negocio[i][nObjPosZ][ID] = fZ;
						i_Negocio[i][nObjRotX][ID] = fRotX;
						i_Negocio[i][nObjRotY][ID] = fRotY;
						i_Negocio[i][nObjRotZ][ID] = fRotZ;
						AjustarMueble_P(i,ID,i_Negocio[i][nObjPosX][ID],i_Negocio[i][nObjPosY][ID],i_Negocio[i][nObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Negocio[i][nObjRotX][ID],i_Negocio[i][nObjRotY][ID],i_Negocio[i][nObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						save_Negocio(i, false, ID);
						return 1;
					}
				}
			}
			case 3: // garajes
			{

				new ID = GetPVarInt(playerid, "ID_MUEBLEG"), i = DentroGarage[playerid];
				if(response == EDIT_RESPONSE_CANCEL)
				{
					if(objectid == OBJ_MuebleG[playerid][ID])
					{
						AjustarMueble_P(i,ID,i_Garaje[i][gObjPosX][ID],i_Garaje[i][gObjPosY][ID],i_Garaje[i][gObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Garaje[i][gObjRotX][ID],i_Garaje[i][gObjRotY][ID],i_Garaje[i][gObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						return 1;
					}
				}
				else if(response == EDIT_RESPONSE_FINAL)
				{
					if(objectid == OBJ_MuebleG[playerid][ID])
					{
						i_Garaje[i][gObjPosX][ID] = fX;
						i_Garaje[i][gObjPosY][ID] = fY;
						i_Garaje[i][gObjPosZ][ID] = fZ;
						i_Garaje[i][gObjRotX][ID] = fRotX;
						i_Garaje[i][gObjRotY][ID] = fRotY;
						i_Garaje[i][gObjRotZ][ID] = fRotZ;
						AjustarMueble_P(i,ID,i_Garaje[i][gObjPosX][ID],i_Garaje[i][gObjPosY][ID],i_Garaje[i][gObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Garaje[i][gObjRotX][ID],i_Garaje[i][gObjRotY][ID],i_Garaje[i][gObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						save_Garaje(i, false, ID);
						return 1;
					}
				}
			}
			case 4: // empresas
			{
		 		new ID = GetPVarInt(playerid, "ID_MUEBLEE"), i = DentroEmpresa[playerid];
		 		if(response == EDIT_RESPONSE_CANCEL)
				{
					if(objectid == OBJ_MuebleE[playerid][ID])
					{
				    	AjustarMueble_P(i,ID,i_Empresa[i][eObjPosX][ID],i_Empresa[i][eObjPosY][ID],i_Empresa[i][eObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Empresa[i][eObjRotX][ID],i_Empresa[i][eObjRotY][ID],i_Empresa[i][eObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
						return 1;
					}
				}
			    else if(response == EDIT_RESPONSE_FINAL)
				{
					if(objectid == OBJ_MuebleE[playerid][ID])
					{
					    i_Empresa[i][eObjPosX][ID] = fX;
					    i_Empresa[i][eObjPosY][ID] = fY;
					    i_Empresa[i][eObjPosZ][ID] = fZ;
					    i_Empresa[i][eObjRotX][ID] = fRotX;
					    i_Empresa[i][eObjRotY][ID] = fRotY;
					    i_Empresa[i][eObjRotZ][ID] = fRotZ;
				    	AjustarMueble_P(i,ID,i_Empresa[i][eObjPosX][ID],i_Empresa[i][eObjPosY][ID],i_Empresa[i][eObjPosZ][ID]);
						AjustarMueble_R(i,ID,i_Empresa[i][eObjRotX][ID],i_Empresa[i][eObjRotY][ID],i_Empresa[i][eObjRotZ][ID]);
						user[playerid][EditandoM] = 0;
					    save_Empresa(i, false, -1, ID);
						return 1;
					}
				}
			}
		}
	}
	return 1;
}

funcion AjustarMueble_P(h, index, Float:x, Float:y, Float:z)
{
	foreach(new i: Player)
	{
		if (CasaActual[i] == h) SetPlayerObjectPos(i, OBJ_MuebleC[i][index], x, y, z);
		else if (NegocioActual[i] == h) SetPlayerObjectPos(i, OBJ_MuebleN[i][index], x, y, z);
		else if (GarageActual[i] == h) SetPlayerObjectPos(i, OBJ_MuebleG[i][index], x, y, z);
		else if (EmpresaActual[i] == h) SetPlayerObjectPos(i, OBJ_MuebleE[i][index], x, y, z);
	}
	return 1;
}

funcion AjustarMueble_R(h, index, Float:x, Float:y, Float:z)
{
	foreach(new i: Player)
	{
		if (CasaActual[i] == h) SetPlayerObjectRot(i, OBJ_MuebleC[i][index], x, y, z);
		else if (NegocioActual[i] == h) SetPlayerObjectRot(i, OBJ_MuebleN[i][index], x, y, z);
		else if (GarageActual[i] == h) SetPlayerObjectRot(i, OBJ_MuebleG[i][index], x, y, z);
		else if (EmpresaActual[i] == h) SetPlayerObjectRot(i, OBJ_MuebleE[i][index], x, y, z);
	}
	return 1;
}

funcion DestruirMuebleCasa(h, index)
{
	foreach(new i: Player)
		if(CasaActual[i] == h) DestroyPlayerObject(i, OBJ_MuebleC[i][index]);
	return 1;
}

funcion DestruirMuebleNegocio(n, index)
{
	foreach(new i: Player)
		if(NegocioActual[i] == n) DestroyPlayerObject(i, OBJ_MuebleN[i][index]);
	return 1;
}

funcion DestruirMuebleGarage(n, index)
{
	foreach(new i: Player)
		if(GarageActual[i] == n) DestroyPlayerObject(i, OBJ_MuebleG[i][index]);
	return 1;
}
funcion DestruirMuebleEmpresa(n, index)
{
	foreach(new i: Player)
		if(EmpresaActual[i] == n) DestroyPlayerObject(i, OBJ_MuebleE[i][index]);
	return 1;
}

GuardarObjetosAdmin()
{
	new szFileStr[1024],
	File: fHandle = fopen("ObjetosAdmin.rp", io_write);
	for (new objeto; objeto < MAX_POBJETOS; objeto++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%f|%f|%f|%f|%f|%f|\r\n",
		cObjeto[objeto][pOID],
		cObjeto[objeto][pVw],
		cObjeto[objeto][pInt],
		cObjeto[objeto][pPosX],
		cObjeto[objeto][pPosY],
		cObjeto[objeto][pPosZ],
		cObjeto[objeto][pPosRX],
		cObjeto[objeto][pPosRY],
		cObjeto[objeto][pPosRZ]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

GCMD:graffitos(playerid)
{
	if (user[playerid][jAdmin] < 3) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		pro[500],
		pro2[3024],
		tgraffitis = 0
	;
	for(new a = 0; a < MAX_GRAFFITIS; a++)
	{
		if(i_graffito[a][gr_PosX] != 0.0)
		{
			format(pro, sizeof(pro), "[ID: %d] - Mensaje: %.20s\n", a, i_graffito[a][gr_mensaje]);
			strcat(pro2, pro);
			Formato(pro, "e_graffiti%d", tgraffitis);
			SetPVarInt(playerid, pro, a);
			tgraffitis++;
		}
	}
	if(tgraffitis != 0) ExPlayerDialog(playerid, D_graffitis, DIALOG_STYLE_LIST, "Graffitis", pro2, ">>", "Cerrar");
	else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Graffitis", "No hay ningún graffiti creado.", "Cerrar", "");
	SetPVarInt(playerid, "z_graffs", 1);
	return 1;
}

GCMD:vergraffitis(playerid)
{
	if (user[playerid][jAdmin] < 1) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new
		pro[500],
		pro2[3024],
		tgraffitis = 0
	;
	for(new a = 0; a < MAX_GRAFFITIS; a++)
	{
		if(i_graffito[a][gr_tiempohacer])
		{
			format(pro, sizeof(pro), "[ID: %d] - Mensaje: %.20s - Por: %s hace %s\n", a, i_graffito[a][gr_mensaje], i_graffito[a][gr_creador], Segundos_tiempo(i_graffito[a][gr_tiempohacer]));
			strcat(pro2, pro);
			Formato(pro, "e_graffiti%d", tgraffitis);
			SetPVarInt(playerid, pro, a);
			tgraffitis++;
		}
	}
	if(tgraffitis != 0) ExPlayerDialog(playerid, D_graffitis, DIALOG_STYLE_LIST, "Graffitis", pro2, ">>", "Cerrar");
	else ExPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Graffitis", "No hay ningún graffiti creado.", "Cerrar", "");
	SetPVarInt(playerid, "z_graffs", 1);
	return 1;
}

GCMD:graffiti(playerid)
{
	new faccion = user[playerid][jMiembroFam];
	if (faccion == 0 && user[playerid][jGraffito] != 1) return _Mensaje(playerid, 0, "180", "No perteneces a una facción.");
	if (i_Familia[faccion][fTipo] != 1 && user[playerid][jGraffito] != 1) return _Mensaje(playerid, 0, "180", "No perteneces a una pandilla.");
	if (user[playerid][jm_Derecha] != 71 && user[playerid][jm_Derecha] != 36) return _Mensaje(playerid, 0, "0", "No tienes un Spray en tu mano derecha.");

	ExPlayerDialog(playerid, D_Graffiti, DIALOG_STYLE_LIST, "{D6E1EB}Menú principal", "Elija una imagen de Graffiti\n¿Quieres un texto personalizado?\nElija una fuente (para texto personalizado)\nTrazo (para texto personalizado)", "Seleccionar", "<<");
	return 1;
}

GCMD:creargraffito(playerid,  const params[])
{
	if (user[playerid][jAdmin] < 4) return _Mensaje(playerid, 0, "0", "Usted no tiene acceso a este comando.");
	new objeto = -1;
	for(new a = 0; a < MAX_GRAFFITIS;a++)
	{
		if(i_graffito[a][gr_PosX] == 0.0)
		{
			objeto = a;
			break;
		}
	}
	if(objeto == -1) return _Mensaje(playerid, 4, "b00000", "Se alcanzó el límite de graffitis.");
	GetPlayerPos(playerid, i_graffito[objeto][gr_PosX], i_graffito[objeto][gr_PosY], i_graffito[objeto][gr_PosZ]);
	g_GraffitiObject[objeto]  = CreateDynamicObject(18666, i_graffito[objeto][gr_PosX], i_graffito[objeto][gr_PosY], i_graffito[objeto][gr_PosZ], 0.0, 0.0, 0.0, -1, 0, -1, 6000.0);
	EditDynamicObject(playerid, g_GraffitiObject[objeto]);
	user[playerid][pEditingMode] = 13;
	return 1;
}
GCMD:ropaescuela(playerid)
{
	if (!en_pos(playerid, 3.0, 7639.6514, 13933.5459, 1001.0056)) return _Mensaje(playerid, 0, "0", "No estás en la tienda del colegio.");
	if (user[playerid][jEdad] > 20) return _Mensaje(playerid,-1, "b00000", "Ya eres mayor.");

	if (user[playerid][jSexo] == 1) menu_selection(playerid, SkinsAdolescenteH, "Ropa escolar masculina");
	else if(user[playerid][jSexo] == 2) menu_selection(playerid, SkinsAdolescenteF, "Ropa escolar femenina");
	return 1;
}
GCMD:ropaescuela2(playerid)
{
	if (!en_pos(playerid, 3.0, 7639.6514, 13933.5459, 1001.0056)) return _Mensaje(playerid, 0, "0", "No estás en la tienda del colegio.");
	if (user[playerid][jEdad] > 20) return _Mensaje(playerid, 0, "b00000", "Ya eres mayor.");
	else if(user[playerid][jSexo] == 2) return _Mensaje(playerid, 0, "b00000", "No hay más ropa femenina.");

	if (user[playerid][jSexo] == 1) menu_selection(playerid, SkinsAdolescenteH2, "Ropa escolar masculina 2");
	return 1;
}
GCMD:tomarbus(playerid)
{
	if (!en_paradabus(playerid)) return _Mensaje(playerid, 0, "0", "No estás en una parada de bus.");

	if (en_paradabus(playerid))
	set_pos(playerid, 8562.8770, 14168.0576, 6.3061, 0.4679, 0, 0);
	ShowPlayerFooter(playerid, "Has viajado en el bus hasta la academia.");

	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
{
//	new listitem = user[playerid][pSelectedItem];
	switch (user[playerid][pEditingMode])
	{

	    case 13: // cmd_creargraffito
	    {
			for (new objeto = 0; objeto < MAX_GRAFFITIS; objeto++)
			{
	  			if (objectid == g_GraffitiObject[objeto])
	  			{
	         		if(response == EDIT_RESPONSE_FINAL)
		 			{
						i_graffito[objeto][gr_PosX] = x;
						i_graffito[objeto][gr_PosY] = y;
						i_graffito[objeto][gr_PosZ] = z;
						i_graffito[objeto][gr_RotX] = rx;
						i_graffito[objeto][gr_RotY] = ry;
						i_graffito[objeto][gr_RotZ] = rz;
						SetDynamicObjectPos(g_GraffitiObject[objeto], x, y, z);
				    	SetDynamicObjectRot(g_GraffitiObject[objeto], rx, ry, rz);
			    		save_graffito(objeto);
			    		user[playerid][pEditingMode] = 0;
			    		Mensaje_(playerid, -1, "Creaste un graffito.");
		    		}
		    		else if (response == EDIT_RESPONSE_CANCEL)
					{
						i_graffito[objeto][gr_PosX] = x;
						i_graffito[objeto][gr_PosY] = y;
						i_graffito[objeto][gr_PosZ] = z;
						i_graffito[objeto][gr_RotX] = rx;
						i_graffito[objeto][gr_RotY] = ry;
						i_graffito[objeto][gr_RotZ] = rz;
						SetDynamicObjectPos(g_GraffitiObject[objeto], x, y, z);
				    	SetDynamicObjectRot(g_GraffitiObject[objeto], rx, ry, rz);
			    		save_graffito(objeto);
			    		user[playerid][pEditingMode] = 0;
			    		Mensaje_(playerid, -1, "Creaste un graffito.");
					}
				}
			}
	    }
	    case 17: // cmd_equiposonido
	    {
	  		if (objectid == i_boox[playerid][BB_obj])
	  		{
	  		    new objeto = i_boox[playerid][BB_obj];
	         	if(response == EDIT_RESPONSE_FINAL)
		 		{
					i_boox[playerid][BB_x] = x;
					i_boox[playerid][BB_y] = y;
					i_boox[playerid][BB_z] = z;
					SetDynamicObjectPos(objeto, x, y, z);
					SetDynamicObjectRot(objeto, rx, ry, rz);
			    	user[playerid][pEditingMode] = 0;
			    	boombox[playerid] = 0;

			    	new string[128];

					format(string, sizeof(string), "{90C3D4}Estéreo [%d]{FFFFFF}\n(/encender)", playerid);
					i_boox[playerid][BB_label] = CreateDynamic3DTextLabel(string, -1, x, y, z + 0.3, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
					i_boox[playerid][BB_area] = CreateDynamicSphere(x, y, z, 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		    	}
		    	else if (response == EDIT_RESPONSE_CANCEL)
				{
					DestroyDynamicObject(i_boox[playerid][BB_obj]);
					i_boox[playerid][BB_obj] = 0;
			    	user[playerid][pEditingMode] = 0;
			    	boombox[playerid] = 0;
			    	Mensaje_(playerid, 0xFF6347AA, "Cancelaste la colocación del estéreo.");
				}
			}
	    }
	    case 4: // cmd_Crearobjetoadmin
	    {
			for (new objeto = 0; objeto < MAX_POBJETOS; objeto++)
			{
	  			if (objectid == cObjeto[objeto][pObjeto])
	  			{
	         		if(response == EDIT_RESPONSE_FINAL)
		 			{
						cObjeto[objeto][pPosX] = x;
						cObjeto[objeto][pPosY] = y;
						cObjeto[objeto][pPosZ] = z;
						cObjeto[objeto][pPosRX] = rx;
						cObjeto[objeto][pPosRY] = ry;
						cObjeto[objeto][pPosRZ] = rz;
						SetDynamicObjectPos(cObjeto[objeto][pObjeto], x, y, z);
				    	SetDynamicObjectRot(cObjeto[objeto][pObjeto], rx, ry, rz);
			    		GuardarObjetosAdmin();
			    		user[playerid][pEditingMode] = 0;
			    		Mensaje_(playerid, -1, "Creaste un objeto admin.");
		    		}
		    		else if (response == EDIT_RESPONSE_CANCEL)
					{
						cObjeto[objeto][pPosX] = x;
						cObjeto[objeto][pPosY] = y;
						cObjeto[objeto][pPosZ] = z;
						cObjeto[objeto][pPosRX] = rx;
						cObjeto[objeto][pPosRY] = ry;
						cObjeto[objeto][pPosRZ] = rz;
						SetDynamicObjectPos(cObjeto[objeto][pObjeto], x, y, z);
				    	SetDynamicObjectRot(cObjeto[objeto][pObjeto], rx, ry, rz);
			    		GuardarObjetosAdmin();
			    		user[playerid][pEditingMode] = 0;
	                    Mensaje_(playerid, -1, "Creaste un objeto admin.");
					}
				}
			}
	    }
		case 5: // cmd_bar
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				if(user[playerid][pEditingMode] != 0) user[playerid][pEditingMode] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				if(!en_pos(playerid, 10, x, y, z)) { user[playerid][pEditingMode] = 0; _Mensaje(playerid, 0, "0", "No te encuentras cerca del objeto de trafico."); return 1; }
				for (new bar = 0; bar < MAX_BARRERAS; bar++)
				{
	            	if (objectid == InfoBar[bar][bObjeto])
					{
	            		accion_rol(playerid, 1, "colocó un objeto de trafico cerca de él.", 1);
						user[playerid][pEditingMode] = 0;
						InfoBar[bar][bPosX] = x;
						InfoBar[bar][bPosY] = y;
						InfoBar[bar][bPosZ] = z;
						InfoBar[bar][bPosRX] = rx;
						InfoBar[bar][bPosRY] = ry;
						InfoBar[bar][bPosRZ] = rz;
						SetDynamicObjectPos(InfoBar[bar][bObjeto], x, y, z);
	            	    SetDynamicObjectRot(InfoBar[bar][bObjeto], rx, ry, rz);
	            	    return 1;
					}
				}
				user[playerid][pEditingMode] = 0;
			}
		}
		case 6: // cmd_creartelefono
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				if(user[playerid][pEditingMode] != 0) user[playerid][pEditingMode] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				if(!en_pos(playerid, 10, x, y, z)) { user[playerid][pEditingMode] = 0; _Mensaje(playerid, 0, "0", "No te encuentras cerca del objeto de trafico."); return 1; }
				for (new tpid = 0; tpid < MAX_TELEFONOS; tpid++)
				{
            		if (objectid == i_PPhone[tpid][ppObject])
					{
						user[playerid][pEditingMode] = 0;
						i_PPhone[tpid][pp_Pos][0] = x;
						i_PPhone[tpid][pp_Pos][1] = y;
						i_PPhone[tpid][pp_Pos][2] = z;
	        			i_PPhone[tpid][pp_Pos][3] = rx;
						i_PPhone[tpid][pp_Pos][4] = ry;
	        			i_PPhone[tpid][pp_Pos][5] = rz;
						SetDynamicObjectPos(i_PPhone[tpid][ppObject], x, y, z);
	            	    SetDynamicObjectRot(i_PPhone[tpid][ppObject], rx, ry, rz);
	            	    _Mensaje(playerid, 1, "0", "Creaste correctamente un teléfono público.");
	            	    i_PPhone[tpid][ppLabel] = CreateDynamic3DTextLabel("Teléfono público\nUse {90C3D4}/publico{FFFFFF}", 0xFFFFFFFF, i_PPhone[tpid][pp_Pos][0], i_PPhone[tpid][pp_Pos][1], i_PPhone[tpid][pp_Pos][2] + 0.4, 8.0);
	            	    save_phones();
            	    	return 1;
					}
				}
			}
		}
		default: user[playerid][pEditingMode] = 0;
	}
    return 1;
}

//garajes
stock _EspacioG(gid)
{
	new string[24];
	if(!i_Garaje[gid][gTipo]) format(string, sizeof(string), "Ninguno");
	else if(i_Garaje[gid][gTipo] == 1) format(string, sizeof(string), "Pequeño");
	else if(i_Garaje[gid][gTipo] == 2) format(string, sizeof(string), "Mediano");
	else if(i_Garaje[gid][gTipo] == 3) format(string, sizeof(string), "Grande");
	return string;
}

stock _EstadoG(gid)
{
	new string[24];
	if (!i_Garaje[gid][gSeguro]) format(string, sizeof(string), "~r~Cerrado");
	else if (i_Garaje[gid][gSeguro]) format(string, sizeof(string), "~b~Abierto");
	return string;
}

//casas
stock _EstadoC(cid, tipo)
{
	new string[24];
	if (tipo == 1)
	{
		if (!i_Casa[cid][cEstado]) format(string, sizeof(string), "~r~Cerrado");
		else if (i_Casa[cid][cEstado]) format(string, sizeof(string), "~b~Abierto");
	}
	else if (tipo == 2)
	{
		if (!i_Casa[cid][cEstado]) format(string, sizeof(string), "{FF0000}Cerrada");
		else if (i_Casa[cid][cEstado]) format(string, sizeof(string), "{00C200}Abierta");
	}
	return string;
}

stock _EspacioC(casaid)
{
	new string[24];
	switch (i_Casa[casaid][cEspacio])
	{
	    case 1: format(string, sizeof(string), "Habitación");
	    case 2: format(string, sizeof(string), "Pequeño");
	    case 3: format(string, sizeof(string), "Mediano");
	    case 4: format(string, sizeof(string), "Grande");
	    default: format(string, sizeof(string), "Custom");
	}
	return string;
}

//> skins con ranuras
funcion change_skin_ex(playerid, skinid, slot)
{
	switch(user[playerid][jSexo])
	{
		case 1: SetPlayerSkin(playerid, 154);
		case 2: SetPlayerSkin(playerid, 138);
	}
	SetTimerEx("CambiarEx", 3000, false, "ii", playerid, skinid);
	user[playerid][jRopaArmario][slot] = skinid;
	user[playerid][jRopa] = skinid;
	textgame_player(playerid, "~p~Cambiando ropa...", 3500, 3);
	CongelarEx(playerid, 3);
	return 1;
}

funcion CambiarEx(playerid, skinid)
{
	SetPlayerSkin(playerid, skinid);
	return 1;
}

stock CongelarEx(playerid, segundos = 0)
{
	if(!segundos) return TogglePlayerControllable(playerid, false);
	else if(segundos)
	{
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Descongelar", segundos * 1000, false, "i", playerid);
	}
	return 1;
}
funcion Descongelar(playerid) return TogglePlayerControllable(playerid, true);

funcion ElegirRopa(playerid, skin)
{
	new
		Str[500],
		Ropa[MAX_ROPA][20],
		ver_stas[128],
		ropita
	;
	if(user[playerid][jPremium] == 0) ropita = 4;
	else if(user[playerid][jPremium] == 1) ropita = 6;
	else if(user[playerid][jPremium] == 2) ropita = MAX_ROPA;
	Loop(i, ropita, 0)
	{
		if(!user[playerid][jRopaArmario][i])
		{
			Ropa[i] = "Nada";
		}
		else
		{
			new id_skin = user[playerid][jRopaArmario][i];
			if (id_skin >= 25000) id_skin-=24689;
			format(Ropa[i], 20, "%d", id_skin);
		}
		format(ver_stas, sizeof(ver_stas), "Ranura %d : (%s)\n", i, Ropa[i]);
		strins(Str, ver_stas, strlen(Str));
	}
	ExPlayerDialog(playerid, D_ELEGIRROPA, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona una ranura:", Str, ">>", "");
	SetPVarInt(playerid, "ROPA_SELECCIONADA", skin);
	return 1;
}

// strmatch
stock strmatch(const String1[], const String2[])
{
	if((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
	{
		return true;
	}
	else
	{
		return false;
	}
}

funcion IsPlayerConnectedEx(const playerid)
{
	if(IsPlayerConnected(playerid) && JugadorEnSeccion {playerid} == 1) return 1;
	return 0;
}

//sistema de peajes
funcion CargarPeajes()
{
	//FARO LS izquierda
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 53.86662300;
	i_Peaje[MAX_PEAJE][pos_Y] = -1526.9995120;
	i_Peaje[MAX_PEAJE][pos_Z] = 4.77926100;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -89.38135874;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -97.81226081;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 53.86662300;
	i_Peaje[MAX_PEAJE][pos_Yini] = -1526.99951200;
	i_Peaje[MAX_PEAJE][pos_Zini] = 4.77926100;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -97.81226081;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 60.8335;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -1524.7312;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 4.9415;

	//FARO LS derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 52.44144100;
	i_Peaje[MAX_PEAJE][pos_Y] = -1536.91735800;
	i_Peaje[MAX_PEAJE][pos_Z] = 4.86119400;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.24079544;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 82.18770174;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 52.44144100;
	i_Peaje[MAX_PEAJE][pos_Yini] = -1536.91735800;
	i_Peaje[MAX_PEAJE][pos_Zini] = 4.86119400;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 82.18770174;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 45.1170;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -1538.8495;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 5.1872;

	//TUNEL SF Derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -1759.976928;
	i_Peaje[MAX_PEAJE][pos_Y] = -658.441650;
	i_Peaje[MAX_PEAJE][pos_Z] = 20.727149;
	i_Peaje[MAX_PEAJE][pos_RotX] = 4.380000;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.020019;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -182.119384;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -1759.752441;
	i_Peaje[MAX_PEAJE][pos_Yini] = -658.699645;
	i_Peaje[MAX_PEAJE][pos_Zini] = 17.657993;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 4.000000;
	i_Peaje[MAX_PEAJE][pos_RotYini] = -0.399999;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -179.700042;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][anim_tipo] = 1;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -1756.5504;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -664.8318;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 21.5154;

	//TUNEL SF Izquierda
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -1761.377075;
	i_Peaje[MAX_PEAJE][pos_Y] = -658.441650;
	i_Peaje[MAX_PEAJE][pos_Z] = 20.727149;
	i_Peaje[MAX_PEAJE][pos_RotX] = -5.619999;
	i_Peaje[MAX_PEAJE][pos_RotY] = -91.120018;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -360.819366;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -1761.982055;
	i_Peaje[MAX_PEAJE][pos_Yini] = -658.628234;
	i_Peaje[MAX_PEAJE][pos_Zini] = 17.653646;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 4.000000;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 2.299999;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -179.700042;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][anim_tipo] = 1;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -1765.4451;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -652.9922;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 19.9730;

	//TUNEL SF-LS Izquierda
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 5.8720703125;
	i_Peaje[MAX_PEAJE][pos_Y] = -1318.119140625;
	i_Peaje[MAX_PEAJE][pos_Z] = 11.241556167603;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 270;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 307.99633789063;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 5.8720703125;
	i_Peaje[MAX_PEAJE][pos_Yini] = -1318.119140625;
	i_Peaje[MAX_PEAJE][pos_Zini] = 11.241556167603;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 358;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 307.99914550781;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 9.0634;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -1311.3982;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 11.8607;

	//TUNEL SF-LS Derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 23.958234;
	i_Peaje[MAX_PEAJE][pos_Y] = -1339.254516;
	i_Peaje[MAX_PEAJE][pos_Z] = 9.898574;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 307;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 23.974609375;
	i_Peaje[MAX_PEAJE][pos_Yini] = -1339.2861328125;
	i_Peaje[MAX_PEAJE][pos_Zini] = 9.8272972106934;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 307;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 19.7701;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -1347.0822;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 10.0829;

	//PEAJE LS-LV izquierda
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 1632.22034;
	i_Peaje[MAX_PEAJE][pos_Y] = 9.06229;
	i_Peaje[MAX_PEAJE][pos_Z] = 36.48134;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 24.90000;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 1632.22034;
	i_Peaje[MAX_PEAJE][pos_Yini] = 9.06229;
	i_Peaje[MAX_PEAJE][pos_Zini] = 36.48134;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 45.0000;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 24.90000;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 1637.9567;
	i_Peaje[MAX_PEAJE][pos_cmdY] = 4.5416;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 36.2196;

	//PEAJE LS-LV derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 1629.57532;
	i_Peaje[MAX_PEAJE][pos_Y] = -5.33245;
	i_Peaje[MAX_PEAJE][pos_Z] = 36.48130;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 204.7800;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 1629.57532;
	i_Peaje[MAX_PEAJE][pos_Yini] = -5.33245;
	i_Peaje[MAX_PEAJE][pos_Zini] = 36.48130;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 45.0000;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 204.7800;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 1623.7435;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -0.8518;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 36.2196;

	//SF-PUEBLOS derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -2673.25024;
	i_Peaje[MAX_PEAJE][pos_Y] = 1317.03650;
	i_Peaje[MAX_PEAJE][pos_Z] = 55.18340;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 0;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -2673.25024;
	i_Peaje[MAX_PEAJE][pos_Yini] = 1317.03650;
	i_Peaje[MAX_PEAJE][pos_Zini] = 55.18340;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 0;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -2669.8359;
	i_Peaje[MAX_PEAJE][pos_cmdY] = 1312.0547;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 55.1556;

	//SF-PUEBLOS izquierda
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -2689.80859;
	i_Peaje[MAX_PEAJE][pos_Y] = 1312.36719;
	i_Peaje[MAX_PEAJE][pos_Z] = 55.18340;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 0;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -2689.80859;
	i_Peaje[MAX_PEAJE][pos_Yini] = 1312.36719;
	i_Peaje[MAX_PEAJE][pos_Zini] = 55.18340;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 0;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -2692.9272;
	i_Peaje[MAX_PEAJE][pos_cmdY] = 1319.1349;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 55.1556;

	//LV-LS derecha 1
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 2877.50781;
	i_Peaje[MAX_PEAJE][pos_Y] = -654.80859;
	i_Peaje[MAX_PEAJE][pos_Z] = 10.50890;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 0;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 2877.50781;
	i_Peaje[MAX_PEAJE][pos_Yini] = -654.80859;
	i_Peaje[MAX_PEAJE][pos_Zini] = 10.50890;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 0;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 2881.2529;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -646.5826;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 10.6061;

	//LV-LS derecha 2
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 2875.93140;
	i_Peaje[MAX_PEAJE][pos_Y] = -654.79291;
	i_Peaje[MAX_PEAJE][pos_Z] = 10.50886;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -1.50000;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 2875.93140;
	i_Peaje[MAX_PEAJE][pos_Yini] = -654.79291;
	i_Peaje[MAX_PEAJE][pos_Zini] = 10.50886;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -1.50000;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 2872.6917;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -647.1245;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 10.6061;

	//LV-LS izquierda 1
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 2894.28784;
	i_Peaje[MAX_PEAJE][pos_Y] = -679.96320;
	i_Peaje[MAX_PEAJE][pos_Z] = 10.64812;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -0.66000;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 2894.28784;
	i_Peaje[MAX_PEAJE][pos_Yini] = -679.96320;
	i_Peaje[MAX_PEAJE][pos_Zini] = 10.64812;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -0.66000;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 2890.5754;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -686.7820;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 10.5771;

	//LV-LS izquierda 2
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = 2895.38989;
	i_Peaje[MAX_PEAJE][pos_Y] = -680.09863;
	i_Peaje[MAX_PEAJE][pos_Z] = 10.64812;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = -0.42000;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = 2895.38989;
	i_Peaje[MAX_PEAJE][pos_Yini] = -680.09863;
	i_Peaje[MAX_PEAJE][pos_Zini] = 10.64812;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = -0.42000;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = 2898.9829;
	i_Peaje[MAX_PEAJE][pos_cmdY] = -687.3150;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 10.5771;

	//FORTCARSON derecha
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -496.19638;
	i_Peaje[MAX_PEAJE][pos_Y] = 597.51019;
	i_Peaje[MAX_PEAJE][pos_Z] = 16.50570;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = 90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 72.60002;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -496.19638;
	i_Peaje[MAX_PEAJE][pos_Yini] = 597.51019;
	i_Peaje[MAX_PEAJE][pos_Zini] = 16.50570;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 72.60002;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -490.0045;
	i_Peaje[MAX_PEAJE][pos_cmdY] = 600.5510;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 16.7043;

	//FORTCARSON izquierda
	MAX_PEAJE++;
	i_Peaje[MAX_PEAJE][p_modelid] = 968;
	i_Peaje[MAX_PEAJE][pos_X] = -491.96677;
	i_Peaje[MAX_PEAJE][pos_Y] = 586.22473;
	i_Peaje[MAX_PEAJE][pos_Z] = 16.50573;
	i_Peaje[MAX_PEAJE][pos_RotX] = 0;
	i_Peaje[MAX_PEAJE][pos_RotY] = -90.00000;
	i_Peaje[MAX_PEAJE][pos_RotZ] = 69.00001;
	i_Peaje[MAX_PEAJE][p_objectid] = CreateDynamicObject(i_Peaje[MAX_PEAJE][p_modelid], i_Peaje[MAX_PEAJE][pos_X], i_Peaje[MAX_PEAJE][pos_Y], i_Peaje[MAX_PEAJE][pos_Z], i_Peaje[MAX_PEAJE][pos_RotX], i_Peaje[MAX_PEAJE][pos_RotY], i_Peaje[MAX_PEAJE][pos_RotZ], -1, -1, -1, MAX_RADIO_STREAM);
	i_Peaje[MAX_PEAJE][pos_Xini] = -491.96677;
	i_Peaje[MAX_PEAJE][pos_Yini] = 586.22473;
	i_Peaje[MAX_PEAJE][pos_Zini] = 16.50573;
	i_Peaje[MAX_PEAJE][pos_RotXini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotYini] = 0;
	i_Peaje[MAX_PEAJE][pos_RotZini] = 69.00001;
	i_Peaje[MAX_PEAJE][peaje_tipo] = 0;
	i_Peaje[MAX_PEAJE][pos_cmdX] = -497.6503;
	i_Peaje[MAX_PEAJE][pos_cmdY] = 583.5399;
	i_Peaje[MAX_PEAJE][pos_cmdZ] = 16.7043;
}

funcion estaen_peaje(playerid, option, price)
{
	new MsgPeaje[150], PeajeOrParking[20];
	if (!option) { PeajeOrParking = "Peaje"; }
	else { PeajeOrParking = "Parqueo"; }

	//
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new
			vehicleid = GetPlayerVehicleID(playerid)
		;
		if (LSPD_Veh(vehicleid))
		{
			price = 0;
		}
	}
	new Float: Conteo;
	do
	{
		Conteo++;
		for (new i = 0; i <= MAX_PEAJE; i++)
		{
			if (i_Peaje[i][peaje_tipo] == option)
			{
				if (i_Peaje[i][pos_cmdX] == 0 && en_pos(playerid, Conteo, i_Peaje[i][pos_X], i_Peaje[i][pos_Y], i_Peaje[i][pos_Z]) || i_Peaje[i][pos_cmdX] != 0 && en_pos(playerid, 5.0, i_Peaje[i][pos_cmdX], i_Peaje[i][pos_cmdY], i_Peaje[i][pos_cmdZ]))
				{
					//
					if (i_Peaje[i][peaje_tipo] == 0) if (cierre_p == 1) return _Mensaje(playerid, 4, "b0b0b0", "El estado ha autorizado un cierre en este peaje.");
					//
					new Float: ObjectPosRot[3];
					GetDynamicObjectRot(i_Peaje[i][p_objectid], ObjectPosRot[0], ObjectPosRot[1], ObjectPosRot[2]);
					new Float: ObjectPos[3];
					GetDynamicObjectPos(i_Peaje[i][p_objectid], ObjectPos[0], ObjectPos[1], ObjectPos[2]);
					if (i_Peaje[i][pos_RotX] == ObjectPosRot[0] && i_Peaje[i][pos_RotY] == ObjectPosRot[1] && i_Peaje[i][pos_RotZ] == ObjectPosRot[2] && i_Peaje[i][pos_X] == ObjectPos[0] && i_Peaje[i][pos_Y] == ObjectPos[1] && i_Peaje[i][pos_Z] == ObjectPos[2])
					{
					    if (i_Peaje[i][gratis_p] == 0)
						{
							if (ComprobarDineroJ(playerid) >= price)
							{
								d_estado += price;
								if (i_Peaje[i][anim_tipo])
								{
									SetDynamicObjectPos(i_Peaje[i][p_objectid], i_Peaje[i][pos_Xini], i_Peaje[i][pos_Yini], i_Peaje[i][pos_Zini]);
									SetDynamicObjectRot(i_Peaje[i][p_objectid], i_Peaje[i][pos_RotXini], i_Peaje[i][pos_RotYini], i_Peaje[i][pos_RotZini]);
									SetTimerEx("CerrarPeaje", 3000, false, "d", i);
								}
								else
								{
									MovePeajeDynamicOne(i, 0.0);
								}
								if (price != 0) format(MsgPeaje, sizeof(MsgPeaje), "Pagaste el %s, te costo $%i.", PeajeOrParking, price);
								else format(MsgPeaje, sizeof(MsgPeaje), "Te han abierto el %s,.", PeajeOrParking);
								_Mensaje(playerid, 4, "ff6347", MsgPeaje);
								if (price != 0) DarDineroGC(playerid, -price);
							}
							else
							{
								format(MsgPeaje, sizeof(MsgPeaje), "No tienes dinero para pagar el %s! Cuesta $%i.", PeajeOrParking, price);
								_Mensaje(playerid, 4, "b0b0b0", MsgPeaje);
							}
						}
						else
						{
							if (i_Peaje[i][anim_tipo])
							{
								SetDynamicObjectPos(i_Peaje[i][p_objectid], i_Peaje[i][pos_Xini], i_Peaje[i][pos_Yini], i_Peaje[i][pos_Zini]);
								SetDynamicObjectRot(i_Peaje[i][p_objectid], i_Peaje[i][pos_RotXini], i_Peaje[i][pos_RotYini], i_Peaje[i][pos_RotZini]);
								SetTimerEx("CerrarPeaje", 3000, false, "d", i);
							}
							else
							{
								MovePeajeDynamicOne(i, 0.0);
							}
						}
					}
					else
					{
						format(MsgPeaje, sizeof(MsgPeaje), "El %s todavía se encuentra abierto, no necesita pagarlo.", PeajeOrParking);
						_Mensaje(playerid, 4, "b0b0b0", MsgPeaje);
					}
					return true;
				}
			}
		}
	}
	while (Conteo != 10);
	format(MsgPeaje, sizeof(MsgPeaje), "No te encuentras en ningún %s.", PeajeOrParking);
	_Mensaje(playerid, 4, "b0b0b0", MsgPeaje);
	return false;
}

funcion CerrarPeaje(peajeid)
{
	SetDynamicObjectPos(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_X], i_Peaje[peajeid][pos_Y], i_Peaje[peajeid][pos_Z]);
	SetDynamicObjectRot(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_RotX], i_Peaje[peajeid][pos_RotY], i_Peaje[peajeid][pos_RotZ]);
}

funcion MovePeajeDynamicOne(peajeid, Float: Progress)
{
	new Float: NextPos[6];
	NextPos[0] = i_Peaje[peajeid][pos_X];
	NextPos[1] = i_Peaje[peajeid][pos_Y];
	NextPos[2] = i_Peaje[peajeid][pos_Z];
	NextPos[3] = i_Peaje[peajeid][pos_RotX];
	NextPos[4] = i_Peaje[peajeid][pos_RotY];
	NextPos[5] = i_Peaje[peajeid][pos_RotZ];
	Progress += VELOCITY_PEAJE_PORCENT;

	//- Posición X
	if (i_Peaje[peajeid][pos_X] > i_Peaje[peajeid][pos_Xini]) NextPos[0] -= ((i_Peaje[peajeid][pos_X] - i_Peaje[peajeid][pos_Xini]) * Progress) / 100;
	else NextPos[0] += ((i_Peaje[peajeid][pos_Xini] - i_Peaje[peajeid][pos_X]) * Progress) / 100;

	//- Posición Y
	if (i_Peaje[peajeid][pos_Y] > i_Peaje[peajeid][pos_Yini]) NextPos[1] -= ((i_Peaje[peajeid][pos_Y] - i_Peaje[peajeid][pos_Yini]) * Progress) / 100;
	else NextPos[1] += ((i_Peaje[peajeid][pos_Yini] - i_Peaje[peajeid][pos_Y]) * Progress) / 100;

	//- Posición Z
	if (i_Peaje[peajeid][pos_Z] > i_Peaje[peajeid][pos_Zini]) NextPos[2] -= ((i_Peaje[peajeid][pos_Z] - i_Peaje[peajeid][pos_Zini]) * Progress) / 100;
	else NextPos[2] += ((i_Peaje[peajeid][pos_Zini] - i_Peaje[peajeid][pos_Z]) * Progress) / 100;

	//- Rotación X
	if (i_Peaje[peajeid][pos_RotX] > i_Peaje[peajeid][pos_RotXini]) NextPos[3] -= ((i_Peaje[peajeid][pos_RotX] - i_Peaje[peajeid][pos_RotXini]) * Progress) / 100;
	else NextPos[3] += ((i_Peaje[peajeid][pos_RotXini] - i_Peaje[peajeid][pos_RotX]) * Progress) / 100;

	//- Rotación Y
	if (i_Peaje[peajeid][pos_RotY] > i_Peaje[peajeid][pos_RotYini]) NextPos[4] -= ((i_Peaje[peajeid][pos_RotY] - i_Peaje[peajeid][pos_RotYini]) * Progress) / 100;
	else NextPos[4] += ((i_Peaje[peajeid][pos_RotYini] - i_Peaje[peajeid][pos_RotY]) * Progress) / 100;

	//- Rotación Z
	if (i_Peaje[peajeid][pos_RotZ] > i_Peaje[peajeid][pos_RotZini]) NextPos[5] -= ((i_Peaje[peajeid][pos_RotZ] - i_Peaje[peajeid][pos_RotZini]) * Progress) / 100;
	else NextPos[5] += ((i_Peaje[peajeid][pos_RotZini] - i_Peaje[peajeid][pos_RotZ]) * Progress) / 100;

	/////////////////
	if (Progress < 100.0)
	{
		SetDynamicObjectPos(i_Peaje[peajeid][p_objectid], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(i_Peaje[peajeid][p_objectid], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MovePeajeDynamicOne", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
	}
	else
	{
		SetDynamicObjectPos(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_Xini], i_Peaje[peajeid][pos_Yini], i_Peaje[peajeid][pos_Zini]);
		SetDynamicObjectRot(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_RotXini], i_Peaje[peajeid][pos_RotYini], i_Peaje[peajeid][pos_RotZini]);
		SetTimerEx("MovePeajeDynamicTwo", 3000, false, "df", peajeid, 0.0);
	}
}

funcion MovePeajeDynamicTwo(peajeid, Float: Progress)
{
	new Float: NextPos[6];
	NextPos[0] = i_Peaje[peajeid][pos_Xini];
	NextPos[1] = i_Peaje[peajeid][pos_Yini];
	NextPos[2] = i_Peaje[peajeid][pos_Zini];
	NextPos[3] = i_Peaje[peajeid][pos_RotXini];
	NextPos[4] = i_Peaje[peajeid][pos_RotYini];
	NextPos[5] = i_Peaje[peajeid][pos_RotZini];
	Progress += VELOCITY_PEAJE_PORCENT;

	//- Posición X
	if (i_Peaje[peajeid][pos_Xini] > i_Peaje[peajeid][pos_X]) NextPos[0] -= ((i_Peaje[peajeid][pos_Xini] - i_Peaje[peajeid][pos_X]) * Progress) / 100;
	else NextPos[0] += ((i_Peaje[peajeid][pos_X] - i_Peaje[peajeid][pos_Xini]) * Progress) / 100;

	//- Posición Y
	if (i_Peaje[peajeid][pos_Yini] > i_Peaje[peajeid][pos_Y]) NextPos[1] -= ((i_Peaje[peajeid][pos_Yini] - i_Peaje[peajeid][pos_Y]) * Progress) / 100;
	else NextPos[1] += ((i_Peaje[peajeid][pos_Y] - i_Peaje[peajeid][pos_Yini]) * Progress) / 100;

	//- Posición Z
	if (i_Peaje[peajeid][pos_Zini] > i_Peaje[peajeid][pos_Z]) NextPos[2] -= ((i_Peaje[peajeid][pos_Zini] - i_Peaje[peajeid][pos_Z]) * Progress) / 100;
	else NextPos[2] += ((i_Peaje[peajeid][pos_Z] - i_Peaje[peajeid][pos_Zini]) * Progress) / 100;

	//- Rotación X
	if (i_Peaje[peajeid][pos_RotXini] > i_Peaje[peajeid][pos_RotX]) NextPos[3] -= ((i_Peaje[peajeid][pos_RotXini] - i_Peaje[peajeid][pos_RotX]) * Progress) / 100;
	else NextPos[3] += ((i_Peaje[peajeid][pos_RotX] - i_Peaje[peajeid][pos_RotXini]) * Progress) / 100;

	//- Rotación Y
	if (i_Peaje[peajeid][pos_RotYini] > i_Peaje[peajeid][pos_RotY]) NextPos[4] -= ((i_Peaje[peajeid][pos_RotYini] - i_Peaje[peajeid][pos_RotY]) * Progress) / 100;
	else NextPos[4] += ((i_Peaje[peajeid][pos_RotY] - i_Peaje[peajeid][pos_RotYini]) * Progress) / 100;

	//- Rotación Z
	if (i_Peaje[peajeid][pos_RotZini] > i_Peaje[peajeid][pos_RotZ]) NextPos[5] -= ((i_Peaje[peajeid][pos_RotZini] - i_Peaje[peajeid][pos_RotZ]) * Progress) / 100;
	else NextPos[5] += ((i_Peaje[peajeid][pos_RotZ] - i_Peaje[peajeid][pos_RotZini]) * Progress) / 100;

	/////////////////
	if (Progress < 100.0)
	{
		SetDynamicObjectPos(i_Peaje[peajeid][p_objectid], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(i_Peaje[peajeid][p_objectid], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MovePeajeDynamicTwo", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
	}
	else
	{
		SetDynamicObjectPos(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_X], i_Peaje[peajeid][pos_Y], i_Peaje[peajeid][pos_Z]);
		SetDynamicObjectRot(i_Peaje[peajeid][p_objectid], i_Peaje[peajeid][pos_RotX], i_Peaje[peajeid][pos_RotY], i_Peaje[peajeid][pos_RotZ]);
	}
}

stock NombreFamilia(playerid)
{
	new famname[32];
	if(user[playerid][jMiembroFam] == 0) format(famname, sizeof(famname), "Sin facción NO");
	else format(famname, sizeof(famname), "%s", i_Familia[user[playerid][jMiembroFam]][fNombre]);
	return famname;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success)
	{
		new string[128];
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			GetPlayerIp(x, string, sizeof(string));
			if(!strcmp(ip, string, true))
			{
				_Mensaje(x, 1, "0", "Fuiste expulsado automáticamente por intentar loguear ADMINRCON.");
				Kick(x);
				return 1;
			}
		}
		format(string, sizeof(string), "banip %s", ip);
		SendRconCommand(string);
	}
	return 1;
}

funcion IsPlayerAdminCall(playerid)
{
	if(user[playerid][jAdmin] >= 1) return 1;
	else return 0;
}

funcion CheckTimer(time, ref)
{
	new seconds = (time - (gettime() - ref));
	if(ref == 0) return -1;
	else if(seconds <= 0) return 0;
	else return seconds;
}

stock SeleccionSkin(skinid)
{
	if(skinid < 0 || skinid > 311) return false;
	return true;
}

stock _text(const string[])
{
	new szFixed[1024], iPos, iLen;
	for (iLen = strlen(string); iPos < iLen; iPos ++)
		switch (string[iPos])
		{
			case 'à':   szFixed[iPos] = 151;
			case 'á':   szFixed[iPos] = 152;
			case 'â':   szFixed[iPos] = 153;
			case 'ä':   szFixed[iPos] = 154;
			case 'À':   szFixed[iPos] = 128;
			case 'Á':   szFixed[iPos] = 129;
			case 'Â':   szFixed[iPos] = 130;
			case 'Ä':   szFixed[iPos] = 131;
			case 'è':   szFixed[iPos] = 157;
			case 'é':   szFixed[iPos] = 158;
			case 'ê':   szFixed[iPos] = 159;
			case 'ë':   szFixed[iPos] = 160;
			case 'È':   szFixed[iPos] = 134;
			case 'É':   szFixed[iPos] = 135;
			case 'Ê':   szFixed[iPos] = 136;
			case 'Ë':   szFixed[iPos] = 137;
			case 'ì':   szFixed[iPos] = 161;
			case 'í':   szFixed[iPos] = 162;
			case 'î':   szFixed[iPos] = 163;
			case 'ï':   szFixed[iPos] = 164;
			case 'Ì':   szFixed[iPos] = 138;
			case 'Í':   szFixed[iPos] = 139;
			case 'Î':   szFixed[iPos] = 140;
			case 'Ï':   szFixed[iPos] = 141;
			case 'ò':   szFixed[iPos] = 165;
			case 'ó':   szFixed[iPos] = 166;
			case 'ô':   szFixed[iPos] = 167;
			case 'ö':   szFixed[iPos] = 168;
			case 'Ò':   szFixed[iPos] = 142;
			case 'Ó':   szFixed[iPos] = 143;
			case 'Ô':   szFixed[iPos] = 144;
			case 'Ö':   szFixed[iPos] = 145;
			case 'ù':   szFixed[iPos] = 169;
			case 'ú':   szFixed[iPos] = 170;
			case 'û':   szFixed[iPos] = 171;
			case 'ü':   szFixed[iPos] = 172;
			case 'Ù':   szFixed[iPos] = 146;
			case 'Ú':   szFixed[iPos] = 147;
			case 'Û':   szFixed[iPos] = 148;
			case 'Ü':   szFixed[iPos] = 149;
			case 'ñ':   szFixed[iPos] = 174;
			case 'Ñ':   szFixed[iPos] = 173;
			case '¡':   szFixed[iPos] = 64;
			case '¿':   szFixed[iPos] = 175;
			case '`':   szFixed[iPos] = 177;
			case '&':   szFixed[iPos] = 38;
			default:    szFixed[iPos] = string[iPos];
	}
	return szFixed;
}
CreateTextDraws(playerid)
{
	playerfooter = CreatePlayerTextDraw(playerid, 327.000000, 424.000000, "~r~Footer text.");
	PlayerTextDrawAlignment(playerid, playerfooter, 2);
	PlayerTextDrawBackgroundColor(playerid, playerfooter, 255);
	PlayerTextDrawFont(playerid, playerfooter, 1);
	PlayerTextDrawLetterSize(playerid, playerfooter, 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, playerfooter, -1);
	PlayerTextDrawSetOutline(playerid, playerfooter, 1);
	PlayerTextDrawSetProportional(playerid, playerfooter, 1);
	PlayerTextDrawSetSelectable(playerid, playerfooter, 0);
}
stock ShowPlayerFooter(playerid, const string[], time = 5000) {
	if (user[playerid][pMostrarTexto]) {
	    PlayerTextDrawHide(playerid, playerfooter);
	    KillTimer(user[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, playerfooter, string);
	PlayerTextDrawShow(playerid, playerfooter);

	user[playerid][pMostrarTexto] = true;
	user[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!user[playerid][pMostrarTexto])
	    return 0;

	user[playerid][pMostrarTexto] = false;
	return PlayerTextDrawHide(playerid, PlayerText:playerfooter);
}
//fin texto abajo

stock create_hud(playerid)
{
	//hud_1
	Player_Hud[playerid][0] = CreatePlayerTextDraw(playerid, 554.000000, 98.437500, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][0], 0.439000, 1.315625);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][0], 2);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][0], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][0], 1);

	Player_Hud[playerid][1] = CreatePlayerTextDraw(playerid, 556.500000, 150.187500, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][1], 0.429000, 1.359375);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][1], 2);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][1], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][1], 1);

	//hud_2
	Player_Hud[playerid][2] = CreatePlayerTextDraw(playerid, 626.777770, 4.407407, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][2], 0.401333, 1.809675);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][2], 3);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][2], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][2], 1);

	Player_Hud[playerid][3] = CreatePlayerTextDraw(playerid, 483.500000, 357.000000, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][3], 0.442499, 1.468750);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][3], 2);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][3], -2139062017);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][3], 1);

	//hud_3
	Player_Hud[playerid][4] = CreatePlayerTextDraw(playerid, 509.500000, 323.125000, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][4], 0.470000, 1.249999);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][4], 1);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][4], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][4], 3);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][4], 1);

	Player_Hud[playerid][5] = CreatePlayerTextDraw(playerid, 510.000000, 370.562500, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][5], 0.427500, 1.249999);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][5], 1);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][5], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][5], 3);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][5], 1);

	//hud_4
	Player_Hud[playerid][6] = CreatePlayerTextDraw(playerid, 22.000000, 176.750000, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][6], 0.382499, 1.228124);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][6], 1);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][6], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][6], 1);

	Player_Hud[playerid][7] = CreatePlayerTextDraw(playerid, 21.500000, 212.312500, "_");
	PlayerTextDrawLetterSize(playerid, Player_Hud[playerid][7], 0.379999, 1.206249);
	PlayerTextDrawAlignment(playerid, Player_Hud[playerid][7], 1);
	PlayerTextDrawColor(playerid, Player_Hud[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, Player_Hud[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, Player_Hud[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, Player_Hud[playerid][7], 255);
	PlayerTextDrawFont(playerid, Player_Hud[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, Player_Hud[playerid][7], 1);
}

stock create_phone(playerid)
{
	phone_Marco[playerid][0] = CreatePlayerTextDraw(playerid, 542.000000, 330.500000, "box");
	PlayerTextDrawLetterSize(playerid, phone_Marco[playerid][0], 0.000000, 14.731945);
	PlayerTextDrawTextSize(playerid, phone_Marco[playerid][0], 434.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_Marco[playerid][0], 1);
	PlayerTextDrawColor(playerid, phone_Marco[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, phone_Marco[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, phone_Marco[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, phone_Marco[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, phone_Marco[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_Marco[playerid][0], 65535);
	PlayerTextDrawFont(playerid, phone_Marco[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, phone_Marco[playerid][0], 0);
	PlayerTextDrawSetPreviewRot(playerid, phone_Marco[playerid][0], 0.000000, 0.000000, 0.000000, 0.000000);

	phone_Marco[playerid][1] = CreatePlayerTextDraw(playerid, 434.068481, 327.399078, "LD_DRV:TVCORN");
	PlayerTextDrawLetterSize(playerid, phone_Marco[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Marco[playerid][1], 54.898178, 134.361114);
	PlayerTextDrawAlignment(playerid, phone_Marco[playerid][1], 1);
	PlayerTextDrawColor(playerid, phone_Marco[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, phone_Marco[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, phone_Marco[playerid][1], 0);
	PlayerTextDrawFont(playerid, phone_Marco[playerid][1], 4);

	phone_Marco[playerid][2] = CreatePlayerTextDraw(playerid, 540.110961, 327.334197, "LD_DRV:TVCORN");
	PlayerTextDrawLetterSize(playerid, phone_Marco[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Marco[playerid][2], -52.722198, 135.671691);
	PlayerTextDrawAlignment(playerid, phone_Marco[playerid][2], 1);
	PlayerTextDrawColor(playerid, phone_Marco[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, phone_Marco[playerid][2], -3);
	PlayerTextDrawSetOutline(playerid, phone_Marco[playerid][2], 0);
	PlayerTextDrawFont(playerid, phone_Marco[playerid][2], 4);

	phone_Logo[playerid] = CreatePlayerTextDraw(playerid, 486.000000, 343.437500, "LS_Mobile");
	PlayerTextDrawLetterSize(playerid, phone_Logo[playerid], 0.269500, 0.978750);
	PlayerTextDrawAlignment(playerid, phone_Logo[playerid], 2);
	PlayerTextDrawColor(playerid, phone_Logo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_Logo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Logo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, phone_Logo[playerid], 51);
	PlayerTextDrawFont(playerid, phone_Logo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_Logo[playerid], 1);

	phone_Inter[playerid] = CreatePlayerTextDraw(playerid, 517.166625, 338.252288, "LD_BEAT:circle");
	PlayerTextDrawLetterSize(playerid, phone_Inter[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Inter[playerid], 15.777770, 13.076385);
	PlayerTextDrawAlignment(playerid, phone_Inter[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Inter[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_Inter[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Inter[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Inter[playerid], 4);

	phone_Info[playerid] = CreatePlayerTextDraw(playerid, 510.500000, 340.375000, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, phone_Info[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Info[playerid], 7.500000, 6.562500);
	PlayerTextDrawAlignment(playerid, phone_Info[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Info[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, phone_Info[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Info[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Info[playerid], 4);

	phone_Display[playerid] = CreatePlayerTextDraw(playerid, 529.000000, 359.375000, "usebox");
	PlayerTextDrawLetterSize(playerid, phone_Display[playerid], 0.000000, 5.348610);
	PlayerTextDrawTextSize(playerid, phone_Display[playerid], 447.500000, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_Display[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Display[playerid], 0);
	PlayerTextDrawUseBox(playerid, phone_Display[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_Display[playerid], -1061109505);
	PlayerTextDrawSetShadow(playerid, phone_Display[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Display[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Display[playerid], 0);

	phone_BotIz[playerid] = CreatePlayerTextDraw(playerid, 470.055450, 414.002227, "_");
	PlayerTextDrawLetterSize(playerid, phone_BotIz[playerid], 0.000000, 0.106944);
	PlayerTextDrawTextSize(playerid, phone_BotIz[playerid], 447.499969, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_BotIz[playerid], 1);
	PlayerTextDrawColor(playerid, phone_BotIz[playerid], 46269215);
	PlayerTextDrawUseBox(playerid, phone_BotIz[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_BotIz[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, phone_BotIz[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_BotIz[playerid], 0);
	PlayerTextDrawFont(playerid, phone_BotIz[playerid], 0);

	phone_BotDr[playerid] = CreatePlayerTextDraw(playerid, 527.555419, 414.564727, "_");
	PlayerTextDrawLetterSize(playerid, phone_BotDr[playerid], 0.000000, 0.106944);
	PlayerTextDrawTextSize(playerid, phone_BotDr[playerid], 503.999969, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_BotDr[playerid], 1);
	PlayerTextDrawColor(playerid, phone_BotDr[playerid], 0);
	PlayerTextDrawUseBox(playerid, phone_BotDr[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_BotDr[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, phone_BotDr[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_BotDr[playerid], 0);
	PlayerTextDrawFont(playerid, phone_BotDr[playerid], 0);

	phone_UP[playerid] = CreatePlayerTextDraw(playerid, 479.388916, 413.377227, "LD_BEAT:UP");
	PlayerTextDrawLetterSize(playerid, phone_UP[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_UP[playerid], 17.000000, 13.125000);
	PlayerTextDrawAlignment(playerid, phone_UP[playerid], 1);
	PlayerTextDrawColor(playerid, phone_UP[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_UP[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_UP[playerid], 0);
	PlayerTextDrawFont(playerid, phone_UP[playerid], 4);

	phone_Down[playerid] = CreatePlayerTextDraw(playerid, 479.388946, 430.745544, "LD_BEAT:DOWN");
	PlayerTextDrawLetterSize(playerid, phone_Down[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Down[playerid], 17.000000, 13.125000);
	PlayerTextDrawAlignment(playerid, phone_Down[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Down[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_Down[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Down[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Down[playerid], 4);

	phone_Left[playerid] = CreatePlayerTextDraw(playerid, 463.888885, 422.437500, "LD_BEAT:LEFT");
	PlayerTextDrawLetterSize(playerid, phone_Left[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Left[playerid], 17.000000, 13.125000);
	PlayerTextDrawAlignment(playerid, phone_Left[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Left[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_Left[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Left[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Left[playerid], 4);

	phone_Right[playerid] = CreatePlayerTextDraw(playerid, 494.888916, 422.245544, "LD_BEAT:RIGHT");
	PlayerTextDrawLetterSize(playerid, phone_Right[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, phone_Right[playerid], 17.000000, 13.125000);
	PlayerTextDrawAlignment(playerid, phone_Right[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Right[playerid], -1);
	PlayerTextDrawSetShadow(playerid, phone_Right[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Right[playerid], 0);
	PlayerTextDrawFont(playerid, phone_Right[playerid], 4);

	phone_box1[playerid] = CreatePlayerTextDraw(playerid, 528.833374, 359.414367, "usebox");
	PlayerTextDrawLetterSize(playerid, phone_box1[playerid], 0.000000, 0.527366);
	PlayerTextDrawTextSize(playerid, phone_box1[playerid], 447.444244, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_box1[playerid], 1);
	PlayerTextDrawColor(playerid, phone_box1[playerid], 0);
	PlayerTextDrawUseBox(playerid, phone_box1[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_box1[playerid], -2020570967);
	PlayerTextDrawSetShadow(playerid, phone_box1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_box1[playerid], 0);
	PlayerTextDrawFont(playerid, phone_box1[playerid], 0);

	phone_box2[playerid] = CreatePlayerTextDraw(playerid, 528.333374, 402.164367, "usebox");
	PlayerTextDrawLetterSize(playerid, phone_box2[playerid], 0.000000, 0.627366);
	PlayerTextDrawTextSize(playerid, phone_box2[playerid], 447.444244, 0.000000);
	PlayerTextDrawAlignment(playerid, phone_box2[playerid], 1);
	PlayerTextDrawColor(playerid, phone_box2[playerid], 0);
	PlayerTextDrawUseBox(playerid, phone_box2[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_box2[playerid], -2020570967);
	PlayerTextDrawSetShadow(playerid, phone_box2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_box2[playerid], 0);
	PlayerTextDrawFont(playerid, phone_box2[playerid], 0);

	phone_Menu[playerid] = CreatePlayerTextDraw(playerid, 450.500000, 400.312500, "Menu");
	PlayerTextDrawLetterSize(playerid, phone_Menu[playerid], 0.252500, 0.878124);
	PlayerTextDrawAlignment(playerid, phone_Menu[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Menu[playerid], 255);
	PlayerTextDrawUseBox(playerid, phone_Menu[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_Menu[playerid], 0);
	PlayerTextDrawSetShadow(playerid, phone_Menu[playerid], 1);
	PlayerTextDrawSetOutline(playerid, phone_Menu[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_Menu[playerid], 51);
	PlayerTextDrawFont(playerid, phone_Menu[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_Menu[playerid], 1);

	phone_Atras[playerid] = CreatePlayerTextDraw(playerid, 525.500000, 400.437500, "Atras");
	PlayerTextDrawLetterSize(playerid, phone_Atras[playerid], 0.252500, 0.878124);
	PlayerTextDrawAlignment(playerid, phone_Atras[playerid], 3);
	PlayerTextDrawColor(playerid, phone_Atras[playerid], 255);
	PlayerTextDrawSetShadow(playerid, phone_Atras[playerid], -1);
	PlayerTextDrawSetOutline(playerid, phone_Atras[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_Atras[playerid], 51);
	PlayerTextDrawFont(playerid, phone_Atras[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_Atras[playerid], 1);

	phone_Bateria[playerid] = CreatePlayerTextDraw(playerid, 451.500000, 357.687500, "IIII");
	PlayerTextDrawLetterSize(playerid, phone_Bateria[playerid], 0.252500, 0.878124);
	PlayerTextDrawAlignment(playerid, phone_Bateria[playerid], 1);
	PlayerTextDrawColor(playerid, phone_Bateria[playerid], 255);
	PlayerTextDrawUseBox(playerid, phone_Bateria[playerid], true);
	PlayerTextDrawBoxColor(playerid, phone_Bateria[playerid], 0);
	PlayerTextDrawSetShadow(playerid, phone_Bateria[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Bateria[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_Bateria[playerid], 51);
	PlayerTextDrawFont(playerid, phone_Bateria[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_Bateria[playerid], 1);

	phone_horaA[playerid] = CreatePlayerTextDraw(playerid, 524.500000, 357.687500, "12:58");
	PlayerTextDrawLetterSize(playerid, phone_horaA[playerid], 0.245000, 0.812499);
	PlayerTextDrawAlignment(playerid, phone_horaA[playerid], 3);
	PlayerTextDrawColor(playerid, phone_horaA[playerid], 255);
	PlayerTextDrawSetShadow(playerid, phone_horaA[playerid], -1);
	PlayerTextDrawSetOutline(playerid, phone_horaA[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_horaA[playerid], 51);
	PlayerTextDrawFont(playerid, phone_horaA[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_horaA[playerid], 1);

	phone_horaB[playerid] = CreatePlayerTextDraw(playerid, 487.000000, 371.000000, "12:58");
	PlayerTextDrawLetterSize(playerid, phone_horaB[playerid], 0.335500, 1.420626);
	PlayerTextDrawAlignment(playerid, phone_horaB[playerid], 2);
	PlayerTextDrawColor(playerid, phone_horaB[playerid], 255);
	PlayerTextDrawSetShadow(playerid, phone_horaB[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_horaB[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_horaB[playerid], 51);
	PlayerTextDrawFont(playerid, phone_horaB[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_horaB[playerid], 1);

	phone_Fecha[playerid] = CreatePlayerTextDraw(playerid, 488.000000, 384.125000, "Dic, miercoles 13");
	PlayerTextDrawLetterSize(playerid, phone_Fecha[playerid], 0.222499, 0.900000);
	PlayerTextDrawAlignment(playerid, phone_Fecha[playerid], 2);
	PlayerTextDrawColor(playerid, phone_Fecha[playerid], 255);
	PlayerTextDrawSetShadow(playerid, phone_Fecha[playerid], 0);
	PlayerTextDrawSetOutline(playerid, phone_Fecha[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, phone_Fecha[playerid], 51);
	PlayerTextDrawFont(playerid, phone_Fecha[playerid], 1);
	PlayerTextDrawSetProportional(playerid, phone_Fecha[playerid], 1);
}

IntentoChitearBalas(playerid)
{
	if(GetPlayerAmmo(playerid) > user[playerid][jm_DerechaCant] && AntiG[Balas])
	{
		new text_[168];
		format(text_, sizeof(text_), "{FF6347}Administración: %s fue expulsado y limpiado. Razón:[Cheat de munición]", nombre_pj(playerid));
		_MensajeOOC(0xFF6347FF, text_);
		format(text_, sizeof(text_), "%s ha utilizado cheat de munición. [%s]", nombre_pj(playerid), InfoObjeto[user[playerid][jm_Derecha]][NombreObjeto]);
		Log("Registros/cheatsbalas.log", text_);
		QuitarManos(playerid);
		_Expulsar(playerid, 0, "Munición desincronizada con el servidor");
		return 1;
	}
	return 0;
}

stock GetComponentName(componentid)
{
	new
		name_component[32] = "Desconocido";

	if(!IsValidComponent(componentid))
	    return name_component;

    for(new i = 0; i < sizeof(_tuneo); i++)
	{
 		if(_tuneo[i][_Componente] != componentid)
   			continue;

		format(name_component, sizeof(name_component), "%s", _tuneo[i][_Nombre]);
	}
	return name_component;
}

stock GetComponentPrice(componentid)
{
	new
		price_component = 500;

	if(!IsValidComponent(componentid))
	    return price_component;

	for(new i = 0; i < sizeof(_tuneo); i++)
	{
 		if(_tuneo[i][_Componente] != componentid)
   			continue;

		price_component = _tuneo[i][_Precio];
	}
	return price_component;
}

stock IsModelComponentCompatible(model_veh, componentid)
{
	if(!IsVehicleValidModel(model_veh))
	    return 0;

	if(!IsValidComponent(componentid))
	    return 0;

	for(new i = 0; i < sizeof(VehiclesMods); i++)
	{
	    if(VehiclesMods[i][0] != model_veh)
	        continue;

  		for(new x = 1; x < TOTAL_MODS; x++)
		{
		    if(VehiclesMods[i][x] != componentid)
		        continue;

			return 1;
		}
	}
	return 0;
}

stock diner_coma(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ",", numbers);
	}

	if(negative) strins(f_string, "-", 0);
	return f_string;
}


stock GetVehicleModIDE(model_veh)
{
	if(!IsVehicleValidModel(model_veh))
	    return -1;

	for(new i = 0; i < sizeof(VehiclesMods); i++)
	{
	    if(VehiclesMods[i][0] != model_veh)
	        continue;

	    return i;
	}
	return -1;
}

stock IsModelComponentCompatibleEx(vehiclemodel, count, &component)
{
	new
		id = GetVehicleModIDE(vehiclemodel);

	if(id == -1)
		return 0;

	if(count == 0)
		count = 1;

	if(count >= TOTAL_MODS){
	    return 0;
	}

	component = VehiclesMods[id][count];
	return 1;
}


hook Log(const sz_fileName[], const sz_input[]){
	return serverLogRegister(sz_input, sz_fileName);
}